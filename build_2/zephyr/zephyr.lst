
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	70 55 00 20 8d 78 00 00 11 25 01 00 61 78 00 00     pU. .x...%..ax..
  10:	61 78 00 00 61 78 00 00 61 78 00 00 61 78 00 00     ax..ax..ax..ax..
	...
  2c:	99 75 00 00 61 78 00 00 00 00 00 00 05 75 00 00     .u..ax.......u..
  3c:	61 78 00 00                                         ax..

00000040 <_irq_vector_table>:
  40:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  50:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  60:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  70:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  80:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  90:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  a0:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  b0:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  c0:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  d0:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  e0:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
  f0:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
 100:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
 110:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
 120:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
 130:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
 140:	3d 76 00 00 3d 76 00 00 3d 76 00 00 3d 76 00 00     =v..=v..=v..=v..
 150:	3d 76 00 00                                         =v..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd2>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <CONFIG_SRAM_SIZE+0x14>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xbe>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_SRAM_SIZE+0x56>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_SRAM_SIZE+0x74>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_SRAM_SIZE+0x8a>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_SRAM_SIZE+0xb0>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x124>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_SRAM_SIZE+0xb0>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x52>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x68>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <CONFIG_SRAM_SIZE+0x30>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x114>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_SRAM_SIZE+0x8a>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_SRAM_SIZE+0x8a>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <__data_size+0x1ad>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <__data_size+0x85>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <__data_size+0x51>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <__data_size+0xaf>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <__data_size+0x209>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <__data_size+0x135>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <__data_size+0x105>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <__data_size+0x193>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <__data_size+0x177>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <__data_size+0x197>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <__data_size+0x1d7>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <__data_size+0x16d>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <__data_size+0x21b>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <__data_size+0x1f3>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <__data_size+0x21b>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <__data_size+0x205>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <__data_size+0x21b>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <__data_size+0xaf>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <__data_size+0xaf>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <__data_size+0xaf>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <__data_size+0x21b>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <__data_size+0x21b>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <__data_size+0x205>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <__data_size+0x21b>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <__data_size+0x1c9>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <__data_size+0x21b>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <__data_size+0x16d>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <__data_size+0x205>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <__data_size+0x1c9>
     8f2:	e712      	b.n	71a <__data_size+0x21b>

000008f4 <__gedf2>:
     8f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8f8:	e006      	b.n	908 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__ledf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	e002      	b.n	908 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__cmpdf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	f84d cd04 	str.w	ip, [sp, #-4]!
     90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     918:	bf18      	it	ne
     91a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     91e:	d01b      	beq.n	958 <__cmpdf2+0x54>
     920:	b001      	add	sp, #4
     922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     926:	bf0c      	ite	eq
     928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     92c:	ea91 0f03 	teqne	r1, r3
     930:	bf02      	ittt	eq
     932:	ea90 0f02 	teqeq	r0, r2
     936:	2000      	moveq	r0, #0
     938:	4770      	bxeq	lr
     93a:	f110 0f00 	cmn.w	r0, #0
     93e:	ea91 0f03 	teq	r1, r3
     942:	bf58      	it	pl
     944:	4299      	cmppl	r1, r3
     946:	bf08      	it	eq
     948:	4290      	cmpeq	r0, r2
     94a:	bf2c      	ite	cs
     94c:	17d8      	asrcs	r0, r3, #31
     94e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     952:	f040 0001 	orr.w	r0, r0, #1
     956:	4770      	bx	lr
     958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     960:	d102      	bne.n	968 <__cmpdf2+0x64>
     962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     966:	d107      	bne.n	978 <__cmpdf2+0x74>
     968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     970:	d1d6      	bne.n	920 <__cmpdf2+0x1c>
     972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     976:	d0d3      	beq.n	920 <__cmpdf2+0x1c>
     978:	f85d 0b04 	ldr.w	r0, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <__aeabi_cdrcmple>:
     980:	4684      	mov	ip, r0
     982:	4610      	mov	r0, r2
     984:	4662      	mov	r2, ip
     986:	468c      	mov	ip, r1
     988:	4619      	mov	r1, r3
     98a:	4663      	mov	r3, ip
     98c:	e000      	b.n	990 <__aeabi_cdcmpeq>
     98e:	bf00      	nop

00000990 <__aeabi_cdcmpeq>:
     990:	b501      	push	{r0, lr}
     992:	f7ff ffb7 	bl	904 <__cmpdf2>
     996:	2800      	cmp	r0, #0
     998:	bf48      	it	mi
     99a:	f110 0f00 	cmnmi.w	r0, #0
     99e:	bd01      	pop	{r0, pc}

000009a0 <__aeabi_dcmpeq>:
     9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9a4:	f7ff fff4 	bl	990 <__aeabi_cdcmpeq>
     9a8:	bf0c      	ite	eq
     9aa:	2001      	moveq	r0, #1
     9ac:	2000      	movne	r0, #0
     9ae:	f85d fb08 	ldr.w	pc, [sp], #8
     9b2:	bf00      	nop

000009b4 <__aeabi_dcmplt>:
     9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b8:	f7ff ffea 	bl	990 <__aeabi_cdcmpeq>
     9bc:	bf34      	ite	cc
     9be:	2001      	movcc	r0, #1
     9c0:	2000      	movcs	r0, #0
     9c2:	f85d fb08 	ldr.w	pc, [sp], #8
     9c6:	bf00      	nop

000009c8 <__aeabi_dcmple>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff ffe0 	bl	990 <__aeabi_cdcmpeq>
     9d0:	bf94      	ite	ls
     9d2:	2001      	movls	r0, #1
     9d4:	2000      	movhi	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmpge>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffce 	bl	980 <__aeabi_cdrcmple>
     9e4:	bf94      	ite	ls
     9e6:	2001      	movls	r0, #1
     9e8:	2000      	movhi	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmpgt>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffc4 	bl	980 <__aeabi_cdrcmple>
     9f8:	bf34      	ite	cc
     9fa:	2001      	movcc	r0, #1
     9fc:	2000      	movcs	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_d2f>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a0c:	bf24      	itt	cs
     a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a16:	d90d      	bls.n	a34 <__aeabi_d2f+0x30>
     a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a2c:	bf08      	it	eq
     a2e:	f020 0001 	biceq.w	r0, r0, #1
     a32:	4770      	bx	lr
     a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a38:	d121      	bne.n	a7e <__aeabi_d2f+0x7a>
     a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a3e:	bfbc      	itt	lt
     a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a44:	4770      	bxlt	lr
     a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a4e:	f1c2 0218 	rsb	r2, r2, #24
     a52:	f1c2 0c20 	rsb	ip, r2, #32
     a56:	fa10 f30c 	lsls.w	r3, r0, ip
     a5a:	fa20 f002 	lsr.w	r0, r0, r2
     a5e:	bf18      	it	ne
     a60:	f040 0001 	orrne.w	r0, r0, #1
     a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
     a70:	ea40 000c 	orr.w	r0, r0, ip
     a74:	fa23 f302 	lsr.w	r3, r3, r2
     a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a7c:	e7cc      	b.n	a18 <__aeabi_d2f+0x14>
     a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a82:	d107      	bne.n	a94 <__aeabi_d2f+0x90>
     a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a88:	bf1e      	ittt	ne
     a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a92:	4770      	bxne	lr
     a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     aa0:	4770      	bx	lr
     aa2:	bf00      	nop

00000aa4 <__aeabi_ldivmod>:
     aa4:	b97b      	cbnz	r3, ac6 <__aeabi_ldivmod+0x22>
     aa6:	b972      	cbnz	r2, ac6 <__aeabi_ldivmod+0x22>
     aa8:	2900      	cmp	r1, #0
     aaa:	bfbe      	ittt	lt
     aac:	2000      	movlt	r0, #0
     aae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     ab2:	e006      	blt.n	ac2 <__aeabi_ldivmod+0x1e>
     ab4:	bf08      	it	eq
     ab6:	2800      	cmpeq	r0, #0
     ab8:	bf1c      	itt	ne
     aba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     abe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     ac2:	f000 b875 	b.w	bb0 <__aeabi_idiv0>
     ac6:	f1ad 0c08 	sub.w	ip, sp, #8
     aca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ace:	2900      	cmp	r1, #0
     ad0:	db09      	blt.n	ae6 <__aeabi_ldivmod+0x42>
     ad2:	2b00      	cmp	r3, #0
     ad4:	db1a      	blt.n	b0c <__aeabi_ldivmod+0x68>
     ad6:	f000 f8e2 	bl	c9e <__udivmoddi4>
     ada:	f8dd e004 	ldr.w	lr, [sp, #4]
     ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ae2:	b004      	add	sp, #16
     ae4:	4770      	bx	lr
     ae6:	4240      	negs	r0, r0
     ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     aec:	2b00      	cmp	r3, #0
     aee:	db1b      	blt.n	b28 <__aeabi_ldivmod+0x84>
     af0:	f000 f8d5 	bl	c9e <__udivmoddi4>
     af4:	f8dd e004 	ldr.w	lr, [sp, #4]
     af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     afc:	b004      	add	sp, #16
     afe:	4240      	negs	r0, r0
     b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b04:	4252      	negs	r2, r2
     b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b0a:	4770      	bx	lr
     b0c:	4252      	negs	r2, r2
     b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b12:	f000 f8c4 	bl	c9e <__udivmoddi4>
     b16:	f8dd e004 	ldr.w	lr, [sp, #4]
     b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b1e:	b004      	add	sp, #16
     b20:	4240      	negs	r0, r0
     b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b26:	4770      	bx	lr
     b28:	4252      	negs	r2, r2
     b2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b2e:	f000 f8b6 	bl	c9e <__udivmoddi4>
     b32:	f8dd e004 	ldr.w	lr, [sp, #4]
     b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b3a:	b004      	add	sp, #16
     b3c:	4252      	negs	r2, r2
     b3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b42:	4770      	bx	lr

00000b44 <__aeabi_uldivmod>:
     b44:	b953      	cbnz	r3, b5c <__aeabi_uldivmod+0x18>
     b46:	b94a      	cbnz	r2, b5c <__aeabi_uldivmod+0x18>
     b48:	2900      	cmp	r1, #0
     b4a:	bf08      	it	eq
     b4c:	2800      	cmpeq	r0, #0
     b4e:	bf1c      	itt	ne
     b50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     b54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     b58:	f000 b82a 	b.w	bb0 <__aeabi_idiv0>
     b5c:	f1ad 0c08 	sub.w	ip, sp, #8
     b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     b64:	f000 f89b 	bl	c9e <__udivmoddi4>
     b68:	f8dd e004 	ldr.w	lr, [sp, #4]
     b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b70:	b004      	add	sp, #16
     b72:	4770      	bx	lr

00000b74 <__aeabi_d2ulz>:
     b74:	b5d0      	push	{r4, r6, r7, lr}
     b76:	2200      	movs	r2, #0
     b78:	4b0b      	ldr	r3, [pc, #44]	; (ba8 <__aeabi_d2ulz+0x34>)
     b7a:	4606      	mov	r6, r0
     b7c:	460f      	mov	r7, r1
     b7e:	f7ff fca7 	bl	4d0 <__aeabi_dmul>
     b82:	f000 f817 	bl	bb4 <__aeabi_d2uiz>
     b86:	4604      	mov	r4, r0
     b88:	f7ff fc28 	bl	3dc <__aeabi_ui2d>
     b8c:	2200      	movs	r2, #0
     b8e:	4b07      	ldr	r3, [pc, #28]	; (bac <__aeabi_d2ulz+0x38>)
     b90:	f7ff fc9e 	bl	4d0 <__aeabi_dmul>
     b94:	4602      	mov	r2, r0
     b96:	460b      	mov	r3, r1
     b98:	4630      	mov	r0, r6
     b9a:	4639      	mov	r1, r7
     b9c:	f7ff fae0 	bl	160 <__aeabi_dsub>
     ba0:	f000 f808 	bl	bb4 <__aeabi_d2uiz>
     ba4:	4621      	mov	r1, r4
     ba6:	bdd0      	pop	{r4, r6, r7, pc}
     ba8:	3df00000 	.word	0x3df00000
     bac:	41f00000 	.word	0x41f00000

00000bb0 <__aeabi_idiv0>:
     bb0:	4770      	bx	lr
     bb2:	bf00      	nop

00000bb4 <__aeabi_d2uiz>:
     bb4:	004a      	lsls	r2, r1, #1
     bb6:	d211      	bcs.n	bdc <__aeabi_d2uiz+0x28>
     bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     bbc:	d211      	bcs.n	be2 <__aeabi_d2uiz+0x2e>
     bbe:	d50d      	bpl.n	bdc <__aeabi_d2uiz+0x28>
     bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     bc8:	d40e      	bmi.n	be8 <__aeabi_d2uiz+0x34>
     bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     bd6:	fa23 f002 	lsr.w	r0, r3, r2
     bda:	4770      	bx	lr
     bdc:	f04f 0000 	mov.w	r0, #0
     be0:	4770      	bx	lr
     be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     be6:	d102      	bne.n	bee <__aeabi_d2uiz+0x3a>
     be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     bec:	4770      	bx	lr
     bee:	f04f 0000 	mov.w	r0, #0
     bf2:	4770      	bx	lr

00000bf4 <__aeabi_dcmpun>:
     bf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     bfc:	d102      	bne.n	c04 <__aeabi_dcmpun+0x10>
     bfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     c02:	d10a      	bne.n	c1a <__aeabi_dcmpun+0x26>
     c04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     c08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c0c:	d102      	bne.n	c14 <__aeabi_dcmpun+0x20>
     c0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     c12:	d102      	bne.n	c1a <__aeabi_dcmpun+0x26>
     c14:	f04f 0000 	mov.w	r0, #0
     c18:	4770      	bx	lr
     c1a:	f04f 0001 	mov.w	r0, #1
     c1e:	4770      	bx	lr

00000c20 <__aeabi_d2iz>:
     c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
     c24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     c28:	d215      	bcs.n	c56 <__aeabi_d2iz+0x36>
     c2a:	d511      	bpl.n	c50 <__aeabi_d2iz+0x30>
     c2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     c30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     c34:	d912      	bls.n	c5c <__aeabi_d2iz+0x3c>
     c36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     c46:	fa23 f002 	lsr.w	r0, r3, r2
     c4a:	bf18      	it	ne
     c4c:	4240      	negne	r0, r0
     c4e:	4770      	bx	lr
     c50:	f04f 0000 	mov.w	r0, #0
     c54:	4770      	bx	lr
     c56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     c5a:	d105      	bne.n	c68 <__aeabi_d2iz+0x48>
     c5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     c60:	bf08      	it	eq
     c62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     c66:	4770      	bx	lr
     c68:	f04f 0000 	mov.w	r0, #0
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop

00000c70 <__aeabi_d2lz>:
     c70:	b538      	push	{r3, r4, r5, lr}
     c72:	2200      	movs	r2, #0
     c74:	2300      	movs	r3, #0
     c76:	4604      	mov	r4, r0
     c78:	460d      	mov	r5, r1
     c7a:	f7ff fe9b 	bl	9b4 <__aeabi_dcmplt>
     c7e:	b928      	cbnz	r0, c8c <__aeabi_d2lz+0x1c>
     c80:	4620      	mov	r0, r4
     c82:	4629      	mov	r1, r5
     c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     c88:	f7ff bf74 	b.w	b74 <__aeabi_d2ulz>
     c8c:	4620      	mov	r0, r4
     c8e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
     c92:	f7ff ff6f 	bl	b74 <__aeabi_d2ulz>
     c96:	4240      	negs	r0, r0
     c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c9c:	bd38      	pop	{r3, r4, r5, pc}

00000c9e <__udivmoddi4>:
     c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ca2:	9e09      	ldr	r6, [sp, #36]	; 0x24
     ca4:	4688      	mov	r8, r1
     ca6:	468e      	mov	lr, r1
     ca8:	4615      	mov	r5, r2
     caa:	4604      	mov	r4, r0
     cac:	4619      	mov	r1, r3
     cae:	2b00      	cmp	r3, #0
     cb0:	f040 80c6 	bne.w	e40 <__udivmoddi4+0x1a2>
     cb4:	4542      	cmp	r2, r8
     cb6:	fab2 f782 	clz	r7, r2
     cba:	d946      	bls.n	d4a <__udivmoddi4+0xac>
     cbc:	b14f      	cbz	r7, cd2 <__udivmoddi4+0x34>
     cbe:	f1c7 0c20 	rsb	ip, r7, #32
     cc2:	fa08 f307 	lsl.w	r3, r8, r7
     cc6:	40bd      	lsls	r5, r7
     cc8:	40bc      	lsls	r4, r7
     cca:	fa20 fc0c 	lsr.w	ip, r0, ip
     cce:	ea4c 0e03 	orr.w	lr, ip, r3
     cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
     cd6:	fa1f fc85 	uxth.w	ip, r5
     cda:	0c22      	lsrs	r2, r4, #16
     cdc:	fbbe f9f8 	udiv	r9, lr, r8
     ce0:	fb08 e319 	mls	r3, r8, r9, lr
     ce4:	fb09 fa0c 	mul.w	sl, r9, ip
     ce8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     cec:	459a      	cmp	sl, r3
     cee:	d928      	bls.n	d42 <__udivmoddi4+0xa4>
     cf0:	18eb      	adds	r3, r5, r3
     cf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     cf6:	d204      	bcs.n	d02 <__udivmoddi4+0x64>
     cf8:	459a      	cmp	sl, r3
     cfa:	d902      	bls.n	d02 <__udivmoddi4+0x64>
     cfc:	f1a9 0002 	sub.w	r0, r9, #2
     d00:	442b      	add	r3, r5
     d02:	eba3 030a 	sub.w	r3, r3, sl
     d06:	b2a4      	uxth	r4, r4
     d08:	fbb3 f2f8 	udiv	r2, r3, r8
     d0c:	fb08 3312 	mls	r3, r8, r2, r3
     d10:	fb02 fc0c 	mul.w	ip, r2, ip
     d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d18:	45a4      	cmp	ip, r4
     d1a:	d914      	bls.n	d46 <__udivmoddi4+0xa8>
     d1c:	192c      	adds	r4, r5, r4
     d1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     d22:	d203      	bcs.n	d2c <__udivmoddi4+0x8e>
     d24:	45a4      	cmp	ip, r4
     d26:	d901      	bls.n	d2c <__udivmoddi4+0x8e>
     d28:	1e93      	subs	r3, r2, #2
     d2a:	442c      	add	r4, r5
     d2c:	eba4 040c 	sub.w	r4, r4, ip
     d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d34:	b11e      	cbz	r6, d3e <__udivmoddi4+0xa0>
     d36:	40fc      	lsrs	r4, r7
     d38:	2300      	movs	r3, #0
     d3a:	6034      	str	r4, [r6, #0]
     d3c:	6073      	str	r3, [r6, #4]
     d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d42:	4648      	mov	r0, r9
     d44:	e7dd      	b.n	d02 <__udivmoddi4+0x64>
     d46:	4613      	mov	r3, r2
     d48:	e7f0      	b.n	d2c <__udivmoddi4+0x8e>
     d4a:	b902      	cbnz	r2, d4e <__udivmoddi4+0xb0>
     d4c:	deff      	udf	#255	; 0xff
     d4e:	bb8f      	cbnz	r7, db4 <__udivmoddi4+0x116>
     d50:	eba8 0302 	sub.w	r3, r8, r2
     d54:	2101      	movs	r1, #1
     d56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     d5a:	b2aa      	uxth	r2, r5
     d5c:	0c20      	lsrs	r0, r4, #16
     d5e:	fbb3 fcfe 	udiv	ip, r3, lr
     d62:	fb0e 331c 	mls	r3, lr, ip, r3
     d66:	fb0c f802 	mul.w	r8, ip, r2
     d6a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     d6e:	4598      	cmp	r8, r3
     d70:	d962      	bls.n	e38 <__udivmoddi4+0x19a>
     d72:	18eb      	adds	r3, r5, r3
     d74:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     d78:	d204      	bcs.n	d84 <__udivmoddi4+0xe6>
     d7a:	4598      	cmp	r8, r3
     d7c:	d902      	bls.n	d84 <__udivmoddi4+0xe6>
     d7e:	f1ac 0002 	sub.w	r0, ip, #2
     d82:	442b      	add	r3, r5
     d84:	eba3 0308 	sub.w	r3, r3, r8
     d88:	b2a4      	uxth	r4, r4
     d8a:	fbb3 fcfe 	udiv	ip, r3, lr
     d8e:	fb0e 331c 	mls	r3, lr, ip, r3
     d92:	fb0c f202 	mul.w	r2, ip, r2
     d96:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d9a:	42a2      	cmp	r2, r4
     d9c:	d94e      	bls.n	e3c <__udivmoddi4+0x19e>
     d9e:	192c      	adds	r4, r5, r4
     da0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     da4:	d204      	bcs.n	db0 <__udivmoddi4+0x112>
     da6:	42a2      	cmp	r2, r4
     da8:	d902      	bls.n	db0 <__udivmoddi4+0x112>
     daa:	f1ac 0302 	sub.w	r3, ip, #2
     dae:	442c      	add	r4, r5
     db0:	1aa4      	subs	r4, r4, r2
     db2:	e7bd      	b.n	d30 <__udivmoddi4+0x92>
     db4:	f1c7 0c20 	rsb	ip, r7, #32
     db8:	40bd      	lsls	r5, r7
     dba:	fa08 f307 	lsl.w	r3, r8, r7
     dbe:	40bc      	lsls	r4, r7
     dc0:	fa28 f90c 	lsr.w	r9, r8, ip
     dc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     dc8:	fa20 fc0c 	lsr.w	ip, r0, ip
     dcc:	ea4c 0203 	orr.w	r2, ip, r3
     dd0:	b2ab      	uxth	r3, r5
     dd2:	fbb9 fcfe 	udiv	ip, r9, lr
     dd6:	0c11      	lsrs	r1, r2, #16
     dd8:	fb0e 901c 	mls	r0, lr, ip, r9
     ddc:	fb0c f803 	mul.w	r8, ip, r3
     de0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     de4:	4580      	cmp	r8, r0
     de6:	d923      	bls.n	e30 <__udivmoddi4+0x192>
     de8:	1828      	adds	r0, r5, r0
     dea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     dee:	d204      	bcs.n	dfa <__udivmoddi4+0x15c>
     df0:	4580      	cmp	r8, r0
     df2:	d902      	bls.n	dfa <__udivmoddi4+0x15c>
     df4:	f1ac 0102 	sub.w	r1, ip, #2
     df8:	4428      	add	r0, r5
     dfa:	eba0 0008 	sub.w	r0, r0, r8
     dfe:	b292      	uxth	r2, r2
     e00:	fbb0 fcfe 	udiv	ip, r0, lr
     e04:	fb0e 001c 	mls	r0, lr, ip, r0
     e08:	fb0c f803 	mul.w	r8, ip, r3
     e0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     e10:	4598      	cmp	r8, r3
     e12:	d90f      	bls.n	e34 <__udivmoddi4+0x196>
     e14:	18eb      	adds	r3, r5, r3
     e16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     e1a:	d204      	bcs.n	e26 <__udivmoddi4+0x188>
     e1c:	4598      	cmp	r8, r3
     e1e:	d902      	bls.n	e26 <__udivmoddi4+0x188>
     e20:	f1ac 0202 	sub.w	r2, ip, #2
     e24:	442b      	add	r3, r5
     e26:	eba3 0308 	sub.w	r3, r3, r8
     e2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     e2e:	e792      	b.n	d56 <__udivmoddi4+0xb8>
     e30:	4661      	mov	r1, ip
     e32:	e7e2      	b.n	dfa <__udivmoddi4+0x15c>
     e34:	4662      	mov	r2, ip
     e36:	e7f6      	b.n	e26 <__udivmoddi4+0x188>
     e38:	4660      	mov	r0, ip
     e3a:	e7a3      	b.n	d84 <__udivmoddi4+0xe6>
     e3c:	4663      	mov	r3, ip
     e3e:	e7b7      	b.n	db0 <__udivmoddi4+0x112>
     e40:	4543      	cmp	r3, r8
     e42:	d905      	bls.n	e50 <__udivmoddi4+0x1b2>
     e44:	b10e      	cbz	r6, e4a <__udivmoddi4+0x1ac>
     e46:	e9c6 0800 	strd	r0, r8, [r6]
     e4a:	2100      	movs	r1, #0
     e4c:	4608      	mov	r0, r1
     e4e:	e776      	b.n	d3e <__udivmoddi4+0xa0>
     e50:	fab3 fc83 	clz	ip, r3
     e54:	f1bc 0f00 	cmp.w	ip, #0
     e58:	d110      	bne.n	e7c <__udivmoddi4+0x1de>
     e5a:	4543      	cmp	r3, r8
     e5c:	d301      	bcc.n	e62 <__udivmoddi4+0x1c4>
     e5e:	4282      	cmp	r2, r0
     e60:	d80a      	bhi.n	e78 <__udivmoddi4+0x1da>
     e62:	1a84      	subs	r4, r0, r2
     e64:	eb68 0303 	sbc.w	r3, r8, r3
     e68:	2001      	movs	r0, #1
     e6a:	469e      	mov	lr, r3
     e6c:	2e00      	cmp	r6, #0
     e6e:	d068      	beq.n	f42 <__udivmoddi4+0x2a4>
     e70:	e9c6 4e00 	strd	r4, lr, [r6]
     e74:	2100      	movs	r1, #0
     e76:	e762      	b.n	d3e <__udivmoddi4+0xa0>
     e78:	4660      	mov	r0, ip
     e7a:	e7f7      	b.n	e6c <__udivmoddi4+0x1ce>
     e7c:	f1cc 0e20 	rsb	lr, ip, #32
     e80:	fa03 f30c 	lsl.w	r3, r3, ip
     e84:	fa02 f50c 	lsl.w	r5, r2, ip
     e88:	fa00 f70c 	lsl.w	r7, r0, ip
     e8c:	fa22 f40e 	lsr.w	r4, r2, lr
     e90:	fa28 fb0e 	lsr.w	fp, r8, lr
     e94:	fa20 f10e 	lsr.w	r1, r0, lr
     e98:	431c      	orrs	r4, r3
     e9a:	fa08 f30c 	lsl.w	r3, r8, ip
     e9e:	ea4f 4914 	mov.w	r9, r4, lsr #16
     ea2:	4319      	orrs	r1, r3
     ea4:	b2a3      	uxth	r3, r4
     ea6:	0c0a      	lsrs	r2, r1, #16
     ea8:	fbbb f8f9 	udiv	r8, fp, r9
     eac:	fb09 bb18 	mls	fp, r9, r8, fp
     eb0:	fb08 fa03 	mul.w	sl, r8, r3
     eb4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     eb8:	4592      	cmp	sl, r2
     eba:	d93e      	bls.n	f3a <__udivmoddi4+0x29c>
     ebc:	18a2      	adds	r2, r4, r2
     ebe:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     ec2:	d204      	bcs.n	ece <__udivmoddi4+0x230>
     ec4:	4592      	cmp	sl, r2
     ec6:	d902      	bls.n	ece <__udivmoddi4+0x230>
     ec8:	f1a8 0002 	sub.w	r0, r8, #2
     ecc:	4422      	add	r2, r4
     ece:	eba2 020a 	sub.w	r2, r2, sl
     ed2:	b289      	uxth	r1, r1
     ed4:	fbb2 f8f9 	udiv	r8, r2, r9
     ed8:	fb09 2218 	mls	r2, r9, r8, r2
     edc:	fb08 f303 	mul.w	r3, r8, r3
     ee0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
     ee4:	4293      	cmp	r3, r2
     ee6:	d92a      	bls.n	f3e <__udivmoddi4+0x2a0>
     ee8:	18a2      	adds	r2, r4, r2
     eea:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
     eee:	d204      	bcs.n	efa <__udivmoddi4+0x25c>
     ef0:	4293      	cmp	r3, r2
     ef2:	d902      	bls.n	efa <__udivmoddi4+0x25c>
     ef4:	f1a8 0102 	sub.w	r1, r8, #2
     ef8:	4422      	add	r2, r4
     efa:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     efe:	1ad2      	subs	r2, r2, r3
     f00:	fba0 9805 	umull	r9, r8, r0, r5
     f04:	4542      	cmp	r2, r8
     f06:	464b      	mov	r3, r9
     f08:	4641      	mov	r1, r8
     f0a:	d302      	bcc.n	f12 <__udivmoddi4+0x274>
     f0c:	d106      	bne.n	f1c <__udivmoddi4+0x27e>
     f0e:	454f      	cmp	r7, r9
     f10:	d204      	bcs.n	f1c <__udivmoddi4+0x27e>
     f12:	3801      	subs	r0, #1
     f14:	ebb9 0305 	subs.w	r3, r9, r5
     f18:	eb68 0104 	sbc.w	r1, r8, r4
     f1c:	b18e      	cbz	r6, f42 <__udivmoddi4+0x2a4>
     f1e:	1afc      	subs	r4, r7, r3
     f20:	eb62 0701 	sbc.w	r7, r2, r1
     f24:	fa07 fe0e 	lsl.w	lr, r7, lr
     f28:	fa24 f30c 	lsr.w	r3, r4, ip
     f2c:	fa27 f70c 	lsr.w	r7, r7, ip
     f30:	ea4e 0303 	orr.w	r3, lr, r3
     f34:	e9c6 3700 	strd	r3, r7, [r6]
     f38:	e79c      	b.n	e74 <__udivmoddi4+0x1d6>
     f3a:	4640      	mov	r0, r8
     f3c:	e7c7      	b.n	ece <__udivmoddi4+0x230>
     f3e:	4641      	mov	r1, r8
     f40:	e7db      	b.n	efa <__udivmoddi4+0x25c>
     f42:	4631      	mov	r1, r6
     f44:	e6fb      	b.n	d3e <__udivmoddi4+0xa0>

00000f46 <strcmp>:
     f46:	f810 2b01 	ldrb.w	r2, [r0], #1
     f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
     f4e:	2a01      	cmp	r2, #1
     f50:	bf28      	it	cs
     f52:	429a      	cmpcs	r2, r3
     f54:	d0f7      	beq.n	f46 <strcmp>
     f56:	1ad0      	subs	r0, r2, r3
     f58:	4770      	bx	lr

00000f5a <strlen>:
     f5a:	4603      	mov	r3, r0
     f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
     f60:	2a00      	cmp	r2, #0
     f62:	d1fb      	bne.n	f5c <strlen+0x2>
     f64:	1a18      	subs	r0, r3, r0
     f66:	3801      	subs	r0, #1
     f68:	4770      	bx	lr
     f6a:	0000      	movs	r0, r0
     f6c:	0000      	movs	r0, r0
	...

00000f70 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f74:	ed2d 8b02 	vpush	{d8}
     f78:	4681      	mov	r9, r0
     f7a:	468a      	mov	sl, r1
     f7c:	4615      	mov	r5, r2
     f7e:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f80:	2600      	movs	r6, #0
	uint64_t round = BIT64(59); /* 0.5 */
     f82:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 1228 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x228>
{
     f86:	b09b      	sub	sp, #108	; 0x6c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f88:	7828      	ldrb	r0, [r5, #0]
     f8a:	b910      	cbnz	r0, f92 <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f8c:	4630      	mov	r0, r6
     f8e:	f000 bdc9 	b.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
			OUTC(*fp++);
     f92:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
     f94:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     f96:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
     f98:	d006      	beq.n	fa8 <cbvprintf+0x38>
			OUTC(*fp++);
     f9a:	4651      	mov	r1, sl
			OUTC('%');
     f9c:	47c8      	blx	r9
     f9e:	2800      	cmp	r0, #0
     fa0:	f2c0 85c0 	blt.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
     fa4:	3601      	adds	r6, #1
		if (bps == NULL) {
     fa6:	e22e      	b.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
		} state = {
     fa8:	2218      	movs	r2, #24
     faa:	2100      	movs	r1, #0
     fac:	a80c      	add	r0, sp, #48	; 0x30
     fae:	f013 fe29 	bl	14c04 <memset>
	if (*sp == '%') {
     fb2:	786b      	ldrb	r3, [r5, #1]
     fb4:	2b25      	cmp	r3, #37	; 0x25
     fb6:	d059      	beq.n	106c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6c>
     fb8:	1c6a      	adds	r2, r5, #1
     fba:	4617      	mov	r7, r2
		switch (*sp) {
     fbc:	f812 3b01 	ldrb.w	r3, [r2], #1
     fc0:	2b2b      	cmp	r3, #43	; 0x2b
     fc2:	f000 808b 	beq.w	10dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xdc>
     fc6:	d879      	bhi.n	10bc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbc>
     fc8:	2b20      	cmp	r3, #32
     fca:	f000 808c 	beq.w	10e6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xe6>
     fce:	2b23      	cmp	r3, #35	; 0x23
     fd0:	f000 808e 	beq.w	10f0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xf0>
	if (conv->flag_zero && conv->flag_dash) {
     fd4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     fd8:	f003 0244 	and.w	r2, r3, #68	; 0x44
     fdc:	2a44      	cmp	r2, #68	; 0x44
     fde:	d103      	bne.n	fe8 <cbvprintf+0x78>
		conv->flag_zero = false;
     fe0:	f36f 1386 	bfc	r3, #6, #1
     fe4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
     fe8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     fec:	970a      	str	r7, [sp, #40]	; 0x28
     fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ff2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
     ff6:	783b      	ldrb	r3, [r7, #0]
     ff8:	2b2a      	cmp	r3, #42	; 0x2a
     ffa:	d17e      	bne.n	10fa <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xfa>
		conv->width_star = true;
     ffc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1000:	f043 0301 	orr.w	r3, r3, #1
    1004:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    1008:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
    100a:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
    100c:	781a      	ldrb	r2, [r3, #0]
    100e:	2a2e      	cmp	r2, #46	; 0x2e
    1010:	bf0c      	ite	eq
    1012:	2101      	moveq	r1, #1
    1014:	2100      	movne	r1, #0
    1016:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    101a:	f361 0241 	bfi	r2, r1, #1, #1
    101e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    1022:	d10b      	bne.n	103c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3c>
	++sp;
    1024:	1c5a      	adds	r2, r3, #1
    1026:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
    1028:	785a      	ldrb	r2, [r3, #1]
    102a:	2a2a      	cmp	r2, #42	; 0x2a
    102c:	d17b      	bne.n	1126 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x126>
		conv->prec_star = true;
    102e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    1032:	3302      	adds	r3, #2
		conv->prec_star = true;
    1034:	f042 0204 	orr.w	r2, r2, #4
    1038:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
    103c:	4619      	mov	r1, r3
    103e:	f811 0b01 	ldrb.w	r0, [r1], #1
    1042:	286c      	cmp	r0, #108	; 0x6c
    1044:	f000 80cf 	beq.w	11e6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1e6>
    1048:	d87d      	bhi.n	1146 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x146>
    104a:	2868      	cmp	r0, #104	; 0x68
    104c:	f000 8084 	beq.w	1158 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x158>
    1050:	286a      	cmp	r0, #106	; 0x6a
    1052:	f000 80d2 	beq.w	11fa <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1fa>
    1056:	284c      	cmp	r0, #76	; 0x4c
    1058:	f000 80d6 	beq.w	1208 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x208>
		conv->length_mod = LENGTH_NONE;
    105c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
    1060:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
    1062:	f36f 02c6 	bfc	r2, #3, #4
    1066:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    106a:	e080      	b.n	116e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x16e>
		conv->specifier = *sp++;
    106c:	1caa      	adds	r2, r5, #2
    106e:	9202      	str	r2, [sp, #8]
    1070:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    1074:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1078:	07df      	lsls	r7, r3, #31
    107a:	f140 8178 	bpl.w	136e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x36e>
			width = va_arg(ap, int);
    107e:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    1082:	f1bb 0f00 	cmp.w	fp, #0
    1086:	da07      	bge.n	1098 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x98>
				conv->flag_dash = true;
    1088:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
    108c:	f1cb 0b00 	rsb	fp, fp, #0
				conv->flag_dash = true;
    1090:	f042 0204 	orr.w	r2, r2, #4
    1094:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
    1098:	0758      	lsls	r0, r3, #29
    109a:	f140 8171 	bpl.w	1380 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x380>
			int arg = va_arg(ap, int);
    109e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    10a2:	f1b8 0f00 	cmp.w	r8, #0
    10a6:	f280 8170 	bge.w	138a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x38a>
				conv->prec_present = false;
    10aa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    10ae:	f36f 0341 	bfc	r3, #1, #1
    10b2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    10b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    10ba:	e166      	b.n	138a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x38a>
		switch (*sp) {
    10bc:	2b2d      	cmp	r3, #45	; 0x2d
    10be:	d006      	beq.n	10ce <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xce>
    10c0:	2b30      	cmp	r3, #48	; 0x30
    10c2:	d187      	bne.n	fd4 <cbvprintf+0x64>
			conv->flag_zero = true;
    10c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    10cc:	e003      	b.n	10d6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xd6>
			conv->flag_dash = true;
    10ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10d2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    10d6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    10da:	e76e      	b.n	fba <cbvprintf+0x4a>
			conv->flag_plus = true;
    10dc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10e0:	f043 0308 	orr.w	r3, r3, #8
    10e4:	e7f7      	b.n	10d6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xd6>
			conv->flag_space = true;
    10e6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10ea:	f043 0310 	orr.w	r3, r3, #16
    10ee:	e7f2      	b.n	10d6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xd6>
			conv->flag_hash = true;
    10f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    10f4:	f043 0320 	orr.w	r3, r3, #32
    10f8:	e7ed      	b.n	10d6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xd6>
	size_t width = extract_decimal(&sp);
    10fa:	a80a      	add	r0, sp, #40	; 0x28
    10fc:	f005 fe3e 	bl	6d7c <extract_decimal>
	if (sp != wp) {
    1100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1102:	42bb      	cmp	r3, r7
    1104:	d081      	beq.n	100a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa>
		conv->unsupported |= ((conv->width_value < 0)
    1106:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
    110a:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    110c:	f3c7 0140 	ubfx	r1, r7, #1, #1
    1110:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
    1114:	0052      	lsls	r2, r2, #1
    1116:	f062 027f 	orn	r2, r2, #127	; 0x7f
    111a:	f007 017d 	and.w	r1, r7, #125	; 0x7d
    111e:	430a      	orrs	r2, r1
    1120:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    1124:	e771      	b.n	100a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa>
	size_t prec = extract_decimal(&sp);
    1126:	a80a      	add	r0, sp, #40	; 0x28
    1128:	f005 fe28 	bl	6d7c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    112c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    1130:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    1132:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1136:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    113a:	f360 0341 	bfi	r3, r0, #1, #1
    113e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    1142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1144:	e77a      	b.n	103c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3c>
	switch (*sp) {
    1146:	2874      	cmp	r0, #116	; 0x74
    1148:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    114c:	d059      	beq.n	1202 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x202>
    114e:	287a      	cmp	r0, #122	; 0x7a
    1150:	d184      	bne.n	105c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5c>
		conv->length_mod = LENGTH_Z;
    1152:	4613      	mov	r3, r2
    1154:	2206      	movs	r2, #6
    1156:	e041      	b.n	11dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1dc>
		if (*++sp == 'h') {
    1158:	785a      	ldrb	r2, [r3, #1]
    115a:	2a68      	cmp	r2, #104	; 0x68
    115c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1160:	d13a      	bne.n	11d8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1d8>
			conv->length_mod = LENGTH_HH;
    1162:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1164:	f361 02c6 	bfi	r2, r1, #3, #4
    1168:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    116c:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    116e:	460b      	mov	r3, r1
    1170:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    1174:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1176:	9302      	str	r3, [sp, #8]
    1178:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    117c:	f200 80cd 	bhi.w	131a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x31a>
    1180:	2a57      	cmp	r2, #87	; 0x57
    1182:	d855      	bhi.n	1230 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x230>
    1184:	2a41      	cmp	r2, #65	; 0x41
    1186:	d004      	beq.n	1192 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x192>
    1188:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    118c:	2b02      	cmp	r3, #2
    118e:	f200 80c4 	bhi.w	131a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x31a>
		conv->specifier_cat = SPECIFIER_FP;
    1192:	2104      	movs	r1, #4
    1194:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1198:	f361 0302 	bfi	r3, r1, #0, #3
    119c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    11a0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
    11a4:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
    11a8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
    11ac:	f1d8 0300 	rsbs	r3, r8, #0
    11b0:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
    11b4:	f363 12c7 	bfi	r2, r3, #7, #1
    11b8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
    11bc:	b2d3      	uxtb	r3, r2
    11be:	0612      	lsls	r2, r2, #24
    11c0:	f100 80d3 	bmi.w	136a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x36a>
		if (conv->length_mod == LENGTH_L) {
    11c4:	f003 0278 	and.w	r2, r3, #120	; 0x78
    11c8:	2a18      	cmp	r2, #24
    11ca:	f040 80a3 	bne.w	1314 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x314>
			conv->length_mod = LENGTH_NONE;
    11ce:	f36f 03c6 	bfc	r3, #3, #4
    11d2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    11d6:	e08a      	b.n	12ee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x2ee>
			conv->length_mod = LENGTH_H;
    11d8:	4613      	mov	r3, r2
    11da:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    11dc:	f362 03c6 	bfi	r3, r2, #3, #4
    11e0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    11e4:	e7c3      	b.n	116e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x16e>
		if (*++sp == 'l') {
    11e6:	785a      	ldrb	r2, [r3, #1]
    11e8:	2a6c      	cmp	r2, #108	; 0x6c
    11ea:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    11ee:	d101      	bne.n	11f4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1f4>
			conv->length_mod = LENGTH_LL;
    11f0:	2104      	movs	r1, #4
    11f2:	e7b7      	b.n	1164 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x164>
			conv->length_mod = LENGTH_L;
    11f4:	4613      	mov	r3, r2
    11f6:	2203      	movs	r2, #3
    11f8:	e7f0      	b.n	11dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1dc>
		conv->length_mod = LENGTH_J;
    11fa:	2205      	movs	r2, #5
    11fc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1200:	e7ec      	b.n	11dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1dc>
		conv->length_mod = LENGTH_T;
    1202:	4613      	mov	r3, r2
    1204:	2207      	movs	r2, #7
    1206:	e7e9      	b.n	11dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1dc>
		conv->unsupported = true;
    1208:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    120c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1210:	f023 0302 	bic.w	r3, r3, #2
    1214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1218:	f043 0302 	orr.w	r3, r3, #2
    121c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    1220:	e7a5      	b.n	116e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x16e>
    1222:	bf00      	nop
    1224:	f3af 8000 	nop.w
    1228:	00000000 	.word	0x00000000
    122c:	08000000 	.word	0x08000000
	switch (conv->specifier) {
    1230:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1234:	2b20      	cmp	r3, #32
    1236:	d870      	bhi.n	131a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x31a>
    1238:	a101      	add	r1, pc, #4	; (adr r1, 1240 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x240>)
    123a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    123e:	bf00      	nop
    1240:	000012f3 	.word	0x000012f3
    1244:	0000131b 	.word	0x0000131b
    1248:	0000131b 	.word	0x0000131b
    124c:	0000131b 	.word	0x0000131b
    1250:	0000131b 	.word	0x0000131b
    1254:	0000131b 	.word	0x0000131b
    1258:	0000131b 	.word	0x0000131b
    125c:	0000131b 	.word	0x0000131b
    1260:	0000131b 	.word	0x0000131b
    1264:	00001193 	.word	0x00001193
    1268:	0000131b 	.word	0x0000131b
    126c:	000012f3 	.word	0x000012f3
    1270:	000012c5 	.word	0x000012c5
    1274:	00001193 	.word	0x00001193
    1278:	00001193 	.word	0x00001193
    127c:	00001193 	.word	0x00001193
    1280:	0000131b 	.word	0x0000131b
    1284:	000012c5 	.word	0x000012c5
    1288:	0000131b 	.word	0x0000131b
    128c:	0000131b 	.word	0x0000131b
    1290:	0000131b 	.word	0x0000131b
    1294:	0000131b 	.word	0x0000131b
    1298:	00001329 	.word	0x00001329
    129c:	000012f3 	.word	0x000012f3
    12a0:	0000134d 	.word	0x0000134d
    12a4:	0000131b 	.word	0x0000131b
    12a8:	0000131b 	.word	0x0000131b
    12ac:	0000134d 	.word	0x0000134d
    12b0:	0000131b 	.word	0x0000131b
    12b4:	000012f3 	.word	0x000012f3
    12b8:	0000131b 	.word	0x0000131b
    12bc:	0000131b 	.word	0x0000131b
    12c0:	000012f3 	.word	0x000012f3
		conv->specifier_cat = SPECIFIER_SINT;
    12c4:	2101      	movs	r1, #1
    12c6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		conv->specifier_cat = SPECIFIER_UINT;
    12ca:	f361 0302 	bfi	r3, r1, #0, #3
    12ce:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    12d2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    12d6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    12da:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    12dc:	bf02      	ittt	eq
    12de:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    12e2:	f041 0101 	orreq.w	r1, r1, #1
    12e6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    12ea:	2a63      	cmp	r2, #99	; 0x63
    12ec:	d005      	beq.n	12fa <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x2fa>
	bool unsupported = false;
    12ee:	2300      	movs	r3, #0
    12f0:	e006      	b.n	1300 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x300>
		conv->specifier_cat = SPECIFIER_UINT;
    12f2:	2102      	movs	r1, #2
    12f4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    12f8:	e7e7      	b.n	12ca <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x2ca>
			unsupported = (conv->length_mod != LENGTH_NONE);
    12fa:	3b00      	subs	r3, #0
    12fc:	bf18      	it	ne
    12fe:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1300:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1304:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1308:	430b      	orrs	r3, r1
    130a:	f363 0241 	bfi	r2, r3, #1, #1
    130e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    1312:	e6af      	b.n	1074 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x74>
		} else if ((conv->length_mod != LENGTH_NONE)
    1314:	f013 0f38 	tst.w	r3, #56	; 0x38
    1318:	d0e9      	beq.n	12ee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x2ee>
			conv->invalid = true;
    131a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    131e:	f043 0301 	orr.w	r3, r3, #1
    1322:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    1326:	e7e2      	b.n	12ee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x2ee>
		conv->specifier_cat = SPECIFIER_PTR;
    1328:	2203      	movs	r2, #3
    132a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    132e:	f362 0302 	bfi	r3, r2, #0, #3
    1332:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1336:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    133a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    133e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    1342:	f1dc 0300 	rsbs	r3, ip, #0
    1346:	eb43 030c 	adc.w	r3, r3, ip
    134a:	e7d9      	b.n	1300 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x300>
		conv->specifier_cat = SPECIFIER_PTR;
    134c:	2203      	movs	r2, #3
    134e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1352:	f362 0302 	bfi	r3, r2, #0, #3
    1356:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    135a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    135e:	f013 0f78 	tst.w	r3, #120	; 0x78
    1362:	bf14      	ite	ne
    1364:	2301      	movne	r3, #1
    1366:	2300      	moveq	r3, #0
    1368:	e7ca      	b.n	1300 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x300>
			unsupported = true;
    136a:	2301      	movs	r3, #1
    136c:	e7c8      	b.n	1300 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x300>
		} else if (conv->width_present) {
    136e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    1372:	2a00      	cmp	r2, #0
		int width = -1;
    1374:	bfac      	ite	ge
    1376:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
			width = conv->width_value;
    137a:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
    137e:	e68b      	b.n	1098 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x98>
		} else if (conv->prec_present) {
    1380:	0799      	lsls	r1, r3, #30
    1382:	f57f ae98 	bpl.w	10b6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb6>
			precision = conv->prec_value;
    1386:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    138a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    138c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    1390:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1394:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1398:	f003 0207 	and.w	r2, r3, #7
    139c:	2a04      	cmp	r2, #4
    139e:	d109      	bne.n	13b4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3b4>
		    && !conv->prec_present) {
    13a0:	078a      	lsls	r2, r1, #30
    13a2:	d407      	bmi.n	13b4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3b4>
			if (conv->specifier_a) {
    13a4:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    13a8:	2a00      	cmp	r2, #0
    13aa:	bfb4      	ite	lt
    13ac:	f04f 080d 	movlt.w	r8, #13
    13b0:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    13b4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    13b8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    13ba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    13be:	d137      	bne.n	1430 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x430>
			switch (length_mod) {
    13c0:	1ecb      	subs	r3, r1, #3
    13c2:	2b04      	cmp	r3, #4
    13c4:	d821      	bhi.n	140a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x40a>
    13c6:	e8df f003 	tbb	[pc, r3]
    13ca:	0903      	.short	0x0903
    13cc:	2009      	.short	0x2009
    13ce:	20          	.byte	0x20
    13cf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    13d0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    13d4:	17da      	asrs	r2, r3, #31
    13d6:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    13da:	e006      	b.n	13ea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3ea>
					(sint_value_type)va_arg(ap, intmax_t);
    13dc:	3407      	adds	r4, #7
    13de:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    13e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    13e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    13ea:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    13ee:	07bb      	lsls	r3, r7, #30
    13f0:	d056      	beq.n	14a0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4a0>
			OUTS(sp, fp);
    13f2:	462a      	mov	r2, r5
    13f4:	4651      	mov	r1, sl
    13f6:	4648      	mov	r0, r9
    13f8:	9b02      	ldr	r3, [sp, #8]
    13fa:	f011 f852 	bl	124a2 <outs>
    13fe:	2800      	cmp	r0, #0
    1400:	f2c0 8390 	blt.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1404:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    1406:	9d02      	ldr	r5, [sp, #8]
    1408:	e5be      	b.n	f88 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    140a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    140e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1410:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1414:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1418:	d105      	bne.n	1426 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x426>
				value->uint = (unsigned char)value->uint;
    141a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    141e:	930c      	str	r3, [sp, #48]	; 0x30
    1420:	2300      	movs	r3, #0
    1422:	930d      	str	r3, [sp, #52]	; 0x34
    1424:	e7e1      	b.n	13ea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3ea>
			} else if (length_mod == LENGTH_H) {
    1426:	2902      	cmp	r1, #2
    1428:	d1df      	bne.n	13ea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3ea>
				value->sint = (short)value->sint;
    142a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    142e:	e7d1      	b.n	13d4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3d4>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1430:	2b02      	cmp	r3, #2
    1432:	d123      	bne.n	147c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x47c>
			switch (length_mod) {
    1434:	1ecb      	subs	r3, r1, #3
    1436:	2b04      	cmp	r3, #4
    1438:	d813      	bhi.n	1462 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x462>
    143a:	e8df f003 	tbb	[pc, r3]
    143e:	0a03      	.short	0x0a03
    1440:	120a      	.short	0x120a
    1442:	12          	.byte	0x12
    1443:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    1444:	2200      	movs	r2, #0
					value->uint = (wchar_t)va_arg(ap,
    1446:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
    1448:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    144a:	900c      	str	r0, [sp, #48]	; 0x30
    144c:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    144e:	461c      	mov	r4, r3
    1450:	e7cb      	b.n	13ea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3ea>
					(uint_value_type)va_arg(ap,
    1452:	1de3      	adds	r3, r4, #7
    1454:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
    1458:	ecb3 7b02 	vldmia	r3!, {d7}
    145c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
    1460:	e7f5      	b.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
					(uint_value_type)va_arg(ap, size_t);
    1462:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1466:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1468:	930c      	str	r3, [sp, #48]	; 0x30
    146a:	f04f 0300 	mov.w	r3, #0
    146e:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    1470:	d0d3      	beq.n	141a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x41a>
			} else if (length_mod == LENGTH_H) {
    1472:	2902      	cmp	r1, #2
    1474:	d1b9      	bne.n	13ea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3ea>
				value->uint = (unsigned short)value->uint;
    1476:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    147a:	e7d0      	b.n	141e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x41e>
		} else if (specifier_cat == SPECIFIER_FP) {
    147c:	2b04      	cmp	r3, #4
    147e:	d109      	bne.n	1494 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x494>
					(sint_value_type)va_arg(ap, long long);
    1480:	1de3      	adds	r3, r4, #7
    1482:	f023 0307 	bic.w	r3, r3, #7
    1486:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    148a:	e9d3 2300 	ldrd	r2, r3, [r3]
    148e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    1492:	e7aa      	b.n	13ea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3ea>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1494:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1496:	bf04      	itt	eq
    1498:	f854 3b04 	ldreq.w	r3, [r4], #4
    149c:	930c      	streq	r3, [sp, #48]	; 0x30
    149e:	e7a4      	b.n	13ea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3ea>
		switch (conv->specifier) {
    14a0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    14a4:	2a78      	cmp	r2, #120	; 0x78
    14a6:	d8ae      	bhi.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
    14a8:	2a57      	cmp	r2, #87	; 0x57
    14aa:	f200 808c 	bhi.w	15c6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5c6>
    14ae:	2a25      	cmp	r2, #37	; 0x25
    14b0:	f000 80d4 	beq.w	165c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x65c>
    14b4:	2a24      	cmp	r2, #36	; 0x24
    14b6:	d9a6      	bls.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
    14b8:	2a41      	cmp	r2, #65	; 0x41
    14ba:	d003      	beq.n	14c4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4c4>
    14bc:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    14c0:	2b02      	cmp	r3, #2
    14c2:	d8a0      	bhi.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
	} u = {
    14c4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    14c8:	2b00      	cmp	r3, #0
    14ca:	f2c0 81b6 	blt.w	183a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x83a>
	} else if (conv->flag_plus) {
    14ce:	0738      	lsls	r0, r7, #28
    14d0:	f100 81b5 	bmi.w	183e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x83e>
		*sign = ' ';
    14d4:	f017 0710 	ands.w	r7, r7, #16
    14d8:	bf18      	it	ne
    14da:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    14dc:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    14e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    14e4:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    14e8:	2d00      	cmp	r5, #0
    14ea:	f040 81aa 	bne.w	1842 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x842>
    14ee:	ea51 0003 	orrs.w	r0, r1, r3
    14f2:	bf14      	ite	ne
    14f4:	2001      	movne	r0, #1
    14f6:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    14f8:	02db      	lsls	r3, r3, #11
    14fa:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    14fe:	02c9      	lsls	r1, r1, #11
		c = 'f';
    1500:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    1502:	ea45 0e01 	orr.w	lr, r5, r1
    1506:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    150a:	bf08      	it	eq
    150c:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    150e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    1512:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    1516:	f000 8202 	beq.w	191e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x91e>
		if (is_subnormal) {
    151a:	2800      	cmp	r0, #0
    151c:	f040 81ca 	bne.w	18b4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8b4>
		fract |= BIT_63;
    1520:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1524:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    1528:	f04f 0e05 	mov.w	lr, #5
		fract |= BIT_63;
    152c:	4663      	mov	r3, ip
    152e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1532:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    1536:	9109      	str	r1, [sp, #36]	; 0x24
	while (expo < -2) {
    1538:	f115 0f02 	cmn.w	r5, #2
    153c:	f2c0 81c1 	blt.w	18c2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8c2>
    1540:	f1bc 0f00 	cmp.w	ip, #0
    1544:	d001      	beq.n	154a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x54a>
    1546:	e9cd 0108 	strd	r0, r1, [sp, #32]
		fract += 2;
    154a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
    154e:	2d00      	cmp	r5, #0
    1550:	f300 81cc 	bgt.w	18ec <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8ec>
	fract >>= (4 - expo);
    1554:	9809      	ldr	r0, [sp, #36]	; 0x24
    1556:	9908      	ldr	r1, [sp, #32]
    1558:	f1c5 0c04 	rsb	ip, r5, #4
    155c:	351c      	adds	r5, #28
    155e:	fa00 f505 	lsl.w	r5, r0, r5
    1562:	f1ac 0e20 	sub.w	lr, ip, #32
    1566:	fa21 f10c 	lsr.w	r1, r1, ip
    156a:	fa20 fe0e 	lsr.w	lr, r0, lr
    156e:	4329      	orrs	r1, r5
    1570:	ea41 010e 	orr.w	r1, r1, lr
    1574:	fa20 f00c 	lsr.w	r0, r0, ip
    1578:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    157c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1580:	2947      	cmp	r1, #71	; 0x47
    1582:	f040 81d3 	bne.w	192c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x92c>
		if (decexp < (-4 + 1) || decexp > precision) {
    1586:	1cdd      	adds	r5, r3, #3
    1588:	db02      	blt.n	1590 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x590>
    158a:	4598      	cmp	r8, r3
    158c:	f280 81ca 	bge.w	1924 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x924>
			c += 'e' - 'g';  /* e or E */
    1590:	3a02      	subs	r2, #2
			if (precision > 0) {
    1592:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    1596:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    1598:	dd01      	ble.n	159e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x59e>
				precision--;
    159a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    159e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    15a2:	0688      	lsls	r0, r1, #26
    15a4:	f100 81c2 	bmi.w	192c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x92c>
    15a8:	f1b8 0f00 	cmp.w	r8, #0
    15ac:	bfd4      	ite	le
    15ae:	2100      	movle	r1, #0
    15b0:	2101      	movgt	r1, #1
	if (c == 'f') {
    15b2:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    15b4:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    15b6:	f040 81bb 	bne.w	1930 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x930>
		if (decimals < 0) {
    15ba:	eb13 0108 	adds.w	r1, r3, r8
    15be:	f140 81b9 	bpl.w	1934 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x934>
			decimals = 0;
    15c2:	2100      	movs	r1, #0
    15c4:	e1b9      	b.n	193a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x93a>
		switch (conv->specifier) {
    15c6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    15ca:	2b20      	cmp	r3, #32
    15cc:	f63f af1b 	bhi.w	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
    15d0:	a001      	add	r0, pc, #4	; (adr r0, 15d8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5d8>)
    15d2:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    15d6:	bf00      	nop
    15d8:	000017dd 	.word	0x000017dd
    15dc:	00001407 	.word	0x00001407
    15e0:	00001407 	.word	0x00001407
    15e4:	00001407 	.word	0x00001407
    15e8:	00001407 	.word	0x00001407
    15ec:	00001407 	.word	0x00001407
    15f0:	00001407 	.word	0x00001407
    15f4:	00001407 	.word	0x00001407
    15f8:	00001407 	.word	0x00001407
    15fc:	000014c5 	.word	0x000014c5
    1600:	00001407 	.word	0x00001407
    1604:	00001689 	.word	0x00001689
    1608:	0000177d 	.word	0x0000177d
    160c:	000014c5 	.word	0x000014c5
    1610:	000014c5 	.word	0x000014c5
    1614:	000014c5 	.word	0x000014c5
    1618:	00001407 	.word	0x00001407
    161c:	0000177d 	.word	0x0000177d
    1620:	00001407 	.word	0x00001407
    1624:	00001407 	.word	0x00001407
    1628:	00001407 	.word	0x00001407
    162c:	00001407 	.word	0x00001407
    1630:	00001813 	.word	0x00001813
    1634:	000017dd 	.word	0x000017dd
    1638:	000017e1 	.word	0x000017e1
    163c:	00001407 	.word	0x00001407
    1640:	00001407 	.word	0x00001407
    1644:	00001663 	.word	0x00001663
    1648:	00001407 	.word	0x00001407
    164c:	000017dd 	.word	0x000017dd
    1650:	00001407 	.word	0x00001407
    1654:	00001407 	.word	0x00001407
    1658:	000017dd 	.word	0x000017dd
			OUTC('%');
    165c:	4651      	mov	r1, sl
    165e:	4610      	mov	r0, r2
    1660:	e49c      	b.n	f9c <cbvprintf+0x2c>
			if (precision >= 0) {
    1662:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    1668:	db09      	blt.n	167e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x67e>
				len = strnlen(bps, precision);
    166a:	4641      	mov	r1, r8
    166c:	4610      	mov	r0, r2
    166e:	9203      	str	r2, [sp, #12]
    1670:	f013 fc42 	bl	14ef8 <strnlen>
		char sign = 0;
    1674:	2700      	movs	r7, #0
				len = strlen(bps);
    1676:	9a03      	ldr	r2, [sp, #12]
			bpe = bps + len;
    1678:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    167a:	b962      	cbnz	r2, 1696 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x696>
    167c:	e6c3      	b.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
				len = strlen(bps);
    167e:	4610      	mov	r0, r2
    1680:	9203      	str	r2, [sp, #12]
    1682:	f7ff fc6a 	bl	f5a <strlen>
    1686:	e7f5      	b.n	1674 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x674>
		char sign = 0;
    1688:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    168a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
    168c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1690:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				bps = encode_float(value->dbl, conv, precision,
    1694:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    1696:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    1698:	b107      	cbz	r7, 169c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x69c>
			nj_len += 1U;
    169a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    169c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    16a0:	06c1      	lsls	r1, r0, #27
    16a2:	f140 8233 	bpl.w	1b0c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb0c>
			nj_len += 2U;
    16a6:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    16a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    16aa:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    16ac:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    16ae:	bf44      	itt	mi
    16b0:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    16b2:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    16b4:	f1bb 0f00 	cmp.w	fp, #0
    16b8:	dd23      	ble.n	1702 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x702>
			width -= (int)nj_len;
    16ba:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    16be:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    16c2:	0759      	lsls	r1, r3, #29
    16c4:	f3c3 0880 	ubfx	r8, r3, #2, #1
    16c8:	d41b      	bmi.n	1702 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x702>
				if (conv->flag_zero) {
    16ca:	0658      	lsls	r0, r3, #25
    16cc:	f140 8234 	bpl.w	1b38 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb38>
					if (sign != 0) {
    16d0:	2f00      	cmp	r7, #0
    16d2:	f000 8234 	beq.w	1b3e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb3e>
						OUTC(sign);
    16d6:	4651      	mov	r1, sl
    16d8:	4638      	mov	r0, r7
    16da:	9203      	str	r2, [sp, #12]
    16dc:	47c8      	blx	r9
    16de:	2800      	cmp	r0, #0
    16e0:	f2c0 8220 	blt.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
						sign = 0;
    16e4:	4647      	mov	r7, r8
					pad = '0';
    16e6:	f04f 0830 	mov.w	r8, #48	; 0x30
    16ea:	9a03      	ldr	r2, [sp, #12]
						OUTC(sign);
    16ec:	3601      	adds	r6, #1
						sign = 0;
    16ee:	445e      	add	r6, fp
    16f0:	465b      	mov	r3, fp
				while (width-- > 0) {
    16f2:	2b00      	cmp	r3, #0
    16f4:	eba6 000b 	sub.w	r0, r6, fp
    16f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    16fc:	f300 820a 	bgt.w	1b14 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb14>
    1700:	4606      	mov	r6, r0
		if (sign != 0) {
    1702:	b147      	cbz	r7, 1716 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x716>
			OUTC(sign);
    1704:	4651      	mov	r1, sl
    1706:	4638      	mov	r0, r7
    1708:	9203      	str	r2, [sp, #12]
    170a:	47c8      	blx	r9
    170c:	2800      	cmp	r0, #0
    170e:	f2c0 8209 	blt.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1712:	9a03      	ldr	r2, [sp, #12]
    1714:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1716:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    171a:	0659      	lsls	r1, r3, #25
    171c:	f140 8263 	bpl.w	1be6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbe6>
			if (conv->specifier_a) {
    1720:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    1724:	1ab6      	subs	r6, r6, r2
    1726:	2b00      	cmp	r3, #0
    1728:	f280 8218 	bge.w	1b5c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb5c>
    172c:	4617      	mov	r7, r2
    172e:	46b8      	mov	r8, r7
    1730:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    1732:	f817 0b01 	ldrb.w	r0, [r7], #1
    1736:	2870      	cmp	r0, #112	; 0x70
    1738:	f040 8204 	bne.w	1b44 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb44>
			while (pad_len-- > 0) {
    173c:	461e      	mov	r6, r3
    173e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    1740:	441f      	add	r7, r3
    1742:	1bbb      	subs	r3, r7, r6
    1744:	2b00      	cmp	r3, #0
    1746:	f300 8247 	bgt.w	1bd8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbd8>
			OUTS(cp, bpe);
    174a:	462b      	mov	r3, r5
    174c:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    174e:	4651      	mov	r1, sl
    1750:	4648      	mov	r0, r9
    1752:	f010 fea6 	bl	124a2 <outs>
    1756:	2800      	cmp	r0, #0
    1758:	f2c0 81e4 	blt.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    175c:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    175e:	4606      	mov	r6, r0
    1760:	4483      	add	fp, r0
		while (width > 0) {
    1762:	ebab 0306 	sub.w	r3, fp, r6
    1766:	2b00      	cmp	r3, #0
    1768:	f77f ae4d 	ble.w	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
			OUTC(' ');
    176c:	4651      	mov	r1, sl
    176e:	2020      	movs	r0, #32
    1770:	47c8      	blx	r9
    1772:	2800      	cmp	r0, #0
    1774:	f2c0 81d6 	blt.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1778:	3601      	adds	r6, #1
			--width;
    177a:	e7f2      	b.n	1762 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x762>
			if (conv->flag_plus) {
    177c:	073d      	lsls	r5, r7, #28
    177e:	d42b      	bmi.n	17d8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x7d8>
				sign = ' ';
    1780:	f017 0710 	ands.w	r7, r7, #16
    1784:	bf18      	it	ne
    1786:	2720      	movne	r7, #32
			sint = value->sint;
    1788:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    178c:	2b00      	cmp	r3, #0
    178e:	da05      	bge.n	179c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x79c>
				sign = '-';
    1790:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    1792:	4252      	negs	r2, r2
    1794:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1798:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			bps = encode_uint(value->uint, conv, buf, bpe);
    179c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    17a0:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    17a4:	9300      	str	r3, [sp, #0]
    17a6:	aa0e      	add	r2, sp, #56	; 0x38
    17a8:	ab13      	add	r3, sp, #76	; 0x4c
    17aa:	f005 fafd 	bl	6da8 <encode_uint>
    17ae:	4602      	mov	r2, r0
			if (precision >= 0) {
    17b0:	f1b8 0f00 	cmp.w	r8, #0
    17b4:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    17b8:	f6ff af5f 	blt.w	167a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x67a>
				conv->flag_zero = false;
    17bc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    17c0:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    17c2:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    17c6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    17c8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    17cc:	f67f af55 	bls.w	167a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x67a>
					conv->pad0_value = precision - (int)len;
    17d0:	eba8 0303 	sub.w	r3, r8, r3
    17d4:	930f      	str	r3, [sp, #60]	; 0x3c
    17d6:	e750      	b.n	167a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x67a>
				sign = '+';
    17d8:	272b      	movs	r7, #43	; 0x2b
    17da:	e7d5      	b.n	1788 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x788>
		switch (conv->specifier) {
    17dc:	2700      	movs	r7, #0
    17de:	e7dd      	b.n	179c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x79c>
			if (value->ptr != NULL) {
    17e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    17e2:	2800      	cmp	r0, #0
    17e4:	f000 818e 	beq.w	1b04 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17e8:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    17ec:	9300      	str	r3, [sp, #0]
    17ee:	aa0e      	add	r2, sp, #56	; 0x38
    17f0:	ab13      	add	r3, sp, #76	; 0x4c
    17f2:	2100      	movs	r1, #0
    17f4:	f005 fad8 	bl	6da8 <encode_uint>
				conv->altform_0c = true;
    17f8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17fc:	4602      	mov	r2, r0
				conv->altform_0c = true;
    17fe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1802:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1806:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    180a:	2700      	movs	r7, #0
				conv->altform_0c = true;
    180c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    1810:	e7ce      	b.n	17b0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x7b0>
				store_count(conv, value->ptr, count);
    1812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    1814:	2907      	cmp	r1, #7
    1816:	f63f adf6 	bhi.w	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
    181a:	e8df f001 	tbb	[pc, r1]
    181e:	040c      	.short	0x040c
    1820:	08080c06 	.word	0x08080c06
    1824:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1826:	701e      	strb	r6, [r3, #0]
		break;
    1828:	e5ed      	b.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
		*(short *)dp = (short)count;
    182a:	801e      	strh	r6, [r3, #0]
		break;
    182c:	e5eb      	b.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
		*(intmax_t *)dp = (intmax_t)count;
    182e:	17f2      	asrs	r2, r6, #31
    1830:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    1834:	e5e7      	b.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1836:	601e      	str	r6, [r3, #0]
		break;
    1838:	e5e5      	b.n	1406 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x406>
		*sign = '-';
    183a:	272d      	movs	r7, #45	; 0x2d
    183c:	e64e      	b.n	14dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4dc>
		*sign = '+';
    183e:	272b      	movs	r7, #43	; 0x2b
    1840:	e64c      	b.n	14dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4dc>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    1842:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1846:	4285      	cmp	r5, r0
    1848:	d131      	bne.n	18ae <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8ae>
			if (isupper((int)c)) {
    184a:	48b9      	ldr	r0, [pc, #740]	; (1b30 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb30>)
    184c:	3201      	adds	r2, #1
    184e:	b2d2      	uxtb	r2, r2
    1850:	5c12      	ldrb	r2, [r2, r0]
		if (fract == 0) {
    1852:	430b      	orrs	r3, r1
    1854:	f002 0203 	and.w	r2, r2, #3
    1858:	d11b      	bne.n	1892 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x892>
			if (isupper((int)c)) {
    185a:	2a01      	cmp	r2, #1
    185c:	d111      	bne.n	1882 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x882>
				*buf++ = 'I';
    185e:	2349      	movs	r3, #73	; 0x49
    1860:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    1864:	234e      	movs	r3, #78	; 0x4e
    1866:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    186a:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    186c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    1870:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    1874:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		conv->flag_zero = false;
    1878:	f36f 1386 	bfc	r3, #6, #1
    187c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		return bps;
    1880:	e708      	b.n	1694 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x694>
				*buf++ = 'i';
    1882:	2369      	movs	r3, #105	; 0x69
    1884:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    1888:	236e      	movs	r3, #110	; 0x6e
    188a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    188e:	2366      	movs	r3, #102	; 0x66
    1890:	e7ec      	b.n	186c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x86c>
			if (isupper((int)c)) {
    1892:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    1894:	bf07      	ittee	eq
    1896:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    1898:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    189a:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    189c:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    189e:	bf0c      	ite	eq
    18a0:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    18a4:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    18a8:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    18ac:	e7de      	b.n	186c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x86c>
	bool is_subnormal = (expo == 0) && (fract != 0);
    18ae:	2000      	movs	r0, #0
    18b0:	e622      	b.n	14f8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4f8>
				expo--;
    18b2:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    18b4:	1849      	adds	r1, r1, r1
    18b6:	415b      	adcs	r3, r3
    18b8:	2b00      	cmp	r3, #0
    18ba:	dafa      	bge.n	18b2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8b2>
    18bc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    18c0:	e62e      	b.n	1520 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x520>
			fract >>= 1;
    18c2:	0840      	lsrs	r0, r0, #1
    18c4:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    18c8:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    18ca:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    18ce:	46ac      	mov	ip, r5
			expo++;
    18d0:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    18d4:	d2f5      	bcs.n	18c2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8c2>
		fract *= 5U;
    18d6:	fb0e f501 	mul.w	r5, lr, r1
    18da:	fba0 010e 	umull	r0, r1, r0, lr
		decexp--;
    18de:	3b01      	subs	r3, #1
		fract *= 5U;
    18e0:	4429      	add	r1, r5
		expo++;
    18e2:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    18e6:	f04f 0c01 	mov.w	ip, #1
    18ea:	e625      	b.n	1538 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x538>
		fract += 2;
    18ec:	3002      	adds	r0, #2
    18ee:	f141 0100 	adc.w	r1, r1, #0
    18f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
    18f6:	a808      	add	r0, sp, #32
    18f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    18fc:	f010 fda2 	bl	12444 <_ldiv5>
		expo--;
    1900:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		decexp++;
    1904:	9b04      	ldr	r3, [sp, #16]
    1906:	9a03      	ldr	r2, [sp, #12]
		expo--;
    1908:	3d01      	subs	r5, #1
		decexp++;
    190a:	3301      	adds	r3, #1
			fract <<= 1;
    190c:	1849      	adds	r1, r1, r1
    190e:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    1910:	2800      	cmp	r0, #0
			expo--;
    1912:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    1916:	daf9      	bge.n	190c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x90c>
    1918:	e9cd 1008 	strd	r1, r0, [sp, #32]
    191c:	e615      	b.n	154a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x54a>
    191e:	2300      	movs	r3, #0
    1920:	461d      	mov	r5, r3
    1922:	e617      	b.n	1554 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x554>
			c = 'f';
    1924:	2266      	movs	r2, #102	; 0x66
			precision -= decexp;
    1926:	eba8 0803 	sub.w	r8, r8, r3
    192a:	e638      	b.n	159e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x59e>
	bool prune_zero = false;
    192c:	2100      	movs	r1, #0
    192e:	e640      	b.n	15b2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5b2>
		decimals = precision + 1;
    1930:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
    1934:	2910      	cmp	r1, #16
    1936:	bfa8      	it	ge
    1938:	2110      	movge	r1, #16
    193a:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
    193c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
    1940:	460d      	mov	r5, r1
    1942:	9007      	str	r0, [sp, #28]
	*v >>= 1;
    1944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
    1948:	b9a5      	cbnz	r5, 1974 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x974>
	fract += round;
    194a:	9d08      	ldr	r5, [sp, #32]
    194c:	1940      	adds	r0, r0, r5
    194e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1950:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
    1954:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    1958:	d21b      	bcs.n	1992 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x992>
	fract += round;
    195a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
    195e:	2a66      	cmp	r2, #102	; 0x66
    1960:	f040 8098 	bne.w	1a94 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa94>
		if (decexp > 0) {
    1964:	2b00      	cmp	r3, #0
    1966:	dc23      	bgt.n	19b0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9b0>
			*buf++ = '0';
    1968:	2130      	movs	r1, #48	; 0x30
    196a:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    196e:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1972:	e02f      	b.n	19d4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9d4>
	*v >>= 1;
    1974:	0840      	lsrs	r0, r0, #1
    1976:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    197a:	0849      	lsrs	r1, r1, #1
    197c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
    1980:	a80a      	add	r0, sp, #40	; 0x28
    1982:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1986:	3d01      	subs	r5, #1
    1988:	f010 fd5c 	bl	12444 <_ldiv5>
    198c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    1990:	e7d8      	b.n	1944 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x944>
	*v >>= 1;
    1992:	0840      	lsrs	r0, r0, #1
    1994:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    1998:	0849      	lsrs	r1, r1, #1
    199a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
    199e:	a808      	add	r0, sp, #32
    19a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19a4:	f010 fd4e 	bl	12444 <_ldiv5>
		decexp++;
    19a8:	9b05      	ldr	r3, [sp, #20]
    19aa:	9a04      	ldr	r2, [sp, #16]
    19ac:	3301      	adds	r3, #1
    19ae:	e7d6      	b.n	195e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x95e>
	char *buf = bps;
    19b0:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    19b2:	9907      	ldr	r1, [sp, #28]
    19b4:	2900      	cmp	r1, #0
    19b6:	dd0b      	ble.n	19d0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9d0>
				*buf++ = _get_digit(&fract, &digit_count);
    19b8:	a907      	add	r1, sp, #28
    19ba:	a808      	add	r0, sp, #32
    19bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19c0:	f010 fd58 	bl	12474 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    19c4:	9b05      	ldr	r3, [sp, #20]
    19c6:	9a04      	ldr	r2, [sp, #16]
    19c8:	3b01      	subs	r3, #1
				*buf++ = _get_digit(&fract, &digit_count);
    19ca:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    19ce:	d1f0      	bne.n	19b2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9b2>
			conv->pad0_value = decexp;
    19d0:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    19d2:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    19d4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    19d8:	0689      	lsls	r1, r1, #26
    19da:	d402      	bmi.n	19e2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9e2>
    19dc:	f1b8 0f00 	cmp.w	r8, #0
    19e0:	dd1d      	ble.n	1a1e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa1e>
			*buf++ = '.';
    19e2:	212e      	movs	r1, #46	; 0x2e
    19e4:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    19e8:	b19b      	cbz	r3, 1a12 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa12>
    19ea:	f1b8 0f00 	cmp.w	r8, #0
    19ee:	dd16      	ble.n	1a1e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa1e>
			conv->pad0_value = -decexp;
    19f0:	4259      	negs	r1, r3
    19f2:	4541      	cmp	r1, r8
    19f4:	bfa8      	it	ge
    19f6:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    19f8:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
    19fa:	910f      	str	r1, [sp, #60]	; 0x3c
			precision -= conv->pad0_value;
    19fc:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    1a00:	bfd4      	ite	le
    1a02:	2100      	movle	r1, #0
    1a04:	2101      	movgt	r1, #1
    1a06:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    1a0a:	f361 1045 	bfi	r0, r1, #5, #1
    1a0e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    1a12:	f1b8 0f00 	cmp.w	r8, #0
    1a16:	dd02      	ble.n	1a1e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa1e>
    1a18:	9907      	ldr	r1, [sp, #28]
    1a1a:	2900      	cmp	r1, #0
    1a1c:	dc55      	bgt.n	1aca <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xaca>
	if (prune_zero) {
    1a1e:	9903      	ldr	r1, [sp, #12]
    1a20:	2900      	cmp	r1, #0
    1a22:	d162      	bne.n	1aea <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xaea>
	conv->pad0_pre_exp = precision;
    1a24:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    1a28:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1a2c:	2945      	cmp	r1, #69	; 0x45
    1a2e:	d120      	bne.n	1a72 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa72>
		*buf++ = c;
    1a30:	4629      	mov	r1, r5
		if (decexp < 0) {
    1a32:	2b00      	cmp	r3, #0
		*buf++ = c;
    1a34:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    1a38:	bfb6      	itet	lt
    1a3a:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    1a3c:	222b      	movge	r2, #43	; 0x2b
			decexp = -decexp;
    1a3e:	425b      	neglt	r3, r3
		if (decexp >= 100) {
    1a40:	2b63      	cmp	r3, #99	; 0x63
    1a42:	706a      	strb	r2, [r5, #1]
    1a44:	dd09      	ble.n	1a5a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa5a>
			*buf++ = (decexp / 100) + '0';
    1a46:	2064      	movs	r0, #100	; 0x64
    1a48:	fbb3 f2f0 	udiv	r2, r3, r0
			decexp %= 100;
    1a4c:	fb00 3312 	mls	r3, r0, r2, r3
			*buf++ = (decexp / 100) + '0';
    1a50:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1a54:	1ce9      	adds	r1, r5, #3
    1a56:	f885 c002 	strb.w	ip, [r5, #2]
		*buf++ = (decexp / 10) + '0';
    1a5a:	200a      	movs	r0, #10
    1a5c:	fbb3 f2f0 	udiv	r2, r3, r0
    1a60:	460d      	mov	r5, r1
		*buf++ = (decexp % 10) + '0';
    1a62:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1a66:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1a6a:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1a6c:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    1a70:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    1a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a74:	2b00      	cmp	r3, #0
    1a76:	dc43      	bgt.n	1b00 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb00>
    1a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	bfd4      	ite	le
    1a7e:	2300      	movle	r3, #0
    1a80:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1a82:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    1a86:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1a8a:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1a8c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    1a90:	702b      	strb	r3, [r5, #0]
	return bps;
    1a92:	e5ff      	b.n	1694 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x694>
		*buf = _get_digit(&fract, &digit_count);
    1a94:	a907      	add	r1, sp, #28
    1a96:	a808      	add	r0, sp, #32
    1a98:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a9c:	f010 fcea 	bl	12474 <_get_digit>
		if (*buf++ != '0') {
    1aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    1aa4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		if (*buf++ != '0') {
    1aa8:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    1aaa:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
			decexp--;
    1aae:	bf18      	it	ne
    1ab0:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1ab4:	0688      	lsls	r0, r1, #26
    1ab6:	d402      	bmi.n	1abe <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xabe>
    1ab8:	f1b8 0f00 	cmp.w	r8, #0
    1abc:	dd12      	ble.n	1ae4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xae4>
			*buf++ = '.';
    1abe:	212e      	movs	r1, #46	; 0x2e
    1ac0:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    1ac4:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    1ac8:	e7a3      	b.n	1a12 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa12>
		*buf++ = _get_digit(&fract, &digit_count);
    1aca:	a907      	add	r1, sp, #28
    1acc:	a808      	add	r0, sp, #32
    1ace:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1ad2:	f010 fccf 	bl	12474 <_get_digit>
    1ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1ada:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    1ade:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1ae2:	e796      	b.n	1a12 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa12>
		if (*buf++ != '0') {
    1ae4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1ae8:	e799      	b.n	1a1e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa1e>
		conv->pad0_pre_exp = 0;
    1aea:	2100      	movs	r1, #0
    1aec:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    1aee:	4628      	mov	r0, r5
    1af0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    1af4:	2930      	cmp	r1, #48	; 0x30
    1af6:	d0fa      	beq.n	1aee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xaee>
		if (*buf != '.') {
    1af8:	292e      	cmp	r1, #46	; 0x2e
    1afa:	bf18      	it	ne
    1afc:	4605      	movne	r5, r0
    1afe:	e793      	b.n	1a28 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa28>
		|| (conv->pad0_pre_exp > 0);
    1b00:	2301      	movs	r3, #1
    1b02:	e7be      	b.n	1a82 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa82>
			bpe = bps + 5;
    1b04:	4d0b      	ldr	r5, [pc, #44]	; (1b34 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb34>)
		char sign = 0;
    1b06:	4607      	mov	r7, r0
			bps = "(nil)";
    1b08:	1f6a      	subs	r2, r5, #5
    1b0a:	e5c4      	b.n	1696 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x696>
		} else if (conv->altform_0) {
    1b0c:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    1b0e:	bf48      	it	mi
    1b10:	3301      	addmi	r3, #1
    1b12:	e5c9      	b.n	16a8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6a8>
					OUTC(pad);
    1b14:	4651      	mov	r1, sl
    1b16:	4640      	mov	r0, r8
    1b18:	9203      	str	r2, [sp, #12]
    1b1a:	47c8      	blx	r9
    1b1c:	2800      	cmp	r0, #0
    1b1e:	9a03      	ldr	r2, [sp, #12]
    1b20:	f6bf ade6 	bge.w	16f0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6f0>
#undef OUTS
#undef OUTC
}
    1b24:	b01b      	add	sp, #108	; 0x6c
    1b26:	ecbd 8b02 	vpop	{d8}
    1b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b2e:	bf00      	nop
    1b30:	0001870f 	.word	0x0001870f
    1b34:	000177dd 	.word	0x000177dd
				char pad = ' ';
    1b38:	f04f 0820 	mov.w	r8, #32
    1b3c:	e5d7      	b.n	16ee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6ee>
					pad = '0';
    1b3e:	f04f 0830 	mov.w	r8, #48	; 0x30
    1b42:	e5d4      	b.n	16ee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6ee>
					OUTC(*cp++);
    1b44:	4651      	mov	r1, sl
    1b46:	47c8      	blx	r9
    1b48:	2800      	cmp	r0, #0
    1b4a:	f6bf adf0 	bge.w	172e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x72e>
    1b4e:	e7e9      	b.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
					OUTC(*cp++);
    1b50:	4651      	mov	r1, sl
    1b52:	9203      	str	r2, [sp, #12]
    1b54:	47c8      	blx	r9
    1b56:	2800      	cmp	r0, #0
    1b58:	9a03      	ldr	r2, [sp, #12]
    1b5a:	dbe3      	blt.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
				while (isdigit((int)*cp)) {
    1b5c:	7810      	ldrb	r0, [r2, #0]
    1b5e:	4b37      	ldr	r3, [pc, #220]	; (1c3c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc3c>)
    1b60:	4617      	mov	r7, r2
    1b62:	5cc3      	ldrb	r3, [r0, r3]
    1b64:	eb06 0802 	add.w	r8, r6, r2
    1b68:	075b      	lsls	r3, r3, #29
    1b6a:	f102 0201 	add.w	r2, r2, #1
    1b6e:	d4ef      	bmi.n	1b50 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb50>
				if (!conv->pad_postdp) {
    1b70:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    1b74:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    1b76:	0699      	lsls	r1, r3, #26
    1b78:	d407      	bmi.n	1b8a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb8a>
    1b7a:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    1b7c:	2e00      	cmp	r6, #0
    1b7e:	eba8 0206 	sub.w	r2, r8, r6
    1b82:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    1b86:	dc0f      	bgt.n	1ba8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xba8>
    1b88:	4690      	mov	r8, r2
				if (*cp == '.') {
    1b8a:	7838      	ldrb	r0, [r7, #0]
    1b8c:	282e      	cmp	r0, #46	; 0x2e
    1b8e:	d108      	bne.n	1ba2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xba2>
					OUTC(*cp++);
    1b90:	4651      	mov	r1, sl
    1b92:	47c8      	blx	r9
						OUTC('0');
    1b94:	2800      	cmp	r0, #0
    1b96:	dbc5      	blt.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
					while (pad_len-- > 0) {
    1b98:	2e00      	cmp	r6, #0
						OUTC('0');
    1b9a:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    1b9e:	dc09      	bgt.n	1bb4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbb4>
					OUTC(*cp++);
    1ba0:	3701      	adds	r7, #1
    1ba2:	eba8 0607 	sub.w	r6, r8, r7
    1ba6:	e00e      	b.n	1bc6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbc6>
						OUTC('0');
    1ba8:	4651      	mov	r1, sl
    1baa:	2030      	movs	r0, #48	; 0x30
    1bac:	47c8      	blx	r9
    1bae:	2800      	cmp	r0, #0
    1bb0:	dae4      	bge.n	1b7c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb7c>
    1bb2:	e7b7      	b.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
						OUTC('0');
    1bb4:	4651      	mov	r1, sl
    1bb6:	2030      	movs	r0, #48	; 0x30
    1bb8:	47c8      	blx	r9
    1bba:	3e01      	subs	r6, #1
    1bbc:	e7ea      	b.n	1b94 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb94>
					OUTC(*cp++);
    1bbe:	4651      	mov	r1, sl
    1bc0:	47c8      	blx	r9
    1bc2:	2800      	cmp	r0, #0
    1bc4:	dbae      	blt.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1bc6:	46b8      	mov	r8, r7
				while (isdigit((int)*cp)) {
    1bc8:	4a1c      	ldr	r2, [pc, #112]	; (1c3c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc3c>)
    1bca:	19f3      	adds	r3, r6, r7
    1bcc:	f817 0b01 	ldrb.w	r0, [r7], #1
    1bd0:	5c12      	ldrb	r2, [r2, r0]
    1bd2:	0752      	lsls	r2, r2, #29
    1bd4:	d4f3      	bmi.n	1bbe <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbbe>
    1bd6:	e5b1      	b.n	173c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x73c>
				OUTC('0');
    1bd8:	4651      	mov	r1, sl
    1bda:	2030      	movs	r0, #48	; 0x30
    1bdc:	47c8      	blx	r9
    1bde:	2800      	cmp	r0, #0
    1be0:	dba0      	blt.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1be2:	3601      	adds	r6, #1
    1be4:	e5ad      	b.n	1742 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x742>
			if (conv->altform_0c | conv->altform_0) {
    1be6:	06d8      	lsls	r0, r3, #27
    1be8:	d401      	bmi.n	1bee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbee>
    1bea:	0719      	lsls	r1, r3, #28
    1bec:	d507      	bpl.n	1bfe <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbfe>
				OUTC('0');
    1bee:	4651      	mov	r1, sl
    1bf0:	2030      	movs	r0, #48	; 0x30
    1bf2:	9203      	str	r2, [sp, #12]
    1bf4:	47c8      	blx	r9
    1bf6:	2800      	cmp	r0, #0
    1bf8:	db94      	blt.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1bfa:	9a03      	ldr	r2, [sp, #12]
    1bfc:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    1bfe:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1c02:	06db      	lsls	r3, r3, #27
    1c04:	d508      	bpl.n	1c18 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc18>
				OUTC(conv->specifier);
    1c06:	4651      	mov	r1, sl
    1c08:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1c0c:	9203      	str	r2, [sp, #12]
    1c0e:	47c8      	blx	r9
    1c10:	2800      	cmp	r0, #0
    1c12:	db87      	blt.n	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1c14:	9a03      	ldr	r2, [sp, #12]
    1c16:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    1c18:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1c1a:	4437      	add	r7, r6
    1c1c:	1bbb      	subs	r3, r7, r6
    1c1e:	2b00      	cmp	r3, #0
    1c20:	dc01      	bgt.n	1c26 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc26>
			OUTS(bps, bpe);
    1c22:	462b      	mov	r3, r5
    1c24:	e593      	b.n	174e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x74e>
				OUTC('0');
    1c26:	4651      	mov	r1, sl
    1c28:	2030      	movs	r0, #48	; 0x30
    1c2a:	9203      	str	r2, [sp, #12]
    1c2c:	47c8      	blx	r9
    1c2e:	2800      	cmp	r0, #0
    1c30:	f6ff af78 	blt.w	1b24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb24>
    1c34:	9a03      	ldr	r2, [sp, #12]
    1c36:	3601      	adds	r6, #1
    1c38:	e7f0      	b.n	1c1c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc1c>
    1c3a:	bf00      	nop
    1c3c:	00018710 	.word	0x00018710

00001c40 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c44:	b091      	sub	sp, #68	; 0x44
    1c46:	9c18      	ldr	r4, [sp, #96]	; 0x60
    1c48:	4680      	mov	r8, r0
        size_t n_fft_out_features = (n_fft / 2) + 1;
    1c4a:	0867      	lsrs	r7, r4, #1
    1c4c:	3701      	adds	r7, #1
        if (output_size != n_fft_out_features) {
    1c4e:	429f      	cmp	r7, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1c50:	460e      	mov	r6, r1
    1c52:	4615      	mov	r5, r2
        if (output_size != n_fft_out_features) {
    1c54:	f040 8085 	bne.w	1d62 <_ZN2ei5numpy4rfftEPKfjPfjj+0x122>
        if (src_size > n_fft) {
            src_size = n_fft;
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1c58:	2300      	movs	r3, #0
    1c5a:	4622      	mov	r2, r4
    1c5c:	2101      	movs	r1, #1
    1c5e:	a802      	add	r0, sp, #8
    1c60:	f011 fa0e 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    1c64:	9802      	ldr	r0, [sp, #8]
    1c66:	2800      	cmp	r0, #0
    1c68:	d04c      	beq.n	1d04 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc4>
    1c6a:	42a6      	cmp	r6, r4
    1c6c:	bf28      	it	cs
    1c6e:	4626      	movcs	r6, r4
        if (!fft_input.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
    1c70:	ea4f 0986 	mov.w	r9, r6, lsl #2
    1c74:	464a      	mov	r2, r9
    1c76:	4641      	mov	r1, r8
    1c78:	f012 ff9d 	bl	14bb6 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
    1c7c:	9802      	ldr	r0, [sp, #8]
    1c7e:	1ba2      	subs	r2, r4, r6
    1c80:	2100      	movs	r1, #0
    1c82:	0092      	lsls	r2, r2, #2
    1c84:	4448      	add	r0, r9
    1c86:	f012 ffbd 	bl	14c04 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
    1c8a:	2c20      	cmp	r4, #32
    1c8c:	d067      	beq.n	1d5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
    1c8e:	2c40      	cmp	r4, #64	; 0x40
    1c90:	d065      	beq.n	1d5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
    1c92:	2c80      	cmp	r4, #128	; 0x80
    1c94:	d01c      	beq.n	1cd0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c96:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1c9a:	d060      	beq.n	1d5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
    1c9c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1ca0:	d05d      	beq.n	1d5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
    1ca2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    1ca6:	d05a      	beq.n	1d5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
    1ca8:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    1cac:	d057      	beq.n	1d5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
    1cae:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    1cb2:	d054      	beq.n	1d5e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
    1cb4:	4622      	mov	r2, r4
    1cb6:	463b      	mov	r3, r7
    1cb8:	4629      	mov	r1, r5
    1cba:	9802      	ldr	r0, [sp, #8]
    1cbc:	f008 f8b6 	bl	9e2c <_ZN2ei5numpy13software_rfftEPfS1_jj>
    1cc0:	4604      	mov	r4, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1cc2:	a802      	add	r0, sp, #8
    1cc4:	f011 f851 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
    }
    1cc8:	4620      	mov	r0, r4
    1cca:	b011      	add	sp, #68	; 0x44
    1ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_128 == 1
            case 128: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
                S->fftLen = 64U;
    1cd0:	2340      	movs	r3, #64	; 0x40
    1cd2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                S->pTwiddle = NULL;
                S->bitRevLength = arm_cfft_sR_f32_len64.bitRevLength;
    1cd6:	4b26      	ldr	r3, [pc, #152]	; (1d70 <_ZN2ei5numpy4rfftEPKfjPfjj+0x130>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1cd8:	2101      	movs	r1, #1
                S->bitRevLength = arm_cfft_sR_f32_len64.bitRevLength;
    1cda:	899a      	ldrh	r2, [r3, #12]
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1cdc:	a806      	add	r0, sp, #24
                S->bitRevLength = arm_cfft_sR_f32_len64.bitRevLength;
    1cde:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                S->pBitRevTable = arm_cfft_sR_f32_len64.pBitRevTable;
    1ce2:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len64.pTwiddle;
    1ce4:	685b      	ldr	r3, [r3, #4]
                S->pBitRevTable = arm_cfft_sR_f32_len64.pBitRevTable;
    1ce6:	920c      	str	r2, [sp, #48]	; 0x30
                S->pTwiddle = arm_cfft_sR_f32_len64.pTwiddle;
    1ce8:	930b      	str	r3, [sp, #44]	; 0x2c
                rfft_instance->fftLenRFFT = 128U;
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_128;
    1cea:	4b22      	ldr	r3, [pc, #136]	; (1d74 <_ZN2ei5numpy4rfftEPKfjPfjj+0x134>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1cec:	4622      	mov	r2, r4
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_128;
    1cee:	930f      	str	r3, [sp, #60]	; 0x3c
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1cf0:	2300      	movs	r3, #0
                rfft_instance->fftLenRFFT = 128U;
    1cf2:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1cf6:	f011 f9c3 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    1cfa:	9a06      	ldr	r2, [sp, #24]
    1cfc:	b922      	cbnz	r2, 1d08 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
    1cfe:	a806      	add	r0, sp, #24
    1d00:	f011 f833 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1d04:	4c1c      	ldr	r4, [pc, #112]	; (1d78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>)
    1d06:	e7dc      	b.n	1cc2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1d08:	2408      	movs	r4, #8
                output[ix] = rms_result * sqrt(2);
    1d0a:	a717      	add	r7, pc, #92	; (adr r7, 1d68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x128>)
    1d0c:	e9d7 6700 	ldrd	r6, r7, [r7]
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
    1d10:	2300      	movs	r3, #0
    1d12:	9902      	ldr	r1, [sp, #8]
    1d14:	a80a      	add	r0, sp, #40	; 0x28
    1d16:	f011 fe50 	bl	139ba <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
    1d1a:	9b06      	ldr	r3, [sp, #24]
    1d1c:	3504      	adds	r5, #4
    1d1e:	681a      	ldr	r2, [r3, #0]
    1d20:	f845 2c04 	str.w	r2, [r5, #-4]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1d24:	685b      	ldr	r3, [r3, #4]
    1d26:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
    1d2a:	9806      	ldr	r0, [sp, #24]
    1d2c:	aa01      	add	r2, sp, #4
    1d2e:	4420      	add	r0, r4
    1d30:	2102      	movs	r1, #2
    1d32:	f00a feeb 	bl	cb0c <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
    1d36:	9801      	ldr	r0, [sp, #4]
    1d38:	f7fe fb72 	bl	420 <__aeabi_f2d>
    1d3c:	4632      	mov	r2, r6
    1d3e:	463b      	mov	r3, r7
    1d40:	f7fe fbc6 	bl	4d0 <__aeabi_dmul>
    1d44:	f7fe fe5e 	bl	a04 <__aeabi_d2f>
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1d48:	3408      	adds	r4, #8
    1d4a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
                output[ix] = rms_result * sqrt(2);
    1d4e:	f845 0b04 	str.w	r0, [r5], #4
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1d52:	d1ea      	bne.n	1d2a <_ZN2ei5numpy4rfftEPKfjPfjj+0xea>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1d54:	a806      	add	r0, sp, #24
    1d56:	f011 f808 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
    1d5a:	2400      	movs	r4, #0
    1d5c:	e7b1      	b.n	1cc2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
    1d5e:	4c07      	ldr	r4, [pc, #28]	; (1d7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x13c>)
    1d60:	e7af      	b.n	1cc2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
    1d62:	4c07      	ldr	r4, [pc, #28]	; (1d80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x140>)
    1d64:	e7b0      	b.n	1cc8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x88>
    1d66:	bf00      	nop
    1d68:	667f3bcd 	.word	0x667f3bcd
    1d6c:	3ff6a09e 	.word	0x3ff6a09e
    1d70:	00016f74 	.word	0x00016f74
    1d74:	00016d74 	.word	0x00016d74
    1d78:	fffffc16 	.word	0xfffffc16
    1d7c:	fffffc08 	.word	0xfffffc08
    1d80:	fffffc11 	.word	0xfffffc11
    1d84:	00000000 	.word	0x00000000

00001d88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
    1d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d8c:	ed2d 8b0c 	vpush	{d8-d13}
    1d90:	b0bd      	sub	sp, #244	; 0xf4
    1d92:	9306      	str	r3, [sp, #24]
    1d94:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
    1d98:	4614      	mov	r4, r2
    1d9a:	9303      	str	r3, [sp, #12]
    1d9c:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
    1da0:	468b      	mov	fp, r1
    1da2:	930a      	str	r3, [sp, #40]	; 0x28
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
    1da4:	684b      	ldr	r3, [r1, #4]
    static int spectral_analysis(
    1da6:	eef0 8a40 	vmov.f32	s17, s0
        if (out_features->rows != input_matrix->rows) {
    1daa:	ee0a 3a90 	vmov	s21, r3
    1dae:	ee1a 2a90 	vmov	r2, s21
    1db2:	6843      	ldr	r3, [r0, #4]
    static int spectral_analysis(
    1db4:	eeb0 ca60 	vmov.f32	s24, s1
        if (out_features->rows != input_matrix->rows) {
    1db8:	4293      	cmp	r3, r2
    static int spectral_analysis(
    1dba:	eeb0 9a41 	vmov.f32	s18, s2
    1dbe:	9005      	str	r0, [sp, #20]
        if (out_features->rows != input_matrix->rows) {
    1dc0:	f040 8551 	bne.w	2866 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x866>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
    1dc4:	9b54      	ldr	r3, [sp, #336]	; 0x150
    1dc6:	6881      	ldr	r1, [r0, #8]
    1dc8:	685a      	ldr	r2, [r3, #4]
    static size_t calculate_spectral_buffer_size(
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
        if (rms) count++;
        count += (peaks_count * 2);
    1dca:	2301      	movs	r3, #1
    1dcc:	980a      	ldr	r0, [sp, #40]	; 0x28
    1dce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
        if (spectral_edges_count > 0) {
    1dd2:	b10a      	cbz	r2, 1dd8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x50>
            count += (spectral_edges_count - 1);
    1dd4:	3a01      	subs	r2, #1
    1dd6:	4413      	add	r3, r2
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
    1dd8:	4299      	cmp	r1, r3
    1dda:	f040 8544 	bne.w	2866 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x866>
        if (edges_matrix_in->cols != 1) {
    1dde:	9b54      	ldr	r3, [sp, #336]	; 0x150
    1de0:	689a      	ldr	r2, [r3, #8]
    1de2:	2a01      	cmp	r2, #1
    1de4:	f040 853f 	bne.w	2866 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x866>
        EI_DSP_MATRIX(mean_matrix, axes, 1);
    1de8:	2300      	movs	r3, #0
    1dea:	ee1a 1a90 	vmov	r1, s21
    1dee:	a818      	add	r0, sp, #96	; 0x60
    1df0:	f011 f946 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    1df4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1df6:	2b00      	cmp	r3, #0
    1df8:	f000 8531 	beq.w	285e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x85e>
        ret = numpy::mean(input_matrix, &mean_matrix);
    1dfc:	4658      	mov	r0, fp
    1dfe:	a918      	add	r1, sp, #96	; 0x60
    1e00:	f007 fc1a 	bl	9638 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
    1e04:	b150      	cbz	r0, 1e1c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x94>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1e06:	f8df a4dc 	ldr.w	sl, [pc, #1244]	; 22e4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e4>
        EI_DSP_MATRIX(mean_matrix, axes, 1);
    1e0a:	a818      	add	r0, sp, #96	; 0x60
    1e0c:	f010 ffad 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    }
    1e10:	4650      	mov	r0, sl
    1e12:	b03d      	add	sp, #244	; 0xf4
    1e14:	ecbd 8b0c 	vpop	{d8-d13}
    1e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = numpy::subtract(input_matrix, &mean_matrix);
    1e1c:	4658      	mov	r0, fp
    1e1e:	a918      	add	r1, sp, #96	; 0x60
    1e20:	f007 fbd0 	bl	95c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
    1e24:	4682      	mov	sl, r0
    1e26:	2800      	cmp	r0, #0
    1e28:	d1ed      	bne.n	1e06 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x7e>
        if (filter_type == filter_lowpass) {
    1e2a:	2c01      	cmp	r4, #1
    1e2c:	f040 8177 	bne.w	211e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11e>
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
        int n_steps = filter_order / 2;
    1e30:	9b06      	ldr	r3, [sp, #24]
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
        for (size_t row = 0; row < matrix->rows; row++) {
    1e32:	9004      	str	r0, [sp, #16]
    1e34:	ea4f 0963 	mov.w	r9, r3, asr #1
    1e38:	f8db 3004 	ldr.w	r3, [fp, #4]
    1e3c:	9a04      	ldr	r2, [sp, #16]
    1e3e:	4293      	cmp	r3, r2
    1e40:	f240 82f1 	bls.w	2426 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x426>
            filters::butterworth_lowpass(
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
    1e44:	f8db 3000 	ldr.w	r3, [fp]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
    1e48:	ee1c 0a10 	vmov	r0, s24
    1e4c:	930b      	str	r3, [sp, #44]	; 0x2c
    1e4e:	f8db 3008 	ldr.w	r3, [fp, #8]
        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
            A[ix] = a2 / sampling_freq;
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
    1e52:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    1e56:	930c      	str	r3, [sp, #48]	; 0x30
    1e58:	4613      	mov	r3, r2
    1e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e5c:	4353      	muls	r3, r2
    1e5e:	930d      	str	r3, [sp, #52]	; 0x34
        float a = tan(M_PI * cutoff_freq / sampling_freq);
    1e60:	f7fe fade 	bl	420 <__aeabi_f2d>
    1e64:	f20f 4370 	addw	r3, pc, #1136	; 0x470
    1e68:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e6c:	f7fe fb30 	bl	4d0 <__aeabi_dmul>
    1e70:	4604      	mov	r4, r0
    1e72:	ee18 0a90 	vmov	r0, s17
    1e76:	460d      	mov	r5, r1
    1e78:	f7fe fad2 	bl	420 <__aeabi_f2d>
    1e7c:	460b      	mov	r3, r1
    1e7e:	4602      	mov	r2, r0
    1e80:	4629      	mov	r1, r5
    1e82:	4620      	mov	r0, r4
    1e84:	f7fe fc4e 	bl	724 <__aeabi_ddiv>
    1e88:	ec41 0b10 	vmov	d0, r0, r1
    1e8c:	f001 fac4 	bl	3418 <tan>
    1e90:	ec51 0b10 	vmov	r0, r1, d0
    1e94:	f7fe fdb6 	bl	a04 <__aeabi_d2f>
    1e98:	ee09 0a90 	vmov	s19, r0
        float a2 = pow(a, 2);
    1e9c:	2002      	movs	r0, #2
    1e9e:	eeb0 0a69 	vmov.f32	s0, s19
    1ea2:	f011 f921 	bl	130e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
    1ea6:	ec51 0b10 	vmov	r0, r1, d0
    1eaa:	f7fe fdab 	bl	a04 <__aeabi_d2f>
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
    1eae:	2104      	movs	r1, #4
        float a2 = pow(a, 2);
    1eb0:	ee08 0a10 	vmov	s16, r0
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
    1eb4:	4648      	mov	r0, r9
    1eb6:	f011 fcdc 	bl	13872 <_Z9ei_callocjj>
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
    1eba:	2104      	movs	r1, #4
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
    1ebc:	9007      	str	r0, [sp, #28]
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
    1ebe:	4648      	mov	r0, r9
    1ec0:	f011 fcd7 	bl	13872 <_Z9ei_callocjj>
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
    1ec4:	2104      	movs	r1, #4
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
    1ec6:	9008      	str	r0, [sp, #32]
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
    1ec8:	4648      	mov	r0, r9
    1eca:	f011 fcd2 	bl	13872 <_Z9ei_callocjj>
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
    1ece:	2104      	movs	r1, #4
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
    1ed0:	9009      	str	r0, [sp, #36]	; 0x24
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
    1ed2:	4648      	mov	r0, r9
    1ed4:	f011 fccd 	bl	13872 <_Z9ei_callocjj>
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
    1ed8:	2104      	movs	r1, #4
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
    1eda:	900e      	str	r0, [sp, #56]	; 0x38
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
    1edc:	4648      	mov	r0, r9
    1ede:	f011 fcc8 	bl	13872 <_Z9ei_callocjj>
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
    1ee2:	2104      	movs	r1, #4
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
    1ee4:	900f      	str	r0, [sp, #60]	; 0x3c
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
    1ee6:	4648      	mov	r0, r9
    1ee8:	f011 fcc3 	bl	13872 <_Z9ei_callocjj>
    1eec:	e9dd 8508 	ldrd	r8, r5, [sp, #32]
        for(int ix = 0; ix < n_steps; ix++) {
    1ef0:	2400      	movs	r4, #0
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
    1ef2:	9b07      	ldr	r3, [sp, #28]
    1ef4:	9010      	str	r0, [sp, #64]	; 0x40
    1ef6:	9311      	str	r3, [sp, #68]	; 0x44
        for(int ix = 0; ix < n_steps; ix++) {
    1ef8:	45a1      	cmp	r9, r4
    1efa:	dc71      	bgt.n	1fe0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x258>
    1efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1efe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1f00:	eb03 0782 	add.w	r7, r3, r2, lsl #2
    1f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f06:	4413      	add	r3, r2
    1f08:	461e      	mov	r6, r3
    1f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f0c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    1f10:	9311      	str	r3, [sp, #68]	; 0x44
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
    1f12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1f14:	42bb      	cmp	r3, r7
    1f16:	f000 80ec 	beq.w	20f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf2>
            dest[sx] = src[sx];

            for (int i = 0; i < n_steps; i++) {
    1f1a:	e9dd 450f 	ldrd	r4, r5, [sp, #60]	; 0x3c
    1f1e:	2600      	movs	r6, #0
        for (size_t sx = 0; sx < size; sx++) {
    1f20:	9b07      	ldr	r3, [sp, #28]
    1f22:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    1f26:	930c      	str	r3, [sp, #48]	; 0x30
    1f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f2a:	930b      	str	r3, [sp, #44]	; 0x2c
    1f2c:	9b08      	ldr	r3, [sp, #32]
    1f2e:	930d      	str	r3, [sp, #52]	; 0x34
            for (int i = 0; i < n_steps; i++) {
    1f30:	45b1      	cmp	r9, r6
    1f32:	f340 80dc 	ble.w	20ee <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xee>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
    1f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f38:	edd5 6a00 	vldr	s13, [r5]
    1f3c:	ecb3 7a01 	vldmia	r3!, {s14}
    1f40:	930d      	str	r3, [sp, #52]	; 0x34
    1f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f44:	edd4 7a00 	vldr	s15, [r4]
    1f48:	ecb3 8a01 	vldmia	r3!, {s16}
    1f4c:	ee28 8a26 	vmul.f32	s16, s16, s13
    1f50:	eea7 8a27 	vfma.f32	s16, s14, s15
    1f54:	edd7 7a00 	vldr	s15, [r7]
    1f58:	ee38 8a27 	vadd.f32	s16, s16, s15
    1f5c:	ed88 8a00 	vstr	s16, [r8]
    1f60:	930b      	str	r3, [sp, #44]	; 0x2c
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
    1f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f64:	f854 0b04 	ldr.w	r0, [r4], #4
    1f68:	ecf3 7a01 	vldmia	r3!, {s15}
    1f6c:	eef0 9a67 	vmov.f32	s19, s15
    1f70:	930c      	str	r3, [sp, #48]	; 0x30
    1f72:	f7fe fa55 	bl	420 <__aeabi_f2d>
    1f76:	4602      	mov	r2, r0
    1f78:	460b      	mov	r3, r1
    1f7a:	f7fe f8f3 	bl	164 <__adddf3>
    1f7e:	ec41 0b1b 	vmov	d11, r0, r1
    1f82:	ee18 0a10 	vmov	r0, s16
    1f86:	f7fe fa4b 	bl	420 <__aeabi_f2d>
    1f8a:	4602      	mov	r2, r0
    1f8c:	460b      	mov	r3, r1
    1f8e:	ec51 0b1b 	vmov	r0, r1, d11
    1f92:	f7fe f8e7 	bl	164 <__adddf3>
    1f96:	ec41 0b1b 	vmov	d11, r0, r1
    1f9a:	f855 0b04 	ldr.w	r0, [r5], #4
    1f9e:	f7fe fa3f 	bl	420 <__aeabi_f2d>
    1fa2:	4602      	mov	r2, r0
    1fa4:	460b      	mov	r3, r1
    1fa6:	ec51 0b1b 	vmov	r0, r1, d11
    1faa:	f7fe f8db 	bl	164 <__adddf3>
    1fae:	ec41 0b1b 	vmov	d11, r0, r1
    1fb2:	ee19 0a90 	vmov	r0, s19
    1fb6:	f7fe fa33 	bl	420 <__aeabi_f2d>
    1fba:	460b      	mov	r3, r1
    1fbc:	4602      	mov	r2, r0
    1fbe:	ec51 0b1b 	vmov	r0, r1, d11
    1fc2:	f7fe fa85 	bl	4d0 <__aeabi_dmul>
    1fc6:	f7fe fd1d 	bl	a04 <__aeabi_d2f>
    1fca:	6038      	str	r0, [r7, #0]
                w2[i] = w1[i];
    1fcc:	f854 3c04 	ldr.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
    1fd0:	3601      	adds	r6, #1
                w2[i] = w1[i];
    1fd2:	f845 3c04 	str.w	r3, [r5, #-4]
                w1[i] = w0[i];
    1fd6:	f858 3b04 	ldr.w	r3, [r8], #4
    1fda:	f844 3c04 	str.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
    1fde:	e7a7      	b.n	1f30 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1a8>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
    1fe0:	4620      	mov	r0, r4
    1fe2:	f7fe fa0b 	bl	3fc <__aeabi_i2d>
    1fe6:	4602      	mov	r2, r0
    1fe8:	460b      	mov	r3, r1
    1fea:	f7fe f8bb 	bl	164 <__adddf3>
    1fee:	2200      	movs	r2, #0
    1ff0:	4bbb      	ldr	r3, [pc, #748]	; (22e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e0>)
    1ff2:	f7fe f8b7 	bl	164 <__adddf3>
    1ff6:	a3b8      	add	r3, pc, #736	; (adr r3, 22d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2d8>)
    1ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ffc:	f7fe fa68 	bl	4d0 <__aeabi_dmul>
    2000:	4606      	mov	r6, r0
    2002:	9806      	ldr	r0, [sp, #24]
    2004:	460f      	mov	r7, r1
    2006:	f7fe f9f9 	bl	3fc <__aeabi_i2d>
    200a:	4602      	mov	r2, r0
    200c:	460b      	mov	r3, r1
    200e:	f7fe f8a9 	bl	164 <__adddf3>
    2012:	4602      	mov	r2, r0
    2014:	460b      	mov	r3, r1
    2016:	4630      	mov	r0, r6
    2018:	4639      	mov	r1, r7
    201a:	f7fe fb83 	bl	724 <__aeabi_ddiv>
    201e:	ec41 0b10 	vmov	d0, r0, r1
    2022:	f001 f9a1 	bl	3368 <sin>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
    2026:	ee18 0a10 	vmov	r0, s16
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
    202a:	ed8d 0b14 	vstr	d0, [sp, #80]	; 0x50
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
    202e:	f7fe f9f7 	bl	420 <__aeabi_f2d>
    2032:	ec41 0b1b 	vmov	d11, r0, r1
    2036:	ee19 0a90 	vmov	r0, s19
    203a:	f7fe f9f1 	bl	420 <__aeabi_f2d>
    203e:	4602      	mov	r2, r0
    2040:	460b      	mov	r3, r1
    2042:	f7fe f88f 	bl	164 <__adddf3>
    2046:	4606      	mov	r6, r0
    2048:	460f      	mov	r7, r1
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
    204a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    204e:	f7fe fcd9 	bl	a04 <__aeabi_d2f>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
    2052:	f7fe f9e5 	bl	420 <__aeabi_f2d>
    2056:	4602      	mov	r2, r0
    2058:	460b      	mov	r3, r1
    205a:	4630      	mov	r0, r6
    205c:	4639      	mov	r1, r7
    205e:	f7fe fa37 	bl	4d0 <__aeabi_dmul>
    2062:	4602      	mov	r2, r0
    2064:	460b      	mov	r3, r1
    2066:	ec41 0b1d 	vmov	d13, r0, r1
    206a:	ec51 0b1b 	vmov	r0, r1, d11
    206e:	f7fe f879 	bl	164 <__adddf3>
    2072:	2200      	movs	r2, #0
    2074:	4b9a      	ldr	r3, [pc, #616]	; (22e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e0>)
    2076:	f7fe f875 	bl	164 <__adddf3>
    207a:	f7fe fcc3 	bl	a04 <__aeabi_d2f>
    207e:	ee07 0a10 	vmov	s14, r0
            A[ix] = a2 / sampling_freq;
    2082:	eec8 7a07 	vdiv.f32	s15, s16, s14
    2086:	9b11      	ldr	r3, [sp, #68]	; 0x44
        for(int ix = 0; ix < n_steps; ix++) {
    2088:	3401      	adds	r4, #1
            A[ix] = a2 / sampling_freq;
    208a:	ece3 7a01 	vstmia	r3!, {s15}
    208e:	9311      	str	r3, [sp, #68]	; 0x44
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
    2090:	f7fe f9c6 	bl	420 <__aeabi_f2d>
    2094:	ee7a 7a48 	vsub.f32	s15, s20, s16
    2098:	4606      	mov	r6, r0
    209a:	ee17 0a90 	vmov	r0, s15
    209e:	460f      	mov	r7, r1
    20a0:	f7fe f9be 	bl	420 <__aeabi_f2d>
    20a4:	4602      	mov	r2, r0
    20a6:	460b      	mov	r3, r1
    20a8:	f7fe f85c 	bl	164 <__adddf3>
    20ac:	4632      	mov	r2, r6
    20ae:	463b      	mov	r3, r7
    20b0:	f7fe fb38 	bl	724 <__aeabi_ddiv>
    20b4:	f7fe fca6 	bl	a04 <__aeabi_d2f>
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
    20b8:	ec53 2b1d 	vmov	r2, r3, d13
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
    20bc:	f848 0b04 	str.w	r0, [r8], #4
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
    20c0:	ec51 0b1b 	vmov	r0, r1, d11
    20c4:	f7fe f84c 	bl	160 <__aeabi_dsub>
    20c8:	2200      	movs	r2, #0
    20ca:	4b85      	ldr	r3, [pc, #532]	; (22e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e0>)
    20cc:	f7fe f84a 	bl	164 <__adddf3>
    20d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    20d4:	9313      	str	r3, [sp, #76]	; 0x4c
    20d6:	9012      	str	r0, [sp, #72]	; 0x48
    20d8:	4632      	mov	r2, r6
    20da:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    20de:	463b      	mov	r3, r7
    20e0:	f7fe fb20 	bl	724 <__aeabi_ddiv>
    20e4:	f7fe fc8e 	bl	a04 <__aeabi_d2f>
    20e8:	f845 0b04 	str.w	r0, [r5], #4
        for(int ix = 0; ix < n_steps; ix++) {
    20ec:	e704      	b.n	1ef8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x170>
        for (size_t sx = 0; sx < size; sx++) {
    20ee:	3704      	adds	r7, #4
    20f0:	e70f      	b.n	1f12 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x18a>
            }
        }

        ei_free(A);
    20f2:	9807      	ldr	r0, [sp, #28]
    20f4:	f011 fbbf 	bl	13876 <_Z7ei_freePv>
        ei_free(d1);
    20f8:	9808      	ldr	r0, [sp, #32]
    20fa:	f011 fbbc 	bl	13876 <_Z7ei_freePv>
        ei_free(d2);
    20fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    2100:	f011 fbb9 	bl	13876 <_Z7ei_freePv>
        ei_free(w0);
    2104:	980e      	ldr	r0, [sp, #56]	; 0x38
    2106:	f011 fbb6 	bl	13876 <_Z7ei_freePv>
        ei_free(w1);
    210a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    210c:	f011 fbb3 	bl	13876 <_Z7ei_freePv>
        ei_free(w2);
    2110:	9810      	ldr	r0, [sp, #64]	; 0x40
    2112:	f011 fbb0 	bl	13876 <_Z7ei_freePv>
        for (size_t row = 0; row < matrix->rows; row++) {
    2116:	9b04      	ldr	r3, [sp, #16]
    2118:	3301      	adds	r3, #1
    211a:	9304      	str	r3, [sp, #16]
    211c:	e68c      	b.n	1e38 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb0>
        else if (filter_type == filter_highpass) {
    211e:	2c02      	cmp	r4, #2
    2120:	f040 8181 	bne.w	2426 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x426>
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
        int n_steps = filter_order / 2;
    2124:	9b06      	ldr	r3, [sp, #24]
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
        for (size_t row = 0; row < matrix->rows; row++) {
    2126:	9004      	str	r0, [sp, #16]
    2128:	ea4f 0963 	mov.w	r9, r3, asr #1
    212c:	f8db 3004 	ldr.w	r3, [fp, #4]
    2130:	9a04      	ldr	r2, [sp, #16]
    2132:	4293      	cmp	r3, r2
    2134:	f240 8177 	bls.w	2426 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x426>
            filters::butterworth_highpass(
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
    2138:	f8db 3000 	ldr.w	r3, [fp]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
    213c:	ee1c 0a10 	vmov	r0, s24
    2140:	930b      	str	r3, [sp, #44]	; 0x2c
    2142:	f8db 3008 	ldr.w	r3, [fp, #8]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
            A[ix] = 1.0f / sampling_freq;
    2146:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    214a:	930c      	str	r3, [sp, #48]	; 0x30
    214c:	4613      	mov	r3, r2
    214e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2150:	4353      	muls	r3, r2
    2152:	930d      	str	r3, [sp, #52]	; 0x34
        float a = tan(M_PI * cutoff_freq / sampling_freq);
    2154:	f7fe f964 	bl	420 <__aeabi_f2d>
    2158:	a35f      	add	r3, pc, #380	; (adr r3, 22d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2d8>)
    215a:	e9d3 2300 	ldrd	r2, r3, [r3]
    215e:	f7fe f9b7 	bl	4d0 <__aeabi_dmul>
    2162:	4604      	mov	r4, r0
    2164:	ee18 0a90 	vmov	r0, s17
    2168:	460d      	mov	r5, r1
    216a:	f7fe f959 	bl	420 <__aeabi_f2d>
    216e:	460b      	mov	r3, r1
    2170:	4602      	mov	r2, r0
    2172:	4629      	mov	r1, r5
    2174:	4620      	mov	r0, r4
    2176:	f7fe fad5 	bl	724 <__aeabi_ddiv>
    217a:	ec41 0b10 	vmov	d0, r0, r1
    217e:	f001 f94b 	bl	3418 <tan>
    2182:	ec51 0b10 	vmov	r0, r1, d0
    2186:	f7fe fc3d 	bl	a04 <__aeabi_d2f>
    218a:	ee09 0a90 	vmov	s19, r0
        float a2 = pow(a, 2);
    218e:	2002      	movs	r0, #2
    2190:	eeb0 0a69 	vmov.f32	s0, s19
    2194:	f010 ffa8 	bl	130e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
    2198:	ec51 0b10 	vmov	r0, r1, d0
    219c:	f7fe fc32 	bl	a04 <__aeabi_d2f>
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
    21a0:	2104      	movs	r1, #4
        float a2 = pow(a, 2);
    21a2:	ee08 0a10 	vmov	s16, r0
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
    21a6:	4648      	mov	r0, r9
    21a8:	f011 fb63 	bl	13872 <_Z9ei_callocjj>
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
    21ac:	2104      	movs	r1, #4
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
    21ae:	9007      	str	r0, [sp, #28]
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
    21b0:	4648      	mov	r0, r9
    21b2:	f011 fb5e 	bl	13872 <_Z9ei_callocjj>
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
    21b6:	2104      	movs	r1, #4
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
    21b8:	9008      	str	r0, [sp, #32]
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
    21ba:	4648      	mov	r0, r9
    21bc:	f011 fb59 	bl	13872 <_Z9ei_callocjj>
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
    21c0:	2104      	movs	r1, #4
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
    21c2:	9009      	str	r0, [sp, #36]	; 0x24
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
    21c4:	4648      	mov	r0, r9
    21c6:	f011 fb54 	bl	13872 <_Z9ei_callocjj>
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
    21ca:	2104      	movs	r1, #4
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
    21cc:	900e      	str	r0, [sp, #56]	; 0x38
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
    21ce:	4648      	mov	r0, r9
    21d0:	f011 fb4f 	bl	13872 <_Z9ei_callocjj>
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
    21d4:	2104      	movs	r1, #4
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
    21d6:	900f      	str	r0, [sp, #60]	; 0x3c
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
    21d8:	4648      	mov	r0, r9
    21da:	f011 fb4a 	bl	13872 <_Z9ei_callocjj>
    21de:	e9dd 8508 	ldrd	r8, r5, [sp, #32]
        for (int ix = 0; ix < n_steps; ix++) {
    21e2:	2400      	movs	r4, #0
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
    21e4:	9b07      	ldr	r3, [sp, #28]
    21e6:	9010      	str	r0, [sp, #64]	; 0x40
    21e8:	9311      	str	r3, [sp, #68]	; 0x44
        for (int ix = 0; ix < n_steps; ix++) {
    21ea:	45a1      	cmp	r9, r4
    21ec:	dc7c      	bgt.n	22e8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e8>
    21ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    21f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    21f2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
    21f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    21f8:	4413      	add	r3, r2
    21fa:	461e      	mov	r6, r3
    21fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    21fe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    2202:	9311      	str	r3, [sp, #68]	; 0x44
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
    2204:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2206:	429f      	cmp	r7, r3
    2208:	f000 80f7 	beq.w	23fa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3fa>
            dest[sx] = src[sx];

            for (int i = 0; i < n_steps; i++) {
    220c:	e9dd 450f 	ldrd	r4, r5, [sp, #60]	; 0x3c
    2210:	2600      	movs	r6, #0
        for (size_t sx = 0; sx < size; sx++) {
    2212:	9b07      	ldr	r3, [sp, #28]
    2214:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    2218:	930d      	str	r3, [sp, #52]	; 0x34
    221a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    221c:	930c      	str	r3, [sp, #48]	; 0x30
    221e:	9b08      	ldr	r3, [sp, #32]
    2220:	930b      	str	r3, [sp, #44]	; 0x2c
            for (int i = 0; i < n_steps; i++) {
    2222:	45b1      	cmp	r9, r6
    2224:	f340 80e7 	ble.w	23f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
    2228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    222a:	ed95 6a00 	vldr	s12, [r5]
    222e:	ecf3 6a01 	vldmia	r3!, {s13}
    2232:	930b      	str	r3, [sp, #44]	; 0x2c
    2234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2236:	ed94 7a00 	vldr	s14, [r4]
    223a:	ecf3 7a01 	vldmia	r3!, {s15}
    223e:	ee67 7a86 	vmul.f32	s15, s15, s12
    2242:	eee6 7a87 	vfma.f32	s15, s13, s14
    2246:	ed97 7a00 	vldr	s14, [r7]
    224a:	ee77 7a87 	vadd.f32	s15, s15, s14
    224e:	edc8 7a00 	vstr	s15, [r8]
    2252:	930c      	str	r3, [sp, #48]	; 0x30
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
    2254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2256:	ee17 0a90 	vmov	r0, s15
    225a:	ecb3 7a01 	vldmia	r3!, {s14}
    225e:	eeb0 8a47 	vmov.f32	s16, s14
    2262:	930d      	str	r3, [sp, #52]	; 0x34
    2264:	f7fe f8dc 	bl	420 <__aeabi_f2d>
    2268:	ec41 0b1b 	vmov	d11, r0, r1
    226c:	f854 0b04 	ldr.w	r0, [r4], #4
    2270:	f7fe f8d6 	bl	420 <__aeabi_f2d>
    2274:	4602      	mov	r2, r0
    2276:	460b      	mov	r3, r1
    2278:	f7fd ff74 	bl	164 <__adddf3>
    227c:	4602      	mov	r2, r0
    227e:	460b      	mov	r3, r1
    2280:	ec51 0b1b 	vmov	r0, r1, d11
    2284:	f7fd ff6c 	bl	160 <__aeabi_dsub>
    2288:	ec41 0b1b 	vmov	d11, r0, r1
    228c:	f855 0b04 	ldr.w	r0, [r5], #4
    2290:	f7fe f8c6 	bl	420 <__aeabi_f2d>
    2294:	4602      	mov	r2, r0
    2296:	460b      	mov	r3, r1
    2298:	ec51 0b1b 	vmov	r0, r1, d11
    229c:	f7fd ff62 	bl	164 <__adddf3>
    22a0:	ec41 0b1b 	vmov	d11, r0, r1
    22a4:	ee18 0a10 	vmov	r0, s16
    22a8:	f7fe f8ba 	bl	420 <__aeabi_f2d>
    22ac:	460b      	mov	r3, r1
    22ae:	4602      	mov	r2, r0
    22b0:	ec51 0b1b 	vmov	r0, r1, d11
    22b4:	f7fe f90c 	bl	4d0 <__aeabi_dmul>
    22b8:	f7fe fba4 	bl	a04 <__aeabi_d2f>
    22bc:	6038      	str	r0, [r7, #0]
                w2[i] = w1[i];
    22be:	f854 3c04 	ldr.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
    22c2:	3601      	adds	r6, #1
                w2[i] = w1[i];
    22c4:	f845 3c04 	str.w	r3, [r5, #-4]
                w1[i] = w0[i];
    22c8:	f858 3b04 	ldr.w	r3, [r8], #4
    22cc:	f844 3c04 	str.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
    22d0:	e7a7      	b.n	2222 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x222>
    22d2:	bf00      	nop
    22d4:	f3af 8000 	nop.w
    22d8:	54442d18 	.word	0x54442d18
    22dc:	400921fb 	.word	0x400921fb
    22e0:	3ff00000 	.word	0x3ff00000
    22e4:	fffffc14 	.word	0xfffffc14
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
    22e8:	4620      	mov	r0, r4
    22ea:	f7fe f887 	bl	3fc <__aeabi_i2d>
    22ee:	4602      	mov	r2, r0
    22f0:	460b      	mov	r3, r1
    22f2:	f7fd ff37 	bl	164 <__adddf3>
    22f6:	2200      	movs	r2, #0
    22f8:	4bc9      	ldr	r3, [pc, #804]	; (2620 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x620>)
    22fa:	f7fd ff33 	bl	164 <__adddf3>
    22fe:	a3c6      	add	r3, pc, #792	; (adr r3, 2618 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x618>)
    2300:	e9d3 2300 	ldrd	r2, r3, [r3]
    2304:	f7fe f8e4 	bl	4d0 <__aeabi_dmul>
    2308:	4606      	mov	r6, r0
    230a:	9806      	ldr	r0, [sp, #24]
    230c:	460f      	mov	r7, r1
    230e:	f7fe f875 	bl	3fc <__aeabi_i2d>
    2312:	4602      	mov	r2, r0
    2314:	460b      	mov	r3, r1
    2316:	f7fd ff25 	bl	164 <__adddf3>
    231a:	4602      	mov	r2, r0
    231c:	460b      	mov	r3, r1
    231e:	4630      	mov	r0, r6
    2320:	4639      	mov	r1, r7
    2322:	f7fe f9ff 	bl	724 <__aeabi_ddiv>
    2326:	ec41 0b10 	vmov	d0, r0, r1
    232a:	f001 f81d 	bl	3368 <sin>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
    232e:	ee18 0a10 	vmov	r0, s16
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
    2332:	ed8d 0b12 	vstr	d0, [sp, #72]	; 0x48
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
    2336:	f7fe f873 	bl	420 <__aeabi_f2d>
    233a:	ec41 0b1b 	vmov	d11, r0, r1
    233e:	ee19 0a90 	vmov	r0, s19
    2342:	f7fe f86d 	bl	420 <__aeabi_f2d>
    2346:	4602      	mov	r2, r0
    2348:	460b      	mov	r3, r1
    234a:	f7fd ff0b 	bl	164 <__adddf3>
    234e:	4606      	mov	r6, r0
    2350:	460f      	mov	r7, r1
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
    2352:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    2356:	f7fe fb55 	bl	a04 <__aeabi_d2f>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
    235a:	f7fe f861 	bl	420 <__aeabi_f2d>
    235e:	4602      	mov	r2, r0
    2360:	460b      	mov	r3, r1
    2362:	4630      	mov	r0, r6
    2364:	4639      	mov	r1, r7
    2366:	f7fe f8b3 	bl	4d0 <__aeabi_dmul>
    236a:	4602      	mov	r2, r0
    236c:	460b      	mov	r3, r1
    236e:	ec41 0b1d 	vmov	d13, r0, r1
    2372:	ec51 0b1b 	vmov	r0, r1, d11
    2376:	f7fd fef5 	bl	164 <__adddf3>
    237a:	2200      	movs	r2, #0
    237c:	4ba8      	ldr	r3, [pc, #672]	; (2620 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x620>)
    237e:	f7fd fef1 	bl	164 <__adddf3>
    2382:	f7fe fb3f 	bl	a04 <__aeabi_d2f>
    2386:	ee07 0a10 	vmov	s14, r0
            A[ix] = 1.0f / sampling_freq;
    238a:	eeca 7a07 	vdiv.f32	s15, s20, s14
    238e:	9b11      	ldr	r3, [sp, #68]	; 0x44
        for (int ix = 0; ix < n_steps; ix++) {
    2390:	3401      	adds	r4, #1
            A[ix] = 1.0f / sampling_freq;
    2392:	ece3 7a01 	vstmia	r3!, {s15}
    2396:	9311      	str	r3, [sp, #68]	; 0x44
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
    2398:	f7fe f842 	bl	420 <__aeabi_f2d>
    239c:	ee7a 7a48 	vsub.f32	s15, s20, s16
    23a0:	4606      	mov	r6, r0
    23a2:	ee17 0a90 	vmov	r0, s15
    23a6:	460f      	mov	r7, r1
    23a8:	f7fe f83a 	bl	420 <__aeabi_f2d>
    23ac:	4602      	mov	r2, r0
    23ae:	460b      	mov	r3, r1
    23b0:	f7fd fed8 	bl	164 <__adddf3>
    23b4:	4632      	mov	r2, r6
    23b6:	463b      	mov	r3, r7
    23b8:	f7fe f9b4 	bl	724 <__aeabi_ddiv>
    23bc:	f7fe fb22 	bl	a04 <__aeabi_d2f>
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
    23c0:	ec53 2b1d 	vmov	r2, r3, d13
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
    23c4:	f848 0b04 	str.w	r0, [r8], #4
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
    23c8:	ec51 0b1b 	vmov	r0, r1, d11
    23cc:	f7fd fec8 	bl	160 <__aeabi_dsub>
    23d0:	2200      	movs	r2, #0
    23d2:	4b93      	ldr	r3, [pc, #588]	; (2620 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x620>)
    23d4:	f7fd fec6 	bl	164 <__adddf3>
    23d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    23dc:	9315      	str	r3, [sp, #84]	; 0x54
    23de:	9014      	str	r0, [sp, #80]	; 0x50
    23e0:	4632      	mov	r2, r6
    23e2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    23e6:	463b      	mov	r3, r7
    23e8:	f7fe f99c 	bl	724 <__aeabi_ddiv>
    23ec:	f7fe fb0a 	bl	a04 <__aeabi_d2f>
    23f0:	f845 0b04 	str.w	r0, [r5], #4
        for (int ix = 0; ix < n_steps; ix++) {
    23f4:	e6f9      	b.n	21ea <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1ea>
        for (size_t sx = 0; sx < size; sx++) {
    23f6:	3704      	adds	r7, #4
    23f8:	e704      	b.n	2204 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x204>
            }
        }

        ei_free(A);
    23fa:	9807      	ldr	r0, [sp, #28]
    23fc:	f011 fa3b 	bl	13876 <_Z7ei_freePv>
        ei_free(d1);
    2400:	9808      	ldr	r0, [sp, #32]
    2402:	f011 fa38 	bl	13876 <_Z7ei_freePv>
        ei_free(d2);
    2406:	9809      	ldr	r0, [sp, #36]	; 0x24
    2408:	f011 fa35 	bl	13876 <_Z7ei_freePv>
        ei_free(w0);
    240c:	980e      	ldr	r0, [sp, #56]	; 0x38
    240e:	f011 fa32 	bl	13876 <_Z7ei_freePv>
        ei_free(w1);
    2412:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2414:	f011 fa2f 	bl	13876 <_Z7ei_freePv>
        ei_free(w2);
    2418:	9810      	ldr	r0, [sp, #64]	; 0x40
    241a:	f011 fa2c 	bl	13876 <_Z7ei_freePv>
        for (size_t row = 0; row < matrix->rows; row++) {
    241e:	9b04      	ldr	r3, [sp, #16]
    2420:	3301      	adds	r3, #1
    2422:	9304      	str	r3, [sp, #16]
    2424:	e682      	b.n	212c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12c>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
    2426:	2300      	movs	r3, #0
    2428:	2201      	movs	r2, #1
    242a:	ee1a 1a90 	vmov	r1, s21
    242e:	a81c      	add	r0, sp, #112	; 0x70
    2430:	f010 fe26 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    2434:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2436:	2b00      	cmp	r3, #0
    2438:	f000 820b 	beq.w	2852 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x852>
        if (matrix->rows != output_matrix->rows) {
    243c:	f8db 2004 	ldr.w	r2, [fp, #4]
    2440:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2442:	429a      	cmp	r2, r3
    2444:	f040 8208 	bne.w	2858 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x858>
        if (output_matrix->cols != 1) {
    2448:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    244a:	2b01      	cmp	r3, #1
    244c:	f040 8204 	bne.w	2858 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x858>
        for (size_t row = 0; row < matrix->rows; row++) {
    2450:	2400      	movs	r4, #0
    2452:	f8db 3004 	ldr.w	r3, [fp, #4]
    2456:	42a3      	cmp	r3, r4
    2458:	d911      	bls.n	247e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x47e>
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
    245a:	f8db 1008 	ldr.w	r1, [fp, #8]
    245e:	f8db 3000 	ldr.w	r3, [fp]
    2462:	fb01 f004 	mul.w	r0, r1, r4
    2466:	aa38      	add	r2, sp, #224	; 0xe0
    2468:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    246c:	f00a fb4e 	bl	cb0c <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
    2470:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2472:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    2474:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2478:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
    247a:	3401      	adds	r4, #1
    247c:	e7e9      	b.n	2452 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x452>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
    247e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2480:	2300      	movs	r3, #0
    2482:	ee1a 1a90 	vmov	r1, s21
    2486:	0052      	lsls	r2, r2, #1
    2488:	a820      	add	r0, sp, #128	; 0x80
    248a:	f010 fdf9 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    248e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2490:	2b00      	cmp	r3, #0
    2492:	f000 81db 	beq.w	284c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84c>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
    2496:	9b03      	ldr	r3, [sp, #12]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    2498:	2500      	movs	r5, #0
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
    249a:	085e      	lsrs	r6, r3, #1

        int N = static_cast<int>(fft_length);
        float T = 1.0f / sampling_freq;

        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
    249c:	105b      	asrs	r3, r3, #1
    249e:	ee0a 3a10 	vmov	s20, r3
    24a2:	ed9f 8a60 	vldr	s16, [pc, #384]	; 2624 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x624>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
    24a6:	f8df 8180 	ldr.w	r8, [pc, #384]	; 2628 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x628>
    24aa:	3601      	adds	r6, #1
        for (size_t row = 0; row < input_matrix->rows; row++) {
    24ac:	f8db 3004 	ldr.w	r3, [fp, #4]
    24b0:	42ab      	cmp	r3, r5
    24b2:	f240 81b2 	bls.w	281a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x81a>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
    24b6:	f8db 2008 	ldr.w	r2, [fp, #8]
    24ba:	f8db 3000 	ldr.w	r3, [fp]
    24be:	fb05 f102 	mul.w	r1, r5, r2
    24c2:	a824      	add	r0, sp, #144	; 0x90
    24c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    24c8:	2101      	movs	r1, #1
    24ca:	f010 fdd9 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    24ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    24d0:	2b00      	cmp	r3, #0
    24d2:	f000 81b8 	beq.w	2846 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x846>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
    24d6:	4632      	mov	r2, r6
    24d8:	2300      	movs	r3, #0
    24da:	2101      	movs	r1, #1
    24dc:	a828      	add	r0, sp, #160	; 0xa0
    24de:	f010 fdcf 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    24e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    24e4:	2a00      	cmp	r2, #0
    24e6:	f000 81a8 	beq.w	283a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x83a>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
    24ea:	9b03      	ldr	r3, [sp, #12]
    24ec:	9926      	ldr	r1, [sp, #152]	; 0x98
    24ee:	9300      	str	r3, [sp, #0]
    24f0:	9824      	ldr	r0, [sp, #144]	; 0x90
    24f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    24f4:	f7ff fba4 	bl	1c40 <_ZN2ei5numpy4rfftEPKfjPfjj>
            if (ret != EIDSP_OK) {
    24f8:	2800      	cmp	r0, #0
    24fa:	f040 81a1 	bne.w	2840 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x840>
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
    24fe:	eddd 7a03 	vldr	s15, [sp, #12]
    2502:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    2506:	eef8 7a67 	vcvt.f32.u32	s15, s15
        if (scale == 1.0f) return EIDSP_OK;
    250a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    250e:	ee87 0a27 	vdiv.f32	s0, s14, s15
    2512:	eeb4 0a69 	vcmp.f32	s0, s19
    2516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    251a:	d002      	beq.n	2522 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x522>
    251c:	a828      	add	r0, sp, #160	; 0xa0
    251e:	f006 fe89 	bl	9234 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
    2522:	2300      	movs	r3, #0
    2524:	2202      	movs	r2, #2
    2526:	990a      	ldr	r1, [sp, #40]	; 0x28
    2528:	a82c      	add	r0, sp, #176	; 0xb0
    252a:	f010 fda9 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    252e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    2530:	2b00      	cmp	r3, #0
    2532:	f000 817f 	beq.w	2834 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x834>
        if (fft_matrix->rows != 1) {
    2536:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    2538:	2f01      	cmp	r7, #1
    253a:	d002      	beq.n	2542 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x542>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    253c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 262c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x62c>
    2540:	e162      	b.n	2808 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x808>
        if (output_matrix->cols != 2) {
    2542:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    2544:	2b02      	cmp	r3, #2
    2546:	d1f9      	bne.n	253c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x53c>
        if (output_matrix->rows == 0) {
    2548:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    254a:	2b00      	cmp	r3, #0
    254c:	f000 80cc 	beq.w	26e8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e8>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
    2550:	4639      	mov	r1, r7
    2552:	2300      	movs	r3, #0
    2554:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2556:	a834      	add	r0, sp, #208	; 0xd0
    2558:	f010 fd92 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    255c:	9934      	ldr	r1, [sp, #208]	; 0xd0
    255e:	2900      	cmp	r1, #0
    2560:	f000 8127 	beq.w	27b2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7b2>
        float T = 1.0f / sampling_freq;
    2564:	eec9 0aa8 	vdiv.f32	s1, s19, s17
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
    2568:	ee70 0aa0 	vadd.f32	s1, s1, s1
    256c:	ee1a 0a10 	vmov	r0, s20
    2570:	eec9 0aa0 	vdiv.f32	s1, s19, s1
    2574:	eeb0 0a48 	vmov.f32	s0, s16
    2578:	f007 f928 	bl	97cc <_ZN2ei5numpy8linspaceEffjPf>
        if (ret != EIDSP_OK) {
    257c:	4604      	mov	r4, r0
    257e:	2800      	cmp	r0, #0
    2580:	f040 80ac 	bne.w	26dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6dc>
            EIDSP_ERR(ret);
        }

        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
    2584:	4603      	mov	r3, r0
    2586:	200a      	movs	r0, #10
    2588:	992d      	ldr	r1, [sp, #180]	; 0xb4
    258a:	463a      	mov	r2, r7
    258c:	4341      	muls	r1, r0
    258e:	a838      	add	r0, sp, #224	; 0xe0
    2590:	f010 fd76 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    2594:	9838      	ldr	r0, [sp, #224]	; 0xe0
    2596:	2800      	cmp	r0, #0
    2598:	f000 8107 	beq.w	27aa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7aa>
        if (input_matrix->rows != 1) {
    259c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    259e:	2b01      	cmp	r3, #1
    25a0:	f040 8105 	bne.w	27ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7ae>
        if (output_matrix->cols != 1) {
    25a4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    25a6:	2a01      	cmp	r2, #1
    25a8:	f040 8101 	bne.w	27ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7ae>
        float prev = in[0];
    25ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
        uint16_t out_ix = 0;
    25ae:	4627      	mov	r7, r4
        float prev = in[0];
    25b0:	ecf3 7a01 	vldmia	r3!, {s15}
        for (size_t ix = 0; ix < in_size - 1; ix++) {
    25b4:	992a      	ldr	r1, [sp, #168]	; 0xa8
        size_t out_size = output_matrix->rows;
    25b6:	f8dd c0e4 	ldr.w	ip, [sp, #228]	; 0xe4
        for (size_t ix = 0; ix < in_size - 1; ix++) {
    25ba:	3901      	subs	r1, #1
        for (size_t ix = 1; ix < in_size - 1; ix++) {
    25bc:	4291      	cmp	r1, r2
    25be:	f240 8156 	bls.w	286e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x86e>
            if (in[ix] > prev && in[ix] > in[ix+1]) {
    25c2:	ed93 7a00 	vldr	s14, [r3]
    25c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    25ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25ce:	dd1e      	ble.n	260e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60e>
    25d0:	edd3 6a01 	vldr	s13, [r3, #4]
    25d4:	eeb4 7ae6 	vcmpe.f32	s14, s13
    25d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25dc:	dd17      	ble.n	260e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60e>
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
    25de:	ee77 7a67 	vsub.f32	s15, s14, s15
    25e2:	ee37 7a66 	vsub.f32	s14, s14, s13
    25e6:	ee77 7a87 	vadd.f32	s15, s15, s14
                if (height > threshold) {
    25ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    25ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25f2:	dd0c      	ble.n	260e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60e>
                    out[out_ix] = ix;
    25f4:	ee07 2a90 	vmov	s15, r2
    25f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    25fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
                    out_ix++;
    2600:	3701      	adds	r7, #1
    2602:	b2bf      	uxth	r7, r7
                    if (out_ix == out_size) break;
    2604:	45bc      	cmp	ip, r7
                    out[out_ix] = ix;
    2606:	edce 7a00 	vstr	s15, [lr]
                    if (out_ix == out_size) break;
    260a:	f000 8130 	beq.w	286e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x86e>
            prev = in[ix];
    260e:	ecf3 7a01 	vldmia	r3!, {s15}
        for (size_t ix = 1; ix < in_size - 1; ix++) {
    2612:	3201      	adds	r2, #1
    2614:	e7d2      	b.n	25bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5bc>
    2616:	bf00      	nop
    2618:	54442d18 	.word	0x54442d18
    261c:	400921fb 	.word	0x400921fb
    2620:	3ff00000 	.word	0x3ff00000
    2624:	00000000 	.word	0x00000000
    2628:	fffffc16 	.word	0xfffffc16
    262c:	fffffc14 	.word	0xfffffc14
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
    2630:	e9dd 0730 	ldrd	r0, r7, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
    2634:	42b8      	cmp	r0, r7
    2636:	d022      	beq.n	267e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x67e>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    2638:	eba7 0900 	sub.w	r9, r7, r0
    263c:	ea4f 02e9 	mov.w	r2, r9, asr #3

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
    2640:	fab2 f282 	clz	r2, r2
    2644:	f1c2 021f 	rsb	r2, r2, #31
	{
	  std::__introsort_loop(__first, __last,
    2648:	f04f 0300 	mov.w	r3, #0
    264c:	4639      	mov	r1, r7
    264e:	0052      	lsls	r2, r2, #1
    2650:	9004      	str	r0, [sp, #16]
    2652:	f010 fc6a 	bl	12f2a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
      if (__last - __first > int(_S_threshold))
    2656:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    265a:	9804      	ldr	r0, [sp, #16]
    265c:	dd0c      	ble.n	2678 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x678>
      { return __normal_iterator(_M_current + __n); }
    265e:	f100 0980 	add.w	r9, r0, #128	; 0x80
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
    2662:	4649      	mov	r1, r9
    2664:	f010 fc00 	bl	12e68 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
    2668:	454f      	cmp	r7, r9
    266a:	d008      	beq.n	267e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x67e>
	std::__unguarded_linear_insert(__i,
    266c:	4648      	mov	r0, r9
    266e:	f010 fbe1 	bl	12e34 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_.constprop.0>
      operator++() _GLIBCXX_NOEXCEPT
    2672:	f109 0908 	add.w	r9, r9, #8
	return *this;
    2676:	e7f7      	b.n	2668 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x668>
	std::__insertion_sort(__first, __last, __comp);
    2678:	4639      	mov	r1, r7
    267a:	f010 fbf5 	bl	12e68 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    267e:	e9dd 3730 	ldrd	r3, r7, [sp, #192]	; 0xc0
    2682:	1aff      	subs	r7, r7, r3
    2684:	10ff      	asrs	r7, r7, #3
        {
            return a.amplitude > b.amplitude;
        });

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
    2686:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2688:	42b9      	cmp	r1, r7
    268a:	d817      	bhi.n	26bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6bc>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
    268c:	9830      	ldr	r0, [sp, #192]	; 0xc0
            d.freq = 0;
            d.amplitude = 0;
            peaks.push_back(d);
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
    268e:	f04f 0c00 	mov.w	ip, #0
    2692:	4602      	mov	r2, r0
    2694:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
    2696:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    2698:	00bf      	lsls	r7, r7, #2
    269a:	3304      	adds	r3, #4
    269c:	4561      	cmp	r1, ip
    269e:	f102 0208 	add.w	r2, r2, #8
    26a2:	d015      	beq.n	26d0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6d0>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
    26a4:	f852 ec08 	ldr.w	lr, [r2, #-8]
        for (size_t row = 0; row < output_matrix->rows; row++) {
    26a8:	f10c 0c01 	add.w	ip, ip, #1
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
    26ac:	f843 ec04 	str.w	lr, [r3, #-4]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
    26b0:	f852 ec04 	ldr.w	lr, [r2, #-4]
    26b4:	f8c3 e000 	str.w	lr, [r3]
        for (size_t row = 0; row < output_matrix->rows; row++) {
    26b8:	443b      	add	r3, r7
    26ba:	e7ef      	b.n	269c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x69c>
            peaks.push_back(d);
    26bc:	a916      	add	r1, sp, #88	; 0x58
    26be:	a830      	add	r0, sp, #192	; 0xc0
            d.freq = 0;
    26c0:	ed8d 8a16 	vstr	s16, [sp, #88]	; 0x58
            d.amplitude = 0;
    26c4:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
    26c8:	3701      	adds	r7, #1
            peaks.push_back(d);
    26ca:	f010 fd88 	bl	131de <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
    26ce:	e7da      	b.n	2686 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x686>
	if (__p)
    26d0:	b108      	cbz	r0, 26d6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6d6>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
    26d2:	f012 fa1a 	bl	14b0a <_ZdlPv>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
    26d6:	a838      	add	r0, sp, #224	; 0xe0
    26d8:	f010 fb47 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
    26dc:	a834      	add	r0, sp, #208	; 0xd0
    26de:	f010 fb44 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            if (ret != EIDSP_OK) {
    26e2:	2c00      	cmp	r4, #0
    26e4:	f47f af2a 	bne.w	253c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x53c>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
    26e8:	2300      	movs	r3, #0
    26ea:	4632      	mov	r2, r6
    26ec:	2101      	movs	r1, #1
    26ee:	a830      	add	r0, sp, #192	; 0xc0
    26f0:	f010 fcc6 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    26f4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    26f6:	2b00      	cmp	r3, #0
    26f8:	f000 8099 	beq.w	282e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x82e>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
    26fc:	2300      	movs	r3, #0
    26fe:	4632      	mov	r2, r6
    2700:	2101      	movs	r1, #1
    2702:	a834      	add	r0, sp, #208	; 0xd0
    2704:	f010 fcbc 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    2708:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    270a:	2b00      	cmp	r3, #0
    270c:	f000 808d 	beq.w	282a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x82a>
            ret = spectral::processing::periodogram(&axis_matrix,
    2710:	eeb0 0a68 	vmov.f32	s0, s17
    2714:	9b03      	ldr	r3, [sp, #12]
    2716:	aa34      	add	r2, sp, #208	; 0xd0
    2718:	a930      	add	r1, sp, #192	; 0xc0
    271a:	a824      	add	r0, sp, #144	; 0x90
    271c:	f007 f930 	bl	9980 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
            if (ret != EIDSP_OK) {
    2720:	4604      	mov	r4, r0
    2722:	2800      	cmp	r0, #0
    2724:	d169      	bne.n	27fa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7fa>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
    2726:	9b54      	ldr	r3, [sp, #336]	; 0x150
    2728:	2201      	movs	r2, #1
    272a:	6859      	ldr	r1, [r3, #4]
    272c:	4603      	mov	r3, r0
    272e:	3901      	subs	r1, #1
    2730:	a838      	add	r0, sp, #224	; 0xe0
    2732:	f010 fca5 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    2736:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2738:	2b00      	cmp	r3, #0
    273a:	d05a      	beq.n	27f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7f2>
            ret = spectral::processing::spectral_power_edges(
    273c:	eeb0 0a68 	vmov.f32	s0, s17
    2740:	9a54      	ldr	r2, [sp, #336]	; 0x150
    2742:	ab38      	add	r3, sp, #224	; 0xe0
    2744:	a934      	add	r1, sp, #208	; 0xd0
    2746:	a830      	add	r0, sp, #192	; 0xc0
    2748:	f007 f86a 	bl	9820 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
            if (ret != EIDSP_OK) {
    274c:	4604      	mov	r4, r0
    274e:	2800      	cmp	r0, #0
    2750:	d150      	bne.n	27f4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7f4>
            float *features_row = out_features->buffer + (row * out_features->cols);
    2752:	9b05      	ldr	r3, [sp, #20]
    2754:	689f      	ldr	r7, [r3, #8]
    2756:	681b      	ldr	r3, [r3, #0]
    2758:	436f      	muls	r7, r5
    275a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
            features_row[fx++] = rms_matrix.buffer[row];
    275e:	463a      	mov	r2, r7
    2760:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2762:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2766:	681b      	ldr	r3, [r3, #0]
    2768:	f842 3b04 	str.w	r3, [r2], #4
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
    276c:	e9dd 312d 	ldrd	r3, r1, [sp, #180]	; 0xb4
    2770:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    2774:	992c      	ldr	r1, [sp, #176]	; 0xb0
    2776:	3104      	adds	r1, #4
    2778:	42a3      	cmp	r3, r4
    277a:	f102 0208 	add.w	r2, r2, #8
    277e:	d11a      	bne.n	27b6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7b6>
    2780:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
    2784:	2400      	movs	r4, #0
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
    2786:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    278a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    278e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    2790:	0089      	lsls	r1, r1, #2
    2792:	3304      	adds	r3, #4
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
    2794:	42a0      	cmp	r0, r4
    2796:	d018      	beq.n	27ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7ca>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
    2798:	edd2 6a00 	vldr	s13, [r2]
    279c:	eec6 7a87 	vdiv.f32	s15, s13, s14
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
    27a0:	3401      	adds	r4, #1
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
    27a2:	ece3 7a01 	vstmia	r3!, {s15}
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
    27a6:	440a      	add	r2, r1
    27a8:	e7f4      	b.n	2794 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x794>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
    27aa:	4644      	mov	r4, r8
    27ac:	e793      	b.n	26d6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6d6>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    27ae:	4c4a      	ldr	r4, [pc, #296]	; (28d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8d8>)
    27b0:	e791      	b.n	26d6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6d6>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
    27b2:	4644      	mov	r4, r8
    27b4:	e792      	b.n	26dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6dc>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
    27b6:	f851 0c04 	ldr.w	r0, [r1, #-4]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
    27ba:	3401      	adds	r4, #1
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
    27bc:	f842 0c08 	str.w	r0, [r2, #-8]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
    27c0:	6808      	ldr	r0, [r1, #0]
    27c2:	4461      	add	r1, ip
    27c4:	f842 0c04 	str.w	r0, [r2, #-4]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
    27c8:	e7d6      	b.n	2778 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x778>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
    27ca:	a838      	add	r0, sp, #224	; 0xe0
    27cc:	f010 facd 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
    27d0:	a834      	add	r0, sp, #208	; 0xd0
    27d2:	f010 faca 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
    27d6:	a830      	add	r0, sp, #192	; 0xc0
    27d8:	f010 fac7 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
    27dc:	a82c      	add	r0, sp, #176	; 0xb0
    27de:	f010 fac4 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
    27e2:	a828      	add	r0, sp, #160	; 0xa0
    27e4:	f010 fac1 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
    27e8:	a824      	add	r0, sp, #144	; 0x90
    27ea:	f010 fabe 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    27ee:	3501      	adds	r5, #1
    27f0:	e65c      	b.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
    27f2:	4c3a      	ldr	r4, [pc, #232]	; (28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>)
    27f4:	a838      	add	r0, sp, #224	; 0xe0
    27f6:	f010 fab8 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
    27fa:	a834      	add	r0, sp, #208	; 0xd0
    27fc:	f010 fab5 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    2800:	46a2      	mov	sl, r4
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
    2802:	a830      	add	r0, sp, #192	; 0xc0
    2804:	f010 fab1 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
    2808:	a82c      	add	r0, sp, #176	; 0xb0
    280a:	f010 faae 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
    280e:	a828      	add	r0, sp, #160	; 0xa0
    2810:	f010 faab 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
    2814:	a824      	add	r0, sp, #144	; 0x90
    2816:	f010 faa8 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
    281a:	a820      	add	r0, sp, #128	; 0x80
    281c:	f010 faa5 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
    2820:	a81c      	add	r0, sp, #112	; 0x70
    2822:	f010 faa2 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    2826:	f7ff baf0 	b.w	1e0a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x82>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
    282a:	4c2c      	ldr	r4, [pc, #176]	; (28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>)
    282c:	e7e5      	b.n	27fa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7fa>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
    282e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>
    2832:	e7e6      	b.n	2802 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x802>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
    2834:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>
    2838:	e7e6      	b.n	2808 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x808>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
    283a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>
    283e:	e7e6      	b.n	280e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    2840:	f8df a094 	ldr.w	sl, [pc, #148]	; 28d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8d8>
    2844:	e7e3      	b.n	280e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80e>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
    2846:	f8df a094 	ldr.w	sl, [pc, #148]	; 28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>
    284a:	e7e3      	b.n	2814 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x814>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
    284c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>
    2850:	e7e3      	b.n	281a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x81a>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
    2852:	f8df a088 	ldr.w	sl, [pc, #136]	; 28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>
    2856:	e7e3      	b.n	2820 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x820>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    2858:	f8df a07c 	ldr.w	sl, [pc, #124]	; 28d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8d8>
    285c:	e7e0      	b.n	2820 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x820>
        EI_DSP_MATRIX(mean_matrix, axes, 1);
    285e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 28dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8dc>
    2862:	f7ff bad2 	b.w	1e0a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x82>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    2866:	f8df a070 	ldr.w	sl, [pc, #112]	; 28d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8d8>
    286a:	f7ff bad1 	b.w	1e10 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x88>
	: _M_start(), _M_finish(), _M_end_of_storage()
    286e:	2300      	movs	r3, #0
    2870:	4699      	mov	r9, r3
    2872:	e9cd 3330 	strd	r3, r3, [sp, #192]	; 0xc0
    2876:	9332      	str	r3, [sp, #200]	; 0xc8
        for (uint8_t ix = 0; ix < peak_count; ix++) {
    2878:	fa5f f389 	uxtb.w	r3, r9
    287c:	42bb      	cmp	r3, r7
    287e:	f6bf aed7 	bge.w	2630 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x630>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
    2882:	9a38      	ldr	r2, [sp, #224]	; 0xe0
            peaks.push_back(d);
    2884:	a830      	add	r0, sp, #192	; 0xc0
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
    2886:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    288a:	edd3 7a00 	vldr	s15, [r3]
    288e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2892:	ee17 1a90 	vmov	r1, s15
    2896:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    2898:	f109 0901 	add.w	r9, r9, #1
    289c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    28a0:	6812      	ldr	r2, [r2, #0]
            peaks.push_back(d);
    28a2:	a916      	add	r1, sp, #88	; 0x58
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
    28a4:	9216      	str	r2, [sp, #88]	; 0x58
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
    28a6:	edd3 7a00 	vldr	s15, [r3]
    28aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    28ae:	ee17 2a90 	vmov	r2, s15
    28b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    28b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    28b8:	edd3 7a00 	vldr	s15, [r3]
            if (d.amplitude < threshold) {
    28bc:	eeb4 9ae7 	vcmpe.f32	s18, s15
    28c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
    28c4:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
                d.freq = 0.0f;
    28c8:	bfc4      	itt	gt
    28ca:	ed8d 8a16 	vstrgt	s16, [sp, #88]	; 0x58
                d.amplitude = 0.0f;
    28ce:	ed8d 8a17 	vstrgt	s16, [sp, #92]	; 0x5c
            peaks.push_back(d);
    28d2:	f010 fc84 	bl	131de <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
    28d6:	e7cf      	b.n	2878 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x878>
    28d8:	fffffc14 	.word	0xfffffc14
    28dc:	fffffc16 	.word	0xfffffc16

000028e0 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
    28e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e4:	ed2d 8b02 	vpush	{d8}
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
    28e8:	2500      	movs	r5, #0
{
    28ea:	b085      	sub	sp, #20

    if (nfft & 1) {
    28ec:	f010 0a01 	ands.w	sl, r0, #1
{
    28f0:	468b      	mov	fp, r1
    28f2:	4614      	mov	r4, r2
    28f4:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
    28f6:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
    28f8:	d009      	beq.n	290e <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
    28fa:	4863      	ldr	r0, [pc, #396]	; (2a88 <kiss_fftr_alloc+0x1a8>)
    28fc:	f00a f8c6 	bl	ca8c <_Z9ei_printfPKcz>
        return NULL;
    2900:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
    2902:	4620      	mov	r0, r4
    2904:	b005      	add	sp, #20
    2906:	ecbd 8b02 	vpop	{d8}
    290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
    290e:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
    2910:	ab03      	add	r3, sp, #12
    2912:	4652      	mov	r2, sl
    2914:	4628      	mov	r0, r5
    2916:	f8cd a000 	str.w	sl, [sp]
    291a:	f000 f8b9 	bl	2a90 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
    291e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
    2922:	9b03      	ldr	r3, [sp, #12]
    2924:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    2928:	1076      	asrs	r6, r6, #1
    292a:	330c      	adds	r3, #12
    292c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
    2930:	2f00      	cmp	r7, #0
    2932:	d158      	bne.n	29e6 <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
    2934:	4630      	mov	r0, r6
    2936:	f010 ff9a 	bl	1386e <_Z9ei_mallocj>
    293a:	4604      	mov	r4, r0
    if (!st)
    293c:	2c00      	cmp	r4, #0
    293e:	d0e0      	beq.n	2902 <kiss_fftr_alloc+0x22>
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    2940:	9b03      	ldr	r3, [sp, #12]
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    2942:	f104 020c 	add.w	r2, r4, #12
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    2946:	4413      	add	r3, r2
    2948:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
    294a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    294e:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    2950:	2300      	movs	r3, #0
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    2952:	6022      	str	r2, [r4, #0]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    2954:	4659      	mov	r1, fp
    2956:	9300      	str	r3, [sp, #0]
    2958:	4628      	mov	r0, r5
    295a:	ab03      	add	r3, sp, #12
        for (i = 0; i < nfft/2; ++i) {
    295c:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    2960:	f000 f896 	bl	2a90 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
    2964:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
    2966:	f1bb 0f00 	cmp.w	fp, #0
    296a:	d042      	beq.n	29f2 <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
    296c:	4557      	cmp	r7, sl
    296e:	dd7d      	ble.n	2a6c <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    2970:	f10a 0a01 	add.w	sl, sl, #1
    2974:	4650      	mov	r0, sl
    2976:	f7fd fd41 	bl	3fc <__aeabi_i2d>
    297a:	4680      	mov	r8, r0
    297c:	4628      	mov	r0, r5
    297e:	4689      	mov	r9, r1
    2980:	f7fd fd3c 	bl	3fc <__aeabi_i2d>
    2984:	4602      	mov	r2, r0
    2986:	460b      	mov	r3, r1
    2988:	4640      	mov	r0, r8
    298a:	4649      	mov	r1, r9
    298c:	f7fd feca 	bl	724 <__aeabi_ddiv>
    2990:	2200      	movs	r2, #0
    2992:	4b3e      	ldr	r3, [pc, #248]	; (2a8c <kiss_fftr_alloc+0x1ac>)
    2994:	f7fd fbe6 	bl	164 <__adddf3>
            double phase =
    2998:	a337      	add	r3, pc, #220	; (adr r3, 2a78 <kiss_fftr_alloc+0x198>)
    299a:	e9d3 2300 	ldrd	r2, r3, [r3]
    299e:	f7fd fd97 	bl	4d0 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    29a2:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    29a6:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    29aa:	f000 fc05 	bl	31b8 <cos>
    29ae:	ea4f 08ca 	mov.w	r8, sl, lsl #3
    29b2:	68a3      	ldr	r3, [r4, #8]
    29b4:	ec51 0b10 	vmov	r0, r1, d0
    29b8:	f1a8 0808 	sub.w	r8, r8, #8
    29bc:	eb03 0908 	add.w	r9, r3, r8
    29c0:	f7fe f820 	bl	a04 <__aeabi_d2f>
    29c4:	eeb0 0a48 	vmov.f32	s0, s16
    29c8:	eef0 0a68 	vmov.f32	s1, s17
    29cc:	f8c9 0000 	str.w	r0, [r9]
    29d0:	f000 fcca 	bl	3368 <sin>
    29d4:	68a3      	ldr	r3, [r4, #8]
    29d6:	ec51 0b10 	vmov	r0, r1, d0
    29da:	4498      	add	r8, r3
    29dc:	f7fe f812 	bl	a04 <__aeabi_d2f>
    29e0:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    29e4:	e7c2      	b.n	296c <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
    29e6:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
    29e8:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
    29ea:	42b3      	cmp	r3, r6
    29ec:	d2a6      	bcs.n	293c <kiss_fftr_alloc+0x5c>
        return NULL;
    29ee:	4654      	mov	r4, sl
    29f0:	e787      	b.n	2902 <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
    29f2:	455f      	cmp	r7, fp
    29f4:	dd3a      	ble.n	2a6c <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    29f6:	f10b 0b01 	add.w	fp, fp, #1
    29fa:	4658      	mov	r0, fp
    29fc:	f7fd fcfe 	bl	3fc <__aeabi_i2d>
    2a00:	4680      	mov	r8, r0
    2a02:	4628      	mov	r0, r5
    2a04:	4689      	mov	r9, r1
    2a06:	f7fd fcf9 	bl	3fc <__aeabi_i2d>
    2a0a:	4602      	mov	r2, r0
    2a0c:	460b      	mov	r3, r1
    2a0e:	4640      	mov	r0, r8
    2a10:	4649      	mov	r1, r9
    2a12:	f7fd fe87 	bl	724 <__aeabi_ddiv>
    2a16:	2200      	movs	r2, #0
    2a18:	4b1c      	ldr	r3, [pc, #112]	; (2a8c <kiss_fftr_alloc+0x1ac>)
    2a1a:	f7fd fba3 	bl	164 <__adddf3>
            double phase =
    2a1e:	a318      	add	r3, pc, #96	; (adr r3, 2a80 <kiss_fftr_alloc+0x1a0>)
    2a20:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a24:	f7fd fd54 	bl	4d0 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    2a28:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    2a2c:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    2a30:	f000 fbc2 	bl	31b8 <cos>
    2a34:	ea4f 08cb 	mov.w	r8, fp, lsl #3
    2a38:	68a3      	ldr	r3, [r4, #8]
    2a3a:	ec51 0b10 	vmov	r0, r1, d0
    2a3e:	f1a8 0808 	sub.w	r8, r8, #8
    2a42:	eb03 0908 	add.w	r9, r3, r8
    2a46:	f7fd ffdd 	bl	a04 <__aeabi_d2f>
    2a4a:	eeb0 0a48 	vmov.f32	s0, s16
    2a4e:	eef0 0a68 	vmov.f32	s1, s17
    2a52:	f8c9 0000 	str.w	r0, [r9]
    2a56:	f000 fc87 	bl	3368 <sin>
    2a5a:	68a3      	ldr	r3, [r4, #8]
    2a5c:	ec51 0b10 	vmov	r0, r1, d0
    2a60:	4498      	add	r8, r3
    2a62:	f7fd ffcf 	bl	a04 <__aeabi_d2f>
    2a66:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    2a6a:	e7c2      	b.n	29f2 <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
    2a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2a6e:	2b00      	cmp	r3, #0
    2a70:	f43f af47 	beq.w	2902 <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
    2a74:	601e      	str	r6, [r3, #0]
    2a76:	e744      	b.n	2902 <kiss_fftr_alloc+0x22>
    2a78:	54442d18 	.word	0x54442d18
    2a7c:	400921fb 	.word	0x400921fb
    2a80:	54442d18 	.word	0x54442d18
    2a84:	c00921fb 	.word	0xc00921fb
    2a88:	00017e98 	.word	0x00017e98
    2a8c:	3fe00000 	.word	0x3fe00000

00002a90 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
    2a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
    2a94:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
    2a98:	ed2d 8b02 	vpush	{d8}
    2a9c:	4604      	mov	r4, r0
    2a9e:	460e      	mov	r6, r1
    2aa0:	4615      	mov	r5, r2
    2aa2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    size_t memneeded = sizeof(struct kiss_fft_state)
    2aa6:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d13d      	bne.n	2b28 <kiss_fft_alloc+0x98>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
    2aac:	4638      	mov	r0, r7
    2aae:	f010 fede 	bl	1386e <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
    2ab2:	4605      	mov	r5, r0
    2ab4:	b3d0      	cbz	r0, 2b2c <kiss_fft_alloc+0x9c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
    2ab6:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
    2aba:	f505 7a84 	add.w	sl, r5, #264	; 0x108
    2abe:	2e00      	cmp	r6, #0
    2ac0:	d044      	beq.n	2b4c <kiss_fft_alloc+0xbc>
    2ac2:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
    2ac4:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
    2ac8:	4620      	mov	r0, r4
    2aca:	f7fd fc97 	bl	3fc <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
    2ace:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
    2ad0:	4680      	mov	r8, r0
    2ad2:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
    2ad4:	f106 0608 	add.w	r6, r6, #8
    2ad8:	da67      	bge.n	2baa <kiss_fft_alloc+0x11a>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
    2ada:	4650      	mov	r0, sl
    2adc:	f7fd fc8e 	bl	3fc <__aeabi_i2d>
    2ae0:	a34b      	add	r3, pc, #300	; (adr r3, 2c10 <kiss_fft_alloc+0x180>)
    2ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ae6:	f7fd fcf3 	bl	4d0 <__aeabi_dmul>
    2aea:	4642      	mov	r2, r8
    2aec:	464b      	mov	r3, r9
    2aee:	f7fd fe19 	bl	724 <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    2af2:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
    2af6:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    2afa:	f000 fb5d 	bl	31b8 <cos>
    2afe:	ec51 0b10 	vmov	r0, r1, d0
    2b02:	f7fd ff7f 	bl	a04 <__aeabi_d2f>
    2b06:	eeb0 0a48 	vmov.f32	s0, s16
    2b0a:	eef0 0a68 	vmov.f32	s1, s17
    2b0e:	f846 0c08 	str.w	r0, [r6, #-8]
    2b12:	f000 fc29 	bl	3368 <sin>
    2b16:	ec51 0b10 	vmov	r0, r1, d0
    2b1a:	f7fd ff73 	bl	a04 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    2b1e:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
    2b22:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
    2b26:	e7cf      	b.n	2ac8 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
    2b28:	b952      	cbnz	r2, 2b40 <kiss_fft_alloc+0xb0>
        *lenmem = memneeded;
    2b2a:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
    2b2c:	f1bb 0f00 	cmp.w	fp, #0
    2b30:	d001      	beq.n	2b36 <kiss_fft_alloc+0xa6>
        *memallocated = memneeded;
    2b32:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
    2b36:	4628      	mov	r0, r5
    2b38:	ecbd 8b02 	vpop	{d8}
    2b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
    2b40:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
    2b42:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
    2b44:	42ba      	cmp	r2, r7
    2b46:	d2b6      	bcs.n	2ab6 <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
    2b48:	2500      	movs	r5, #0
    2b4a:	e7ef      	b.n	2b2c <kiss_fft_alloc+0x9c>
    floor_sqrt = floor( sqrt((double)n) );
    2b4c:	4620      	mov	r0, r4
    2b4e:	f7fd fc55 	bl	3fc <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
    2b52:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
    2b54:	4680      	mov	r8, r0
    2b56:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
    2b58:	f10a 0a08 	add.w	sl, sl, #8
    2b5c:	da25      	bge.n	2baa <kiss_fft_alloc+0x11a>
                double phase = -2*pi*i / nfft;
    2b5e:	4630      	mov	r0, r6
    2b60:	f7fd fc4c 	bl	3fc <__aeabi_i2d>
    2b64:	a32c      	add	r3, pc, #176	; (adr r3, 2c18 <kiss_fft_alloc+0x188>)
    2b66:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b6a:	f7fd fcb1 	bl	4d0 <__aeabi_dmul>
    2b6e:	4642      	mov	r2, r8
    2b70:	464b      	mov	r3, r9
    2b72:	f7fd fdd7 	bl	724 <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    2b76:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
    2b7a:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    2b7e:	f000 fb1b 	bl	31b8 <cos>
    2b82:	ec51 0b10 	vmov	r0, r1, d0
    2b86:	f7fd ff3d 	bl	a04 <__aeabi_d2f>
    2b8a:	eeb0 0a48 	vmov.f32	s0, s16
    2b8e:	eef0 0a68 	vmov.f32	s1, s17
    2b92:	f84a 0c08 	str.w	r0, [sl, #-8]
    2b96:	f000 fbe7 	bl	3368 <sin>
    2b9a:	ec51 0b10 	vmov	r0, r1, d0
    2b9e:	f7fd ff31 	bl	a04 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    2ba2:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
    2ba4:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
    2ba8:	e7d0      	b.n	2b4c <kiss_fft_alloc+0xbc>
    floor_sqrt = floor( sqrt((double)n) );
    2baa:	4620      	mov	r0, r4
    2bac:	f7fd fc26 	bl	3fc <__aeabi_i2d>
    2bb0:	ec41 0b10 	vmov	d0, r0, r1
    2bb4:	f00c ff1c 	bl	f9f0 <sqrt>
    2bb8:	f000 fb52 	bl	3260 <floor>
    int p=4;
    2bbc:	2604      	movs	r6, #4
    floor_sqrt = floor( sqrt((double)n) );
    2bbe:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
    2bc2:	f105 0a08 	add.w	sl, r5, #8
        while (n % p) {
    2bc6:	fb94 f3f6 	sdiv	r3, r4, r6
    2bca:	fb06 4213 	mls	r2, r6, r3, r4
    2bce:	b1aa      	cbz	r2, 2bfc <kiss_fft_alloc+0x16c>
            switch (p) {
    2bd0:	2e02      	cmp	r6, #2
    2bd2:	d00f      	beq.n	2bf4 <kiss_fft_alloc+0x164>
    2bd4:	2e04      	cmp	r6, #4
    2bd6:	d00f      	beq.n	2bf8 <kiss_fft_alloc+0x168>
                default: p += 2; break;
    2bd8:	3602      	adds	r6, #2
            if (p > floor_sqrt)
    2bda:	4630      	mov	r0, r6
    2bdc:	f7fd fc0e 	bl	3fc <__aeabi_i2d>
    2be0:	4602      	mov	r2, r0
    2be2:	460b      	mov	r3, r1
    2be4:	4640      	mov	r0, r8
    2be6:	4649      	mov	r1, r9
    2be8:	f7fd fee4 	bl	9b4 <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
    2bec:	2800      	cmp	r0, #0
    2bee:	bf18      	it	ne
    2bf0:	4626      	movne	r6, r4
    2bf2:	e7e8      	b.n	2bc6 <kiss_fft_alloc+0x136>
                case 2: p = 3; break;
    2bf4:	2603      	movs	r6, #3
    2bf6:	e7f0      	b.n	2bda <kiss_fft_alloc+0x14a>
            switch (p) {
    2bf8:	2602      	movs	r6, #2
    2bfa:	e7ee      	b.n	2bda <kiss_fft_alloc+0x14a>
    } while (n > 1);
    2bfc:	2b01      	cmp	r3, #1
        n /= p;
    2bfe:	461c      	mov	r4, r3
        *facbuf++ = n;
    2c00:	e9ca 6300 	strd	r6, r3, [sl]
    } while (n > 1);
    2c04:	dd92      	ble.n	2b2c <kiss_fft_alloc+0x9c>
        *facbuf++ = n;
    2c06:	f10a 0a08 	add.w	sl, sl, #8
    2c0a:	e7dc      	b.n	2bc6 <kiss_fft_alloc+0x136>
    2c0c:	f3af 8000 	nop.w
    2c10:	54442d18 	.word	0x54442d18
    2c14:	401921fb 	.word	0x401921fb
    2c18:	54442d18 	.word	0x54442d18
    2c1c:	c01921fb 	.word	0xc01921fb

00002c20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    2c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2c24:	ed2d 8b02 	vpush	{d8}
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    2c28:	680b      	ldr	r3, [r1, #0]
    2c2a:	4604      	mov	r4, r0
    2c2c:	681e      	ldr	r6, [r3, #0]
    2c2e:	4689      	mov	r9, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    2c30:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    2c32:	b089      	sub	sp, #36	; 0x24
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    2c34:	d011      	beq.n	2c5a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    2c36:	2501      	movs	r5, #1
    2c38:	4b9c      	ldr	r3, [pc, #624]	; (2eac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    2c3a:	e9cd 6502 	strd	r6, r5, [sp, #8]
    2c3e:	9301      	str	r3, [sp, #4]
    2c40:	4b9b      	ldr	r3, [pc, #620]	; (2eb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
    2c42:	4a9c      	ldr	r2, [pc, #624]	; (2eb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2c44:	9300      	str	r3, [sp, #0]
    2c46:	6944      	ldr	r4, [r0, #20]
    2c48:	235d      	movs	r3, #93	; 0x5d
    2c4a:	499b      	ldr	r1, [pc, #620]	; (2eb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    2c4c:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    2c4e:	4628      	mov	r0, r5
    2c50:	b009      	add	sp, #36	; 0x24
    2c52:	ecbd 8b02 	vpop	{d8}
    2c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    2c5a:	684b      	ldr	r3, [r1, #4]
    2c5c:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    2c5e:	2d01      	cmp	r5, #1
    2c60:	d00c      	beq.n	2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    2c62:	4b92      	ldr	r3, [pc, #584]	; (2eac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    2c64:	e9cd 5602 	strd	r5, r6, [sp, #8]
    2c68:	9301      	str	r3, [sp, #4]
    2c6a:	4b94      	ldr	r3, [pc, #592]	; (2ebc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    2c6c:	4a91      	ldr	r2, [pc, #580]	; (2eb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2c6e:	9300      	str	r3, [sp, #0]
    2c70:	6944      	ldr	r4, [r0, #20]
    2c72:	235e      	movs	r3, #94	; 0x5e
    2c74:	4990      	ldr	r1, [pc, #576]	; (2eb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    2c76:	47a0      	blx	r4
    TF_LITE_ENSURE(context,
    2c78:	2501      	movs	r5, #1
    2c7a:	e7e8      	b.n	2c4e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
    2c7c:	2200      	movs	r2, #0
    2c7e:	f011 ff0e 	bl	14a9e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    2c82:	4680      	mov	r8, r0
    2c84:	b940      	cbnz	r0, 2c98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    2c86:	4b8e      	ldr	r3, [pc, #568]	; (2ec0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    2c88:	9300      	str	r3, [sp, #0]
    2c8a:	2360      	movs	r3, #96	; 0x60
    2c8c:	6966      	ldr	r6, [r4, #20]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    2c8e:	4620      	mov	r0, r4
    2c90:	4a88      	ldr	r2, [pc, #544]	; (2eb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2c92:	498c      	ldr	r1, [pc, #560]	; (2ec4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    2c94:	47b0      	blx	r6
    2c96:	e7da      	b.n	2c4e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    2c98:	6883      	ldr	r3, [r0, #8]
    2c9a:	681b      	ldr	r3, [r3, #0]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	dc04      	bgt.n	2caa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    2ca0:	4b89      	ldr	r3, [pc, #548]	; (2ec8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    2ca2:	9300      	str	r3, [sp, #0]
    2ca4:	6966      	ldr	r6, [r4, #20]
    2ca6:	2361      	movs	r3, #97	; 0x61
    2ca8:	e7f1      	b.n	2c8e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
    2caa:	2200      	movs	r2, #0
    2cac:	4649      	mov	r1, r9
    2cae:	4620      	mov	r0, r4
    2cb0:	f011 fef8 	bl	14aa4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    2cb4:	4606      	mov	r6, r0
    2cb6:	b920      	cbnz	r0, 2cc2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
    2cb8:	4b84      	ldr	r3, [pc, #528]	; (2ecc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
    2cba:	9300      	str	r3, [sp, #0]
    2cbc:	6966      	ldr	r6, [r4, #20]
    2cbe:	2363      	movs	r3, #99	; 0x63
    2cc0:	e7e5      	b.n	2c8e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    2cc2:	f8d9 7010 	ldr.w	r7, [r9, #16]
    2cc6:	b927      	cbnz	r7, 2cd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    2cc8:	4b81      	ldr	r3, [pc, #516]	; (2ed0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
    2cca:	9300      	str	r3, [sp, #0]
    2ccc:	6966      	ldr	r6, [r4, #20]
    2cce:	2365      	movs	r3, #101	; 0x65
    2cd0:	e7dd      	b.n	2c8e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
    2cd2:	f898 3000 	ldrb.w	r3, [r8]
    2cd6:	2b07      	cmp	r3, #7
    2cd8:	d117      	bne.n	2d0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xea>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    2cda:	f240 4102 	movw	r1, #1026	; 0x402
    2cde:	4620      	mov	r0, r4
    2ce0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2ce2:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    2ce4:	b920      	cbnz	r0, 2cf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    2ce6:	4b7b      	ldr	r3, [pc, #492]	; (2ed4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
    2ce8:	9300      	str	r3, [sp, #0]
    2cea:	6966      	ldr	r6, [r4, #20]
    2cec:	236b      	movs	r3, #107	; 0x6b
    2cee:	e7ce      	b.n	2c8e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    2cf0:	62b8      	str	r0, [r7, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    2cf2:	f240 4102 	movw	r1, #1026	; 0x402
    2cf6:	4620      	mov	r0, r4
    2cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2cfa:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    2cfc:	b920      	cbnz	r0, 2d08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>
    2cfe:	4b76      	ldr	r3, [pc, #472]	; (2ed8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
    2d00:	9300      	str	r3, [sp, #0]
    2d02:	6966      	ldr	r6, [r4, #20]
    2d04:	236f      	movs	r3, #111	; 0x6f
    2d06:	e7c2      	b.n	2c8e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->one_over_one_plus_x_lut =
    2d08:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
    2d0a:	7832      	ldrb	r2, [r6, #0]
    TF_LITE_ENSURE(context,
    2d0c:	f898 3000 	ldrb.w	r3, [r8]
  if (output->type == kTfLiteInt16) {
    2d10:	2a07      	cmp	r2, #7
    2d12:	d10c      	bne.n	2d2e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    TF_LITE_ENSURE(context,
    2d14:	2b09      	cmp	r3, #9
    2d16:	d03d      	beq.n	2d94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    2d18:	2b07      	cmp	r3, #7
    2d1a:	d017      	beq.n	2d4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    2d1c:	4b6f      	ldr	r3, [pc, #444]	; (2edc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
    2d1e:	9300      	str	r3, [sp, #0]
    2d20:	2375      	movs	r3, #117	; 0x75
    2d22:	6965      	ldr	r5, [r4, #20]
    2d24:	4620      	mov	r0, r4
    2d26:	4a63      	ldr	r2, [pc, #396]	; (2eb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2d28:	4966      	ldr	r1, [pc, #408]	; (2ec4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    2d2a:	47a8      	blx	r5
    2d2c:	e7a4      	b.n	2c78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    2d2e:	429a      	cmp	r2, r3
    2d30:	d030      	beq.n	2d94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    2d32:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2d36:	4b6a      	ldr	r3, [pc, #424]	; (2ee0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    2d38:	9301      	str	r3, [sp, #4]
    2d3a:	4b6a      	ldr	r3, [pc, #424]	; (2ee4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    2d3c:	9300      	str	r3, [sp, #0]
    2d3e:	2378      	movs	r3, #120	; 0x78
    2d40:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    2d42:	4620      	mov	r0, r4
    2d44:	4a5b      	ldr	r2, [pc, #364]	; (2eb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2d46:	495c      	ldr	r1, [pc, #368]	; (2eb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    2d48:	47a8      	blx	r5
    2d4a:	e795      	b.n	2c78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    2d4c:	6933      	ldr	r3, [r6, #16]
    2d4e:	b14b      	cbz	r3, 2d64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x144>
    2d50:	2200      	movs	r2, #0
    2d52:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2d56:	4b64      	ldr	r3, [pc, #400]	; (2ee8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    2d58:	9301      	str	r3, [sp, #4]
    2d5a:	4b64      	ldr	r3, [pc, #400]	; (2eec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2d5c:	9300      	str	r3, [sp, #0]
    2d5e:	6965      	ldr	r5, [r4, #20]
    2d60:	237d      	movs	r3, #125	; 0x7d
    2d62:	e7ee      	b.n	2d42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    2d64:	f240 2201 	movw	r2, #513	; 0x201
    2d68:	eddf 0a61 	vldr	s1, [pc, #388]	; 2ef0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    2d6c:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
    2d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2d72:	4860      	ldr	r0, [pc, #384]	; (2ef4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    2d74:	f00b fc98 	bl	e6a8 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    2d78:	f240 2201 	movw	r2, #513	; 0x201
    2d7c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    2d80:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 2ef0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    2d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2d86:	485c      	ldr	r0, [pc, #368]	; (2ef8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    2d88:	f00b fc8e 	bl	e6a8 <_ZN6tflite7gen_lutEPFffEffPsi>
    op_data->zero_point = output->params.zero_point;
    2d8c:	6933      	ldr	r3, [r6, #16]
    2d8e:	61fb      	str	r3, [r7, #28]
    op_data->scale = output->params.scale;
    2d90:	68f3      	ldr	r3, [r6, #12]
    2d92:	623b      	str	r3, [r7, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    2d94:	f898 5000 	ldrb.w	r5, [r8]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    2d98:	f8d9 9014 	ldr.w	r9, [r9, #20]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    2d9c:	2d09      	cmp	r5, #9
    2d9e:	d039      	beq.n	2e14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f4>
    2da0:	2d07      	cmp	r5, #7
    2da2:	f040 8129 	bne.w	2ff8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3d8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    2da6:	6933      	ldr	r3, [r6, #16]
    2da8:	b14b      	cbz	r3, 2dbe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
    2daa:	2200      	movs	r2, #0
    2dac:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2db0:	4b4d      	ldr	r3, [pc, #308]	; (2ee8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    2db2:	9301      	str	r3, [sp, #4]
    2db4:	4b4d      	ldr	r3, [pc, #308]	; (2eec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2db6:	9300      	str	r3, [sp, #0]
    2db8:	6965      	ldr	r5, [r4, #20]
    2dba:	2325      	movs	r3, #37	; 0x25
    2dbc:	e7c1      	b.n	2d42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    2dbe:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2efc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>
    2dc2:	ed96 7a03 	vldr	s14, [r6, #12]
    2dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2dce:	eddf 6a4c 	vldr	s13, [pc, #304]	; 2f00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>
    2dd2:	bfcc      	ite	gt
    2dd4:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    2dd8:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    2ddc:	eef4 7ae6 	vcmpe.f32	s15, s13
    2de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2de4:	f340 80c1 	ble.w	2f6a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x34a>
    2de8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    2dec:	2200      	movs	r2, #0
    2dee:	ee17 0a10 	vmov	r0, s14
    2df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2df6:	f7fd fb13 	bl	420 <__aeabi_f2d>
    2dfa:	4b42      	ldr	r3, [pc, #264]	; (2f04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    2dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2e00:	9301      	str	r3, [sp, #4]
    2e02:	4b41      	ldr	r3, [pc, #260]	; (2f08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    2e04:	9300      	str	r3, [sp, #0]
    2e06:	2326      	movs	r3, #38	; 0x26
    2e08:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    2e0a:	4620      	mov	r0, r4
    2e0c:	4a29      	ldr	r2, [pc, #164]	; (2eb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2e0e:	493f      	ldr	r1, [pc, #252]	; (2f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    2e10:	47a8      	blx	r5
    2e12:	e731      	b.n	2c78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      if (output->type == kTfLiteInt16) {
    2e14:	7830      	ldrb	r0, [r6, #0]
    2e16:	2807      	cmp	r0, #7
    2e18:	d133      	bne.n	2e82 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x262>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    2e1a:	6933      	ldr	r3, [r6, #16]
    2e1c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    2e20:	d009      	beq.n	2e36 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x216>
    2e22:	4a3b      	ldr	r2, [pc, #236]	; (2f10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    2e24:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2e28:	4b3a      	ldr	r3, [pc, #232]	; (2f14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    2e2a:	9301      	str	r3, [sp, #4]
    2e2c:	4b2f      	ldr	r3, [pc, #188]	; (2eec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2e2e:	9300      	str	r3, [sp, #0]
    2e30:	6965      	ldr	r5, [r4, #20]
    2e32:	232b      	movs	r3, #43	; 0x2b
    2e34:	e785      	b.n	2d42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    2e36:	eddf 7a38 	vldr	s15, [pc, #224]	; 2f18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>
    2e3a:	ed96 7a03 	vldr	s14, [r6, #12]
    2e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2e46:	eddf 6a35 	vldr	s13, [pc, #212]	; 2f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>
    2e4a:	bfcc      	ite	gt
    2e4c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    2e50:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    2e54:	eef4 7ae6 	vcmpe.f32	s15, s13
    2e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2e5c:	f340 80a6 	ble.w	2fac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    2e60:	2200      	movs	r2, #0
    2e62:	4b2f      	ldr	r3, [pc, #188]	; (2f20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    2e64:	ee17 0a10 	vmov	r0, s14
    2e68:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2e6c:	f7fd fad8 	bl	420 <__aeabi_f2d>
    2e70:	4b2c      	ldr	r3, [pc, #176]	; (2f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    2e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2e76:	9301      	str	r3, [sp, #4]
    2e78:	4b23      	ldr	r3, [pc, #140]	; (2f08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    2e7a:	9300      	str	r3, [sp, #0]
    2e7c:	6965      	ldr	r5, [r4, #20]
    2e7e:	232c      	movs	r3, #44	; 0x2c
    2e80:	e7c3      	b.n	2e0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ea>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    2e82:	2809      	cmp	r0, #9
    2e84:	d054      	beq.n	2f30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>
    2e86:	6967      	ldr	r7, [r4, #20]
    2e88:	f00c fb82 	bl	f590 <TfLiteTypeGetName>
    2e8c:	4606      	mov	r6, r0
    2e8e:	4628      	mov	r0, r5
    2e90:	f00c fb7e 	bl	f590 <TfLiteTypeGetName>
    2e94:	4b24      	ldr	r3, [pc, #144]	; (2f28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    2e96:	e9cd 6002 	strd	r6, r0, [sp, #8]
    2e9a:	9301      	str	r3, [sp, #4]
    2e9c:	4b10      	ldr	r3, [pc, #64]	; (2ee0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    2e9e:	4620      	mov	r0, r4
    2ea0:	9300      	str	r3, [sp, #0]
    2ea2:	4a04      	ldr	r2, [pc, #16]	; (2eb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2ea4:	232f      	movs	r3, #47	; 0x2f
    2ea6:	4921      	ldr	r1, [pc, #132]	; (2f2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    2ea8:	47b8      	blx	r7
    2eaa:	e6e5      	b.n	2c78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    2eac:	0001845d 	.word	0x0001845d
    2eb0:	00018424 	.word	0x00018424
    2eb4:	000183a4 	.word	0x000183a4
    2eb8:	00018019 	.word	0x00018019
    2ebc:	00018434 	.word	0x00018434
    2ec0:	0001817f 	.word	0x0001817f
    2ec4:	00018168 	.word	0x00018168
    2ec8:	00018445 	.word	0x00018445
    2ecc:	000181a2 	.word	0x000181a2
    2ed0:	0001845f 	.word	0x0001845f
    2ed4:	0001847a 	.word	0x0001847a
    2ed8:	00018491 	.word	0x00018491
    2edc:	000184b4 	.word	0x000184b4
    2ee0:	000181ce 	.word	0x000181ce
    2ee4:	000181db 	.word	0x000181db
    2ee8:	0001795a 	.word	0x0001795a
    2eec:	000184ee 	.word	0x000184ee
    2ef0:	00000000 	.word	0x00000000
    2ef4:	00013e99 	.word	0x00013e99
    2ef8:	00013e8b 	.word	0x00013e8b
    2efc:	38000000 	.word	0x38000000
    2f00:	3303126f 	.word	0x3303126f
    2f04:	00018528 	.word	0x00018528
    2f08:	00018534 	.word	0x00018534
    2f0c:	00018508 	.word	0x00018508
    2f10:	ffff8000 	.word	0xffff8000
    2f14:	00018549 	.word	0x00018549
    2f18:	37800000 	.word	0x37800000
    2f1c:	3283126f 	.word	0x3283126f
    2f20:	3ef00000 	.word	0x3ef00000
    2f24:	00018550 	.word	0x00018550
    2f28:	0001855c 	.word	0x0001855c
    2f2c:	000181b4 	.word	0x000181b4
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    2f30:	6933      	ldr	r3, [r6, #16]
    2f32:	f113 0f80 	cmn.w	r3, #128	; 0x80
    2f36:	d00a      	beq.n	2f4e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32e>
    2f38:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2f3c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2f40:	4b49      	ldr	r3, [pc, #292]	; (3068 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x448>)
    2f42:	9301      	str	r3, [sp, #4]
    2f44:	4b49      	ldr	r3, [pc, #292]	; (306c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
    2f46:	9300      	str	r3, [sp, #0]
    2f48:	6965      	ldr	r5, [r4, #20]
    2f4a:	2330      	movs	r3, #48	; 0x30
    2f4c:	e6f9      	b.n	2d42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    2f4e:	ed96 7a03 	vldr	s14, [r6, #12]
    2f52:	eddf 7a47 	vldr	s15, [pc, #284]	; 3070 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x450>
    2f56:	eeb4 7a67 	vcmp.f32	s14, s15
    2f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2f5e:	d025      	beq.n	2fac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    2f60:	4b44      	ldr	r3, [pc, #272]	; (3074 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x454>)
    2f62:	9300      	str	r3, [sp, #0]
    2f64:	6965      	ldr	r5, [r4, #20]
    2f66:	2331      	movs	r3, #49	; 0x31
    2f68:	e6dc      	b.n	2d24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x104>
          static_cast<double>(input->params.scale) *
    2f6a:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2f6e:	f7fd fa57 	bl	420 <__aeabi_f2d>
    2f72:	4604      	mov	r4, r0
          static_cast<double>(params->beta) /
    2f74:	f8d9 0000 	ldr.w	r0, [r9]
          static_cast<double>(input->params.scale) *
    2f78:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    2f7a:	f7fd fa51 	bl	420 <__aeabi_f2d>
    2f7e:	4602      	mov	r2, r0
    2f80:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    2f82:	4620      	mov	r0, r4
    2f84:	4629      	mov	r1, r5
    2f86:	f7fd faa3 	bl	4d0 <__aeabi_dmul>
      double input_scale_beta_rescale =
    2f8a:	a335      	add	r3, pc, #212	; (adr r3, 3060 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x440>)
    2f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f90:	f7fd fbc8 	bl	724 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    2f94:	f107 0608 	add.w	r6, r7, #8
      double input_scale_beta_rescale =
    2f98:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    2f9c:	4630      	mov	r0, r6
    2f9e:	a907      	add	r1, sp, #28
    2fa0:	f00c fb02 	bl	f5a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    2fa4:	9b07      	ldr	r3, [sp, #28]
    2fa6:	60fb      	str	r3, [r7, #12]
  return kTfLiteOk;
    2fa8:	2500      	movs	r5, #0
    2faa:	e650      	b.n	2c4e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      tflite::PreprocessSoftmaxScaling(
    2fac:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2fb0:	f7fd fa36 	bl	420 <__aeabi_f2d>
    2fb4:	ec41 0b18 	vmov	d8, r0, r1
    2fb8:	f8d9 0000 	ldr.w	r0, [r9]
    2fbc:	f7fd fa30 	bl	420 <__aeabi_f2d>
    2fc0:	f107 0408 	add.w	r4, r7, #8
    2fc4:	ec41 0b10 	vmov	d0, r0, r1
    2fc8:	eeb0 1a48 	vmov.f32	s2, s16
    2fcc:	eef0 1a68 	vmov.f32	s3, s17
    2fd0:	4621      	mov	r1, r4
    2fd2:	2005      	movs	r0, #5
    2fd4:	aa07      	add	r2, sp, #28
    2fd6:	f000 f85b 	bl	3090 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    2fda:	9907      	ldr	r1, [sp, #28]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    2fdc:	221f      	movs	r2, #31
      op_data->input_left_shift = input_left_shift;
    2fde:	60f9      	str	r1, [r7, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    2fe0:	2005      	movs	r0, #5
    2fe2:	f011 fce6 	bl	149b2 <_ZN6tflite20CalculateInputRadiusEiii>
    2fe6:	f7fd fa09 	bl	3fc <__aeabi_i2d>
    2fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
    2fee:	4619      	mov	r1, r3
    2ff0:	f7fd fe16 	bl	c20 <__aeabi_d2iz>
    2ff4:	61b8      	str	r0, [r7, #24]
    2ff6:	e7d7      	b.n	2fa8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    2ff8:	2d01      	cmp	r5, #1
    2ffa:	d013      	beq.n	3024 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x404>
    2ffc:	4628      	mov	r0, r5
    2ffe:	6966      	ldr	r6, [r4, #20]
    3000:	f00c fac6 	bl	f590 <TfLiteTypeGetName>
    3004:	4605      	mov	r5, r0
    3006:	2001      	movs	r0, #1
    3008:	f00c fac2 	bl	f590 <TfLiteTypeGetName>
    300c:	4b1a      	ldr	r3, [pc, #104]	; (3078 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    300e:	e9cd 5002 	strd	r5, r0, [sp, #8]
    3012:	9301      	str	r3, [sp, #4]
    3014:	4b19      	ldr	r3, [pc, #100]	; (307c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x45c>)
    3016:	4620      	mov	r0, r4
    3018:	9300      	str	r3, [sp, #0]
    301a:	4a19      	ldr	r2, [pc, #100]	; (3080 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    301c:	234e      	movs	r3, #78	; 0x4e
    301e:	4919      	ldr	r1, [pc, #100]	; (3084 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    3020:	47b0      	blx	r6
    3022:	e629      	b.n	2c78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    3024:	7830      	ldrb	r0, [r6, #0]
    3026:	2801      	cmp	r0, #1
    3028:	d012      	beq.n	3050 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x430>
    302a:	6967      	ldr	r7, [r4, #20]
    302c:	f00c fab0 	bl	f590 <TfLiteTypeGetName>
    3030:	4606      	mov	r6, r0
    3032:	4628      	mov	r0, r5
    3034:	f00c faac 	bl	f590 <TfLiteTypeGetName>
    3038:	4b0f      	ldr	r3, [pc, #60]	; (3078 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    303a:	e9cd 6002 	strd	r6, r0, [sp, #8]
    303e:	9301      	str	r3, [sp, #4]
    3040:	4b11      	ldr	r3, [pc, #68]	; (3088 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x468>)
    3042:	4620      	mov	r0, r4
    3044:	9300      	str	r3, [sp, #0]
    3046:	4a0e      	ldr	r2, [pc, #56]	; (3080 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    3048:	234f      	movs	r3, #79	; 0x4f
    304a:	490e      	ldr	r1, [pc, #56]	; (3084 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    304c:	47b8      	blx	r7
    304e:	e5fe      	b.n	2c4e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    op_data->beta = static_cast<double>(params->beta);
    3050:	f8d9 0000 	ldr.w	r0, [r9]
    3054:	f7fd f9e4 	bl	420 <__aeabi_f2d>
    3058:	e9c7 0100 	strd	r0, r1, [r7]
    305c:	e7a4      	b.n	2fa8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    305e:	bf00      	nop
    3060:	00140014 	.word	0x00140014
    3064:	3f240014 	.word	0x3f240014
    3068:	00018568 	.word	0x00018568
    306c:	000184ee 	.word	0x000184ee
    3070:	3b800000 	.word	0x3b800000
    3074:	0001856d 	.word	0x0001856d
    3078:	0001858f 	.word	0x0001858f
    307c:	000181db 	.word	0x000181db
    3080:	000183a4 	.word	0x000183a4
    3084:	000181b4 	.word	0x000181b4
    3088:	000181ce 	.word	0x000181ce
    308c:	00000000 	.word	0x00000000

00003090 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    3090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    3094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
    3098:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    309c:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
    30a0:	ec57 6b10 	vmov	r6, r7, d0
    30a4:	ec59 8b11 	vmov	r8, r9, d1
    30a8:	4693      	mov	fp, r2
    30aa:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    30ac:	f7fd f9a6 	bl	3fc <__aeabi_i2d>
    30b0:	4642      	mov	r2, r8
    30b2:	4604      	mov	r4, r0
    30b4:	460d      	mov	r5, r1
    30b6:	464b      	mov	r3, r9
    30b8:	4630      	mov	r0, r6
    30ba:	4639      	mov	r1, r7
    30bc:	f7fd fa08 	bl	4d0 <__aeabi_dmul>
    30c0:	4602      	mov	r2, r0
    30c2:	460b      	mov	r3, r1
    30c4:	4620      	mov	r0, r4
    30c6:	4629      	mov	r1, r5
    30c8:	f7fd fa02 	bl	4d0 <__aeabi_dmul>
    30cc:	4602      	mov	r2, r0
    30ce:	460b      	mov	r3, r1
    30d0:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
    30d4:	a30a      	add	r3, pc, #40	; (adr r3, 3100 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>)
    30d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    30da:	f7fd fc89 	bl	9f0 <__aeabi_dcmpgt>
    30de:	b108      	cbz	r0, 30e4 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x54>
	return __b;
    30e0:	ed9f 8b07 	vldr	d8, [pc, #28]	; 3100 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    30e4:	4659      	mov	r1, fp
    30e6:	4650      	mov	r0, sl
    30e8:	eeb0 0a48 	vmov.f32	s0, s16
    30ec:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
    30f0:	ecbd 8b02 	vpop	{d8}
    30f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    30f8:	f00c ba98 	b.w	f62c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
    30fc:	f3af 8000 	nop.w
    3100:	ffc00000 	.word	0xffc00000
    3104:	41dfffff 	.word	0x41dfffff

00003108 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    3108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    310c:	4604      	mov	r4, r0
    310e:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
    3112:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
    3114:	4615      	mov	r5, r2
    3116:	461e      	mov	r6, r3
    3118:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    311a:	f7fd f981 	bl	420 <__aeabi_f2d>
    311e:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
    3120:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
    3122:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    3124:	f7fd f97c 	bl	420 <__aeabi_f2d>
    3128:	4602      	mov	r2, r0
    312a:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    312c:	4640      	mov	r0, r8
    312e:	4649      	mov	r1, r9
    3130:	f7fd f9ce 	bl	4d0 <__aeabi_dmul>
    3134:	4680      	mov	r8, r0
    3136:	4689      	mov	r9, r1
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    3138:	b1d6      	cbz	r6, 3170 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
    313a:	68f0      	ldr	r0, [r6, #12]
    313c:	f7fd f970 	bl	420 <__aeabi_f2d>
    3140:	4602      	mov	r2, r0
    3142:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    3144:	4640      	mov	r0, r8
    3146:	4649      	mov	r1, r9
    3148:	f7fd f80a 	bl	160 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    314c:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
    314e:	68f8      	ldr	r0, [r7, #12]
    3150:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    3154:	f7fd f964 	bl	420 <__aeabi_f2d>
    3158:	4602      	mov	r2, r0
    315a:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    315c:	4640      	mov	r0, r8
    315e:	4649      	mov	r1, r9
    3160:	f7fd fae0 	bl	724 <__aeabi_ddiv>
    3164:	a311      	add	r3, pc, #68	; (adr r3, 31ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    3166:	e9d3 2300 	ldrd	r2, r3, [r3]
    316a:	f7fd fc2d 	bl	9c8 <__aeabi_dcmple>
    316e:	b150      	cbz	r0, 3186 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    3170:	463b      	mov	r3, r7
    3172:	462a      	mov	r2, r5
    3174:	4651      	mov	r1, sl
    3176:	4620      	mov	r0, r4
    3178:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
    317c:	b003      	add	sp, #12
    317e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    3182:	f00c ba6f 	b.w	f664 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    3186:	4b06      	ldr	r3, [pc, #24]	; (31a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    3188:	4620      	mov	r0, r4
    318a:	9300      	str	r3, [sp, #0]
    318c:	6965      	ldr	r5, [r4, #20]
    318e:	f44f 73a2 	mov.w	r3, #324	; 0x144
    3192:	4a04      	ldr	r2, [pc, #16]	; (31a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    3194:	4904      	ldr	r1, [pc, #16]	; (31a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    3196:	47a8      	blx	r5
}
    3198:	2001      	movs	r0, #1
    319a:	b003      	add	sp, #12
    319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31a0:	000186ab 	.word	0x000186ab
    31a4:	00018616 	.word	0x00018616
    31a8:	00018168 	.word	0x00018168
    31ac:	47ae147b 	.word	0x47ae147b
    31b0:	3f947ae1 	.word	0x3f947ae1
    31b4:	00000000 	.word	0x00000000

000031b8 <cos>:
    31b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    31ba:	ec53 2b10 	vmov	r2, r3, d0
    31be:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    31c2:	4825      	ldr	r0, [pc, #148]	; (3258 <cos+0xa0>)
    31c4:	4281      	cmp	r1, r0
    31c6:	dc06      	bgt.n	31d6 <cos+0x1e>
    31c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 3250 <cos+0x98>
    31cc:	b005      	add	sp, #20
    31ce:	f85d eb04 	ldr.w	lr, [sp], #4
    31d2:	f001 b881 	b.w	42d8 <__kernel_cos>
    31d6:	4821      	ldr	r0, [pc, #132]	; (325c <cos+0xa4>)
    31d8:	4281      	cmp	r1, r0
    31da:	dd09      	ble.n	31f0 <cos+0x38>
    31dc:	ee10 0a10 	vmov	r0, s0
    31e0:	4619      	mov	r1, r3
    31e2:	f7fc ffbd 	bl	160 <__aeabi_dsub>
    31e6:	ec41 0b10 	vmov	d0, r0, r1
    31ea:	b005      	add	sp, #20
    31ec:	f85d fb04 	ldr.w	pc, [sp], #4
    31f0:	4668      	mov	r0, sp
    31f2:	f000 fe65 	bl	3ec0 <__ieee754_rem_pio2>
    31f6:	f000 0003 	and.w	r0, r0, #3
    31fa:	2801      	cmp	r0, #1
    31fc:	d00b      	beq.n	3216 <cos+0x5e>
    31fe:	2802      	cmp	r0, #2
    3200:	d016      	beq.n	3230 <cos+0x78>
    3202:	b9e0      	cbnz	r0, 323e <cos+0x86>
    3204:	ed9d 1b02 	vldr	d1, [sp, #8]
    3208:	ed9d 0b00 	vldr	d0, [sp]
    320c:	f001 f864 	bl	42d8 <__kernel_cos>
    3210:	ec51 0b10 	vmov	r0, r1, d0
    3214:	e7e7      	b.n	31e6 <cos+0x2e>
    3216:	ed9d 1b02 	vldr	d1, [sp, #8]
    321a:	ed9d 0b00 	vldr	d0, [sp]
    321e:	f001 fc6f 	bl	4b00 <__kernel_sin>
    3222:	ee10 0a10 	vmov	r0, s0
    3226:	ec53 2b10 	vmov	r2, r3, d0
    322a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    322e:	e7da      	b.n	31e6 <cos+0x2e>
    3230:	ed9d 1b02 	vldr	d1, [sp, #8]
    3234:	ed9d 0b00 	vldr	d0, [sp]
    3238:	f001 f84e 	bl	42d8 <__kernel_cos>
    323c:	e7f1      	b.n	3222 <cos+0x6a>
    323e:	ed9d 1b02 	vldr	d1, [sp, #8]
    3242:	ed9d 0b00 	vldr	d0, [sp]
    3246:	2001      	movs	r0, #1
    3248:	f001 fc5a 	bl	4b00 <__kernel_sin>
    324c:	e7e0      	b.n	3210 <cos+0x58>
    324e:	bf00      	nop
	...
    3258:	3fe921fb 	.word	0x3fe921fb
    325c:	7fefffff 	.word	0x7fefffff

00003260 <floor>:
    3260:	ec51 0b10 	vmov	r0, r1, d0
    3264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3268:	f3c1 570a 	ubfx	r7, r1, #20, #11
    326c:	460c      	mov	r4, r1
    326e:	ee10 5a10 	vmov	r5, s0
    3272:	ee10 8a10 	vmov	r8, s0
    3276:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    327a:	2e13      	cmp	r6, #19
    327c:	dc33      	bgt.n	32e6 <floor+0x86>
    327e:	2e00      	cmp	r6, #0
    3280:	da14      	bge.n	32ac <floor+0x4c>
    3282:	a335      	add	r3, pc, #212	; (adr r3, 3358 <floor+0xf8>)
    3284:	e9d3 2300 	ldrd	r2, r3, [r3]
    3288:	f7fc ff6c 	bl	164 <__adddf3>
    328c:	2200      	movs	r2, #0
    328e:	2300      	movs	r3, #0
    3290:	f7fd fbae 	bl	9f0 <__aeabi_dcmpgt>
    3294:	b138      	cbz	r0, 32a6 <floor+0x46>
    3296:	2c00      	cmp	r4, #0
    3298:	da58      	bge.n	334c <floor+0xec>
    329a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    329e:	431d      	orrs	r5, r3
    32a0:	d001      	beq.n	32a6 <floor+0x46>
    32a2:	2500      	movs	r5, #0
    32a4:	4c2e      	ldr	r4, [pc, #184]	; (3360 <floor+0x100>)
    32a6:	4621      	mov	r1, r4
    32a8:	4628      	mov	r0, r5
    32aa:	e026      	b.n	32fa <floor+0x9a>
    32ac:	4f2d      	ldr	r7, [pc, #180]	; (3364 <floor+0x104>)
    32ae:	4137      	asrs	r7, r6
    32b0:	ea01 0307 	and.w	r3, r1, r7
    32b4:	4303      	orrs	r3, r0
    32b6:	d020      	beq.n	32fa <floor+0x9a>
    32b8:	a327      	add	r3, pc, #156	; (adr r3, 3358 <floor+0xf8>)
    32ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    32be:	f7fc ff51 	bl	164 <__adddf3>
    32c2:	2200      	movs	r2, #0
    32c4:	2300      	movs	r3, #0
    32c6:	f7fd fb93 	bl	9f0 <__aeabi_dcmpgt>
    32ca:	2800      	cmp	r0, #0
    32cc:	d0eb      	beq.n	32a6 <floor+0x46>
    32ce:	2c00      	cmp	r4, #0
    32d0:	f04f 0500 	mov.w	r5, #0
    32d4:	bfbe      	ittt	lt
    32d6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    32da:	fa43 f606 	asrlt.w	r6, r3, r6
    32de:	19a4      	addlt	r4, r4, r6
    32e0:	ea24 0407 	bic.w	r4, r4, r7
    32e4:	e7df      	b.n	32a6 <floor+0x46>
    32e6:	2e33      	cmp	r6, #51	; 0x33
    32e8:	dd0b      	ble.n	3302 <floor+0xa2>
    32ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    32ee:	d104      	bne.n	32fa <floor+0x9a>
    32f0:	ee10 2a10 	vmov	r2, s0
    32f4:	460b      	mov	r3, r1
    32f6:	f7fc ff35 	bl	164 <__adddf3>
    32fa:	ec41 0b10 	vmov	d0, r0, r1
    32fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3302:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    3306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    330a:	fa23 f707 	lsr.w	r7, r3, r7
    330e:	4207      	tst	r7, r0
    3310:	d0f3      	beq.n	32fa <floor+0x9a>
    3312:	a311      	add	r3, pc, #68	; (adr r3, 3358 <floor+0xf8>)
    3314:	e9d3 2300 	ldrd	r2, r3, [r3]
    3318:	f7fc ff24 	bl	164 <__adddf3>
    331c:	2200      	movs	r2, #0
    331e:	2300      	movs	r3, #0
    3320:	f7fd fb66 	bl	9f0 <__aeabi_dcmpgt>
    3324:	2800      	cmp	r0, #0
    3326:	d0be      	beq.n	32a6 <floor+0x46>
    3328:	2c00      	cmp	r4, #0
    332a:	da02      	bge.n	3332 <floor+0xd2>
    332c:	2e14      	cmp	r6, #20
    332e:	d103      	bne.n	3338 <floor+0xd8>
    3330:	3401      	adds	r4, #1
    3332:	ea25 0507 	bic.w	r5, r5, r7
    3336:	e7b6      	b.n	32a6 <floor+0x46>
    3338:	2301      	movs	r3, #1
    333a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    333e:	fa03 f606 	lsl.w	r6, r3, r6
    3342:	4435      	add	r5, r6
    3344:	4545      	cmp	r5, r8
    3346:	bf38      	it	cc
    3348:	18e4      	addcc	r4, r4, r3
    334a:	e7f2      	b.n	3332 <floor+0xd2>
    334c:	2500      	movs	r5, #0
    334e:	462c      	mov	r4, r5
    3350:	e7a9      	b.n	32a6 <floor+0x46>
    3352:	bf00      	nop
    3354:	f3af 8000 	nop.w
    3358:	8800759c 	.word	0x8800759c
    335c:	7e37e43c 	.word	0x7e37e43c
    3360:	bff00000 	.word	0xbff00000
    3364:	000fffff 	.word	0x000fffff

00003368 <sin>:
    3368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    336a:	ec53 2b10 	vmov	r2, r3, d0
    336e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    3372:	4827      	ldr	r0, [pc, #156]	; (3410 <sin+0xa8>)
    3374:	4281      	cmp	r1, r0
    3376:	dc07      	bgt.n	3388 <sin+0x20>
    3378:	2000      	movs	r0, #0
    337a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 3408 <sin+0xa0>
    337e:	b005      	add	sp, #20
    3380:	f85d eb04 	ldr.w	lr, [sp], #4
    3384:	f001 bbbc 	b.w	4b00 <__kernel_sin>
    3388:	4822      	ldr	r0, [pc, #136]	; (3414 <sin+0xac>)
    338a:	4281      	cmp	r1, r0
    338c:	dd09      	ble.n	33a2 <sin+0x3a>
    338e:	ee10 0a10 	vmov	r0, s0
    3392:	4619      	mov	r1, r3
    3394:	f7fc fee4 	bl	160 <__aeabi_dsub>
    3398:	ec41 0b10 	vmov	d0, r0, r1
    339c:	b005      	add	sp, #20
    339e:	f85d fb04 	ldr.w	pc, [sp], #4
    33a2:	4668      	mov	r0, sp
    33a4:	f000 fd8c 	bl	3ec0 <__ieee754_rem_pio2>
    33a8:	f000 0003 	and.w	r0, r0, #3
    33ac:	2801      	cmp	r0, #1
    33ae:	d00c      	beq.n	33ca <sin+0x62>
    33b0:	2802      	cmp	r0, #2
    33b2:	d011      	beq.n	33d8 <sin+0x70>
    33b4:	b9f0      	cbnz	r0, 33f4 <sin+0x8c>
    33b6:	2001      	movs	r0, #1
    33b8:	ed9d 1b02 	vldr	d1, [sp, #8]
    33bc:	ed9d 0b00 	vldr	d0, [sp]
    33c0:	f001 fb9e 	bl	4b00 <__kernel_sin>
    33c4:	ec51 0b10 	vmov	r0, r1, d0
    33c8:	e7e6      	b.n	3398 <sin+0x30>
    33ca:	ed9d 1b02 	vldr	d1, [sp, #8]
    33ce:	ed9d 0b00 	vldr	d0, [sp]
    33d2:	f000 ff81 	bl	42d8 <__kernel_cos>
    33d6:	e7f5      	b.n	33c4 <sin+0x5c>
    33d8:	ed9d 1b02 	vldr	d1, [sp, #8]
    33dc:	ed9d 0b00 	vldr	d0, [sp]
    33e0:	2001      	movs	r0, #1
    33e2:	f001 fb8d 	bl	4b00 <__kernel_sin>
    33e6:	ee10 0a10 	vmov	r0, s0
    33ea:	ec53 2b10 	vmov	r2, r3, d0
    33ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    33f2:	e7d1      	b.n	3398 <sin+0x30>
    33f4:	ed9d 1b02 	vldr	d1, [sp, #8]
    33f8:	ed9d 0b00 	vldr	d0, [sp]
    33fc:	f000 ff6c 	bl	42d8 <__kernel_cos>
    3400:	e7f1      	b.n	33e6 <sin+0x7e>
    3402:	bf00      	nop
    3404:	f3af 8000 	nop.w
	...
    3410:	3fe921fb 	.word	0x3fe921fb
    3414:	7fefffff 	.word	0x7fefffff

00003418 <tan>:
    3418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    341a:	ec53 2b10 	vmov	r2, r3, d0
    341e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    3422:	4815      	ldr	r0, [pc, #84]	; (3478 <tan+0x60>)
    3424:	4281      	cmp	r1, r0
    3426:	dc07      	bgt.n	3438 <tan+0x20>
    3428:	2001      	movs	r0, #1
    342a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 3470 <tan+0x58>
    342e:	b005      	add	sp, #20
    3430:	f85d eb04 	ldr.w	lr, [sp], #4
    3434:	f001 bc24 	b.w	4c80 <__kernel_tan>
    3438:	4810      	ldr	r0, [pc, #64]	; (347c <tan+0x64>)
    343a:	4281      	cmp	r1, r0
    343c:	dd09      	ble.n	3452 <tan+0x3a>
    343e:	ee10 0a10 	vmov	r0, s0
    3442:	4619      	mov	r1, r3
    3444:	f7fc fe8c 	bl	160 <__aeabi_dsub>
    3448:	ec41 0b10 	vmov	d0, r0, r1
    344c:	b005      	add	sp, #20
    344e:	f85d fb04 	ldr.w	pc, [sp], #4
    3452:	4668      	mov	r0, sp
    3454:	f000 fd34 	bl	3ec0 <__ieee754_rem_pio2>
    3458:	0040      	lsls	r0, r0, #1
    345a:	f000 0002 	and.w	r0, r0, #2
    345e:	ed9d 1b02 	vldr	d1, [sp, #8]
    3462:	ed9d 0b00 	vldr	d0, [sp]
    3466:	f1c0 0001 	rsb	r0, r0, #1
    346a:	f001 fc09 	bl	4c80 <__kernel_tan>
    346e:	e7ed      	b.n	344c <tan+0x34>
	...
    3478:	3fe921fb 	.word	0x3fe921fb
    347c:	7fefffff 	.word	0x7fefffff

00003480 <__ieee754_pow>:
    3480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3484:	ed2d 8b06 	vpush	{d8-d10}
    3488:	b089      	sub	sp, #36	; 0x24
    348a:	ed8d 1b00 	vstr	d1, [sp]
    348e:	e9dd 0700 	ldrd	r0, r7, [sp]
    3492:	ec53 2b10 	vmov	r2, r3, d0
    3496:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
    349a:	ea56 0100 	orrs.w	r1, r6, r0
    349e:	f000 84cd 	beq.w	3e3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a4>
    34a2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    34a6:	497e      	ldr	r1, [pc, #504]	; (36a0 <__ieee754_pow+0x220>)
    34a8:	4699      	mov	r9, r3
    34aa:	ee10 8a10 	vmov	r8, s0
    34ae:	428c      	cmp	r4, r1
    34b0:	dc09      	bgt.n	34c6 <__ieee754_pow+0x46>
    34b2:	d103      	bne.n	34bc <__ieee754_pow+0x3c>
    34b4:	b97a      	cbnz	r2, 34d6 <__ieee754_pow+0x56>
    34b6:	42a6      	cmp	r6, r4
    34b8:	dd02      	ble.n	34c0 <__ieee754_pow+0x40>
    34ba:	e00c      	b.n	34d6 <__ieee754_pow+0x56>
    34bc:	428e      	cmp	r6, r1
    34be:	dc02      	bgt.n	34c6 <__ieee754_pow+0x46>
    34c0:	428e      	cmp	r6, r1
    34c2:	d110      	bne.n	34e6 <__ieee754_pow+0x66>
    34c4:	b178      	cbz	r0, 34e6 <__ieee754_pow+0x66>
    34c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    34ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    34ce:	ea54 0308 	orrs.w	r3, r4, r8
    34d2:	f000 84b3 	beq.w	3e3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a4>
    34d6:	4873      	ldr	r0, [pc, #460]	; (36a4 <__ieee754_pow+0x224>)
    34d8:	b009      	add	sp, #36	; 0x24
    34da:	ecbd 8b06 	vpop	{d8-d10}
    34de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34e2:	f001 bda1 	b.w	5028 <nan>
    34e6:	f1b9 0f00 	cmp.w	r9, #0
    34ea:	da36      	bge.n	355a <__ieee754_pow+0xda>
    34ec:	496e      	ldr	r1, [pc, #440]	; (36a8 <__ieee754_pow+0x228>)
    34ee:	428e      	cmp	r6, r1
    34f0:	dc51      	bgt.n	3596 <__ieee754_pow+0x116>
    34f2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
    34f6:	428e      	cmp	r6, r1
    34f8:	f340 84ab 	ble.w	3e52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ba>
    34fc:	1531      	asrs	r1, r6, #20
    34fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    3502:	2914      	cmp	r1, #20
    3504:	dd0f      	ble.n	3526 <__ieee754_pow+0xa6>
    3506:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
    350a:	fa20 fc01 	lsr.w	ip, r0, r1
    350e:	fa0c f101 	lsl.w	r1, ip, r1
    3512:	4281      	cmp	r1, r0
    3514:	f040 849d 	bne.w	3e52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ba>
    3518:	f00c 0c01 	and.w	ip, ip, #1
    351c:	f1cc 0102 	rsb	r1, ip, #2
    3520:	9104      	str	r1, [sp, #16]
    3522:	b180      	cbz	r0, 3546 <__ieee754_pow+0xc6>
    3524:	e059      	b.n	35da <__ieee754_pow+0x15a>
    3526:	2800      	cmp	r0, #0
    3528:	d155      	bne.n	35d6 <__ieee754_pow+0x156>
    352a:	f1c1 0114 	rsb	r1, r1, #20
    352e:	fa46 fc01 	asr.w	ip, r6, r1
    3532:	fa0c f101 	lsl.w	r1, ip, r1
    3536:	42b1      	cmp	r1, r6
    3538:	f040 8488 	bne.w	3e4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3b4>
    353c:	f00c 0c01 	and.w	ip, ip, #1
    3540:	f1cc 0102 	rsb	r1, ip, #2
    3544:	9104      	str	r1, [sp, #16]
    3546:	4959      	ldr	r1, [pc, #356]	; (36ac <__ieee754_pow+0x22c>)
    3548:	428e      	cmp	r6, r1
    354a:	d12d      	bne.n	35a8 <__ieee754_pow+0x128>
    354c:	2f00      	cmp	r7, #0
    354e:	da79      	bge.n	3644 <__ieee754_pow+0x1c4>
    3550:	2000      	movs	r0, #0
    3552:	4956      	ldr	r1, [pc, #344]	; (36ac <__ieee754_pow+0x22c>)
    3554:	f7fd f8e6 	bl	724 <__aeabi_ddiv>
    3558:	e016      	b.n	3588 <__ieee754_pow+0x108>
    355a:	2100      	movs	r1, #0
    355c:	9104      	str	r1, [sp, #16]
    355e:	2800      	cmp	r0, #0
    3560:	d13b      	bne.n	35da <__ieee754_pow+0x15a>
    3562:	494f      	ldr	r1, [pc, #316]	; (36a0 <__ieee754_pow+0x220>)
    3564:	428e      	cmp	r6, r1
    3566:	d1ee      	bne.n	3546 <__ieee754_pow+0xc6>
    3568:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    356c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    3570:	ea53 0308 	orrs.w	r3, r3, r8
    3574:	f000 8462 	beq.w	3e3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a4>
    3578:	4b4d      	ldr	r3, [pc, #308]	; (36b0 <__ieee754_pow+0x230>)
    357a:	429c      	cmp	r4, r3
    357c:	dd0d      	ble.n	359a <__ieee754_pow+0x11a>
    357e:	2f00      	cmp	r7, #0
    3580:	f280 8460 	bge.w	3e44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ac>
    3584:	2000      	movs	r0, #0
    3586:	2100      	movs	r1, #0
    3588:	ec41 0b10 	vmov	d0, r0, r1
    358c:	b009      	add	sp, #36	; 0x24
    358e:	ecbd 8b06 	vpop	{d8-d10}
    3592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3596:	2102      	movs	r1, #2
    3598:	e7e0      	b.n	355c <__ieee754_pow+0xdc>
    359a:	2f00      	cmp	r7, #0
    359c:	daf2      	bge.n	3584 <__ieee754_pow+0x104>
    359e:	e9dd 0300 	ldrd	r0, r3, [sp]
    35a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    35a6:	e7ef      	b.n	3588 <__ieee754_pow+0x108>
    35a8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
    35ac:	d104      	bne.n	35b8 <__ieee754_pow+0x138>
    35ae:	4610      	mov	r0, r2
    35b0:	4619      	mov	r1, r3
    35b2:	f7fc ff8d 	bl	4d0 <__aeabi_dmul>
    35b6:	e7e7      	b.n	3588 <__ieee754_pow+0x108>
    35b8:	493e      	ldr	r1, [pc, #248]	; (36b4 <__ieee754_pow+0x234>)
    35ba:	428f      	cmp	r7, r1
    35bc:	d10d      	bne.n	35da <__ieee754_pow+0x15a>
    35be:	f1b9 0f00 	cmp.w	r9, #0
    35c2:	db0a      	blt.n	35da <__ieee754_pow+0x15a>
    35c4:	ec43 2b10 	vmov	d0, r2, r3
    35c8:	b009      	add	sp, #36	; 0x24
    35ca:	ecbd 8b06 	vpop	{d8-d10}
    35ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35d2:	f00c baa5 	b.w	fb20 <__ieee754_sqrt>
    35d6:	2100      	movs	r1, #0
    35d8:	9104      	str	r1, [sp, #16]
    35da:	ec43 2b10 	vmov	d0, r2, r3
    35de:	e9cd 2302 	strd	r2, r3, [sp, #8]
    35e2:	f011 faaf 	bl	14b44 <fabs>
    35e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    35ea:	ec51 0b10 	vmov	r0, r1, d0
    35ee:	f1b8 0f00 	cmp.w	r8, #0
    35f2:	d12a      	bne.n	364a <__ieee754_pow+0x1ca>
    35f4:	b12c      	cbz	r4, 3602 <__ieee754_pow+0x182>
    35f6:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
    35fa:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 36ac <__ieee754_pow+0x22c>
    35fe:	45e6      	cmp	lr, ip
    3600:	d123      	bne.n	364a <__ieee754_pow+0x1ca>
    3602:	2f00      	cmp	r7, #0
    3604:	da05      	bge.n	3612 <__ieee754_pow+0x192>
    3606:	4602      	mov	r2, r0
    3608:	460b      	mov	r3, r1
    360a:	2000      	movs	r0, #0
    360c:	4927      	ldr	r1, [pc, #156]	; (36ac <__ieee754_pow+0x22c>)
    360e:	f7fd f889 	bl	724 <__aeabi_ddiv>
    3612:	f1b9 0f00 	cmp.w	r9, #0
    3616:	dab7      	bge.n	3588 <__ieee754_pow+0x108>
    3618:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    361c:	9b04      	ldr	r3, [sp, #16]
    361e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    3622:	4323      	orrs	r3, r4
    3624:	d108      	bne.n	3638 <__ieee754_pow+0x1b8>
    3626:	4602      	mov	r2, r0
    3628:	460b      	mov	r3, r1
    362a:	4610      	mov	r0, r2
    362c:	4619      	mov	r1, r3
    362e:	f7fc fd97 	bl	160 <__aeabi_dsub>
    3632:	4602      	mov	r2, r0
    3634:	460b      	mov	r3, r1
    3636:	e78d      	b.n	3554 <__ieee754_pow+0xd4>
    3638:	9b04      	ldr	r3, [sp, #16]
    363a:	2b01      	cmp	r3, #1
    363c:	d1a4      	bne.n	3588 <__ieee754_pow+0x108>
    363e:	4602      	mov	r2, r0
    3640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    3644:	4610      	mov	r0, r2
    3646:	4619      	mov	r1, r3
    3648:	e79e      	b.n	3588 <__ieee754_pow+0x108>
    364a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
    364e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
    3652:	9506      	str	r5, [sp, #24]
    3654:	9d04      	ldr	r5, [sp, #16]
    3656:	46ac      	mov	ip, r5
    3658:	9d06      	ldr	r5, [sp, #24]
    365a:	ea5c 0505 	orrs.w	r5, ip, r5
    365e:	d0e4      	beq.n	362a <__ieee754_pow+0x1aa>
    3660:	4b15      	ldr	r3, [pc, #84]	; (36b8 <__ieee754_pow+0x238>)
    3662:	429e      	cmp	r6, r3
    3664:	f340 80fc 	ble.w	3860 <__ieee754_pow+0x3e0>
    3668:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    366c:	429e      	cmp	r6, r3
    366e:	4b10      	ldr	r3, [pc, #64]	; (36b0 <__ieee754_pow+0x230>)
    3670:	dd07      	ble.n	3682 <__ieee754_pow+0x202>
    3672:	429c      	cmp	r4, r3
    3674:	dc0a      	bgt.n	368c <__ieee754_pow+0x20c>
    3676:	2f00      	cmp	r7, #0
    3678:	da84      	bge.n	3584 <__ieee754_pow+0x104>
    367a:	a307      	add	r3, pc, #28	; (adr r3, 3698 <__ieee754_pow+0x218>)
    367c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3680:	e795      	b.n	35ae <__ieee754_pow+0x12e>
    3682:	429c      	cmp	r4, r3
    3684:	dbf7      	blt.n	3676 <__ieee754_pow+0x1f6>
    3686:	4b09      	ldr	r3, [pc, #36]	; (36ac <__ieee754_pow+0x22c>)
    3688:	429c      	cmp	r4, r3
    368a:	dd17      	ble.n	36bc <__ieee754_pow+0x23c>
    368c:	2f00      	cmp	r7, #0
    368e:	dcf4      	bgt.n	367a <__ieee754_pow+0x1fa>
    3690:	e778      	b.n	3584 <__ieee754_pow+0x104>
    3692:	bf00      	nop
    3694:	f3af 8000 	nop.w
    3698:	8800759c 	.word	0x8800759c
    369c:	7e37e43c 	.word	0x7e37e43c
    36a0:	7ff00000 	.word	0x7ff00000
    36a4:	000179b2 	.word	0x000179b2
    36a8:	433fffff 	.word	0x433fffff
    36ac:	3ff00000 	.word	0x3ff00000
    36b0:	3fefffff 	.word	0x3fefffff
    36b4:	3fe00000 	.word	0x3fe00000
    36b8:	41e00000 	.word	0x41e00000
    36bc:	2200      	movs	r2, #0
    36be:	4b64      	ldr	r3, [pc, #400]	; (3850 <__ieee754_pow+0x3d0>)
    36c0:	f7fc fd4e 	bl	160 <__aeabi_dsub>
    36c4:	4604      	mov	r4, r0
    36c6:	460d      	mov	r5, r1
    36c8:	a355      	add	r3, pc, #340	; (adr r3, 3820 <__ieee754_pow+0x3a0>)
    36ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    36ce:	f7fc feff 	bl	4d0 <__aeabi_dmul>
    36d2:	4606      	mov	r6, r0
    36d4:	460f      	mov	r7, r1
    36d6:	4620      	mov	r0, r4
    36d8:	4629      	mov	r1, r5
    36da:	a353      	add	r3, pc, #332	; (adr r3, 3828 <__ieee754_pow+0x3a8>)
    36dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    36e0:	f7fc fef6 	bl	4d0 <__aeabi_dmul>
    36e4:	2200      	movs	r2, #0
    36e6:	4682      	mov	sl, r0
    36e8:	468b      	mov	fp, r1
    36ea:	4b5a      	ldr	r3, [pc, #360]	; (3854 <__ieee754_pow+0x3d4>)
    36ec:	4620      	mov	r0, r4
    36ee:	4629      	mov	r1, r5
    36f0:	f7fc feee 	bl	4d0 <__aeabi_dmul>
    36f4:	4602      	mov	r2, r0
    36f6:	460b      	mov	r3, r1
    36f8:	a14d      	add	r1, pc, #308	; (adr r1, 3830 <__ieee754_pow+0x3b0>)
    36fa:	e9d1 0100 	ldrd	r0, r1, [r1]
    36fe:	f7fc fd2f 	bl	160 <__aeabi_dsub>
    3702:	4622      	mov	r2, r4
    3704:	462b      	mov	r3, r5
    3706:	f7fc fee3 	bl	4d0 <__aeabi_dmul>
    370a:	4602      	mov	r2, r0
    370c:	460b      	mov	r3, r1
    370e:	2000      	movs	r0, #0
    3710:	4951      	ldr	r1, [pc, #324]	; (3858 <__ieee754_pow+0x3d8>)
    3712:	f7fc fd25 	bl	160 <__aeabi_dsub>
    3716:	4680      	mov	r8, r0
    3718:	4689      	mov	r9, r1
    371a:	4622      	mov	r2, r4
    371c:	462b      	mov	r3, r5
    371e:	4620      	mov	r0, r4
    3720:	4629      	mov	r1, r5
    3722:	f7fc fed5 	bl	4d0 <__aeabi_dmul>
    3726:	4602      	mov	r2, r0
    3728:	460b      	mov	r3, r1
    372a:	4640      	mov	r0, r8
    372c:	4649      	mov	r1, r9
    372e:	f7fc fecf 	bl	4d0 <__aeabi_dmul>
    3732:	a341      	add	r3, pc, #260	; (adr r3, 3838 <__ieee754_pow+0x3b8>)
    3734:	e9d3 2300 	ldrd	r2, r3, [r3]
    3738:	f7fc feca 	bl	4d0 <__aeabi_dmul>
    373c:	4602      	mov	r2, r0
    373e:	460b      	mov	r3, r1
    3740:	4650      	mov	r0, sl
    3742:	4659      	mov	r1, fp
    3744:	f7fc fd0c 	bl	160 <__aeabi_dsub>
    3748:	4602      	mov	r2, r0
    374a:	460b      	mov	r3, r1
    374c:	4680      	mov	r8, r0
    374e:	4689      	mov	r9, r1
    3750:	4630      	mov	r0, r6
    3752:	4639      	mov	r1, r7
    3754:	f7fc fd06 	bl	164 <__adddf3>
    3758:	2000      	movs	r0, #0
    375a:	4632      	mov	r2, r6
    375c:	463b      	mov	r3, r7
    375e:	4604      	mov	r4, r0
    3760:	460d      	mov	r5, r1
    3762:	f7fc fcfd 	bl	160 <__aeabi_dsub>
    3766:	4602      	mov	r2, r0
    3768:	460b      	mov	r3, r1
    376a:	4640      	mov	r0, r8
    376c:	4649      	mov	r1, r9
    376e:	f7fc fcf7 	bl	160 <__aeabi_dsub>
    3772:	9b04      	ldr	r3, [sp, #16]
    3774:	9a06      	ldr	r2, [sp, #24]
    3776:	4682      	mov	sl, r0
    3778:	3b01      	subs	r3, #1
    377a:	468b      	mov	fp, r1
    377c:	4313      	orrs	r3, r2
    377e:	f040 81f0 	bne.w	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
    3782:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 3840 <__ieee754_pow+0x3c0>
    3786:	e9dd 6700 	ldrd	r6, r7, [sp]
    378a:	2600      	movs	r6, #0
    378c:	eeb0 8a47 	vmov.f32	s16, s14
    3790:	eef0 8a67 	vmov.f32	s17, s15
    3794:	463b      	mov	r3, r7
    3796:	4632      	mov	r2, r6
    3798:	e9dd 0100 	ldrd	r0, r1, [sp]
    379c:	f7fc fce0 	bl	160 <__aeabi_dsub>
    37a0:	4622      	mov	r2, r4
    37a2:	462b      	mov	r3, r5
    37a4:	f7fc fe94 	bl	4d0 <__aeabi_dmul>
    37a8:	4680      	mov	r8, r0
    37aa:	4689      	mov	r9, r1
    37ac:	4650      	mov	r0, sl
    37ae:	4659      	mov	r1, fp
    37b0:	e9dd 2300 	ldrd	r2, r3, [sp]
    37b4:	f7fc fe8c 	bl	4d0 <__aeabi_dmul>
    37b8:	4602      	mov	r2, r0
    37ba:	460b      	mov	r3, r1
    37bc:	4640      	mov	r0, r8
    37be:	4649      	mov	r1, r9
    37c0:	f7fc fcd0 	bl	164 <__adddf3>
    37c4:	4680      	mov	r8, r0
    37c6:	4689      	mov	r9, r1
    37c8:	4632      	mov	r2, r6
    37ca:	463b      	mov	r3, r7
    37cc:	4620      	mov	r0, r4
    37ce:	4629      	mov	r1, r5
    37d0:	f7fc fe7e 	bl	4d0 <__aeabi_dmul>
    37d4:	460b      	mov	r3, r1
    37d6:	4604      	mov	r4, r0
    37d8:	460d      	mov	r5, r1
    37da:	4602      	mov	r2, r0
    37dc:	4649      	mov	r1, r9
    37de:	4640      	mov	r0, r8
    37e0:	f7fc fcc0 	bl	164 <__adddf3>
    37e4:	4b1d      	ldr	r3, [pc, #116]	; (385c <__ieee754_pow+0x3dc>)
    37e6:	4606      	mov	r6, r0
    37e8:	460f      	mov	r7, r1
    37ea:	4299      	cmp	r1, r3
    37ec:	468b      	mov	fp, r1
    37ee:	ec45 4b19 	vmov	d9, r4, r5
    37f2:	f340 82fa 	ble.w	3dea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x352>
    37f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    37fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    37fe:	4303      	orrs	r3, r0
    3800:	f000 81ec 	beq.w	3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>
    3804:	a310      	add	r3, pc, #64	; (adr r3, 3848 <__ieee754_pow+0x3c8>)
    3806:	e9d3 2300 	ldrd	r2, r3, [r3]
    380a:	ec51 0b18 	vmov	r0, r1, d8
    380e:	f7fc fe5f 	bl	4d0 <__aeabi_dmul>
    3812:	a30d      	add	r3, pc, #52	; (adr r3, 3848 <__ieee754_pow+0x3c8>)
    3814:	e9d3 2300 	ldrd	r2, r3, [r3]
    3818:	e6cb      	b.n	35b2 <__ieee754_pow+0x132>
    381a:	bf00      	nop
    381c:	f3af 8000 	nop.w
    3820:	60000000 	.word	0x60000000
    3824:	3ff71547 	.word	0x3ff71547
    3828:	f85ddf44 	.word	0xf85ddf44
    382c:	3e54ae0b 	.word	0x3e54ae0b
    3830:	55555555 	.word	0x55555555
    3834:	3fd55555 	.word	0x3fd55555
    3838:	652b82fe 	.word	0x652b82fe
    383c:	3ff71547 	.word	0x3ff71547
    3840:	00000000 	.word	0x00000000
    3844:	bff00000 	.word	0xbff00000
    3848:	8800759c 	.word	0x8800759c
    384c:	7e37e43c 	.word	0x7e37e43c
    3850:	3ff00000 	.word	0x3ff00000
    3854:	3fd00000 	.word	0x3fd00000
    3858:	3fe00000 	.word	0x3fe00000
    385c:	408fffff 	.word	0x408fffff
    3860:	4bd5      	ldr	r3, [pc, #852]	; (3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>)
    3862:	2200      	movs	r2, #0
    3864:	ea03 0309 	and.w	r3, r3, r9
    3868:	b92b      	cbnz	r3, 3876 <__ieee754_pow+0x3f6>
    386a:	4bd4      	ldr	r3, [pc, #848]	; (3bbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x124>)
    386c:	f7fc fe30 	bl	4d0 <__aeabi_dmul>
    3870:	f06f 0234 	mvn.w	r2, #52	; 0x34
    3874:	460c      	mov	r4, r1
    3876:	1523      	asrs	r3, r4, #20
    3878:	f3c4 0413 	ubfx	r4, r4, #0, #20
    387c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    3880:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    3884:	4413      	add	r3, r2
    3886:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    388a:	9305      	str	r3, [sp, #20]
    388c:	4bcc      	ldr	r3, [pc, #816]	; (3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>)
    388e:	429c      	cmp	r4, r3
    3890:	dd08      	ble.n	38a4 <__ieee754_pow+0x424>
    3892:	4bcc      	ldr	r3, [pc, #816]	; (3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>)
    3894:	429c      	cmp	r4, r3
    3896:	f340 8162 	ble.w	3b5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc6>
    389a:	9b05      	ldr	r3, [sp, #20]
    389c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    38a0:	3301      	adds	r3, #1
    38a2:	9305      	str	r3, [sp, #20]
    38a4:	2400      	movs	r4, #0
    38a6:	00e3      	lsls	r3, r4, #3
    38a8:	4682      	mov	sl, r0
    38aa:	4629      	mov	r1, r5
    38ac:	46ab      	mov	fp, r5
    38ae:	9307      	str	r3, [sp, #28]
    38b0:	4bc5      	ldr	r3, [pc, #788]	; (3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>)
    38b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    38b6:	ed93 7b00 	vldr	d7, [r3]
    38ba:	eeb0 9a47 	vmov.f32	s18, s14
    38be:	eef0 9a67 	vmov.f32	s19, s15
    38c2:	ec53 2b17 	vmov	r2, r3, d7
    38c6:	f7fc fc4b 	bl	160 <__aeabi_dsub>
    38ca:	4652      	mov	r2, sl
    38cc:	4606      	mov	r6, r0
    38ce:	460f      	mov	r7, r1
    38d0:	462b      	mov	r3, r5
    38d2:	106d      	asrs	r5, r5, #1
    38d4:	ec51 0b19 	vmov	r0, r1, d9
    38d8:	f7fc fc44 	bl	164 <__adddf3>
    38dc:	4602      	mov	r2, r0
    38de:	460b      	mov	r3, r1
    38e0:	2000      	movs	r0, #0
    38e2:	49ba      	ldr	r1, [pc, #744]	; (3bcc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x134>)
    38e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    38e8:	f7fc ff1c 	bl	724 <__aeabi_ddiv>
    38ec:	4602      	mov	r2, r0
    38ee:	460b      	mov	r3, r1
    38f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    38f4:	ec41 0b1a 	vmov	d10, r0, r1
    38f8:	4630      	mov	r0, r6
    38fa:	4639      	mov	r1, r7
    38fc:	f7fc fde8 	bl	4d0 <__aeabi_dmul>
    3900:	2300      	movs	r3, #0
    3902:	2200      	movs	r2, #0
    3904:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3908:	9302      	str	r3, [sp, #8]
    390a:	eb05 4384 	add.w	r3, r5, r4, lsl #18
    390e:	4614      	mov	r4, r2
    3910:	461d      	mov	r5, r3
    3912:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    3916:	ec41 0b18 	vmov	d8, r0, r1
    391a:	4640      	mov	r0, r8
    391c:	4649      	mov	r1, r9
    391e:	f7fc fdd7 	bl	4d0 <__aeabi_dmul>
    3922:	4602      	mov	r2, r0
    3924:	460b      	mov	r3, r1
    3926:	4630      	mov	r0, r6
    3928:	4639      	mov	r1, r7
    392a:	f7fc fc19 	bl	160 <__aeabi_dsub>
    392e:	4606      	mov	r6, r0
    3930:	460f      	mov	r7, r1
    3932:	4620      	mov	r0, r4
    3934:	4629      	mov	r1, r5
    3936:	ec53 2b19 	vmov	r2, r3, d9
    393a:	f7fc fc11 	bl	160 <__aeabi_dsub>
    393e:	4602      	mov	r2, r0
    3940:	460b      	mov	r3, r1
    3942:	4650      	mov	r0, sl
    3944:	4659      	mov	r1, fp
    3946:	f7fc fc0b 	bl	160 <__aeabi_dsub>
    394a:	4642      	mov	r2, r8
    394c:	464b      	mov	r3, r9
    394e:	f7fc fdbf 	bl	4d0 <__aeabi_dmul>
    3952:	4602      	mov	r2, r0
    3954:	460b      	mov	r3, r1
    3956:	4630      	mov	r0, r6
    3958:	4639      	mov	r1, r7
    395a:	f7fc fc01 	bl	160 <__aeabi_dsub>
    395e:	ec53 2b1a 	vmov	r2, r3, d10
    3962:	f7fc fdb5 	bl	4d0 <__aeabi_dmul>
    3966:	ec53 2b18 	vmov	r2, r3, d8
    396a:	ec41 0b19 	vmov	d9, r0, r1
    396e:	ec51 0b18 	vmov	r0, r1, d8
    3972:	f7fc fdad 	bl	4d0 <__aeabi_dmul>
    3976:	4604      	mov	r4, r0
    3978:	460d      	mov	r5, r1
    397a:	a37b      	add	r3, pc, #492	; (adr r3, 3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    397c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3980:	f7fc fda6 	bl	4d0 <__aeabi_dmul>
    3984:	a37a      	add	r3, pc, #488	; (adr r3, 3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>)
    3986:	e9d3 2300 	ldrd	r2, r3, [r3]
    398a:	f7fc fbeb 	bl	164 <__adddf3>
    398e:	4622      	mov	r2, r4
    3990:	462b      	mov	r3, r5
    3992:	f7fc fd9d 	bl	4d0 <__aeabi_dmul>
    3996:	a378      	add	r3, pc, #480	; (adr r3, 3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>)
    3998:	e9d3 2300 	ldrd	r2, r3, [r3]
    399c:	f7fc fbe2 	bl	164 <__adddf3>
    39a0:	4622      	mov	r2, r4
    39a2:	462b      	mov	r3, r5
    39a4:	f7fc fd94 	bl	4d0 <__aeabi_dmul>
    39a8:	a375      	add	r3, pc, #468	; (adr r3, 3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    39aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    39ae:	f7fc fbd9 	bl	164 <__adddf3>
    39b2:	4622      	mov	r2, r4
    39b4:	462b      	mov	r3, r5
    39b6:	f7fc fd8b 	bl	4d0 <__aeabi_dmul>
    39ba:	a373      	add	r3, pc, #460	; (adr r3, 3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    39bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    39c0:	f7fc fbd0 	bl	164 <__adddf3>
    39c4:	4622      	mov	r2, r4
    39c6:	462b      	mov	r3, r5
    39c8:	f7fc fd82 	bl	4d0 <__aeabi_dmul>
    39cc:	a370      	add	r3, pc, #448	; (adr r3, 3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    39ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    39d2:	f7fc fbc7 	bl	164 <__adddf3>
    39d6:	4606      	mov	r6, r0
    39d8:	460f      	mov	r7, r1
    39da:	4622      	mov	r2, r4
    39dc:	462b      	mov	r3, r5
    39de:	4620      	mov	r0, r4
    39e0:	4629      	mov	r1, r5
    39e2:	f7fc fd75 	bl	4d0 <__aeabi_dmul>
    39e6:	4602      	mov	r2, r0
    39e8:	460b      	mov	r3, r1
    39ea:	4630      	mov	r0, r6
    39ec:	4639      	mov	r1, r7
    39ee:	f7fc fd6f 	bl	4d0 <__aeabi_dmul>
    39f2:	4642      	mov	r2, r8
    39f4:	4604      	mov	r4, r0
    39f6:	460d      	mov	r5, r1
    39f8:	464b      	mov	r3, r9
    39fa:	ec51 0b18 	vmov	r0, r1, d8
    39fe:	f7fc fbb1 	bl	164 <__adddf3>
    3a02:	ec53 2b19 	vmov	r2, r3, d9
    3a06:	f7fc fd63 	bl	4d0 <__aeabi_dmul>
    3a0a:	4622      	mov	r2, r4
    3a0c:	462b      	mov	r3, r5
    3a0e:	f7fc fba9 	bl	164 <__adddf3>
    3a12:	4642      	mov	r2, r8
    3a14:	4682      	mov	sl, r0
    3a16:	468b      	mov	fp, r1
    3a18:	464b      	mov	r3, r9
    3a1a:	4640      	mov	r0, r8
    3a1c:	4649      	mov	r1, r9
    3a1e:	f7fc fd57 	bl	4d0 <__aeabi_dmul>
    3a22:	2200      	movs	r2, #0
    3a24:	4b6a      	ldr	r3, [pc, #424]	; (3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>)
    3a26:	4606      	mov	r6, r0
    3a28:	460f      	mov	r7, r1
    3a2a:	f7fc fb9b 	bl	164 <__adddf3>
    3a2e:	4652      	mov	r2, sl
    3a30:	465b      	mov	r3, fp
    3a32:	f7fc fb97 	bl	164 <__adddf3>
    3a36:	2000      	movs	r0, #0
    3a38:	460d      	mov	r5, r1
    3a3a:	460b      	mov	r3, r1
    3a3c:	4604      	mov	r4, r0
    3a3e:	4602      	mov	r2, r0
    3a40:	4649      	mov	r1, r9
    3a42:	4640      	mov	r0, r8
    3a44:	f7fc fd44 	bl	4d0 <__aeabi_dmul>
    3a48:	2200      	movs	r2, #0
    3a4a:	4680      	mov	r8, r0
    3a4c:	4689      	mov	r9, r1
    3a4e:	4b60      	ldr	r3, [pc, #384]	; (3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>)
    3a50:	4620      	mov	r0, r4
    3a52:	4629      	mov	r1, r5
    3a54:	f7fc fb84 	bl	160 <__aeabi_dsub>
    3a58:	4632      	mov	r2, r6
    3a5a:	463b      	mov	r3, r7
    3a5c:	f7fc fb80 	bl	160 <__aeabi_dsub>
    3a60:	4602      	mov	r2, r0
    3a62:	460b      	mov	r3, r1
    3a64:	4650      	mov	r0, sl
    3a66:	4659      	mov	r1, fp
    3a68:	f7fc fb7a 	bl	160 <__aeabi_dsub>
    3a6c:	ec53 2b18 	vmov	r2, r3, d8
    3a70:	f7fc fd2e 	bl	4d0 <__aeabi_dmul>
    3a74:	4606      	mov	r6, r0
    3a76:	460f      	mov	r7, r1
    3a78:	4622      	mov	r2, r4
    3a7a:	462b      	mov	r3, r5
    3a7c:	ec51 0b19 	vmov	r0, r1, d9
    3a80:	f7fc fd26 	bl	4d0 <__aeabi_dmul>
    3a84:	4602      	mov	r2, r0
    3a86:	460b      	mov	r3, r1
    3a88:	4630      	mov	r0, r6
    3a8a:	4639      	mov	r1, r7
    3a8c:	f7fc fb6a 	bl	164 <__adddf3>
    3a90:	4606      	mov	r6, r0
    3a92:	460f      	mov	r7, r1
    3a94:	4602      	mov	r2, r0
    3a96:	460b      	mov	r3, r1
    3a98:	4640      	mov	r0, r8
    3a9a:	4649      	mov	r1, r9
    3a9c:	f7fc fb62 	bl	164 <__adddf3>
    3aa0:	2000      	movs	r0, #0
    3aa2:	460d      	mov	r5, r1
    3aa4:	4604      	mov	r4, r0
    3aa6:	a33c      	add	r3, pc, #240	; (adr r3, 3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>)
    3aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3aac:	f7fc fd10 	bl	4d0 <__aeabi_dmul>
    3ab0:	4642      	mov	r2, r8
    3ab2:	464b      	mov	r3, r9
    3ab4:	ec41 0b18 	vmov	d8, r0, r1
    3ab8:	4620      	mov	r0, r4
    3aba:	4629      	mov	r1, r5
    3abc:	f7fc fb50 	bl	160 <__aeabi_dsub>
    3ac0:	4602      	mov	r2, r0
    3ac2:	460b      	mov	r3, r1
    3ac4:	4630      	mov	r0, r6
    3ac6:	4639      	mov	r1, r7
    3ac8:	f7fc fb4a 	bl	160 <__aeabi_dsub>
    3acc:	a334      	add	r3, pc, #208	; (adr r3, 3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>)
    3ace:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ad2:	f7fc fcfd 	bl	4d0 <__aeabi_dmul>
    3ad6:	4606      	mov	r6, r0
    3ad8:	460f      	mov	r7, r1
    3ada:	4620      	mov	r0, r4
    3adc:	4629      	mov	r1, r5
    3ade:	a332      	add	r3, pc, #200	; (adr r3, 3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>)
    3ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ae4:	f7fc fcf4 	bl	4d0 <__aeabi_dmul>
    3ae8:	4602      	mov	r2, r0
    3aea:	460b      	mov	r3, r1
    3aec:	4630      	mov	r0, r6
    3aee:	4639      	mov	r1, r7
    3af0:	f7fc fb38 	bl	164 <__adddf3>
    3af4:	9a07      	ldr	r2, [sp, #28]
    3af6:	4b37      	ldr	r3, [pc, #220]	; (3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>)
    3af8:	4413      	add	r3, r2
    3afa:	e9d3 2300 	ldrd	r2, r3, [r3]
    3afe:	f7fc fb31 	bl	164 <__adddf3>
    3b02:	4682      	mov	sl, r0
    3b04:	9805      	ldr	r0, [sp, #20]
    3b06:	468b      	mov	fp, r1
    3b08:	f7fc fc78 	bl	3fc <__aeabi_i2d>
    3b0c:	9a07      	ldr	r2, [sp, #28]
    3b0e:	4b32      	ldr	r3, [pc, #200]	; (3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>)
    3b10:	4606      	mov	r6, r0
    3b12:	460f      	mov	r7, r1
    3b14:	4413      	add	r3, r2
    3b16:	4652      	mov	r2, sl
    3b18:	e9d3 8900 	ldrd	r8, r9, [r3]
    3b1c:	ec51 0b18 	vmov	r0, r1, d8
    3b20:	465b      	mov	r3, fp
    3b22:	f7fc fb1f 	bl	164 <__adddf3>
    3b26:	4642      	mov	r2, r8
    3b28:	464b      	mov	r3, r9
    3b2a:	f7fc fb1b 	bl	164 <__adddf3>
    3b2e:	4632      	mov	r2, r6
    3b30:	463b      	mov	r3, r7
    3b32:	f7fc fb17 	bl	164 <__adddf3>
    3b36:	2000      	movs	r0, #0
    3b38:	4632      	mov	r2, r6
    3b3a:	463b      	mov	r3, r7
    3b3c:	4604      	mov	r4, r0
    3b3e:	460d      	mov	r5, r1
    3b40:	f7fc fb0e 	bl	160 <__aeabi_dsub>
    3b44:	4642      	mov	r2, r8
    3b46:	464b      	mov	r3, r9
    3b48:	f7fc fb0a 	bl	160 <__aeabi_dsub>
    3b4c:	ec53 2b18 	vmov	r2, r3, d8
    3b50:	f7fc fb06 	bl	160 <__aeabi_dsub>
    3b54:	4602      	mov	r2, r0
    3b56:	460b      	mov	r3, r1
    3b58:	4650      	mov	r0, sl
    3b5a:	4659      	mov	r1, fp
    3b5c:	e607      	b.n	376e <__ieee754_pow+0x2ee>
    3b5e:	2401      	movs	r4, #1
    3b60:	e6a1      	b.n	38a6 <__ieee754_pow+0x426>
    3b62:	ed9f 7b13 	vldr	d7, [pc, #76]	; 3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>
    3b66:	e60e      	b.n	3786 <__ieee754_pow+0x306>
    3b68:	4a454eef 	.word	0x4a454eef
    3b6c:	3fca7e28 	.word	0x3fca7e28
    3b70:	93c9db65 	.word	0x93c9db65
    3b74:	3fcd864a 	.word	0x3fcd864a
    3b78:	a91d4101 	.word	0xa91d4101
    3b7c:	3fd17460 	.word	0x3fd17460
    3b80:	518f264d 	.word	0x518f264d
    3b84:	3fd55555 	.word	0x3fd55555
    3b88:	db6fabff 	.word	0xdb6fabff
    3b8c:	3fdb6db6 	.word	0x3fdb6db6
    3b90:	33333303 	.word	0x33333303
    3b94:	3fe33333 	.word	0x3fe33333
    3b98:	e0000000 	.word	0xe0000000
    3b9c:	3feec709 	.word	0x3feec709
    3ba0:	dc3a03fd 	.word	0xdc3a03fd
    3ba4:	3feec709 	.word	0x3feec709
    3ba8:	145b01f5 	.word	0x145b01f5
    3bac:	be3e2fe0 	.word	0xbe3e2fe0
    3bb0:	00000000 	.word	0x00000000
    3bb4:	3ff00000 	.word	0x3ff00000
    3bb8:	7ff00000 	.word	0x7ff00000
    3bbc:	43400000 	.word	0x43400000
    3bc0:	0003988e 	.word	0x0003988e
    3bc4:	000bb679 	.word	0x000bb679
    3bc8:	00015fb0 	.word	0x00015fb0
    3bcc:	3ff00000 	.word	0x3ff00000
    3bd0:	40080000 	.word	0x40080000
    3bd4:	00015fd0 	.word	0x00015fd0
    3bd8:	00015fc0 	.word	0x00015fc0
    3bdc:	a3b5      	add	r3, pc, #724	; (adr r3, 3eb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x41c>)
    3bde:	e9d3 2300 	ldrd	r2, r3, [r3]
    3be2:	4640      	mov	r0, r8
    3be4:	4649      	mov	r1, r9
    3be6:	f7fc fabd 	bl	164 <__adddf3>
    3bea:	4622      	mov	r2, r4
    3bec:	462b      	mov	r3, r5
    3bee:	ec41 0b1a 	vmov	d10, r0, r1
    3bf2:	4630      	mov	r0, r6
    3bf4:	4639      	mov	r1, r7
    3bf6:	f7fc fab3 	bl	160 <__aeabi_dsub>
    3bfa:	4602      	mov	r2, r0
    3bfc:	460b      	mov	r3, r1
    3bfe:	ec51 0b1a 	vmov	r0, r1, d10
    3c02:	f7fc fef5 	bl	9f0 <__aeabi_dcmpgt>
    3c06:	2800      	cmp	r0, #0
    3c08:	f47f adfc 	bne.w	3804 <__ieee754_pow+0x384>
    3c0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    3c10:	4aa3      	ldr	r2, [pc, #652]	; (3ea0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x408>)
    3c12:	4293      	cmp	r3, r2
    3c14:	f340 810b 	ble.w	3e2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x396>
    3c18:	151b      	asrs	r3, r3, #20
    3c1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    3c1e:	4ea1      	ldr	r6, [pc, #644]	; (3ea4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40c>)
    3c20:	2000      	movs	r0, #0
    3c22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    3c26:	f1bb 0f00 	cmp.w	fp, #0
    3c2a:	fa4a f303 	asr.w	r3, sl, r3
    3c2e:	445b      	add	r3, fp
    3c30:	f3c3 520a 	ubfx	r2, r3, #20, #11
    3c34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    3c38:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    3c3c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    3c40:	fa46 f602 	asr.w	r6, r6, r2
    3c44:	f1c2 0214 	rsb	r2, r2, #20
    3c48:	ea23 0106 	bic.w	r1, r3, r6
    3c4c:	fa4a fa02 	asr.w	sl, sl, r2
    3c50:	4602      	mov	r2, r0
    3c52:	4620      	mov	r0, r4
    3c54:	460b      	mov	r3, r1
    3c56:	4629      	mov	r1, r5
    3c58:	bfb8      	it	lt
    3c5a:	f1ca 0a00 	rsblt	sl, sl, #0
    3c5e:	f7fc fa7f 	bl	160 <__aeabi_dsub>
    3c62:	ec41 0b19 	vmov	d9, r0, r1
    3c66:	4642      	mov	r2, r8
    3c68:	464b      	mov	r3, r9
    3c6a:	ec51 0b19 	vmov	r0, r1, d9
    3c6e:	f7fc fa79 	bl	164 <__adddf3>
    3c72:	2000      	movs	r0, #0
    3c74:	460d      	mov	r5, r1
    3c76:	4604      	mov	r4, r0
    3c78:	a377      	add	r3, pc, #476	; (adr r3, 3e58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c0>)
    3c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c7e:	f7fc fc27 	bl	4d0 <__aeabi_dmul>
    3c82:	4606      	mov	r6, r0
    3c84:	460f      	mov	r7, r1
    3c86:	4620      	mov	r0, r4
    3c88:	4629      	mov	r1, r5
    3c8a:	ec53 2b19 	vmov	r2, r3, d9
    3c8e:	f7fc fa67 	bl	160 <__aeabi_dsub>
    3c92:	4602      	mov	r2, r0
    3c94:	460b      	mov	r3, r1
    3c96:	4640      	mov	r0, r8
    3c98:	4649      	mov	r1, r9
    3c9a:	f7fc fa61 	bl	160 <__aeabi_dsub>
    3c9e:	a370      	add	r3, pc, #448	; (adr r3, 3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>)
    3ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ca4:	f7fc fc14 	bl	4d0 <__aeabi_dmul>
    3ca8:	4680      	mov	r8, r0
    3caa:	4689      	mov	r9, r1
    3cac:	4620      	mov	r0, r4
    3cae:	4629      	mov	r1, r5
    3cb0:	a36d      	add	r3, pc, #436	; (adr r3, 3e68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d0>)
    3cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cb6:	f7fc fc0b 	bl	4d0 <__aeabi_dmul>
    3cba:	4602      	mov	r2, r0
    3cbc:	460b      	mov	r3, r1
    3cbe:	4640      	mov	r0, r8
    3cc0:	4649      	mov	r1, r9
    3cc2:	f7fc fa4f 	bl	164 <__adddf3>
    3cc6:	4604      	mov	r4, r0
    3cc8:	460d      	mov	r5, r1
    3cca:	4602      	mov	r2, r0
    3ccc:	460b      	mov	r3, r1
    3cce:	4630      	mov	r0, r6
    3cd0:	4639      	mov	r1, r7
    3cd2:	f7fc fa47 	bl	164 <__adddf3>
    3cd6:	4632      	mov	r2, r6
    3cd8:	4680      	mov	r8, r0
    3cda:	4689      	mov	r9, r1
    3cdc:	463b      	mov	r3, r7
    3cde:	f7fc fa3f 	bl	160 <__aeabi_dsub>
    3ce2:	4602      	mov	r2, r0
    3ce4:	460b      	mov	r3, r1
    3ce6:	4620      	mov	r0, r4
    3ce8:	4629      	mov	r1, r5
    3cea:	f7fc fa39 	bl	160 <__aeabi_dsub>
    3cee:	4642      	mov	r2, r8
    3cf0:	4606      	mov	r6, r0
    3cf2:	460f      	mov	r7, r1
    3cf4:	464b      	mov	r3, r9
    3cf6:	4640      	mov	r0, r8
    3cf8:	4649      	mov	r1, r9
    3cfa:	f7fc fbe9 	bl	4d0 <__aeabi_dmul>
    3cfe:	4604      	mov	r4, r0
    3d00:	460d      	mov	r5, r1
    3d02:	a35b      	add	r3, pc, #364	; (adr r3, 3e70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d8>)
    3d04:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d08:	f7fc fbe2 	bl	4d0 <__aeabi_dmul>
    3d0c:	a35a      	add	r3, pc, #360	; (adr r3, 3e78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e0>)
    3d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d12:	f7fc fa25 	bl	160 <__aeabi_dsub>
    3d16:	4622      	mov	r2, r4
    3d18:	462b      	mov	r3, r5
    3d1a:	f7fc fbd9 	bl	4d0 <__aeabi_dmul>
    3d1e:	a358      	add	r3, pc, #352	; (adr r3, 3e80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e8>)
    3d20:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d24:	f7fc fa1e 	bl	164 <__adddf3>
    3d28:	4622      	mov	r2, r4
    3d2a:	462b      	mov	r3, r5
    3d2c:	f7fc fbd0 	bl	4d0 <__aeabi_dmul>
    3d30:	a355      	add	r3, pc, #340	; (adr r3, 3e88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f0>)
    3d32:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d36:	f7fc fa13 	bl	160 <__aeabi_dsub>
    3d3a:	4622      	mov	r2, r4
    3d3c:	462b      	mov	r3, r5
    3d3e:	f7fc fbc7 	bl	4d0 <__aeabi_dmul>
    3d42:	a353      	add	r3, pc, #332	; (adr r3, 3e90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f8>)
    3d44:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d48:	f7fc fa0c 	bl	164 <__adddf3>
    3d4c:	4622      	mov	r2, r4
    3d4e:	462b      	mov	r3, r5
    3d50:	f7fc fbbe 	bl	4d0 <__aeabi_dmul>
    3d54:	4602      	mov	r2, r0
    3d56:	460b      	mov	r3, r1
    3d58:	4640      	mov	r0, r8
    3d5a:	4649      	mov	r1, r9
    3d5c:	f7fc fa00 	bl	160 <__aeabi_dsub>
    3d60:	4604      	mov	r4, r0
    3d62:	460d      	mov	r5, r1
    3d64:	4602      	mov	r2, r0
    3d66:	460b      	mov	r3, r1
    3d68:	4640      	mov	r0, r8
    3d6a:	4649      	mov	r1, r9
    3d6c:	f7fc fbb0 	bl	4d0 <__aeabi_dmul>
    3d70:	2200      	movs	r2, #0
    3d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d76:	ec41 0b19 	vmov	d9, r0, r1
    3d7a:	4620      	mov	r0, r4
    3d7c:	4629      	mov	r1, r5
    3d7e:	f7fc f9ef 	bl	160 <__aeabi_dsub>
    3d82:	4602      	mov	r2, r0
    3d84:	460b      	mov	r3, r1
    3d86:	ec51 0b19 	vmov	r0, r1, d9
    3d8a:	f7fc fccb 	bl	724 <__aeabi_ddiv>
    3d8e:	4632      	mov	r2, r6
    3d90:	4604      	mov	r4, r0
    3d92:	460d      	mov	r5, r1
    3d94:	463b      	mov	r3, r7
    3d96:	4640      	mov	r0, r8
    3d98:	4649      	mov	r1, r9
    3d9a:	f7fc fb99 	bl	4d0 <__aeabi_dmul>
    3d9e:	4632      	mov	r2, r6
    3da0:	463b      	mov	r3, r7
    3da2:	f7fc f9df 	bl	164 <__adddf3>
    3da6:	4602      	mov	r2, r0
    3da8:	460b      	mov	r3, r1
    3daa:	4620      	mov	r0, r4
    3dac:	4629      	mov	r1, r5
    3dae:	f7fc f9d7 	bl	160 <__aeabi_dsub>
    3db2:	4642      	mov	r2, r8
    3db4:	464b      	mov	r3, r9
    3db6:	f7fc f9d3 	bl	160 <__aeabi_dsub>
    3dba:	460b      	mov	r3, r1
    3dbc:	4602      	mov	r2, r0
    3dbe:	493a      	ldr	r1, [pc, #232]	; (3ea8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x410>)
    3dc0:	2000      	movs	r0, #0
    3dc2:	f7fc f9cd 	bl	160 <__aeabi_dsub>
    3dc6:	ec41 0b10 	vmov	d0, r0, r1
    3dca:	ee10 3a90 	vmov	r3, s1
    3dce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
    3dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3dd6:	da2d      	bge.n	3e34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39c>
    3dd8:	4650      	mov	r0, sl
    3dda:	f001 f92d 	bl	5038 <scalbn>
    3dde:	ec51 0b10 	vmov	r0, r1, d0
    3de2:	ec53 2b18 	vmov	r2, r3, d8
    3de6:	f7ff bbe4 	b.w	35b2 <__ieee754_pow+0x132>
    3dea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    3dee:	4b2f      	ldr	r3, [pc, #188]	; (3eac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x414>)
    3df0:	429e      	cmp	r6, r3
    3df2:	f77f af0b 	ble.w	3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>
    3df6:	4b2e      	ldr	r3, [pc, #184]	; (3eb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x418>)
    3df8:	440b      	add	r3, r1
    3dfa:	4303      	orrs	r3, r0
    3dfc:	d00b      	beq.n	3e16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x37e>
    3dfe:	a326      	add	r3, pc, #152	; (adr r3, 3e98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x400>)
    3e00:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e04:	ec51 0b18 	vmov	r0, r1, d8
    3e08:	f7fc fb62 	bl	4d0 <__aeabi_dmul>
    3e0c:	a322      	add	r3, pc, #136	; (adr r3, 3e98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x400>)
    3e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e12:	f7ff bbce 	b.w	35b2 <__ieee754_pow+0x132>
    3e16:	4622      	mov	r2, r4
    3e18:	462b      	mov	r3, r5
    3e1a:	f7fc f9a1 	bl	160 <__aeabi_dsub>
    3e1e:	4642      	mov	r2, r8
    3e20:	464b      	mov	r3, r9
    3e22:	f7fc fddb 	bl	9dc <__aeabi_dcmpge>
    3e26:	2800      	cmp	r0, #0
    3e28:	f43f aef0 	beq.w	3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>
    3e2c:	e7e7      	b.n	3dfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x366>
    3e2e:	f04f 0a00 	mov.w	sl, #0
    3e32:	e718      	b.n	3c66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ce>
    3e34:	ec51 0b10 	vmov	r0, r1, d0
    3e38:	4619      	mov	r1, r3
    3e3a:	e7d2      	b.n	3de2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34a>
    3e3c:	2000      	movs	r0, #0
    3e3e:	491a      	ldr	r1, [pc, #104]	; (3ea8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x410>)
    3e40:	f7ff bba2 	b.w	3588 <__ieee754_pow+0x108>
    3e44:	e9dd 0100 	ldrd	r0, r1, [sp]
    3e48:	f7ff bb9e 	b.w	3588 <__ieee754_pow+0x108>
    3e4c:	9004      	str	r0, [sp, #16]
    3e4e:	f7ff bb7a 	b.w	3546 <__ieee754_pow+0xc6>
    3e52:	2100      	movs	r1, #0
    3e54:	f7ff bb64 	b.w	3520 <__ieee754_pow+0xa0>
    3e58:	00000000 	.word	0x00000000
    3e5c:	3fe62e43 	.word	0x3fe62e43
    3e60:	fefa39ef 	.word	0xfefa39ef
    3e64:	3fe62e42 	.word	0x3fe62e42
    3e68:	0ca86c39 	.word	0x0ca86c39
    3e6c:	be205c61 	.word	0xbe205c61
    3e70:	72bea4d0 	.word	0x72bea4d0
    3e74:	3e663769 	.word	0x3e663769
    3e78:	c5d26bf1 	.word	0xc5d26bf1
    3e7c:	3ebbbd41 	.word	0x3ebbbd41
    3e80:	af25de2c 	.word	0xaf25de2c
    3e84:	3f11566a 	.word	0x3f11566a
    3e88:	16bebd93 	.word	0x16bebd93
    3e8c:	3f66c16c 	.word	0x3f66c16c
    3e90:	5555553e 	.word	0x5555553e
    3e94:	3fc55555 	.word	0x3fc55555
    3e98:	c2f8f359 	.word	0xc2f8f359
    3e9c:	01a56e1f 	.word	0x01a56e1f
    3ea0:	3fe00000 	.word	0x3fe00000
    3ea4:	000fffff 	.word	0x000fffff
    3ea8:	3ff00000 	.word	0x3ff00000
    3eac:	4090cbff 	.word	0x4090cbff
    3eb0:	3f6f3400 	.word	0x3f6f3400
    3eb4:	652b82fe 	.word	0x652b82fe
    3eb8:	3c971547 	.word	0x3c971547
    3ebc:	00000000 	.word	0x00000000

00003ec0 <__ieee754_rem_pio2>:
    3ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ec4:	ec55 4b10 	vmov	r4, r5, d0
    3ec8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
    3ecc:	4bca      	ldr	r3, [pc, #808]	; (41f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>)
    3ece:	4682      	mov	sl, r0
    3ed0:	4598      	cmp	r8, r3
    3ed2:	ed2d 8b02 	vpush	{d8}
    3ed6:	b08b      	sub	sp, #44	; 0x2c
    3ed8:	9502      	str	r5, [sp, #8]
    3eda:	dc08      	bgt.n	3eee <__ieee754_rem_pio2+0x2e>
    3edc:	2200      	movs	r2, #0
    3ede:	2300      	movs	r3, #0
    3ee0:	ed80 0b00 	vstr	d0, [r0]
    3ee4:	e9c0 2302 	strd	r2, r3, [r0, #8]
    3ee8:	f04f 0b00 	mov.w	fp, #0
    3eec:	e028      	b.n	3f40 <__ieee754_rem_pio2+0x80>
    3eee:	4bc3      	ldr	r3, [pc, #780]	; (41fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>)
    3ef0:	4598      	cmp	r8, r3
    3ef2:	dc78      	bgt.n	3fe6 <__ieee754_rem_pio2+0x126>
    3ef4:	9b02      	ldr	r3, [sp, #8]
    3ef6:	ee10 0a10 	vmov	r0, s0
    3efa:	4ec1      	ldr	r6, [pc, #772]	; (4200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    3efc:	4629      	mov	r1, r5
    3efe:	2b00      	cmp	r3, #0
    3f00:	a3af      	add	r3, pc, #700	; (adr r3, 41c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>)
    3f02:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f06:	dd39      	ble.n	3f7c <__ieee754_rem_pio2+0xbc>
    3f08:	f7fc f92a 	bl	160 <__aeabi_dsub>
    3f0c:	45b0      	cmp	r8, r6
    3f0e:	4604      	mov	r4, r0
    3f10:	460d      	mov	r5, r1
    3f12:	d01b      	beq.n	3f4c <__ieee754_rem_pio2+0x8c>
    3f14:	a3ac      	add	r3, pc, #688	; (adr r3, 41c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>)
    3f16:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f1a:	f7fc f921 	bl	160 <__aeabi_dsub>
    3f1e:	4602      	mov	r2, r0
    3f20:	460b      	mov	r3, r1
    3f22:	4620      	mov	r0, r4
    3f24:	4629      	mov	r1, r5
    3f26:	e9ca 2300 	strd	r2, r3, [sl]
    3f2a:	f7fc f919 	bl	160 <__aeabi_dsub>
    3f2e:	a3a6      	add	r3, pc, #664	; (adr r3, 41c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>)
    3f30:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f34:	f04f 0b01 	mov.w	fp, #1
    3f38:	f7fc f912 	bl	160 <__aeabi_dsub>
    3f3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3f40:	4658      	mov	r0, fp
    3f42:	b00b      	add	sp, #44	; 0x2c
    3f44:	ecbd 8b02 	vpop	{d8}
    3f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f4c:	a3a0      	add	r3, pc, #640	; (adr r3, 41d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>)
    3f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f52:	f7fc f905 	bl	160 <__aeabi_dsub>
    3f56:	4604      	mov	r4, r0
    3f58:	460d      	mov	r5, r1
    3f5a:	a39f      	add	r3, pc, #636	; (adr r3, 41d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>)
    3f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f60:	f7fc f8fe 	bl	160 <__aeabi_dsub>
    3f64:	4602      	mov	r2, r0
    3f66:	460b      	mov	r3, r1
    3f68:	4620      	mov	r0, r4
    3f6a:	4629      	mov	r1, r5
    3f6c:	e9ca 2300 	strd	r2, r3, [sl]
    3f70:	f7fc f8f6 	bl	160 <__aeabi_dsub>
    3f74:	a398      	add	r3, pc, #608	; (adr r3, 41d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>)
    3f76:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f7a:	e7db      	b.n	3f34 <__ieee754_rem_pio2+0x74>
    3f7c:	f7fc f8f2 	bl	164 <__adddf3>
    3f80:	45b0      	cmp	r8, r6
    3f82:	4604      	mov	r4, r0
    3f84:	460d      	mov	r5, r1
    3f86:	d016      	beq.n	3fb6 <__ieee754_rem_pio2+0xf6>
    3f88:	a38f      	add	r3, pc, #572	; (adr r3, 41c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>)
    3f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f8e:	f7fc f8e9 	bl	164 <__adddf3>
    3f92:	4602      	mov	r2, r0
    3f94:	460b      	mov	r3, r1
    3f96:	4620      	mov	r0, r4
    3f98:	4629      	mov	r1, r5
    3f9a:	e9ca 2300 	strd	r2, r3, [sl]
    3f9e:	f7fc f8df 	bl	160 <__aeabi_dsub>
    3fa2:	a389      	add	r3, pc, #548	; (adr r3, 41c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>)
    3fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fa8:	f7fc f8dc 	bl	164 <__adddf3>
    3fac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    3fb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3fb4:	e7c4      	b.n	3f40 <__ieee754_rem_pio2+0x80>
    3fb6:	a386      	add	r3, pc, #536	; (adr r3, 41d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>)
    3fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fbc:	f7fc f8d2 	bl	164 <__adddf3>
    3fc0:	4604      	mov	r4, r0
    3fc2:	460d      	mov	r5, r1
    3fc4:	a384      	add	r3, pc, #528	; (adr r3, 41d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>)
    3fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fca:	f7fc f8cb 	bl	164 <__adddf3>
    3fce:	4602      	mov	r2, r0
    3fd0:	460b      	mov	r3, r1
    3fd2:	4620      	mov	r0, r4
    3fd4:	4629      	mov	r1, r5
    3fd6:	e9ca 2300 	strd	r2, r3, [sl]
    3fda:	f7fc f8c1 	bl	160 <__aeabi_dsub>
    3fde:	a37e      	add	r3, pc, #504	; (adr r3, 41d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>)
    3fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fe4:	e7e0      	b.n	3fa8 <__ieee754_rem_pio2+0xe8>
    3fe6:	4b87      	ldr	r3, [pc, #540]	; (4204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    3fe8:	4598      	cmp	r8, r3
    3fea:	f300 80d9 	bgt.w	41a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    3fee:	f010 fda9 	bl	14b44 <fabs>
    3ff2:	ee10 0a10 	vmov	r0, s0
    3ff6:	ec55 4b10 	vmov	r4, r5, d0
    3ffa:	a379      	add	r3, pc, #484	; (adr r3, 41e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
    3ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4000:	4629      	mov	r1, r5
    4002:	f7fc fa65 	bl	4d0 <__aeabi_dmul>
    4006:	2200      	movs	r2, #0
    4008:	4b7f      	ldr	r3, [pc, #508]	; (4208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>)
    400a:	f7fc f8ab 	bl	164 <__adddf3>
    400e:	f7fc fe07 	bl	c20 <__aeabi_d2iz>
    4012:	4683      	mov	fp, r0
    4014:	f7fc f9f2 	bl	3fc <__aeabi_i2d>
    4018:	4602      	mov	r2, r0
    401a:	460b      	mov	r3, r1
    401c:	ec43 2b18 	vmov	d8, r2, r3
    4020:	a367      	add	r3, pc, #412	; (adr r3, 41c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>)
    4022:	e9d3 2300 	ldrd	r2, r3, [r3]
    4026:	f7fc fa53 	bl	4d0 <__aeabi_dmul>
    402a:	4602      	mov	r2, r0
    402c:	460b      	mov	r3, r1
    402e:	4620      	mov	r0, r4
    4030:	4629      	mov	r1, r5
    4032:	f7fc f895 	bl	160 <__aeabi_dsub>
    4036:	4606      	mov	r6, r0
    4038:	460f      	mov	r7, r1
    403a:	a363      	add	r3, pc, #396	; (adr r3, 41c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>)
    403c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4040:	ec51 0b18 	vmov	r0, r1, d8
    4044:	f7fc fa44 	bl	4d0 <__aeabi_dmul>
    4048:	f1bb 0f1f 	cmp.w	fp, #31
    404c:	4604      	mov	r4, r0
    404e:	460d      	mov	r5, r1
    4050:	dc0d      	bgt.n	406e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    4052:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    4056:	4b6d      	ldr	r3, [pc, #436]	; (420c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>)
    4058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    405c:	4543      	cmp	r3, r8
    405e:	d006      	beq.n	406e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    4060:	4622      	mov	r2, r4
    4062:	462b      	mov	r3, r5
    4064:	4630      	mov	r0, r6
    4066:	4639      	mov	r1, r7
    4068:	f7fc f87a 	bl	160 <__aeabi_dsub>
    406c:	e00f      	b.n	408e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    406e:	462b      	mov	r3, r5
    4070:	4622      	mov	r2, r4
    4072:	4630      	mov	r0, r6
    4074:	4639      	mov	r1, r7
    4076:	f7fc f873 	bl	160 <__aeabi_dsub>
    407a:	ea4f 5328 	mov.w	r3, r8, asr #20
    407e:	9303      	str	r3, [sp, #12]
    4080:	f3c1 530a 	ubfx	r3, r1, #20, #11
    4084:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
    4088:	f1b8 0f10 	cmp.w	r8, #16
    408c:	dc02      	bgt.n	4094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    408e:	e9ca 0100 	strd	r0, r1, [sl]
    4092:	e039      	b.n	4108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    4094:	a34e      	add	r3, pc, #312	; (adr r3, 41d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>)
    4096:	e9d3 2300 	ldrd	r2, r3, [r3]
    409a:	ec51 0b18 	vmov	r0, r1, d8
    409e:	f7fc fa17 	bl	4d0 <__aeabi_dmul>
    40a2:	4604      	mov	r4, r0
    40a4:	460d      	mov	r5, r1
    40a6:	4602      	mov	r2, r0
    40a8:	460b      	mov	r3, r1
    40aa:	4630      	mov	r0, r6
    40ac:	4639      	mov	r1, r7
    40ae:	f7fc f857 	bl	160 <__aeabi_dsub>
    40b2:	4602      	mov	r2, r0
    40b4:	460b      	mov	r3, r1
    40b6:	4680      	mov	r8, r0
    40b8:	4689      	mov	r9, r1
    40ba:	4630      	mov	r0, r6
    40bc:	4639      	mov	r1, r7
    40be:	f7fc f84f 	bl	160 <__aeabi_dsub>
    40c2:	4622      	mov	r2, r4
    40c4:	462b      	mov	r3, r5
    40c6:	f7fc f84b 	bl	160 <__aeabi_dsub>
    40ca:	4604      	mov	r4, r0
    40cc:	460d      	mov	r5, r1
    40ce:	a342      	add	r3, pc, #264	; (adr r3, 41d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>)
    40d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    40d4:	ec51 0b18 	vmov	r0, r1, d8
    40d8:	f7fc f9fa 	bl	4d0 <__aeabi_dmul>
    40dc:	4622      	mov	r2, r4
    40de:	462b      	mov	r3, r5
    40e0:	f7fc f83e 	bl	160 <__aeabi_dsub>
    40e4:	4602      	mov	r2, r0
    40e6:	460b      	mov	r3, r1
    40e8:	4604      	mov	r4, r0
    40ea:	460d      	mov	r5, r1
    40ec:	4640      	mov	r0, r8
    40ee:	4649      	mov	r1, r9
    40f0:	f7fc f836 	bl	160 <__aeabi_dsub>
    40f4:	9a03      	ldr	r2, [sp, #12]
    40f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
    40fa:	1ad3      	subs	r3, r2, r3
    40fc:	2b31      	cmp	r3, #49	; 0x31
    40fe:	dc24      	bgt.n	414a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    4100:	4646      	mov	r6, r8
    4102:	464f      	mov	r7, r9
    4104:	e9ca 0100 	strd	r0, r1, [sl]
    4108:	e9da 8900 	ldrd	r8, r9, [sl]
    410c:	4630      	mov	r0, r6
    410e:	4639      	mov	r1, r7
    4110:	4642      	mov	r2, r8
    4112:	464b      	mov	r3, r9
    4114:	f7fc f824 	bl	160 <__aeabi_dsub>
    4118:	462b      	mov	r3, r5
    411a:	4622      	mov	r2, r4
    411c:	f7fc f820 	bl	160 <__aeabi_dsub>
    4120:	9b02      	ldr	r3, [sp, #8]
    4122:	2b00      	cmp	r3, #0
    4124:	e9ca 0102 	strd	r0, r1, [sl, #8]
    4128:	f6bf af0a 	bge.w	3f40 <__ieee754_rem_pio2+0x80>
    412c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    4130:	f8ca 8000 	str.w	r8, [sl]
    4134:	f8ca 0008 	str.w	r0, [sl, #8]
    4138:	f8ca 3004 	str.w	r3, [sl, #4]
    413c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4140:	f8ca 300c 	str.w	r3, [sl, #12]
    4144:	f1cb 0b00 	rsb	fp, fp, #0
    4148:	e6fa      	b.n	3f40 <__ieee754_rem_pio2+0x80>
    414a:	a327      	add	r3, pc, #156	; (adr r3, 41e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    414c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4150:	ec51 0b18 	vmov	r0, r1, d8
    4154:	f7fc f9bc 	bl	4d0 <__aeabi_dmul>
    4158:	4604      	mov	r4, r0
    415a:	460d      	mov	r5, r1
    415c:	4602      	mov	r2, r0
    415e:	460b      	mov	r3, r1
    4160:	4640      	mov	r0, r8
    4162:	4649      	mov	r1, r9
    4164:	f7fb fffc 	bl	160 <__aeabi_dsub>
    4168:	4602      	mov	r2, r0
    416a:	460b      	mov	r3, r1
    416c:	4606      	mov	r6, r0
    416e:	460f      	mov	r7, r1
    4170:	4640      	mov	r0, r8
    4172:	4649      	mov	r1, r9
    4174:	f7fb fff4 	bl	160 <__aeabi_dsub>
    4178:	4622      	mov	r2, r4
    417a:	462b      	mov	r3, r5
    417c:	f7fb fff0 	bl	160 <__aeabi_dsub>
    4180:	4604      	mov	r4, r0
    4182:	460d      	mov	r5, r1
    4184:	a31a      	add	r3, pc, #104	; (adr r3, 41f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    4186:	e9d3 2300 	ldrd	r2, r3, [r3]
    418a:	ec51 0b18 	vmov	r0, r1, d8
    418e:	f7fc f99f 	bl	4d0 <__aeabi_dmul>
    4192:	4622      	mov	r2, r4
    4194:	462b      	mov	r3, r5
    4196:	f7fb ffe3 	bl	160 <__aeabi_dsub>
    419a:	4604      	mov	r4, r0
    419c:	460d      	mov	r5, r1
    419e:	e75f      	b.n	4060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    41a0:	4b1b      	ldr	r3, [pc, #108]	; (4210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    41a2:	4598      	cmp	r8, r3
    41a4:	dd36      	ble.n	4214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    41a6:	ee10 2a10 	vmov	r2, s0
    41aa:	462b      	mov	r3, r5
    41ac:	4620      	mov	r0, r4
    41ae:	4629      	mov	r1, r5
    41b0:	f7fb ffd6 	bl	160 <__aeabi_dsub>
    41b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
    41b8:	e9ca 0100 	strd	r0, r1, [sl]
    41bc:	e694      	b.n	3ee8 <__ieee754_rem_pio2+0x28>
    41be:	bf00      	nop
    41c0:	54400000 	.word	0x54400000
    41c4:	3ff921fb 	.word	0x3ff921fb
    41c8:	1a626331 	.word	0x1a626331
    41cc:	3dd0b461 	.word	0x3dd0b461
    41d0:	1a600000 	.word	0x1a600000
    41d4:	3dd0b461 	.word	0x3dd0b461
    41d8:	2e037073 	.word	0x2e037073
    41dc:	3ba3198a 	.word	0x3ba3198a
    41e0:	6dc9c883 	.word	0x6dc9c883
    41e4:	3fe45f30 	.word	0x3fe45f30
    41e8:	2e000000 	.word	0x2e000000
    41ec:	3ba3198a 	.word	0x3ba3198a
    41f0:	252049c1 	.word	0x252049c1
    41f4:	397b839a 	.word	0x397b839a
    41f8:	3fe921fb 	.word	0x3fe921fb
    41fc:	4002d97b 	.word	0x4002d97b
    4200:	3ff921fb 	.word	0x3ff921fb
    4204:	413921fb 	.word	0x413921fb
    4208:	3fe00000 	.word	0x3fe00000
    420c:	00017220 	.word	0x00017220
    4210:	7fefffff 	.word	0x7fefffff
    4214:	ea4f 5428 	mov.w	r4, r8, asr #20
    4218:	ee10 0a10 	vmov	r0, s0
    421c:	ee10 6a10 	vmov	r6, s0
    4220:	ad04      	add	r5, sp, #16
    4222:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
    4226:	46a9      	mov	r9, r5
    4228:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
    422c:	f04f 0803 	mov.w	r8, #3
    4230:	460f      	mov	r7, r1
    4232:	f7fc fcf5 	bl	c20 <__aeabi_d2iz>
    4236:	f7fc f8e1 	bl	3fc <__aeabi_i2d>
    423a:	4602      	mov	r2, r0
    423c:	460b      	mov	r3, r1
    423e:	4630      	mov	r0, r6
    4240:	4639      	mov	r1, r7
    4242:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4246:	f7fb ff8b 	bl	160 <__aeabi_dsub>
    424a:	2200      	movs	r2, #0
    424c:	4b20      	ldr	r3, [pc, #128]	; (42d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    424e:	f7fc f93f 	bl	4d0 <__aeabi_dmul>
    4252:	460f      	mov	r7, r1
    4254:	4606      	mov	r6, r0
    4256:	f7fc fce3 	bl	c20 <__aeabi_d2iz>
    425a:	f7fc f8cf 	bl	3fc <__aeabi_i2d>
    425e:	4602      	mov	r2, r0
    4260:	460b      	mov	r3, r1
    4262:	4630      	mov	r0, r6
    4264:	4639      	mov	r1, r7
    4266:	2600      	movs	r6, #0
    4268:	2700      	movs	r7, #0
    426a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    426e:	f7fb ff77 	bl	160 <__aeabi_dsub>
    4272:	2200      	movs	r2, #0
    4274:	4b16      	ldr	r3, [pc, #88]	; (42d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    4276:	f7fc f92b 	bl	4d0 <__aeabi_dmul>
    427a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    427e:	4632      	mov	r2, r6
    4280:	463b      	mov	r3, r7
    4282:	46c3      	mov	fp, r8
    4284:	3d08      	subs	r5, #8
    4286:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    428a:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    428e:	f7fc fb87 	bl	9a0 <__aeabi_dcmpeq>
    4292:	2800      	cmp	r0, #0
    4294:	d1f3      	bne.n	427e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
    4296:	4b0f      	ldr	r3, [pc, #60]	; (42d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    4298:	4622      	mov	r2, r4
    429a:	4651      	mov	r1, sl
    429c:	4648      	mov	r0, r9
    429e:	9301      	str	r3, [sp, #4]
    42a0:	2302      	movs	r3, #2
    42a2:	9300      	str	r3, [sp, #0]
    42a4:	465b      	mov	r3, fp
    42a6:	f000 f8df 	bl	4468 <__kernel_rem_pio2>
    42aa:	9b02      	ldr	r3, [sp, #8]
    42ac:	4683      	mov	fp, r0
    42ae:	2b00      	cmp	r3, #0
    42b0:	f6bf ae46 	bge.w	3f40 <__ieee754_rem_pio2+0x80>
    42b4:	e9da 2100 	ldrd	r2, r1, [sl]
    42b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    42bc:	e9ca 2300 	strd	r2, r3, [sl]
    42c0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
    42c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    42c8:	e9ca 2302 	strd	r2, r3, [sl, #8]
    42cc:	e73a      	b.n	4144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
    42ce:	bf00      	nop
    42d0:	41700000 	.word	0x41700000
    42d4:	000172a0 	.word	0x000172a0

000042d8 <__kernel_cos>:
    42d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42dc:	ec57 6b10 	vmov	r6, r7, d0
    42e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
    42e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
    42e8:	ed8d 1b00 	vstr	d1, [sp]
    42ec:	da07      	bge.n	42fe <__kernel_cos+0x26>
    42ee:	ee10 0a10 	vmov	r0, s0
    42f2:	4639      	mov	r1, r7
    42f4:	f7fc fc94 	bl	c20 <__aeabi_d2iz>
    42f8:	2800      	cmp	r0, #0
    42fa:	f000 8088 	beq.w	440e <__kernel_cos+0x136>
    42fe:	4632      	mov	r2, r6
    4300:	463b      	mov	r3, r7
    4302:	4630      	mov	r0, r6
    4304:	4639      	mov	r1, r7
    4306:	f7fc f8e3 	bl	4d0 <__aeabi_dmul>
    430a:	4604      	mov	r4, r0
    430c:	460d      	mov	r5, r1
    430e:	2200      	movs	r2, #0
    4310:	4b4f      	ldr	r3, [pc, #316]	; (4450 <__kernel_cos+0x178>)
    4312:	f7fc f8dd 	bl	4d0 <__aeabi_dmul>
    4316:	4682      	mov	sl, r0
    4318:	468b      	mov	fp, r1
    431a:	4620      	mov	r0, r4
    431c:	4629      	mov	r1, r5
    431e:	a33e      	add	r3, pc, #248	; (adr r3, 4418 <__kernel_cos+0x140>)
    4320:	e9d3 2300 	ldrd	r2, r3, [r3]
    4324:	f7fc f8d4 	bl	4d0 <__aeabi_dmul>
    4328:	a33d      	add	r3, pc, #244	; (adr r3, 4420 <__kernel_cos+0x148>)
    432a:	e9d3 2300 	ldrd	r2, r3, [r3]
    432e:	f7fb ff19 	bl	164 <__adddf3>
    4332:	4622      	mov	r2, r4
    4334:	462b      	mov	r3, r5
    4336:	f7fc f8cb 	bl	4d0 <__aeabi_dmul>
    433a:	a33b      	add	r3, pc, #236	; (adr r3, 4428 <__kernel_cos+0x150>)
    433c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4340:	f7fb ff0e 	bl	160 <__aeabi_dsub>
    4344:	4622      	mov	r2, r4
    4346:	462b      	mov	r3, r5
    4348:	f7fc f8c2 	bl	4d0 <__aeabi_dmul>
    434c:	a338      	add	r3, pc, #224	; (adr r3, 4430 <__kernel_cos+0x158>)
    434e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4352:	f7fb ff07 	bl	164 <__adddf3>
    4356:	4622      	mov	r2, r4
    4358:	462b      	mov	r3, r5
    435a:	f7fc f8b9 	bl	4d0 <__aeabi_dmul>
    435e:	a336      	add	r3, pc, #216	; (adr r3, 4438 <__kernel_cos+0x160>)
    4360:	e9d3 2300 	ldrd	r2, r3, [r3]
    4364:	f7fb fefc 	bl	160 <__aeabi_dsub>
    4368:	4622      	mov	r2, r4
    436a:	462b      	mov	r3, r5
    436c:	f7fc f8b0 	bl	4d0 <__aeabi_dmul>
    4370:	a333      	add	r3, pc, #204	; (adr r3, 4440 <__kernel_cos+0x168>)
    4372:	e9d3 2300 	ldrd	r2, r3, [r3]
    4376:	f7fb fef5 	bl	164 <__adddf3>
    437a:	4622      	mov	r2, r4
    437c:	462b      	mov	r3, r5
    437e:	f7fc f8a7 	bl	4d0 <__aeabi_dmul>
    4382:	4622      	mov	r2, r4
    4384:	462b      	mov	r3, r5
    4386:	f7fc f8a3 	bl	4d0 <__aeabi_dmul>
    438a:	4604      	mov	r4, r0
    438c:	460d      	mov	r5, r1
    438e:	4630      	mov	r0, r6
    4390:	4639      	mov	r1, r7
    4392:	e9dd 2300 	ldrd	r2, r3, [sp]
    4396:	f7fc f89b 	bl	4d0 <__aeabi_dmul>
    439a:	460b      	mov	r3, r1
    439c:	4602      	mov	r2, r0
    439e:	4629      	mov	r1, r5
    43a0:	4620      	mov	r0, r4
    43a2:	f7fb fedd 	bl	160 <__aeabi_dsub>
    43a6:	4b2b      	ldr	r3, [pc, #172]	; (4454 <__kernel_cos+0x17c>)
    43a8:	4606      	mov	r6, r0
    43aa:	460f      	mov	r7, r1
    43ac:	4598      	cmp	r8, r3
    43ae:	dc10      	bgt.n	43d2 <__kernel_cos+0xfa>
    43b0:	4602      	mov	r2, r0
    43b2:	460b      	mov	r3, r1
    43b4:	4650      	mov	r0, sl
    43b6:	4659      	mov	r1, fp
    43b8:	f7fb fed2 	bl	160 <__aeabi_dsub>
    43bc:	4602      	mov	r2, r0
    43be:	460b      	mov	r3, r1
    43c0:	2000      	movs	r0, #0
    43c2:	4925      	ldr	r1, [pc, #148]	; (4458 <__kernel_cos+0x180>)
    43c4:	f7fb fecc 	bl	160 <__aeabi_dsub>
    43c8:	ec41 0b10 	vmov	d0, r0, r1
    43cc:	b003      	add	sp, #12
    43ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43d2:	4b22      	ldr	r3, [pc, #136]	; (445c <__kernel_cos+0x184>)
    43d4:	2400      	movs	r4, #0
    43d6:	2000      	movs	r0, #0
    43d8:	491f      	ldr	r1, [pc, #124]	; (4458 <__kernel_cos+0x180>)
    43da:	4598      	cmp	r8, r3
    43dc:	4622      	mov	r2, r4
    43de:	bfd4      	ite	le
    43e0:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
    43e4:	4d1e      	ldrgt	r5, [pc, #120]	; (4460 <__kernel_cos+0x188>)
    43e6:	462b      	mov	r3, r5
    43e8:	f7fb feba 	bl	160 <__aeabi_dsub>
    43ec:	4622      	mov	r2, r4
    43ee:	4680      	mov	r8, r0
    43f0:	4689      	mov	r9, r1
    43f2:	462b      	mov	r3, r5
    43f4:	4650      	mov	r0, sl
    43f6:	4659      	mov	r1, fp
    43f8:	f7fb feb2 	bl	160 <__aeabi_dsub>
    43fc:	4632      	mov	r2, r6
    43fe:	463b      	mov	r3, r7
    4400:	f7fb feae 	bl	160 <__aeabi_dsub>
    4404:	4602      	mov	r2, r0
    4406:	460b      	mov	r3, r1
    4408:	4640      	mov	r0, r8
    440a:	4649      	mov	r1, r9
    440c:	e7da      	b.n	43c4 <__kernel_cos+0xec>
    440e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 4448 <__kernel_cos+0x170>
    4412:	e7db      	b.n	43cc <__kernel_cos+0xf4>
    4414:	f3af 8000 	nop.w
    4418:	be8838d4 	.word	0xbe8838d4
    441c:	bda8fae9 	.word	0xbda8fae9
    4420:	bdb4b1c4 	.word	0xbdb4b1c4
    4424:	3e21ee9e 	.word	0x3e21ee9e
    4428:	809c52ad 	.word	0x809c52ad
    442c:	3e927e4f 	.word	0x3e927e4f
    4430:	19cb1590 	.word	0x19cb1590
    4434:	3efa01a0 	.word	0x3efa01a0
    4438:	16c15177 	.word	0x16c15177
    443c:	3f56c16c 	.word	0x3f56c16c
    4440:	5555554c 	.word	0x5555554c
    4444:	3fa55555 	.word	0x3fa55555
    4448:	00000000 	.word	0x00000000
    444c:	3ff00000 	.word	0x3ff00000
    4450:	3fe00000 	.word	0x3fe00000
    4454:	3fd33332 	.word	0x3fd33332
    4458:	3ff00000 	.word	0x3ff00000
    445c:	3fe90000 	.word	0x3fe90000
    4460:	3fd20000 	.word	0x3fd20000
    4464:	00000000 	.word	0x00000000

00004468 <__kernel_rem_pio2>:
    4468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    446c:	ed2d 8b02 	vpush	{d8}
    4470:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    4474:	f112 0f14 	cmn.w	r2, #20
    4478:	f04f 0500 	mov.w	r5, #0
    447c:	9308      	str	r3, [sp, #32]
    447e:	bfa8      	it	ge
    4480:	1ed4      	subge	r4, r2, #3
    4482:	4bc3      	ldr	r3, [pc, #780]	; (4790 <__kernel_rem_pio2+0x328>)
    4484:	bfb8      	it	lt
    4486:	2400      	movlt	r4, #0
    4488:	9101      	str	r1, [sp, #4]
    448a:	ae22      	add	r6, sp, #136	; 0x88
    448c:	99a6      	ldr	r1, [sp, #664]	; 0x298
    448e:	900b      	str	r0, [sp, #44]	; 0x2c
    4490:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4494:	9302      	str	r3, [sp, #8]
    4496:	9b08      	ldr	r3, [sp, #32]
    4498:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    449c:	9306      	str	r3, [sp, #24]
    449e:	bfa4      	itt	ge
    44a0:	2318      	movge	r3, #24
    44a2:	fb94 f4f3 	sdivge	r4, r4, r3
    44a6:	f06f 0317 	mvn.w	r3, #23
    44aa:	fb04 3303 	mla	r3, r4, r3, r3
    44ae:	eb03 0a02 	add.w	sl, r3, r2
    44b2:	9b02      	ldr	r3, [sp, #8]
    44b4:	9a06      	ldr	r2, [sp, #24]
    44b6:	eb03 0802 	add.w	r8, r3, r2
    44ba:	1aa7      	subs	r7, r4, r2
    44bc:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
    44be:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 4780 <__kernel_rem_pio2+0x318>
    44c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
    44c6:	4545      	cmp	r5, r8
    44c8:	dd13      	ble.n	44f2 <__kernel_rem_pio2+0x8a>
    44ca:	aa22      	add	r2, sp, #136	; 0x88
    44cc:	9b08      	ldr	r3, [sp, #32]
    44ce:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
    44d2:	f04f 0800 	mov.w	r8, #0
    44d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    44da:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 4780 <__kernel_rem_pio2+0x318>
    44de:	9b02      	ldr	r3, [sp, #8]
    44e0:	4598      	cmp	r8, r3
    44e2:	dc2e      	bgt.n	4542 <__kernel_rem_pio2+0xda>
    44e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    44e8:	462f      	mov	r7, r5
    44ea:	2600      	movs	r6, #0
    44ec:	ed8d 8b04 	vstr	d8, [sp, #16]
    44f0:	e01b      	b.n	452a <__kernel_rem_pio2+0xc2>
    44f2:	42ef      	cmn	r7, r5
    44f4:	d407      	bmi.n	4506 <__kernel_rem_pio2+0x9e>
    44f6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
    44fa:	f7fb ff7f 	bl	3fc <__aeabi_i2d>
    44fe:	3501      	adds	r5, #1
    4500:	e8e6 0102 	strd	r0, r1, [r6], #8
    4504:	e7df      	b.n	44c6 <__kernel_rem_pio2+0x5e>
    4506:	ec51 0b18 	vmov	r0, r1, d8
    450a:	e7f8      	b.n	44fe <__kernel_rem_pio2+0x96>
    450c:	e9d7 2300 	ldrd	r2, r3, [r7]
    4510:	e8f9 0102 	ldrd	r0, r1, [r9], #8
    4514:	3601      	adds	r6, #1
    4516:	f7fb ffdb 	bl	4d0 <__aeabi_dmul>
    451a:	4602      	mov	r2, r0
    451c:	460b      	mov	r3, r1
    451e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4522:	f7fb fe1f 	bl	164 <__adddf3>
    4526:	e9cd 0104 	strd	r0, r1, [sp, #16]
    452a:	9b06      	ldr	r3, [sp, #24]
    452c:	3f08      	subs	r7, #8
    452e:	429e      	cmp	r6, r3
    4530:	ddec      	ble.n	450c <__kernel_rem_pio2+0xa4>
    4532:	f108 0801 	add.w	r8, r8, #1
    4536:	3508      	adds	r5, #8
    4538:	ed9d 7b04 	vldr	d7, [sp, #16]
    453c:	ecab 7b02 	vstmia	fp!, {d7}
    4540:	e7cd      	b.n	44de <__kernel_rem_pio2+0x76>
    4542:	9b02      	ldr	r3, [sp, #8]
    4544:	aa0e      	add	r2, sp, #56	; 0x38
    4546:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    454a:	930d      	str	r3, [sp, #52]	; 0x34
    454c:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
    454e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4552:	9c02      	ldr	r4, [sp, #8]
    4554:	930c      	str	r3, [sp, #48]	; 0x30
    4556:	00e3      	lsls	r3, r4, #3
    4558:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    455c:	46a1      	mov	r9, r4
    455e:	930a      	str	r3, [sp, #40]	; 0x28
    4560:	ab9a      	add	r3, sp, #616	; 0x268
    4562:	46c3      	mov	fp, r8
    4564:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    4568:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
    456c:	ab72      	add	r3, sp, #456	; 0x1c8
    456e:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
    4572:	f1b9 0f00 	cmp.w	r9, #0
    4576:	f1a5 0508 	sub.w	r5, r5, #8
    457a:	dc77      	bgt.n	466c <__kernel_rem_pio2+0x204>
    457c:	4650      	mov	r0, sl
    457e:	ec47 6b10 	vmov	d0, r6, r7
    4582:	f000 fd59 	bl	5038 <scalbn>
    4586:	2200      	movs	r2, #0
    4588:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    458c:	ee10 0a10 	vmov	r0, s0
    4590:	ec57 6b10 	vmov	r6, r7, d0
    4594:	4639      	mov	r1, r7
    4596:	f7fb ff9b 	bl	4d0 <__aeabi_dmul>
    459a:	ec41 0b10 	vmov	d0, r0, r1
    459e:	f7fe fe5f 	bl	3260 <floor>
    45a2:	2200      	movs	r2, #0
    45a4:	4b7b      	ldr	r3, [pc, #492]	; (4794 <__kernel_rem_pio2+0x32c>)
    45a6:	ec51 0b10 	vmov	r0, r1, d0
    45aa:	f7fb ff91 	bl	4d0 <__aeabi_dmul>
    45ae:	4602      	mov	r2, r0
    45b0:	460b      	mov	r3, r1
    45b2:	4630      	mov	r0, r6
    45b4:	4639      	mov	r1, r7
    45b6:	f7fb fdd3 	bl	160 <__aeabi_dsub>
    45ba:	460f      	mov	r7, r1
    45bc:	4606      	mov	r6, r0
    45be:	f7fc fb2f 	bl	c20 <__aeabi_d2iz>
    45c2:	9004      	str	r0, [sp, #16]
    45c4:	f7fb ff1a 	bl	3fc <__aeabi_i2d>
    45c8:	4602      	mov	r2, r0
    45ca:	460b      	mov	r3, r1
    45cc:	4630      	mov	r0, r6
    45ce:	4639      	mov	r1, r7
    45d0:	f7fb fdc6 	bl	160 <__aeabi_dsub>
    45d4:	f1ba 0f00 	cmp.w	sl, #0
    45d8:	4606      	mov	r6, r0
    45da:	460f      	mov	r7, r1
    45dc:	dd6d      	ble.n	46ba <__kernel_rem_pio2+0x252>
    45de:	1e62      	subs	r2, r4, #1
    45e0:	ab0e      	add	r3, sp, #56	; 0x38
    45e2:	f1ca 0118 	rsb	r1, sl, #24
    45e6:	9d04      	ldr	r5, [sp, #16]
    45e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    45ec:	fa40 f301 	asr.w	r3, r0, r1
    45f0:	441d      	add	r5, r3
    45f2:	408b      	lsls	r3, r1
    45f4:	1ac0      	subs	r0, r0, r3
    45f6:	ab0e      	add	r3, sp, #56	; 0x38
    45f8:	9504      	str	r5, [sp, #16]
    45fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    45fe:	f1ca 0317 	rsb	r3, sl, #23
    4602:	fa40 fb03 	asr.w	fp, r0, r3
    4606:	f1bb 0f00 	cmp.w	fp, #0
    460a:	dd65      	ble.n	46d8 <__kernel_rem_pio2+0x270>
    460c:	9b04      	ldr	r3, [sp, #16]
    460e:	2200      	movs	r2, #0
    4610:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    4614:	3301      	adds	r3, #1
    4616:	4615      	mov	r5, r2
    4618:	9304      	str	r3, [sp, #16]
    461a:	4294      	cmp	r4, r2
    461c:	f300 809c 	bgt.w	4758 <__kernel_rem_pio2+0x2f0>
    4620:	f1ba 0f00 	cmp.w	sl, #0
    4624:	dd07      	ble.n	4636 <__kernel_rem_pio2+0x1ce>
    4626:	f1ba 0f01 	cmp.w	sl, #1
    462a:	f000 80bf 	beq.w	47ac <__kernel_rem_pio2+0x344>
    462e:	f1ba 0f02 	cmp.w	sl, #2
    4632:	f000 80c5 	beq.w	47c0 <__kernel_rem_pio2+0x358>
    4636:	f1bb 0f02 	cmp.w	fp, #2
    463a:	d14d      	bne.n	46d8 <__kernel_rem_pio2+0x270>
    463c:	4632      	mov	r2, r6
    463e:	463b      	mov	r3, r7
    4640:	2000      	movs	r0, #0
    4642:	4955      	ldr	r1, [pc, #340]	; (4798 <__kernel_rem_pio2+0x330>)
    4644:	f7fb fd8c 	bl	160 <__aeabi_dsub>
    4648:	4606      	mov	r6, r0
    464a:	460f      	mov	r7, r1
    464c:	2d00      	cmp	r5, #0
    464e:	d043      	beq.n	46d8 <__kernel_rem_pio2+0x270>
    4650:	4650      	mov	r0, sl
    4652:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 4788 <__kernel_rem_pio2+0x320>
    4656:	f000 fcef 	bl	5038 <scalbn>
    465a:	4630      	mov	r0, r6
    465c:	4639      	mov	r1, r7
    465e:	ec53 2b10 	vmov	r2, r3, d0
    4662:	f7fb fd7d 	bl	160 <__aeabi_dsub>
    4666:	4606      	mov	r6, r0
    4668:	460f      	mov	r7, r1
    466a:	e035      	b.n	46d8 <__kernel_rem_pio2+0x270>
    466c:	2200      	movs	r2, #0
    466e:	4b4b      	ldr	r3, [pc, #300]	; (479c <__kernel_rem_pio2+0x334>)
    4670:	4630      	mov	r0, r6
    4672:	4639      	mov	r1, r7
    4674:	f7fb ff2c 	bl	4d0 <__aeabi_dmul>
    4678:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    467c:	f7fc fad0 	bl	c20 <__aeabi_d2iz>
    4680:	f7fb febc 	bl	3fc <__aeabi_i2d>
    4684:	4602      	mov	r2, r0
    4686:	460b      	mov	r3, r1
    4688:	ec43 2b18 	vmov	d8, r2, r3
    468c:	2200      	movs	r2, #0
    468e:	4b44      	ldr	r3, [pc, #272]	; (47a0 <__kernel_rem_pio2+0x338>)
    4690:	f7fb ff1e 	bl	4d0 <__aeabi_dmul>
    4694:	4602      	mov	r2, r0
    4696:	460b      	mov	r3, r1
    4698:	4630      	mov	r0, r6
    469a:	4639      	mov	r1, r7
    469c:	f7fb fd60 	bl	160 <__aeabi_dsub>
    46a0:	f7fc fabe 	bl	c20 <__aeabi_d2iz>
    46a4:	f84b 0b04 	str.w	r0, [fp], #4
    46a8:	e9d5 2300 	ldrd	r2, r3, [r5]
    46ac:	ec51 0b18 	vmov	r0, r1, d8
    46b0:	f7fb fd58 	bl	164 <__adddf3>
    46b4:	4606      	mov	r6, r0
    46b6:	460f      	mov	r7, r1
    46b8:	e75b      	b.n	4572 <__kernel_rem_pio2+0x10a>
    46ba:	d106      	bne.n	46ca <__kernel_rem_pio2+0x262>
    46bc:	1e63      	subs	r3, r4, #1
    46be:	aa0e      	add	r2, sp, #56	; 0x38
    46c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    46c4:	ea4f 5be0 	mov.w	fp, r0, asr #23
    46c8:	e79d      	b.n	4606 <__kernel_rem_pio2+0x19e>
    46ca:	2200      	movs	r2, #0
    46cc:	4b35      	ldr	r3, [pc, #212]	; (47a4 <__kernel_rem_pio2+0x33c>)
    46ce:	f7fc f985 	bl	9dc <__aeabi_dcmpge>
    46d2:	2800      	cmp	r0, #0
    46d4:	d13d      	bne.n	4752 <__kernel_rem_pio2+0x2ea>
    46d6:	4683      	mov	fp, r0
    46d8:	2200      	movs	r2, #0
    46da:	2300      	movs	r3, #0
    46dc:	4630      	mov	r0, r6
    46de:	4639      	mov	r1, r7
    46e0:	f7fc f95e 	bl	9a0 <__aeabi_dcmpeq>
    46e4:	2800      	cmp	r0, #0
    46e6:	f000 80be 	beq.w	4866 <__kernel_rem_pio2+0x3fe>
    46ea:	1e65      	subs	r5, r4, #1
    46ec:	2200      	movs	r2, #0
    46ee:	462b      	mov	r3, r5
    46f0:	9902      	ldr	r1, [sp, #8]
    46f2:	428b      	cmp	r3, r1
    46f4:	da6b      	bge.n	47ce <__kernel_rem_pio2+0x366>
    46f6:	2a00      	cmp	r2, #0
    46f8:	f000 8087 	beq.w	480a <__kernel_rem_pio2+0x3a2>
    46fc:	ab0e      	add	r3, sp, #56	; 0x38
    46fe:	f1aa 0a18 	sub.w	sl, sl, #24
    4702:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    4706:	2b00      	cmp	r3, #0
    4708:	f000 80ab 	beq.w	4862 <__kernel_rem_pio2+0x3fa>
    470c:	4650      	mov	r0, sl
    470e:	00ec      	lsls	r4, r5, #3
    4710:	46aa      	mov	sl, r5
    4712:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 4788 <__kernel_rem_pio2+0x320>
    4716:	f000 fc8f 	bl	5038 <scalbn>
    471a:	ab9a      	add	r3, sp, #616	; 0x268
    471c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    4720:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
    4724:	ec57 6b10 	vmov	r6, r7, d0
    4728:	f1ba 0f00 	cmp.w	sl, #0
    472c:	f280 80d4 	bge.w	48d8 <__kernel_rem_pio2+0x470>
    4730:	462e      	mov	r6, r5
    4732:	ed9f 8b13 	vldr	d8, [pc, #76]	; 4780 <__kernel_rem_pio2+0x318>
    4736:	2e00      	cmp	r6, #0
    4738:	f2c0 8102 	blt.w	4940 <__kernel_rem_pio2+0x4d8>
    473c:	ab72      	add	r3, sp, #456	; 0x1c8
    473e:	f8df a068 	ldr.w	sl, [pc, #104]	; 47a8 <__kernel_rem_pio2+0x340>
    4742:	f04f 0800 	mov.w	r8, #0
    4746:	1baf      	subs	r7, r5, r6
    4748:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
    474c:	ed8d 8b06 	vstr	d8, [sp, #24]
    4750:	e0e8      	b.n	4924 <__kernel_rem_pio2+0x4bc>
    4752:	f04f 0b02 	mov.w	fp, #2
    4756:	e759      	b.n	460c <__kernel_rem_pio2+0x1a4>
    4758:	f8d8 3000 	ldr.w	r3, [r8]
    475c:	b955      	cbnz	r5, 4774 <__kernel_rem_pio2+0x30c>
    475e:	b123      	cbz	r3, 476a <__kernel_rem_pio2+0x302>
    4760:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
    4764:	f8c8 3000 	str.w	r3, [r8]
    4768:	2301      	movs	r3, #1
    476a:	3201      	adds	r2, #1
    476c:	f108 0804 	add.w	r8, r8, #4
    4770:	461d      	mov	r5, r3
    4772:	e752      	b.n	461a <__kernel_rem_pio2+0x1b2>
    4774:	1acb      	subs	r3, r1, r3
    4776:	f8c8 3000 	str.w	r3, [r8]
    477a:	462b      	mov	r3, r5
    477c:	e7f5      	b.n	476a <__kernel_rem_pio2+0x302>
    477e:	bf00      	nop
	...
    478c:	3ff00000 	.word	0x3ff00000
    4790:	000173c0 	.word	0x000173c0
    4794:	40200000 	.word	0x40200000
    4798:	3ff00000 	.word	0x3ff00000
    479c:	3e700000 	.word	0x3e700000
    47a0:	41700000 	.word	0x41700000
    47a4:	3fe00000 	.word	0x3fe00000
    47a8:	00015fe0 	.word	0x00015fe0
    47ac:	1e62      	subs	r2, r4, #1
    47ae:	ab0e      	add	r3, sp, #56	; 0x38
    47b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    47b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
    47b8:	a90e      	add	r1, sp, #56	; 0x38
    47ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    47be:	e73a      	b.n	4636 <__kernel_rem_pio2+0x1ce>
    47c0:	1e62      	subs	r2, r4, #1
    47c2:	ab0e      	add	r3, sp, #56	; 0x38
    47c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    47c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
    47cc:	e7f4      	b.n	47b8 <__kernel_rem_pio2+0x350>
    47ce:	a90e      	add	r1, sp, #56	; 0x38
    47d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    47d4:	3b01      	subs	r3, #1
    47d6:	430a      	orrs	r2, r1
    47d8:	e78a      	b.n	46f0 <__kernel_rem_pio2+0x288>
    47da:	3301      	adds	r3, #1
    47dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    47e0:	2900      	cmp	r1, #0
    47e2:	d0fa      	beq.n	47da <__kernel_rem_pio2+0x372>
    47e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    47e6:	a99a      	add	r1, sp, #616	; 0x268
    47e8:	18e3      	adds	r3, r4, r3
    47ea:	f104 0801 	add.w	r8, r4, #1
    47ee:	440a      	add	r2, r1
    47f0:	9304      	str	r3, [sp, #16]
    47f2:	3a98      	subs	r2, #152	; 0x98
    47f4:	920a      	str	r2, [sp, #40]	; 0x28
    47f6:	9a08      	ldr	r2, [sp, #32]
    47f8:	18a5      	adds	r5, r4, r2
    47fa:	aa22      	add	r2, sp, #136	; 0x88
    47fc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
    4800:	9b04      	ldr	r3, [sp, #16]
    4802:	4543      	cmp	r3, r8
    4804:	da04      	bge.n	4810 <__kernel_rem_pio2+0x3a8>
    4806:	461c      	mov	r4, r3
    4808:	e6a5      	b.n	4556 <__kernel_rem_pio2+0xee>
    480a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    480c:	2301      	movs	r3, #1
    480e:	e7e5      	b.n	47dc <__kernel_rem_pio2+0x374>
    4810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4812:	f04f 0900 	mov.w	r9, #0
    4816:	2600      	movs	r6, #0
    4818:	2700      	movs	r7, #0
    481a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    481e:	f7fb fded 	bl	3fc <__aeabi_i2d>
    4822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4824:	e8e5 0102 	strd	r0, r1, [r5], #8
    4828:	461c      	mov	r4, r3
    482a:	46ab      	mov	fp, r5
    482c:	9b06      	ldr	r3, [sp, #24]
    482e:	4599      	cmp	r9, r3
    4830:	dd06      	ble.n	4840 <__kernel_rem_pio2+0x3d8>
    4832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4834:	f108 0801 	add.w	r8, r8, #1
    4838:	e8e3 6702 	strd	r6, r7, [r3], #8
    483c:	930a      	str	r3, [sp, #40]	; 0x28
    483e:	e7df      	b.n	4800 <__kernel_rem_pio2+0x398>
    4840:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
    4844:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    4848:	f7fb fe42 	bl	4d0 <__aeabi_dmul>
    484c:	4602      	mov	r2, r0
    484e:	460b      	mov	r3, r1
    4850:	4630      	mov	r0, r6
    4852:	4639      	mov	r1, r7
    4854:	f109 0901 	add.w	r9, r9, #1
    4858:	f7fb fc84 	bl	164 <__adddf3>
    485c:	4606      	mov	r6, r0
    485e:	460f      	mov	r7, r1
    4860:	e7e4      	b.n	482c <__kernel_rem_pio2+0x3c4>
    4862:	3d01      	subs	r5, #1
    4864:	e74a      	b.n	46fc <__kernel_rem_pio2+0x294>
    4866:	f1ca 0000 	rsb	r0, sl, #0
    486a:	ec47 6b10 	vmov	d0, r6, r7
    486e:	f000 fbe3 	bl	5038 <scalbn>
    4872:	2200      	movs	r2, #0
    4874:	4ba0      	ldr	r3, [pc, #640]	; (4af8 <__kernel_rem_pio2+0x690>)
    4876:	ee10 0a10 	vmov	r0, s0
    487a:	ec57 6b10 	vmov	r6, r7, d0
    487e:	4639      	mov	r1, r7
    4880:	f7fc f8ac 	bl	9dc <__aeabi_dcmpge>
    4884:	b1f8      	cbz	r0, 48c6 <__kernel_rem_pio2+0x45e>
    4886:	2200      	movs	r2, #0
    4888:	4b9c      	ldr	r3, [pc, #624]	; (4afc <__kernel_rem_pio2+0x694>)
    488a:	4630      	mov	r0, r6
    488c:	4639      	mov	r1, r7
    488e:	f7fb fe1f 	bl	4d0 <__aeabi_dmul>
    4892:	1c65      	adds	r5, r4, #1
    4894:	f7fc f9c4 	bl	c20 <__aeabi_d2iz>
    4898:	4680      	mov	r8, r0
    489a:	f7fb fdaf 	bl	3fc <__aeabi_i2d>
    489e:	2200      	movs	r2, #0
    48a0:	4b95      	ldr	r3, [pc, #596]	; (4af8 <__kernel_rem_pio2+0x690>)
    48a2:	f10a 0a18 	add.w	sl, sl, #24
    48a6:	f7fb fe13 	bl	4d0 <__aeabi_dmul>
    48aa:	460b      	mov	r3, r1
    48ac:	4602      	mov	r2, r0
    48ae:	4639      	mov	r1, r7
    48b0:	4630      	mov	r0, r6
    48b2:	f7fb fc55 	bl	160 <__aeabi_dsub>
    48b6:	f7fc f9b3 	bl	c20 <__aeabi_d2iz>
    48ba:	ab0e      	add	r3, sp, #56	; 0x38
    48bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    48c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
    48c4:	e722      	b.n	470c <__kernel_rem_pio2+0x2a4>
    48c6:	4630      	mov	r0, r6
    48c8:	4639      	mov	r1, r7
    48ca:	f7fc f9a9 	bl	c20 <__aeabi_d2iz>
    48ce:	ab0e      	add	r3, sp, #56	; 0x38
    48d0:	4625      	mov	r5, r4
    48d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    48d6:	e719      	b.n	470c <__kernel_rem_pio2+0x2a4>
    48d8:	ab0e      	add	r3, sp, #56	; 0x38
    48da:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    48de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    48e2:	f7fb fd8b 	bl	3fc <__aeabi_i2d>
    48e6:	4632      	mov	r2, r6
    48e8:	463b      	mov	r3, r7
    48ea:	f7fb fdf1 	bl	4d0 <__aeabi_dmul>
    48ee:	2200      	movs	r2, #0
    48f0:	4b82      	ldr	r3, [pc, #520]	; (4afc <__kernel_rem_pio2+0x694>)
    48f2:	e968 0102 	strd	r0, r1, [r8, #-8]!
    48f6:	4630      	mov	r0, r6
    48f8:	4639      	mov	r1, r7
    48fa:	f7fb fde9 	bl	4d0 <__aeabi_dmul>
    48fe:	4606      	mov	r6, r0
    4900:	460f      	mov	r7, r1
    4902:	e711      	b.n	4728 <__kernel_rem_pio2+0x2c0>
    4904:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    4908:	e8fa 0102 	ldrd	r0, r1, [sl], #8
    490c:	f108 0801 	add.w	r8, r8, #1
    4910:	f7fb fdde 	bl	4d0 <__aeabi_dmul>
    4914:	4602      	mov	r2, r0
    4916:	460b      	mov	r3, r1
    4918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    491c:	f7fb fc22 	bl	164 <__adddf3>
    4920:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4924:	9b02      	ldr	r3, [sp, #8]
    4926:	4598      	cmp	r8, r3
    4928:	dc01      	bgt.n	492e <__kernel_rem_pio2+0x4c6>
    492a:	45b8      	cmp	r8, r7
    492c:	ddea      	ble.n	4904 <__kernel_rem_pio2+0x49c>
    492e:	ab4a      	add	r3, sp, #296	; 0x128
    4930:	3e01      	subs	r6, #1
    4932:	ed9d 7b06 	vldr	d7, [sp, #24]
    4936:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    493a:	ed87 7b00 	vstr	d7, [r7]
    493e:	e6fa      	b.n	4736 <__kernel_rem_pio2+0x2ce>
    4940:	9ba6      	ldr	r3, [sp, #664]	; 0x298
    4942:	2b02      	cmp	r3, #2
    4944:	dc0b      	bgt.n	495e <__kernel_rem_pio2+0x4f6>
    4946:	2b00      	cmp	r3, #0
    4948:	dc35      	bgt.n	49b6 <__kernel_rem_pio2+0x54e>
    494a:	d059      	beq.n	4a00 <__kernel_rem_pio2+0x598>
    494c:	9b04      	ldr	r3, [sp, #16]
    494e:	f003 0007 	and.w	r0, r3, #7
    4952:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
    4956:	ecbd 8b02 	vpop	{d8}
    495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    495e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
    4960:	2b03      	cmp	r3, #3
    4962:	d1f3      	bne.n	494c <__kernel_rem_pio2+0x4e4>
    4964:	ab4a      	add	r3, sp, #296	; 0x128
    4966:	9502      	str	r5, [sp, #8]
    4968:	4423      	add	r3, r4
    496a:	461c      	mov	r4, r3
    496c:	469a      	mov	sl, r3
    496e:	9306      	str	r3, [sp, #24]
    4970:	9b02      	ldr	r3, [sp, #8]
    4972:	f1aa 0a08 	sub.w	sl, sl, #8
    4976:	2b00      	cmp	r3, #0
    4978:	dc69      	bgt.n	4a4e <__kernel_rem_pio2+0x5e6>
    497a:	46aa      	mov	sl, r5
    497c:	f1ba 0f01 	cmp.w	sl, #1
    4980:	f1a4 0408 	sub.w	r4, r4, #8
    4984:	f300 8083 	bgt.w	4a8e <__kernel_rem_pio2+0x626>
    4988:	9c06      	ldr	r4, [sp, #24]
    498a:	2000      	movs	r0, #0
    498c:	2100      	movs	r1, #0
    498e:	3408      	adds	r4, #8
    4990:	2d01      	cmp	r5, #1
    4992:	f300 809b 	bgt.w	4acc <__kernel_rem_pio2+0x664>
    4996:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
    499a:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
    499e:	f1bb 0f00 	cmp.w	fp, #0
    49a2:	f040 8099 	bne.w	4ad8 <__kernel_rem_pio2+0x670>
    49a6:	9b01      	ldr	r3, [sp, #4]
    49a8:	e9c3 5600 	strd	r5, r6, [r3]
    49ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
    49b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
    49b4:	e7ca      	b.n	494c <__kernel_rem_pio2+0x4e4>
    49b6:	3408      	adds	r4, #8
    49b8:	ab4a      	add	r3, sp, #296	; 0x128
    49ba:	462e      	mov	r6, r5
    49bc:	2000      	movs	r0, #0
    49be:	441c      	add	r4, r3
    49c0:	2100      	movs	r1, #0
    49c2:	2e00      	cmp	r6, #0
    49c4:	da34      	bge.n	4a30 <__kernel_rem_pio2+0x5c8>
    49c6:	f1bb 0f00 	cmp.w	fp, #0
    49ca:	d037      	beq.n	4a3c <__kernel_rem_pio2+0x5d4>
    49cc:	4602      	mov	r2, r0
    49ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    49d2:	9c01      	ldr	r4, [sp, #4]
    49d4:	ae4c      	add	r6, sp, #304	; 0x130
    49d6:	e9c4 2300 	strd	r2, r3, [r4]
    49da:	2401      	movs	r4, #1
    49dc:	4602      	mov	r2, r0
    49de:	460b      	mov	r3, r1
    49e0:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
    49e4:	f7fb fbbc 	bl	160 <__aeabi_dsub>
    49e8:	42a5      	cmp	r5, r4
    49ea:	da2a      	bge.n	4a42 <__kernel_rem_pio2+0x5da>
    49ec:	f1bb 0f00 	cmp.w	fp, #0
    49f0:	d002      	beq.n	49f8 <__kernel_rem_pio2+0x590>
    49f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    49f6:	4619      	mov	r1, r3
    49f8:	9b01      	ldr	r3, [sp, #4]
    49fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
    49fe:	e7a5      	b.n	494c <__kernel_rem_pio2+0x4e4>
    4a00:	ab9a      	add	r3, sp, #616	; 0x268
    4a02:	2000      	movs	r0, #0
    4a04:	2100      	movs	r1, #0
    4a06:	441c      	add	r4, r3
    4a08:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
    4a0c:	2d00      	cmp	r5, #0
    4a0e:	da09      	bge.n	4a24 <__kernel_rem_pio2+0x5bc>
    4a10:	f1bb 0f00 	cmp.w	fp, #0
    4a14:	d002      	beq.n	4a1c <__kernel_rem_pio2+0x5b4>
    4a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4a1a:	4619      	mov	r1, r3
    4a1c:	9b01      	ldr	r3, [sp, #4]
    4a1e:	e9c3 0100 	strd	r0, r1, [r3]
    4a22:	e793      	b.n	494c <__kernel_rem_pio2+0x4e4>
    4a24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    4a28:	3d01      	subs	r5, #1
    4a2a:	f7fb fb9b 	bl	164 <__adddf3>
    4a2e:	e7ed      	b.n	4a0c <__kernel_rem_pio2+0x5a4>
    4a30:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    4a34:	3e01      	subs	r6, #1
    4a36:	f7fb fb95 	bl	164 <__adddf3>
    4a3a:	e7c2      	b.n	49c2 <__kernel_rem_pio2+0x55a>
    4a3c:	4602      	mov	r2, r0
    4a3e:	460b      	mov	r3, r1
    4a40:	e7c7      	b.n	49d2 <__kernel_rem_pio2+0x56a>
    4a42:	e8f6 2302 	ldrd	r2, r3, [r6], #8
    4a46:	3401      	adds	r4, #1
    4a48:	f7fb fb8c 	bl	164 <__adddf3>
    4a4c:	e7cc      	b.n	49e8 <__kernel_rem_pio2+0x580>
    4a4e:	9b02      	ldr	r3, [sp, #8]
    4a50:	e9da 8900 	ldrd	r8, r9, [sl]
    4a54:	e9da 6702 	ldrd	r6, r7, [sl, #8]
    4a58:	3b01      	subs	r3, #1
    4a5a:	4640      	mov	r0, r8
    4a5c:	4632      	mov	r2, r6
    4a5e:	4649      	mov	r1, r9
    4a60:	9302      	str	r3, [sp, #8]
    4a62:	463b      	mov	r3, r7
    4a64:	f7fb fb7e 	bl	164 <__adddf3>
    4a68:	4602      	mov	r2, r0
    4a6a:	460b      	mov	r3, r1
    4a6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    4a70:	4640      	mov	r0, r8
    4a72:	4649      	mov	r1, r9
    4a74:	f7fb fb74 	bl	160 <__aeabi_dsub>
    4a78:	4632      	mov	r2, r6
    4a7a:	463b      	mov	r3, r7
    4a7c:	f7fb fb72 	bl	164 <__adddf3>
    4a80:	ed9d 7b08 	vldr	d7, [sp, #32]
    4a84:	e9ca 0102 	strd	r0, r1, [sl, #8]
    4a88:	ed8a 7b00 	vstr	d7, [sl]
    4a8c:	e770      	b.n	4970 <__kernel_rem_pio2+0x508>
    4a8e:	e9d4 8900 	ldrd	r8, r9, [r4]
    4a92:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    4a96:	4640      	mov	r0, r8
    4a98:	4649      	mov	r1, r9
    4a9a:	4632      	mov	r2, r6
    4a9c:	463b      	mov	r3, r7
    4a9e:	f7fb fb61 	bl	164 <__adddf3>
    4aa2:	4602      	mov	r2, r0
    4aa4:	460b      	mov	r3, r1
    4aa6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    4aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4aae:	4640      	mov	r0, r8
    4ab0:	4649      	mov	r1, r9
    4ab2:	f7fb fb55 	bl	160 <__aeabi_dsub>
    4ab6:	4632      	mov	r2, r6
    4ab8:	463b      	mov	r3, r7
    4aba:	f7fb fb53 	bl	164 <__adddf3>
    4abe:	ed9d 7b02 	vldr	d7, [sp, #8]
    4ac2:	e9c4 0102 	strd	r0, r1, [r4, #8]
    4ac6:	ed84 7b00 	vstr	d7, [r4]
    4aca:	e757      	b.n	497c <__kernel_rem_pio2+0x514>
    4acc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    4ad0:	3d01      	subs	r5, #1
    4ad2:	f7fb fb47 	bl	164 <__adddf3>
    4ad6:	e75b      	b.n	4990 <__kernel_rem_pio2+0x528>
    4ad8:	9b01      	ldr	r3, [sp, #4]
    4ada:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
    4ade:	9a01      	ldr	r2, [sp, #4]
    4ae0:	601d      	str	r5, [r3, #0]
    4ae2:	605c      	str	r4, [r3, #4]
    4ae4:	609f      	str	r7, [r3, #8]
    4ae6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
    4aea:	6110      	str	r0, [r2, #16]
    4aec:	60d3      	str	r3, [r2, #12]
    4aee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4af2:	6153      	str	r3, [r2, #20]
    4af4:	e72a      	b.n	494c <__kernel_rem_pio2+0x4e4>
    4af6:	bf00      	nop
    4af8:	41700000 	.word	0x41700000
    4afc:	3e700000 	.word	0x3e700000

00004b00 <__kernel_sin>:
    4b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b04:	ec55 4b10 	vmov	r4, r5, d0
    4b08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    4b0c:	ed2d 8b04 	vpush	{d8-d9}
    4b10:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    4b14:	b083      	sub	sp, #12
    4b16:	eeb0 8a41 	vmov.f32	s16, s2
    4b1a:	eef0 8a61 	vmov.f32	s17, s3
    4b1e:	9001      	str	r0, [sp, #4]
    4b20:	da06      	bge.n	4b30 <__kernel_sin+0x30>
    4b22:	ee10 0a10 	vmov	r0, s0
    4b26:	4629      	mov	r1, r5
    4b28:	f7fc f87a 	bl	c20 <__aeabi_d2iz>
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d051      	beq.n	4bd4 <__kernel_sin+0xd4>
    4b30:	4622      	mov	r2, r4
    4b32:	462b      	mov	r3, r5
    4b34:	4620      	mov	r0, r4
    4b36:	4629      	mov	r1, r5
    4b38:	f7fb fcca 	bl	4d0 <__aeabi_dmul>
    4b3c:	4682      	mov	sl, r0
    4b3e:	468b      	mov	fp, r1
    4b40:	4602      	mov	r2, r0
    4b42:	460b      	mov	r3, r1
    4b44:	4620      	mov	r0, r4
    4b46:	4629      	mov	r1, r5
    4b48:	f7fb fcc2 	bl	4d0 <__aeabi_dmul>
    4b4c:	4680      	mov	r8, r0
    4b4e:	4689      	mov	r9, r1
    4b50:	4650      	mov	r0, sl
    4b52:	4659      	mov	r1, fp
    4b54:	a33f      	add	r3, pc, #252	; (adr r3, 4c54 <__kernel_sin+0x154>)
    4b56:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b5a:	f7fb fcb9 	bl	4d0 <__aeabi_dmul>
    4b5e:	a33f      	add	r3, pc, #252	; (adr r3, 4c5c <__kernel_sin+0x15c>)
    4b60:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b64:	f7fb fafc 	bl	160 <__aeabi_dsub>
    4b68:	4652      	mov	r2, sl
    4b6a:	465b      	mov	r3, fp
    4b6c:	f7fb fcb0 	bl	4d0 <__aeabi_dmul>
    4b70:	a33c      	add	r3, pc, #240	; (adr r3, 4c64 <__kernel_sin+0x164>)
    4b72:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b76:	f7fb faf5 	bl	164 <__adddf3>
    4b7a:	4652      	mov	r2, sl
    4b7c:	465b      	mov	r3, fp
    4b7e:	f7fb fca7 	bl	4d0 <__aeabi_dmul>
    4b82:	a33a      	add	r3, pc, #232	; (adr r3, 4c6c <__kernel_sin+0x16c>)
    4b84:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b88:	f7fb faea 	bl	160 <__aeabi_dsub>
    4b8c:	4652      	mov	r2, sl
    4b8e:	465b      	mov	r3, fp
    4b90:	f7fb fc9e 	bl	4d0 <__aeabi_dmul>
    4b94:	a337      	add	r3, pc, #220	; (adr r3, 4c74 <__kernel_sin+0x174>)
    4b96:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b9a:	f7fb fae3 	bl	164 <__adddf3>
    4b9e:	9b01      	ldr	r3, [sp, #4]
    4ba0:	4606      	mov	r6, r0
    4ba2:	460f      	mov	r7, r1
    4ba4:	b9eb      	cbnz	r3, 4be2 <__kernel_sin+0xe2>
    4ba6:	4602      	mov	r2, r0
    4ba8:	460b      	mov	r3, r1
    4baa:	4650      	mov	r0, sl
    4bac:	4659      	mov	r1, fp
    4bae:	f7fb fc8f 	bl	4d0 <__aeabi_dmul>
    4bb2:	a325      	add	r3, pc, #148	; (adr r3, 4c48 <__kernel_sin+0x148>)
    4bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bb8:	f7fb fad2 	bl	160 <__aeabi_dsub>
    4bbc:	4642      	mov	r2, r8
    4bbe:	464b      	mov	r3, r9
    4bc0:	f7fb fc86 	bl	4d0 <__aeabi_dmul>
    4bc4:	4602      	mov	r2, r0
    4bc6:	460b      	mov	r3, r1
    4bc8:	4620      	mov	r0, r4
    4bca:	4629      	mov	r1, r5
    4bcc:	f7fb faca 	bl	164 <__adddf3>
    4bd0:	4604      	mov	r4, r0
    4bd2:	460d      	mov	r5, r1
    4bd4:	ec45 4b10 	vmov	d0, r4, r5
    4bd8:	b003      	add	sp, #12
    4bda:	ecbd 8b04 	vpop	{d8-d9}
    4bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4be2:	2200      	movs	r2, #0
    4be4:	4b1a      	ldr	r3, [pc, #104]	; (4c50 <__kernel_sin+0x150>)
    4be6:	ec51 0b18 	vmov	r0, r1, d8
    4bea:	f7fb fc71 	bl	4d0 <__aeabi_dmul>
    4bee:	4632      	mov	r2, r6
    4bf0:	463b      	mov	r3, r7
    4bf2:	ec41 0b19 	vmov	d9, r0, r1
    4bf6:	4640      	mov	r0, r8
    4bf8:	4649      	mov	r1, r9
    4bfa:	f7fb fc69 	bl	4d0 <__aeabi_dmul>
    4bfe:	4602      	mov	r2, r0
    4c00:	460b      	mov	r3, r1
    4c02:	ec51 0b19 	vmov	r0, r1, d9
    4c06:	f7fb faab 	bl	160 <__aeabi_dsub>
    4c0a:	4652      	mov	r2, sl
    4c0c:	465b      	mov	r3, fp
    4c0e:	f7fb fc5f 	bl	4d0 <__aeabi_dmul>
    4c12:	ec53 2b18 	vmov	r2, r3, d8
    4c16:	f7fb faa3 	bl	160 <__aeabi_dsub>
    4c1a:	4606      	mov	r6, r0
    4c1c:	460f      	mov	r7, r1
    4c1e:	4640      	mov	r0, r8
    4c20:	4649      	mov	r1, r9
    4c22:	a309      	add	r3, pc, #36	; (adr r3, 4c48 <__kernel_sin+0x148>)
    4c24:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c28:	f7fb fc52 	bl	4d0 <__aeabi_dmul>
    4c2c:	4602      	mov	r2, r0
    4c2e:	460b      	mov	r3, r1
    4c30:	4630      	mov	r0, r6
    4c32:	4639      	mov	r1, r7
    4c34:	f7fb fa96 	bl	164 <__adddf3>
    4c38:	4602      	mov	r2, r0
    4c3a:	460b      	mov	r3, r1
    4c3c:	4620      	mov	r0, r4
    4c3e:	4629      	mov	r1, r5
    4c40:	f7fb fa8e 	bl	160 <__aeabi_dsub>
    4c44:	e7c4      	b.n	4bd0 <__kernel_sin+0xd0>
    4c46:	bf00      	nop
    4c48:	55555549 	.word	0x55555549
    4c4c:	3fc55555 	.word	0x3fc55555
    4c50:	3fe00000 	.word	0x3fe00000
    4c54:	5acfd57c 	.word	0x5acfd57c
    4c58:	3de5d93a 	.word	0x3de5d93a
    4c5c:	8a2b9ceb 	.word	0x8a2b9ceb
    4c60:	3e5ae5e6 	.word	0x3e5ae5e6
    4c64:	57b1fe7d 	.word	0x57b1fe7d
    4c68:	3ec71de3 	.word	0x3ec71de3
    4c6c:	19c161d5 	.word	0x19c161d5
    4c70:	3f2a01a0 	.word	0x3f2a01a0
    4c74:	1110f8a6 	.word	0x1110f8a6
    4c78:	3f811111 	.word	0x3f811111
    4c7c:	00000000 	.word	0x00000000

00004c80 <__kernel_tan>:
    4c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c84:	ec5b ab10 	vmov	sl, fp, d0
    4c88:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    4c8c:	4be0      	ldr	r3, [pc, #896]	; (5010 <__kernel_tan+0x390>)
    4c8e:	4606      	mov	r6, r0
    4c90:	429f      	cmp	r7, r3
    4c92:	ed2d 8b04 	vpush	{d8-d9}
    4c96:	b085      	sub	sp, #20
    4c98:	ed8d 1b00 	vstr	d1, [sp]
    4c9c:	f8cd b00c 	str.w	fp, [sp, #12]
    4ca0:	dc24      	bgt.n	4cec <__kernel_tan+0x6c>
    4ca2:	ee10 0a10 	vmov	r0, s0
    4ca6:	4659      	mov	r1, fp
    4ca8:	f7fb ffba 	bl	c20 <__aeabi_d2iz>
    4cac:	2800      	cmp	r0, #0
    4cae:	d148      	bne.n	4d42 <__kernel_tan+0xc2>
    4cb0:	1c73      	adds	r3, r6, #1
    4cb2:	4652      	mov	r2, sl
    4cb4:	4313      	orrs	r3, r2
    4cb6:	433b      	orrs	r3, r7
    4cb8:	d112      	bne.n	4ce0 <__kernel_tan+0x60>
    4cba:	ec4b ab10 	vmov	d0, sl, fp
    4cbe:	f00f ff41 	bl	14b44 <fabs>
    4cc2:	2000      	movs	r0, #0
    4cc4:	49d3      	ldr	r1, [pc, #844]	; (5014 <__kernel_tan+0x394>)
    4cc6:	ec53 2b10 	vmov	r2, r3, d0
    4cca:	f7fb fd2b 	bl	724 <__aeabi_ddiv>
    4cce:	4682      	mov	sl, r0
    4cd0:	468b      	mov	fp, r1
    4cd2:	ec4b ab10 	vmov	d0, sl, fp
    4cd6:	b005      	add	sp, #20
    4cd8:	ecbd 8b04 	vpop	{d8-d9}
    4cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ce0:	2e01      	cmp	r6, #1
    4ce2:	d0f6      	beq.n	4cd2 <__kernel_tan+0x52>
    4ce4:	465b      	mov	r3, fp
    4ce6:	2000      	movs	r0, #0
    4ce8:	49cb      	ldr	r1, [pc, #812]	; (5018 <__kernel_tan+0x398>)
    4cea:	e7ee      	b.n	4cca <__kernel_tan+0x4a>
    4cec:	4bcb      	ldr	r3, [pc, #812]	; (501c <__kernel_tan+0x39c>)
    4cee:	429f      	cmp	r7, r3
    4cf0:	dd27      	ble.n	4d42 <__kernel_tan+0xc2>
    4cf2:	9b03      	ldr	r3, [sp, #12]
    4cf4:	2b00      	cmp	r3, #0
    4cf6:	da0a      	bge.n	4d0e <__kernel_tan+0x8e>
    4cf8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    4cfc:	ee10 aa10 	vmov	sl, s0
    4d00:	e9dd 2100 	ldrd	r2, r1, [sp]
    4d04:	469b      	mov	fp, r3
    4d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4d0a:	e9cd 2300 	strd	r2, r3, [sp]
    4d0e:	4652      	mov	r2, sl
    4d10:	465b      	mov	r3, fp
    4d12:	a19f      	add	r1, pc, #636	; (adr r1, 4f90 <__kernel_tan+0x310>)
    4d14:	e9d1 0100 	ldrd	r0, r1, [r1]
    4d18:	f7fb fa22 	bl	160 <__aeabi_dsub>
    4d1c:	4604      	mov	r4, r0
    4d1e:	460d      	mov	r5, r1
    4d20:	e9dd 2300 	ldrd	r2, r3, [sp]
    4d24:	a19c      	add	r1, pc, #624	; (adr r1, 4f98 <__kernel_tan+0x318>)
    4d26:	e9d1 0100 	ldrd	r0, r1, [r1]
    4d2a:	f7fb fa19 	bl	160 <__aeabi_dsub>
    4d2e:	4622      	mov	r2, r4
    4d30:	462b      	mov	r3, r5
    4d32:	f7fb fa17 	bl	164 <__adddf3>
    4d36:	4682      	mov	sl, r0
    4d38:	468b      	mov	fp, r1
    4d3a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 4fa0 <__kernel_tan+0x320>
    4d3e:	ed8d 7b00 	vstr	d7, [sp]
    4d42:	4652      	mov	r2, sl
    4d44:	465b      	mov	r3, fp
    4d46:	4650      	mov	r0, sl
    4d48:	4659      	mov	r1, fp
    4d4a:	f7fb fbc1 	bl	4d0 <__aeabi_dmul>
    4d4e:	4680      	mov	r8, r0
    4d50:	4689      	mov	r9, r1
    4d52:	4602      	mov	r2, r0
    4d54:	460b      	mov	r3, r1
    4d56:	f7fb fbbb 	bl	4d0 <__aeabi_dmul>
    4d5a:	4604      	mov	r4, r0
    4d5c:	460d      	mov	r5, r1
    4d5e:	4642      	mov	r2, r8
    4d60:	464b      	mov	r3, r9
    4d62:	4650      	mov	r0, sl
    4d64:	4659      	mov	r1, fp
    4d66:	f7fb fbb3 	bl	4d0 <__aeabi_dmul>
    4d6a:	a38f      	add	r3, pc, #572	; (adr r3, 4fa8 <__kernel_tan+0x328>)
    4d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d70:	ec41 0b18 	vmov	d8, r0, r1
    4d74:	4620      	mov	r0, r4
    4d76:	4629      	mov	r1, r5
    4d78:	f7fb fbaa 	bl	4d0 <__aeabi_dmul>
    4d7c:	a38c      	add	r3, pc, #560	; (adr r3, 4fb0 <__kernel_tan+0x330>)
    4d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d82:	f7fb f9ef 	bl	164 <__adddf3>
    4d86:	4622      	mov	r2, r4
    4d88:	462b      	mov	r3, r5
    4d8a:	f7fb fba1 	bl	4d0 <__aeabi_dmul>
    4d8e:	a38a      	add	r3, pc, #552	; (adr r3, 4fb8 <__kernel_tan+0x338>)
    4d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d94:	f7fb f9e6 	bl	164 <__adddf3>
    4d98:	4622      	mov	r2, r4
    4d9a:	462b      	mov	r3, r5
    4d9c:	f7fb fb98 	bl	4d0 <__aeabi_dmul>
    4da0:	a387      	add	r3, pc, #540	; (adr r3, 4fc0 <__kernel_tan+0x340>)
    4da2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4da6:	f7fb f9dd 	bl	164 <__adddf3>
    4daa:	4622      	mov	r2, r4
    4dac:	462b      	mov	r3, r5
    4dae:	f7fb fb8f 	bl	4d0 <__aeabi_dmul>
    4db2:	a385      	add	r3, pc, #532	; (adr r3, 4fc8 <__kernel_tan+0x348>)
    4db4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4db8:	f7fb f9d4 	bl	164 <__adddf3>
    4dbc:	4622      	mov	r2, r4
    4dbe:	462b      	mov	r3, r5
    4dc0:	f7fb fb86 	bl	4d0 <__aeabi_dmul>
    4dc4:	a382      	add	r3, pc, #520	; (adr r3, 4fd0 <__kernel_tan+0x350>)
    4dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4dca:	f7fb f9cb 	bl	164 <__adddf3>
    4dce:	4642      	mov	r2, r8
    4dd0:	464b      	mov	r3, r9
    4dd2:	f7fb fb7d 	bl	4d0 <__aeabi_dmul>
    4dd6:	a380      	add	r3, pc, #512	; (adr r3, 4fd8 <__kernel_tan+0x358>)
    4dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ddc:	ec41 0b19 	vmov	d9, r0, r1
    4de0:	4620      	mov	r0, r4
    4de2:	4629      	mov	r1, r5
    4de4:	f7fb fb74 	bl	4d0 <__aeabi_dmul>
    4de8:	a37d      	add	r3, pc, #500	; (adr r3, 4fe0 <__kernel_tan+0x360>)
    4dea:	e9d3 2300 	ldrd	r2, r3, [r3]
    4dee:	f7fb f9b9 	bl	164 <__adddf3>
    4df2:	4622      	mov	r2, r4
    4df4:	462b      	mov	r3, r5
    4df6:	f7fb fb6b 	bl	4d0 <__aeabi_dmul>
    4dfa:	a37b      	add	r3, pc, #492	; (adr r3, 4fe8 <__kernel_tan+0x368>)
    4dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e00:	f7fb f9b0 	bl	164 <__adddf3>
    4e04:	4622      	mov	r2, r4
    4e06:	462b      	mov	r3, r5
    4e08:	f7fb fb62 	bl	4d0 <__aeabi_dmul>
    4e0c:	a378      	add	r3, pc, #480	; (adr r3, 4ff0 <__kernel_tan+0x370>)
    4e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e12:	f7fb f9a7 	bl	164 <__adddf3>
    4e16:	4622      	mov	r2, r4
    4e18:	462b      	mov	r3, r5
    4e1a:	f7fb fb59 	bl	4d0 <__aeabi_dmul>
    4e1e:	a376      	add	r3, pc, #472	; (adr r3, 4ff8 <__kernel_tan+0x378>)
    4e20:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e24:	f7fb f99e 	bl	164 <__adddf3>
    4e28:	4622      	mov	r2, r4
    4e2a:	462b      	mov	r3, r5
    4e2c:	f7fb fb50 	bl	4d0 <__aeabi_dmul>
    4e30:	a373      	add	r3, pc, #460	; (adr r3, 5000 <__kernel_tan+0x380>)
    4e32:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e36:	f7fb f995 	bl	164 <__adddf3>
    4e3a:	4602      	mov	r2, r0
    4e3c:	460b      	mov	r3, r1
    4e3e:	ec51 0b19 	vmov	r0, r1, d9
    4e42:	f7fb f98f 	bl	164 <__adddf3>
    4e46:	ec53 2b18 	vmov	r2, r3, d8
    4e4a:	f7fb fb41 	bl	4d0 <__aeabi_dmul>
    4e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
    4e52:	f7fb f987 	bl	164 <__adddf3>
    4e56:	4642      	mov	r2, r8
    4e58:	464b      	mov	r3, r9
    4e5a:	f7fb fb39 	bl	4d0 <__aeabi_dmul>
    4e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
    4e62:	f7fb f97f 	bl	164 <__adddf3>
    4e66:	4604      	mov	r4, r0
    4e68:	460d      	mov	r5, r1
    4e6a:	a367      	add	r3, pc, #412	; (adr r3, 5008 <__kernel_tan+0x388>)
    4e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e70:	ec51 0b18 	vmov	r0, r1, d8
    4e74:	f7fb fb2c 	bl	4d0 <__aeabi_dmul>
    4e78:	4622      	mov	r2, r4
    4e7a:	462b      	mov	r3, r5
    4e7c:	f7fb f972 	bl	164 <__adddf3>
    4e80:	460b      	mov	r3, r1
    4e82:	4602      	mov	r2, r0
    4e84:	ec41 0b18 	vmov	d8, r0, r1
    4e88:	4650      	mov	r0, sl
    4e8a:	4659      	mov	r1, fp
    4e8c:	f7fb f96a 	bl	164 <__adddf3>
    4e90:	4b62      	ldr	r3, [pc, #392]	; (501c <__kernel_tan+0x39c>)
    4e92:	4604      	mov	r4, r0
    4e94:	460d      	mov	r5, r1
    4e96:	429f      	cmp	r7, r3
    4e98:	dd3e      	ble.n	4f18 <__kernel_tan+0x298>
    4e9a:	4630      	mov	r0, r6
    4e9c:	f7fb faae 	bl	3fc <__aeabi_i2d>
    4ea0:	4622      	mov	r2, r4
    4ea2:	4680      	mov	r8, r0
    4ea4:	4689      	mov	r9, r1
    4ea6:	462b      	mov	r3, r5
    4ea8:	4620      	mov	r0, r4
    4eaa:	4629      	mov	r1, r5
    4eac:	f7fb fb10 	bl	4d0 <__aeabi_dmul>
    4eb0:	4606      	mov	r6, r0
    4eb2:	460f      	mov	r7, r1
    4eb4:	4642      	mov	r2, r8
    4eb6:	464b      	mov	r3, r9
    4eb8:	4620      	mov	r0, r4
    4eba:	4629      	mov	r1, r5
    4ebc:	f7fb f952 	bl	164 <__adddf3>
    4ec0:	4602      	mov	r2, r0
    4ec2:	460b      	mov	r3, r1
    4ec4:	4630      	mov	r0, r6
    4ec6:	4639      	mov	r1, r7
    4ec8:	f7fb fc2c 	bl	724 <__aeabi_ddiv>
    4ecc:	ec53 2b18 	vmov	r2, r3, d8
    4ed0:	f7fb f946 	bl	160 <__aeabi_dsub>
    4ed4:	4602      	mov	r2, r0
    4ed6:	460b      	mov	r3, r1
    4ed8:	4650      	mov	r0, sl
    4eda:	4659      	mov	r1, fp
    4edc:	f7fb f940 	bl	160 <__aeabi_dsub>
    4ee0:	4602      	mov	r2, r0
    4ee2:	460b      	mov	r3, r1
    4ee4:	f7fb f93e 	bl	164 <__adddf3>
    4ee8:	4602      	mov	r2, r0
    4eea:	460b      	mov	r3, r1
    4eec:	4640      	mov	r0, r8
    4eee:	4649      	mov	r1, r9
    4ef0:	f7fb f936 	bl	160 <__aeabi_dsub>
    4ef4:	9b03      	ldr	r3, [sp, #12]
    4ef6:	4604      	mov	r4, r0
    4ef8:	460d      	mov	r5, r1
    4efa:	ea4f 7aa3 	mov.w	sl, r3, asr #30
    4efe:	f00a 0a02 	and.w	sl, sl, #2
    4f02:	f1ca 0001 	rsb	r0, sl, #1
    4f06:	f7fb fa79 	bl	3fc <__aeabi_i2d>
    4f0a:	4602      	mov	r2, r0
    4f0c:	460b      	mov	r3, r1
    4f0e:	4620      	mov	r0, r4
    4f10:	4629      	mov	r1, r5
    4f12:	f7fb fadd 	bl	4d0 <__aeabi_dmul>
    4f16:	e6da      	b.n	4cce <__kernel_tan+0x4e>
    4f18:	2e01      	cmp	r6, #1
    4f1a:	f000 8081 	beq.w	5020 <__kernel_tan+0x3a0>
    4f1e:	2600      	movs	r6, #0
    4f20:	460f      	mov	r7, r1
    4f22:	4689      	mov	r9, r1
    4f24:	4602      	mov	r2, r0
    4f26:	460b      	mov	r3, r1
    4f28:	2000      	movs	r0, #0
    4f2a:	493b      	ldr	r1, [pc, #236]	; (5018 <__kernel_tan+0x398>)
    4f2c:	46b0      	mov	r8, r6
    4f2e:	f7fb fbf9 	bl	724 <__aeabi_ddiv>
    4f32:	4652      	mov	r2, sl
    4f34:	465b      	mov	r3, fp
    4f36:	e9cd 0100 	strd	r0, r1, [sp]
    4f3a:	e9dd 4500 	ldrd	r4, r5, [sp]
    4f3e:	4630      	mov	r0, r6
    4f40:	4639      	mov	r1, r7
    4f42:	f7fb f90d 	bl	160 <__aeabi_dsub>
    4f46:	4602      	mov	r2, r0
    4f48:	460b      	mov	r3, r1
    4f4a:	ec51 0b18 	vmov	r0, r1, d8
    4f4e:	f7fb f907 	bl	160 <__aeabi_dsub>
    4f52:	4632      	mov	r2, r6
    4f54:	462b      	mov	r3, r5
    4f56:	f7fb fabb 	bl	4d0 <__aeabi_dmul>
    4f5a:	4642      	mov	r2, r8
    4f5c:	4606      	mov	r6, r0
    4f5e:	460f      	mov	r7, r1
    4f60:	462b      	mov	r3, r5
    4f62:	4640      	mov	r0, r8
    4f64:	4649      	mov	r1, r9
    4f66:	f7fb fab3 	bl	4d0 <__aeabi_dmul>
    4f6a:	2200      	movs	r2, #0
    4f6c:	4b29      	ldr	r3, [pc, #164]	; (5014 <__kernel_tan+0x394>)
    4f6e:	f7fb f8f9 	bl	164 <__adddf3>
    4f72:	4602      	mov	r2, r0
    4f74:	460b      	mov	r3, r1
    4f76:	4630      	mov	r0, r6
    4f78:	4639      	mov	r1, r7
    4f7a:	f7fb f8f3 	bl	164 <__adddf3>
    4f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
    4f82:	f7fb faa5 	bl	4d0 <__aeabi_dmul>
    4f86:	4642      	mov	r2, r8
    4f88:	462b      	mov	r3, r5
    4f8a:	f7fb f8eb 	bl	164 <__adddf3>
    4f8e:	e69e      	b.n	4cce <__kernel_tan+0x4e>
    4f90:	54442d18 	.word	0x54442d18
    4f94:	3fe921fb 	.word	0x3fe921fb
    4f98:	33145c07 	.word	0x33145c07
    4f9c:	3c81a626 	.word	0x3c81a626
	...
    4fa8:	74bf7ad4 	.word	0x74bf7ad4
    4fac:	3efb2a70 	.word	0x3efb2a70
    4fb0:	32f0a7e9 	.word	0x32f0a7e9
    4fb4:	3f12b80f 	.word	0x3f12b80f
    4fb8:	1a8d1068 	.word	0x1a8d1068
    4fbc:	3f3026f7 	.word	0x3f3026f7
    4fc0:	fee08315 	.word	0xfee08315
    4fc4:	3f57dbc8 	.word	0x3f57dbc8
    4fc8:	e96e8493 	.word	0xe96e8493
    4fcc:	3f8226e3 	.word	0x3f8226e3
    4fd0:	1bb341fe 	.word	0x1bb341fe
    4fd4:	3faba1ba 	.word	0x3faba1ba
    4fd8:	db605373 	.word	0xdb605373
    4fdc:	bef375cb 	.word	0xbef375cb
    4fe0:	a03792a6 	.word	0xa03792a6
    4fe4:	3f147e88 	.word	0x3f147e88
    4fe8:	f2f26501 	.word	0xf2f26501
    4fec:	3f4344d8 	.word	0x3f4344d8
    4ff0:	c9560328 	.word	0xc9560328
    4ff4:	3f6d6d22 	.word	0x3f6d6d22
    4ff8:	8406d637 	.word	0x8406d637
    4ffc:	3f9664f4 	.word	0x3f9664f4
    5000:	1110fe7a 	.word	0x1110fe7a
    5004:	3fc11111 	.word	0x3fc11111
    5008:	55555563 	.word	0x55555563
    500c:	3fd55555 	.word	0x3fd55555
    5010:	3e2fffff 	.word	0x3e2fffff
    5014:	3ff00000 	.word	0x3ff00000
    5018:	bff00000 	.word	0xbff00000
    501c:	3fe59427 	.word	0x3fe59427
    5020:	4682      	mov	sl, r0
    5022:	468b      	mov	fp, r1
    5024:	e655      	b.n	4cd2 <__kernel_tan+0x52>
    5026:	bf00      	nop

00005028 <nan>:
    5028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 5030 <nan+0x8>
    502c:	4770      	bx	lr
    502e:	bf00      	nop
    5030:	00000000 	.word	0x00000000
    5034:	7ff80000 	.word	0x7ff80000

00005038 <scalbn>:
    5038:	b570      	push	{r4, r5, r6, lr}
    503a:	ec55 4b10 	vmov	r4, r5, d0
    503e:	f3c5 520a 	ubfx	r2, r5, #20, #11
    5042:	4606      	mov	r6, r0
    5044:	462b      	mov	r3, r5
    5046:	b99a      	cbnz	r2, 5070 <scalbn+0x38>
    5048:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    504c:	4323      	orrs	r3, r4
    504e:	d036      	beq.n	50be <scalbn+0x86>
    5050:	4b39      	ldr	r3, [pc, #228]	; (5138 <scalbn+0x100>)
    5052:	4629      	mov	r1, r5
    5054:	2200      	movs	r2, #0
    5056:	ee10 0a10 	vmov	r0, s0
    505a:	f7fb fa39 	bl	4d0 <__aeabi_dmul>
    505e:	4b37      	ldr	r3, [pc, #220]	; (513c <scalbn+0x104>)
    5060:	4604      	mov	r4, r0
    5062:	460d      	mov	r5, r1
    5064:	429e      	cmp	r6, r3
    5066:	da10      	bge.n	508a <scalbn+0x52>
    5068:	a32b      	add	r3, pc, #172	; (adr r3, 5118 <scalbn+0xe0>)
    506a:	e9d3 2300 	ldrd	r2, r3, [r3]
    506e:	e03a      	b.n	50e6 <scalbn+0xae>
    5070:	f240 71ff 	movw	r1, #2047	; 0x7ff
    5074:	428a      	cmp	r2, r1
    5076:	d10c      	bne.n	5092 <scalbn+0x5a>
    5078:	ee10 2a10 	vmov	r2, s0
    507c:	4620      	mov	r0, r4
    507e:	4629      	mov	r1, r5
    5080:	f7fb f870 	bl	164 <__adddf3>
    5084:	4604      	mov	r4, r0
    5086:	460d      	mov	r5, r1
    5088:	e019      	b.n	50be <scalbn+0x86>
    508a:	f3c1 520a 	ubfx	r2, r1, #20, #11
    508e:	460b      	mov	r3, r1
    5090:	3a36      	subs	r2, #54	; 0x36
    5092:	4432      	add	r2, r6
    5094:	f240 71fe 	movw	r1, #2046	; 0x7fe
    5098:	428a      	cmp	r2, r1
    509a:	dd08      	ble.n	50ae <scalbn+0x76>
    509c:	2d00      	cmp	r5, #0
    509e:	a120      	add	r1, pc, #128	; (adr r1, 5120 <scalbn+0xe8>)
    50a0:	e9d1 0100 	ldrd	r0, r1, [r1]
    50a4:	da1c      	bge.n	50e0 <scalbn+0xa8>
    50a6:	a120      	add	r1, pc, #128	; (adr r1, 5128 <scalbn+0xf0>)
    50a8:	e9d1 0100 	ldrd	r0, r1, [r1]
    50ac:	e018      	b.n	50e0 <scalbn+0xa8>
    50ae:	2a00      	cmp	r2, #0
    50b0:	dd08      	ble.n	50c4 <scalbn+0x8c>
    50b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    50b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    50ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    50be:	ec45 4b10 	vmov	d0, r4, r5
    50c2:	bd70      	pop	{r4, r5, r6, pc}
    50c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
    50c8:	da19      	bge.n	50fe <scalbn+0xc6>
    50ca:	f24c 3350 	movw	r3, #50000	; 0xc350
    50ce:	429e      	cmp	r6, r3
    50d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
    50d4:	dd0a      	ble.n	50ec <scalbn+0xb4>
    50d6:	a112      	add	r1, pc, #72	; (adr r1, 5120 <scalbn+0xe8>)
    50d8:	e9d1 0100 	ldrd	r0, r1, [r1]
    50dc:	2b00      	cmp	r3, #0
    50de:	d1e2      	bne.n	50a6 <scalbn+0x6e>
    50e0:	a30f      	add	r3, pc, #60	; (adr r3, 5120 <scalbn+0xe8>)
    50e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    50e6:	f7fb f9f3 	bl	4d0 <__aeabi_dmul>
    50ea:	e7cb      	b.n	5084 <scalbn+0x4c>
    50ec:	a10a      	add	r1, pc, #40	; (adr r1, 5118 <scalbn+0xe0>)
    50ee:	e9d1 0100 	ldrd	r0, r1, [r1]
    50f2:	2b00      	cmp	r3, #0
    50f4:	d0b8      	beq.n	5068 <scalbn+0x30>
    50f6:	a10e      	add	r1, pc, #56	; (adr r1, 5130 <scalbn+0xf8>)
    50f8:	e9d1 0100 	ldrd	r0, r1, [r1]
    50fc:	e7b4      	b.n	5068 <scalbn+0x30>
    50fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    5102:	3236      	adds	r2, #54	; 0x36
    5104:	4620      	mov	r0, r4
    5106:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    510a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
    510e:	2200      	movs	r2, #0
    5110:	4b0b      	ldr	r3, [pc, #44]	; (5140 <scalbn+0x108>)
    5112:	e7e8      	b.n	50e6 <scalbn+0xae>
    5114:	f3af 8000 	nop.w
    5118:	c2f8f359 	.word	0xc2f8f359
    511c:	01a56e1f 	.word	0x01a56e1f
    5120:	8800759c 	.word	0x8800759c
    5124:	7e37e43c 	.word	0x7e37e43c
    5128:	8800759c 	.word	0x8800759c
    512c:	fe37e43c 	.word	0xfe37e43c
    5130:	c2f8f359 	.word	0xc2f8f359
    5134:	81a56e1f 	.word	0x81a56e1f
    5138:	43500000 	.word	0x43500000
    513c:	ffff3cb0 	.word	0xffff3cb0
    5140:	3c900000 	.word	0x3c900000
    5144:	00000000 	.word	0x00000000

00005148 <_strtod_l>:
    5148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    514c:	461f      	mov	r7, r3
    514e:	2300      	movs	r3, #0
    5150:	4604      	mov	r4, r0
    5152:	4688      	mov	r8, r1
    5154:	f04f 0a00 	mov.w	sl, #0
    5158:	f04f 0b00 	mov.w	fp, #0
    515c:	ed2d 8b02 	vpush	{d8}
    5160:	b09d      	sub	sp, #116	; 0x74
    5162:	9318      	str	r3, [sp, #96]	; 0x60
    5164:	4b9f      	ldr	r3, [pc, #636]	; (53e4 <_strtod_l+0x29c>)
    5166:	9213      	str	r2, [sp, #76]	; 0x4c
    5168:	681b      	ldr	r3, [r3, #0]
    516a:	4618      	mov	r0, r3
    516c:	9305      	str	r3, [sp, #20]
    516e:	f7fb fef4 	bl	f5a <strlen>
    5172:	4605      	mov	r5, r0
    5174:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    5178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    517a:	781a      	ldrb	r2, [r3, #0]
    517c:	2a2b      	cmp	r2, #43	; 0x2b
    517e:	d04e      	beq.n	521e <_strtod_l+0xd6>
    5180:	d83b      	bhi.n	51fa <_strtod_l+0xb2>
    5182:	2a0d      	cmp	r2, #13
    5184:	d834      	bhi.n	51f0 <_strtod_l+0xa8>
    5186:	2a08      	cmp	r2, #8
    5188:	d834      	bhi.n	51f4 <_strtod_l+0xac>
    518a:	2a00      	cmp	r2, #0
    518c:	d03e      	beq.n	520c <_strtod_l+0xc4>
    518e:	2300      	movs	r3, #0
    5190:	930a      	str	r3, [sp, #40]	; 0x28
    5192:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    5194:	7833      	ldrb	r3, [r6, #0]
    5196:	2b30      	cmp	r3, #48	; 0x30
    5198:	f040 80b0 	bne.w	52fc <_strtod_l+0x1b4>
    519c:	7873      	ldrb	r3, [r6, #1]
    519e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    51a2:	2b58      	cmp	r3, #88	; 0x58
    51a4:	d168      	bne.n	5278 <_strtod_l+0x130>
    51a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    51a8:	a917      	add	r1, sp, #92	; 0x5c
    51aa:	9702      	str	r7, [sp, #8]
    51ac:	4620      	mov	r0, r4
    51ae:	9301      	str	r3, [sp, #4]
    51b0:	ab18      	add	r3, sp, #96	; 0x60
    51b2:	4a8d      	ldr	r2, [pc, #564]	; (53e8 <_strtod_l+0x2a0>)
    51b4:	9300      	str	r3, [sp, #0]
    51b6:	ab19      	add	r3, sp, #100	; 0x64
    51b8:	f00b fede 	bl	10f78 <__gethex>
    51bc:	f010 0707 	ands.w	r7, r0, #7
    51c0:	4605      	mov	r5, r0
    51c2:	d005      	beq.n	51d0 <_strtod_l+0x88>
    51c4:	2f06      	cmp	r7, #6
    51c6:	d12c      	bne.n	5222 <_strtod_l+0xda>
    51c8:	3601      	adds	r6, #1
    51ca:	2300      	movs	r3, #0
    51cc:	9617      	str	r6, [sp, #92]	; 0x5c
    51ce:	930a      	str	r3, [sp, #40]	; 0x28
    51d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    51d2:	2b00      	cmp	r3, #0
    51d4:	f040 858e 	bne.w	5cf4 <_strtod_l+0xbac>
    51d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    51da:	b1eb      	cbz	r3, 5218 <_strtod_l+0xd0>
    51dc:	4652      	mov	r2, sl
    51de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    51e2:	ec43 2b10 	vmov	d0, r2, r3
    51e6:	b01d      	add	sp, #116	; 0x74
    51e8:	ecbd 8b02 	vpop	{d8}
    51ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51f0:	2a20      	cmp	r2, #32
    51f2:	d1cc      	bne.n	518e <_strtod_l+0x46>
    51f4:	3301      	adds	r3, #1
    51f6:	9317      	str	r3, [sp, #92]	; 0x5c
    51f8:	e7be      	b.n	5178 <_strtod_l+0x30>
    51fa:	2a2d      	cmp	r2, #45	; 0x2d
    51fc:	d1c7      	bne.n	518e <_strtod_l+0x46>
    51fe:	2201      	movs	r2, #1
    5200:	920a      	str	r2, [sp, #40]	; 0x28
    5202:	1c5a      	adds	r2, r3, #1
    5204:	9217      	str	r2, [sp, #92]	; 0x5c
    5206:	785b      	ldrb	r3, [r3, #1]
    5208:	2b00      	cmp	r3, #0
    520a:	d1c2      	bne.n	5192 <_strtod_l+0x4a>
    520c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    520e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    5212:	2b00      	cmp	r3, #0
    5214:	f040 856c 	bne.w	5cf0 <_strtod_l+0xba8>
    5218:	4652      	mov	r2, sl
    521a:	465b      	mov	r3, fp
    521c:	e7e1      	b.n	51e2 <_strtod_l+0x9a>
    521e:	2200      	movs	r2, #0
    5220:	e7ee      	b.n	5200 <_strtod_l+0xb8>
    5222:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5224:	b13a      	cbz	r2, 5236 <_strtod_l+0xee>
    5226:	2135      	movs	r1, #53	; 0x35
    5228:	a81a      	add	r0, sp, #104	; 0x68
    522a:	f010 f979 	bl	15520 <__copybits>
    522e:	9918      	ldr	r1, [sp, #96]	; 0x60
    5230:	4620      	mov	r0, r4
    5232:	f00c f977 	bl	11524 <_Bfree>
    5236:	3f01      	subs	r7, #1
    5238:	2f04      	cmp	r7, #4
    523a:	d806      	bhi.n	524a <_strtod_l+0x102>
    523c:	e8df f007 	tbb	[pc, r7]
    5240:	1714030a 	.word	0x1714030a
    5244:	0a          	.byte	0x0a
    5245:	00          	.byte	0x00
    5246:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
    524a:	0728      	lsls	r0, r5, #28
    524c:	d5c0      	bpl.n	51d0 <_strtod_l+0x88>
    524e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
    5252:	e7bd      	b.n	51d0 <_strtod_l+0x88>
    5254:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
    5258:	9a19      	ldr	r2, [sp, #100]	; 0x64
    525a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    525e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    5262:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
    5266:	e7f0      	b.n	524a <_strtod_l+0x102>
    5268:	f8df b180 	ldr.w	fp, [pc, #384]	; 53ec <_strtod_l+0x2a4>
    526c:	e7ed      	b.n	524a <_strtod_l+0x102>
    526e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5272:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    5276:	e7e8      	b.n	524a <_strtod_l+0x102>
    5278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    527a:	1c5a      	adds	r2, r3, #1
    527c:	9217      	str	r2, [sp, #92]	; 0x5c
    527e:	785b      	ldrb	r3, [r3, #1]
    5280:	2b30      	cmp	r3, #48	; 0x30
    5282:	d0f9      	beq.n	5278 <_strtod_l+0x130>
    5284:	2b00      	cmp	r3, #0
    5286:	d0a3      	beq.n	51d0 <_strtod_l+0x88>
    5288:	2301      	movs	r3, #1
    528a:	f04f 0900 	mov.w	r9, #0
    528e:	9304      	str	r3, [sp, #16]
    5290:	220a      	movs	r2, #10
    5292:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5294:	464f      	mov	r7, r9
    5296:	f8cd 901c 	str.w	r9, [sp, #28]
    529a:	9308      	str	r3, [sp, #32]
    529c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    529e:	7806      	ldrb	r6, [r0, #0]
    52a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    52a4:	b2d9      	uxtb	r1, r3
    52a6:	2909      	cmp	r1, #9
    52a8:	d92a      	bls.n	5300 <_strtod_l+0x1b8>
    52aa:	462a      	mov	r2, r5
    52ac:	9905      	ldr	r1, [sp, #20]
    52ae:	f010 fa3f 	bl	15730 <strncmp>
    52b2:	b3a0      	cbz	r0, 531e <_strtod_l+0x1d6>
    52b4:	2000      	movs	r0, #0
    52b6:	4632      	mov	r2, r6
    52b8:	463d      	mov	r5, r7
    52ba:	4603      	mov	r3, r0
    52bc:	9005      	str	r0, [sp, #20]
    52be:	2a65      	cmp	r2, #101	; 0x65
    52c0:	d001      	beq.n	52c6 <_strtod_l+0x17e>
    52c2:	2a45      	cmp	r2, #69	; 0x45
    52c4:	d118      	bne.n	52f8 <_strtod_l+0x1b0>
    52c6:	b91d      	cbnz	r5, 52d0 <_strtod_l+0x188>
    52c8:	9a04      	ldr	r2, [sp, #16]
    52ca:	4302      	orrs	r2, r0
    52cc:	d09e      	beq.n	520c <_strtod_l+0xc4>
    52ce:	2500      	movs	r5, #0
    52d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    52d4:	f108 0201 	add.w	r2, r8, #1
    52d8:	9217      	str	r2, [sp, #92]	; 0x5c
    52da:	f898 2001 	ldrb.w	r2, [r8, #1]
    52de:	2a2b      	cmp	r2, #43	; 0x2b
    52e0:	d075      	beq.n	53ce <_strtod_l+0x286>
    52e2:	2a2d      	cmp	r2, #45	; 0x2d
    52e4:	d07b      	beq.n	53de <_strtod_l+0x296>
    52e6:	f04f 0c00 	mov.w	ip, #0
    52ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    52ee:	2909      	cmp	r1, #9
    52f0:	f240 8082 	bls.w	53f8 <_strtod_l+0x2b0>
    52f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    52f8:	2600      	movs	r6, #0
    52fa:	e09d      	b.n	5438 <_strtod_l+0x2f0>
    52fc:	2300      	movs	r3, #0
    52fe:	e7c4      	b.n	528a <_strtod_l+0x142>
    5300:	2f08      	cmp	r7, #8
    5302:	f100 0001 	add.w	r0, r0, #1
    5306:	f107 0701 	add.w	r7, r7, #1
    530a:	bfd4      	ite	le
    530c:	9907      	ldrle	r1, [sp, #28]
    530e:	fb02 3909 	mlagt	r9, r2, r9, r3
    5312:	9017      	str	r0, [sp, #92]	; 0x5c
    5314:	bfdc      	itt	le
    5316:	fb02 3301 	mlale	r3, r2, r1, r3
    531a:	9307      	strle	r3, [sp, #28]
    531c:	e7be      	b.n	529c <_strtod_l+0x154>
    531e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5320:	195a      	adds	r2, r3, r5
    5322:	9217      	str	r2, [sp, #92]	; 0x5c
    5324:	5d5a      	ldrb	r2, [r3, r5]
    5326:	2f00      	cmp	r7, #0
    5328:	d036      	beq.n	5398 <_strtod_l+0x250>
    532a:	463d      	mov	r5, r7
    532c:	9005      	str	r0, [sp, #20]
    532e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    5332:	2b09      	cmp	r3, #9
    5334:	d912      	bls.n	535c <_strtod_l+0x214>
    5336:	2301      	movs	r3, #1
    5338:	e7c1      	b.n	52be <_strtod_l+0x176>
    533a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    533c:	3001      	adds	r0, #1
    533e:	1c5a      	adds	r2, r3, #1
    5340:	9217      	str	r2, [sp, #92]	; 0x5c
    5342:	785a      	ldrb	r2, [r3, #1]
    5344:	2a30      	cmp	r2, #48	; 0x30
    5346:	d0f8      	beq.n	533a <_strtod_l+0x1f2>
    5348:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    534c:	2b08      	cmp	r3, #8
    534e:	f200 84d6 	bhi.w	5cfe <_strtod_l+0xbb6>
    5352:	9005      	str	r0, [sp, #20]
    5354:	2000      	movs	r0, #0
    5356:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5358:	4605      	mov	r5, r0
    535a:	9308      	str	r3, [sp, #32]
    535c:	3a30      	subs	r2, #48	; 0x30
    535e:	f100 0301 	add.w	r3, r0, #1
    5362:	d013      	beq.n	538c <_strtod_l+0x244>
    5364:	9905      	ldr	r1, [sp, #20]
    5366:	eb00 0e05 	add.w	lr, r0, r5
    536a:	4419      	add	r1, r3
    536c:	462b      	mov	r3, r5
    536e:	9105      	str	r1, [sp, #20]
    5370:	210a      	movs	r1, #10
    5372:	4573      	cmp	r3, lr
    5374:	d112      	bne.n	539c <_strtod_l+0x254>
    5376:	182b      	adds	r3, r5, r0
    5378:	3501      	adds	r5, #1
    537a:	2b08      	cmp	r3, #8
    537c:	4405      	add	r5, r0
    537e:	dc1c      	bgt.n	53ba <_strtod_l+0x272>
    5380:	9907      	ldr	r1, [sp, #28]
    5382:	230a      	movs	r3, #10
    5384:	fb03 2301 	mla	r3, r3, r1, r2
    5388:	9307      	str	r3, [sp, #28]
    538a:	2300      	movs	r3, #0
    538c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    538e:	4618      	mov	r0, r3
    5390:	1c51      	adds	r1, r2, #1
    5392:	9117      	str	r1, [sp, #92]	; 0x5c
    5394:	7852      	ldrb	r2, [r2, #1]
    5396:	e7ca      	b.n	532e <_strtod_l+0x1e6>
    5398:	4638      	mov	r0, r7
    539a:	e7d3      	b.n	5344 <_strtod_l+0x1fc>
    539c:	2b08      	cmp	r3, #8
    539e:	dc04      	bgt.n	53aa <_strtod_l+0x262>
    53a0:	9e07      	ldr	r6, [sp, #28]
    53a2:	434e      	muls	r6, r1
    53a4:	9607      	str	r6, [sp, #28]
    53a6:	3301      	adds	r3, #1
    53a8:	e7e3      	b.n	5372 <_strtod_l+0x22a>
    53aa:	f103 0c01 	add.w	ip, r3, #1
    53ae:	f1bc 0f10 	cmp.w	ip, #16
    53b2:	bfd8      	it	le
    53b4:	fb01 f909 	mulle.w	r9, r1, r9
    53b8:	e7f5      	b.n	53a6 <_strtod_l+0x25e>
    53ba:	2d10      	cmp	r5, #16
    53bc:	bfdc      	itt	le
    53be:	230a      	movle	r3, #10
    53c0:	fb03 2909 	mlale	r9, r3, r9, r2
    53c4:	e7e1      	b.n	538a <_strtod_l+0x242>
    53c6:	2300      	movs	r3, #0
    53c8:	9305      	str	r3, [sp, #20]
    53ca:	2301      	movs	r3, #1
    53cc:	e77c      	b.n	52c8 <_strtod_l+0x180>
    53ce:	f04f 0c00 	mov.w	ip, #0
    53d2:	f108 0202 	add.w	r2, r8, #2
    53d6:	9217      	str	r2, [sp, #92]	; 0x5c
    53d8:	f898 2002 	ldrb.w	r2, [r8, #2]
    53dc:	e785      	b.n	52ea <_strtod_l+0x1a2>
    53de:	f04f 0c01 	mov.w	ip, #1
    53e2:	e7f6      	b.n	53d2 <_strtod_l+0x28a>
    53e4:	0001745c 	.word	0x0001745c
    53e8:	000173d4 	.word	0x000173d4
    53ec:	7ff00000 	.word	0x7ff00000
    53f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    53f2:	1c51      	adds	r1, r2, #1
    53f4:	9117      	str	r1, [sp, #92]	; 0x5c
    53f6:	7852      	ldrb	r2, [r2, #1]
    53f8:	2a30      	cmp	r2, #48	; 0x30
    53fa:	d0f9      	beq.n	53f0 <_strtod_l+0x2a8>
    53fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    5400:	2908      	cmp	r1, #8
    5402:	f63f af79 	bhi.w	52f8 <_strtod_l+0x1b0>
    5406:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    540a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    540c:	9206      	str	r2, [sp, #24]
    540e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5410:	1c51      	adds	r1, r2, #1
    5412:	9117      	str	r1, [sp, #92]	; 0x5c
    5414:	7852      	ldrb	r2, [r2, #1]
    5416:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    541a:	2e09      	cmp	r6, #9
    541c:	d937      	bls.n	548e <_strtod_l+0x346>
    541e:	9e06      	ldr	r6, [sp, #24]
    5420:	1b89      	subs	r1, r1, r6
    5422:	f644 661f 	movw	r6, #19999	; 0x4e1f
    5426:	2908      	cmp	r1, #8
    5428:	dc02      	bgt.n	5430 <_strtod_l+0x2e8>
    542a:	4576      	cmp	r6, lr
    542c:	bfa8      	it	ge
    542e:	4676      	movge	r6, lr
    5430:	f1bc 0f00 	cmp.w	ip, #0
    5434:	d000      	beq.n	5438 <_strtod_l+0x2f0>
    5436:	4276      	negs	r6, r6
    5438:	2d00      	cmp	r5, #0
    543a:	d14d      	bne.n	54d8 <_strtod_l+0x390>
    543c:	9904      	ldr	r1, [sp, #16]
    543e:	4301      	orrs	r1, r0
    5440:	f47f aec6 	bne.w	51d0 <_strtod_l+0x88>
    5444:	2b00      	cmp	r3, #0
    5446:	f47f aee1 	bne.w	520c <_strtod_l+0xc4>
    544a:	2a69      	cmp	r2, #105	; 0x69
    544c:	d027      	beq.n	549e <_strtod_l+0x356>
    544e:	dc24      	bgt.n	549a <_strtod_l+0x352>
    5450:	2a49      	cmp	r2, #73	; 0x49
    5452:	d024      	beq.n	549e <_strtod_l+0x356>
    5454:	2a4e      	cmp	r2, #78	; 0x4e
    5456:	f47f aed9 	bne.w	520c <_strtod_l+0xc4>
    545a:	499f      	ldr	r1, [pc, #636]	; (56d8 <_strtod_l+0x590>)
    545c:	a817      	add	r0, sp, #92	; 0x5c
    545e:	f00f feda 	bl	15216 <__match>
    5462:	2800      	cmp	r0, #0
    5464:	f43f aed2 	beq.w	520c <_strtod_l+0xc4>
    5468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    546a:	781b      	ldrb	r3, [r3, #0]
    546c:	2b28      	cmp	r3, #40	; 0x28
    546e:	d12d      	bne.n	54cc <_strtod_l+0x384>
    5470:	aa1a      	add	r2, sp, #104	; 0x68
    5472:	499a      	ldr	r1, [pc, #616]	; (56dc <_strtod_l+0x594>)
    5474:	a817      	add	r0, sp, #92	; 0x5c
    5476:	f00f fee2 	bl	1523e <__hexnan>
    547a:	2805      	cmp	r0, #5
    547c:	d126      	bne.n	54cc <_strtod_l+0x384>
    547e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5480:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    5484:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
    5488:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
    548c:	e6a0      	b.n	51d0 <_strtod_l+0x88>
    548e:	210a      	movs	r1, #10
    5490:	fb01 2e0e 	mla	lr, r1, lr, r2
    5494:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
    5498:	e7b9      	b.n	540e <_strtod_l+0x2c6>
    549a:	2a6e      	cmp	r2, #110	; 0x6e
    549c:	e7db      	b.n	5456 <_strtod_l+0x30e>
    549e:	4990      	ldr	r1, [pc, #576]	; (56e0 <_strtod_l+0x598>)
    54a0:	a817      	add	r0, sp, #92	; 0x5c
    54a2:	f00f feb8 	bl	15216 <__match>
    54a6:	2800      	cmp	r0, #0
    54a8:	f43f aeb0 	beq.w	520c <_strtod_l+0xc4>
    54ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    54ae:	a817      	add	r0, sp, #92	; 0x5c
    54b0:	498c      	ldr	r1, [pc, #560]	; (56e4 <_strtod_l+0x59c>)
    54b2:	3b01      	subs	r3, #1
    54b4:	9317      	str	r3, [sp, #92]	; 0x5c
    54b6:	f00f feae 	bl	15216 <__match>
    54ba:	b910      	cbnz	r0, 54c2 <_strtod_l+0x37a>
    54bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    54be:	3301      	adds	r3, #1
    54c0:	9317      	str	r3, [sp, #92]	; 0x5c
    54c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 56f4 <_strtod_l+0x5ac>
    54c6:	f04f 0a00 	mov.w	sl, #0
    54ca:	e681      	b.n	51d0 <_strtod_l+0x88>
    54cc:	4886      	ldr	r0, [pc, #536]	; (56e8 <_strtod_l+0x5a0>)
    54ce:	f7ff fdab 	bl	5028 <nan>
    54d2:	ec5b ab10 	vmov	sl, fp, d0
    54d6:	e67b      	b.n	51d0 <_strtod_l+0x88>
    54d8:	9b05      	ldr	r3, [sp, #20]
    54da:	2f00      	cmp	r7, #0
    54dc:	bf08      	it	eq
    54de:	462f      	moveq	r7, r5
    54e0:	2d10      	cmp	r5, #16
    54e2:	9807      	ldr	r0, [sp, #28]
    54e4:	eba6 0303 	sub.w	r3, r6, r3
    54e8:	46a8      	mov	r8, r5
    54ea:	bfa8      	it	ge
    54ec:	f04f 0810 	movge.w	r8, #16
    54f0:	9306      	str	r3, [sp, #24]
    54f2:	f7fa ff73 	bl	3dc <__aeabi_ui2d>
    54f6:	2d09      	cmp	r5, #9
    54f8:	4682      	mov	sl, r0
    54fa:	468b      	mov	fp, r1
    54fc:	dd13      	ble.n	5526 <_strtod_l+0x3de>
    54fe:	4b7b      	ldr	r3, [pc, #492]	; (56ec <_strtod_l+0x5a4>)
    5500:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    5504:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    5508:	f7fa ffe2 	bl	4d0 <__aeabi_dmul>
    550c:	4682      	mov	sl, r0
    550e:	468b      	mov	fp, r1
    5510:	4648      	mov	r0, r9
    5512:	f7fa ff63 	bl	3dc <__aeabi_ui2d>
    5516:	4602      	mov	r2, r0
    5518:	460b      	mov	r3, r1
    551a:	4650      	mov	r0, sl
    551c:	4659      	mov	r1, fp
    551e:	f7fa fe21 	bl	164 <__adddf3>
    5522:	4682      	mov	sl, r0
    5524:	468b      	mov	fp, r1
    5526:	2d0f      	cmp	r5, #15
    5528:	dc38      	bgt.n	559c <_strtod_l+0x454>
    552a:	9b06      	ldr	r3, [sp, #24]
    552c:	2b00      	cmp	r3, #0
    552e:	f43f ae4f 	beq.w	51d0 <_strtod_l+0x88>
    5532:	dd24      	ble.n	557e <_strtod_l+0x436>
    5534:	2b16      	cmp	r3, #22
    5536:	dc0b      	bgt.n	5550 <_strtod_l+0x408>
    5538:	496c      	ldr	r1, [pc, #432]	; (56ec <_strtod_l+0x5a4>)
    553a:	4652      	mov	r2, sl
    553c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    5540:	465b      	mov	r3, fp
    5542:	e9d1 0100 	ldrd	r0, r1, [r1]
    5546:	f7fa ffc3 	bl	4d0 <__aeabi_dmul>
    554a:	4682      	mov	sl, r0
    554c:	468b      	mov	fp, r1
    554e:	e63f      	b.n	51d0 <_strtod_l+0x88>
    5550:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    5554:	9a06      	ldr	r2, [sp, #24]
    5556:	4293      	cmp	r3, r2
    5558:	db20      	blt.n	559c <_strtod_l+0x454>
    555a:	f1c5 050f 	rsb	r5, r5, #15
    555e:	4c63      	ldr	r4, [pc, #396]	; (56ec <_strtod_l+0x5a4>)
    5560:	4652      	mov	r2, sl
    5562:	465b      	mov	r3, fp
    5564:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5568:	e9d1 0100 	ldrd	r0, r1, [r1]
    556c:	f7fa ffb0 	bl	4d0 <__aeabi_dmul>
    5570:	9b06      	ldr	r3, [sp, #24]
    5572:	1b5d      	subs	r5, r3, r5
    5574:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    5578:	e9d4 2300 	ldrd	r2, r3, [r4]
    557c:	e7e3      	b.n	5546 <_strtod_l+0x3fe>
    557e:	9b06      	ldr	r3, [sp, #24]
    5580:	3316      	adds	r3, #22
    5582:	db0b      	blt.n	559c <_strtod_l+0x454>
    5584:	9b05      	ldr	r3, [sp, #20]
    5586:	4650      	mov	r0, sl
    5588:	4659      	mov	r1, fp
    558a:	1b9e      	subs	r6, r3, r6
    558c:	4b57      	ldr	r3, [pc, #348]	; (56ec <_strtod_l+0x5a4>)
    558e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    5592:	e9d6 2300 	ldrd	r2, r3, [r6]
    5596:	f7fb f8c5 	bl	724 <__aeabi_ddiv>
    559a:	e7d6      	b.n	554a <_strtod_l+0x402>
    559c:	eba5 0808 	sub.w	r8, r5, r8
    55a0:	9b06      	ldr	r3, [sp, #24]
    55a2:	4498      	add	r8, r3
    55a4:	f1b8 0f00 	cmp.w	r8, #0
    55a8:	dd74      	ble.n	5694 <_strtod_l+0x54c>
    55aa:	f018 030f 	ands.w	r3, r8, #15
    55ae:	d00a      	beq.n	55c6 <_strtod_l+0x47e>
    55b0:	494e      	ldr	r1, [pc, #312]	; (56ec <_strtod_l+0x5a4>)
    55b2:	4652      	mov	r2, sl
    55b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    55b8:	465b      	mov	r3, fp
    55ba:	e9d1 0100 	ldrd	r0, r1, [r1]
    55be:	f7fa ff87 	bl	4d0 <__aeabi_dmul>
    55c2:	4682      	mov	sl, r0
    55c4:	468b      	mov	fp, r1
    55c6:	f038 080f 	bics.w	r8, r8, #15
    55ca:	d04f      	beq.n	566c <_strtod_l+0x524>
    55cc:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
    55d0:	dd22      	ble.n	5618 <_strtod_l+0x4d0>
    55d2:	2500      	movs	r5, #0
    55d4:	462e      	mov	r6, r5
    55d6:	9507      	str	r5, [sp, #28]
    55d8:	9505      	str	r5, [sp, #20]
    55da:	2322      	movs	r3, #34	; 0x22
    55dc:	f8df b114 	ldr.w	fp, [pc, #276]	; 56f4 <_strtod_l+0x5ac>
    55e0:	f04f 0a00 	mov.w	sl, #0
    55e4:	6023      	str	r3, [r4, #0]
    55e6:	9b07      	ldr	r3, [sp, #28]
    55e8:	2b00      	cmp	r3, #0
    55ea:	f43f adf1 	beq.w	51d0 <_strtod_l+0x88>
    55ee:	9918      	ldr	r1, [sp, #96]	; 0x60
    55f0:	4620      	mov	r0, r4
    55f2:	f00b ff97 	bl	11524 <_Bfree>
    55f6:	9905      	ldr	r1, [sp, #20]
    55f8:	4620      	mov	r0, r4
    55fa:	f00b ff93 	bl	11524 <_Bfree>
    55fe:	4631      	mov	r1, r6
    5600:	4620      	mov	r0, r4
    5602:	f00b ff8f 	bl	11524 <_Bfree>
    5606:	9907      	ldr	r1, [sp, #28]
    5608:	4620      	mov	r0, r4
    560a:	f00b ff8b 	bl	11524 <_Bfree>
    560e:	4629      	mov	r1, r5
    5610:	4620      	mov	r0, r4
    5612:	f00b ff87 	bl	11524 <_Bfree>
    5616:	e5db      	b.n	51d0 <_strtod_l+0x88>
    5618:	4b35      	ldr	r3, [pc, #212]	; (56f0 <_strtod_l+0x5a8>)
    561a:	ea4f 1828 	mov.w	r8, r8, asr #4
    561e:	4650      	mov	r0, sl
    5620:	4659      	mov	r1, fp
    5622:	9304      	str	r3, [sp, #16]
    5624:	2300      	movs	r3, #0
    5626:	4699      	mov	r9, r3
    5628:	f1b8 0f01 	cmp.w	r8, #1
    562c:	dc21      	bgt.n	5672 <_strtod_l+0x52a>
    562e:	b10b      	cbz	r3, 5634 <_strtod_l+0x4ec>
    5630:	4682      	mov	sl, r0
    5632:	468b      	mov	fp, r1
    5634:	4b2e      	ldr	r3, [pc, #184]	; (56f0 <_strtod_l+0x5a8>)
    5636:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
    563a:	4652      	mov	r2, sl
    563c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    5640:	465b      	mov	r3, fp
    5642:	e9d9 0100 	ldrd	r0, r1, [r9]
    5646:	f7fa ff43 	bl	4d0 <__aeabi_dmul>
    564a:	4b2a      	ldr	r3, [pc, #168]	; (56f4 <_strtod_l+0x5ac>)
    564c:	460a      	mov	r2, r1
    564e:	4682      	mov	sl, r0
    5650:	400b      	ands	r3, r1
    5652:	4929      	ldr	r1, [pc, #164]	; (56f8 <_strtod_l+0x5b0>)
    5654:	428b      	cmp	r3, r1
    5656:	d8bc      	bhi.n	55d2 <_strtod_l+0x48a>
    5658:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    565c:	428b      	cmp	r3, r1
    565e:	bf86      	itte	hi
    5660:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 56fc <_strtod_l+0x5b4>
    5664:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
    5668:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
    566c:	2300      	movs	r3, #0
    566e:	9304      	str	r3, [sp, #16]
    5670:	e083      	b.n	577a <_strtod_l+0x632>
    5672:	f018 0f01 	tst.w	r8, #1
    5676:	d005      	beq.n	5684 <_strtod_l+0x53c>
    5678:	9b04      	ldr	r3, [sp, #16]
    567a:	e9d3 2300 	ldrd	r2, r3, [r3]
    567e:	f7fa ff27 	bl	4d0 <__aeabi_dmul>
    5682:	2301      	movs	r3, #1
    5684:	9a04      	ldr	r2, [sp, #16]
    5686:	f109 0901 	add.w	r9, r9, #1
    568a:	ea4f 0868 	mov.w	r8, r8, asr #1
    568e:	3208      	adds	r2, #8
    5690:	9204      	str	r2, [sp, #16]
    5692:	e7c9      	b.n	5628 <_strtod_l+0x4e0>
    5694:	d0ea      	beq.n	566c <_strtod_l+0x524>
    5696:	f1c8 0800 	rsb	r8, r8, #0
    569a:	f018 020f 	ands.w	r2, r8, #15
    569e:	d00a      	beq.n	56b6 <_strtod_l+0x56e>
    56a0:	4b12      	ldr	r3, [pc, #72]	; (56ec <_strtod_l+0x5a4>)
    56a2:	4650      	mov	r0, sl
    56a4:	4659      	mov	r1, fp
    56a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    56aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    56ae:	f7fb f839 	bl	724 <__aeabi_ddiv>
    56b2:	4682      	mov	sl, r0
    56b4:	468b      	mov	fp, r1
    56b6:	ea5f 1828 	movs.w	r8, r8, asr #4
    56ba:	d0d7      	beq.n	566c <_strtod_l+0x524>
    56bc:	f1b8 0f1f 	cmp.w	r8, #31
    56c0:	dd1e      	ble.n	5700 <_strtod_l+0x5b8>
    56c2:	2500      	movs	r5, #0
    56c4:	462e      	mov	r6, r5
    56c6:	9507      	str	r5, [sp, #28]
    56c8:	9505      	str	r5, [sp, #20]
    56ca:	2322      	movs	r3, #34	; 0x22
    56cc:	f04f 0a00 	mov.w	sl, #0
    56d0:	f04f 0b00 	mov.w	fp, #0
    56d4:	6023      	str	r3, [r4, #0]
    56d6:	e786      	b.n	55e6 <_strtod_l+0x49e>
    56d8:	0001882e 	.word	0x0001882e
    56dc:	000173e8 	.word	0x000173e8
    56e0:	00018826 	.word	0x00018826
    56e4:	00018856 	.word	0x00018856
    56e8:	000179b2 	.word	0x000179b2
    56ec:	00016080 	.word	0x00016080
    56f0:	00016058 	.word	0x00016058
    56f4:	7ff00000 	.word	0x7ff00000
    56f8:	7ca00000 	.word	0x7ca00000
    56fc:	7fefffff 	.word	0x7fefffff
    5700:	f018 0310 	ands.w	r3, r8, #16
    5704:	4650      	mov	r0, sl
    5706:	4659      	mov	r1, fp
    5708:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 5ab4 <_strtod_l+0x96c>
    570c:	bf18      	it	ne
    570e:	236a      	movne	r3, #106	; 0x6a
    5710:	9304      	str	r3, [sp, #16]
    5712:	2300      	movs	r3, #0
    5714:	f018 0f01 	tst.w	r8, #1
    5718:	d004      	beq.n	5724 <_strtod_l+0x5dc>
    571a:	e9d9 2300 	ldrd	r2, r3, [r9]
    571e:	f7fa fed7 	bl	4d0 <__aeabi_dmul>
    5722:	2301      	movs	r3, #1
    5724:	ea5f 0868 	movs.w	r8, r8, asr #1
    5728:	f109 0908 	add.w	r9, r9, #8
    572c:	d1f2      	bne.n	5714 <_strtod_l+0x5cc>
    572e:	b10b      	cbz	r3, 5734 <_strtod_l+0x5ec>
    5730:	4682      	mov	sl, r0
    5732:	468b      	mov	fp, r1
    5734:	9b04      	ldr	r3, [sp, #16]
    5736:	b1c3      	cbz	r3, 576a <_strtod_l+0x622>
    5738:	f3cb 520a 	ubfx	r2, fp, #20, #11
    573c:	4659      	mov	r1, fp
    573e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    5742:	2b00      	cmp	r3, #0
    5744:	dd11      	ble.n	576a <_strtod_l+0x622>
    5746:	2b1f      	cmp	r3, #31
    5748:	f340 8121 	ble.w	598e <_strtod_l+0x846>
    574c:	2b34      	cmp	r3, #52	; 0x34
    574e:	f04f 0a00 	mov.w	sl, #0
    5752:	bfdb      	ittet	le
    5754:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    5758:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
    575c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
    5760:	fa03 f202 	lslle.w	r2, r3, r2
    5764:	bfd8      	it	le
    5766:	ea02 0b01 	andle.w	fp, r2, r1
    576a:	2200      	movs	r2, #0
    576c:	2300      	movs	r3, #0
    576e:	4650      	mov	r0, sl
    5770:	4659      	mov	r1, fp
    5772:	f7fb f915 	bl	9a0 <__aeabi_dcmpeq>
    5776:	2800      	cmp	r0, #0
    5778:	d1a3      	bne.n	56c2 <_strtod_l+0x57a>
    577a:	9b07      	ldr	r3, [sp, #28]
    577c:	463a      	mov	r2, r7
    577e:	9908      	ldr	r1, [sp, #32]
    5780:	4620      	mov	r0, r4
    5782:	9300      	str	r3, [sp, #0]
    5784:	462b      	mov	r3, r5
    5786:	f00b ff37 	bl	115f8 <__s2b>
    578a:	9007      	str	r0, [sp, #28]
    578c:	2800      	cmp	r0, #0
    578e:	f43f af20 	beq.w	55d2 <_strtod_l+0x48a>
    5792:	9b05      	ldr	r3, [sp, #20]
    5794:	2500      	movs	r5, #0
    5796:	1b9e      	subs	r6, r3, r6
    5798:	9b06      	ldr	r3, [sp, #24]
    579a:	2b00      	cmp	r3, #0
    579c:	bfb4      	ite	lt
    579e:	4633      	movlt	r3, r6
    57a0:	2300      	movge	r3, #0
    57a2:	462e      	mov	r6, r5
    57a4:	930c      	str	r3, [sp, #48]	; 0x30
    57a6:	9b06      	ldr	r3, [sp, #24]
    57a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    57ac:	9312      	str	r3, [sp, #72]	; 0x48
    57ae:	9b07      	ldr	r3, [sp, #28]
    57b0:	4620      	mov	r0, r4
    57b2:	6859      	ldr	r1, [r3, #4]
    57b4:	f00b fe76 	bl	114a4 <_Balloc>
    57b8:	9005      	str	r0, [sp, #20]
    57ba:	2800      	cmp	r0, #0
    57bc:	f43f af0d 	beq.w	55da <_strtod_l+0x492>
    57c0:	9b07      	ldr	r3, [sp, #28]
    57c2:	300c      	adds	r0, #12
    57c4:	691a      	ldr	r2, [r3, #16]
    57c6:	f103 010c 	add.w	r1, r3, #12
    57ca:	3202      	adds	r2, #2
    57cc:	0092      	lsls	r2, r2, #2
    57ce:	f00f f9f2 	bl	14bb6 <memcpy>
    57d2:	aa1a      	add	r2, sp, #104	; 0x68
    57d4:	a919      	add	r1, sp, #100	; 0x64
    57d6:	4620      	mov	r0, r4
    57d8:	ec4b ab10 	vmov	d0, sl, fp
    57dc:	f00c f9e8 	bl	11bb0 <__d2b>
    57e0:	9018      	str	r0, [sp, #96]	; 0x60
    57e2:	ec4b ab18 	vmov	d8, sl, fp
    57e6:	2800      	cmp	r0, #0
    57e8:	f43f aef7 	beq.w	55da <_strtod_l+0x492>
    57ec:	2101      	movs	r1, #1
    57ee:	4620      	mov	r0, r4
    57f0:	f00b ff4c 	bl	1168c <__i2b>
    57f4:	4606      	mov	r6, r0
    57f6:	2800      	cmp	r0, #0
    57f8:	f43f aeef 	beq.w	55da <_strtod_l+0x492>
    57fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    57fe:	9904      	ldr	r1, [sp, #16]
    5800:	2b00      	cmp	r3, #0
    5802:	eba3 0801 	sub.w	r8, r3, r1
    5806:	bfa9      	itett	ge
    5808:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
    580a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
    580c:	eb03 0902 	addge.w	r9, r3, r2
    5810:	9f12      	ldrge	r7, [sp, #72]	; 0x48
    5812:	bfb8      	it	lt
    5814:	1ad7      	sublt	r7, r2, r3
    5816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    5818:	4ba1      	ldr	r3, [pc, #644]	; (5aa0 <_strtod_l+0x958>)
    581a:	4490      	add	r8, r2
    581c:	bfb8      	it	lt
    581e:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
    5822:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    5826:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    582a:	4598      	cmp	r8, r3
    582c:	f280 80c3 	bge.w	59b6 <_strtod_l+0x86e>
    5830:	eba3 0308 	sub.w	r3, r3, r8
    5834:	2101      	movs	r1, #1
    5836:	2b1f      	cmp	r3, #31
    5838:	eba2 0203 	sub.w	r2, r2, r3
    583c:	f300 80ae 	bgt.w	599c <_strtod_l+0x854>
    5840:	fa01 f303 	lsl.w	r3, r1, r3
    5844:	930d      	str	r3, [sp, #52]	; 0x34
    5846:	2300      	movs	r3, #0
    5848:	9308      	str	r3, [sp, #32]
    584a:	eb09 0802 	add.w	r8, r9, r2
    584e:	9b04      	ldr	r3, [sp, #16]
    5850:	4417      	add	r7, r2
    5852:	45c1      	cmp	r9, r8
    5854:	441f      	add	r7, r3
    5856:	464b      	mov	r3, r9
    5858:	bfa8      	it	ge
    585a:	4643      	movge	r3, r8
    585c:	42bb      	cmp	r3, r7
    585e:	bfa8      	it	ge
    5860:	463b      	movge	r3, r7
    5862:	2b00      	cmp	r3, #0
    5864:	bfc2      	ittt	gt
    5866:	eba8 0803 	subgt.w	r8, r8, r3
    586a:	1aff      	subgt	r7, r7, r3
    586c:	eba9 0903 	subgt.w	r9, r9, r3
    5870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5872:	2b00      	cmp	r3, #0
    5874:	dd17      	ble.n	58a6 <_strtod_l+0x75e>
    5876:	4631      	mov	r1, r6
    5878:	461a      	mov	r2, r3
    587a:	4620      	mov	r0, r4
    587c:	f00b ffc4 	bl	11808 <__pow5mult>
    5880:	4606      	mov	r6, r0
    5882:	2800      	cmp	r0, #0
    5884:	f43f aea9 	beq.w	55da <_strtod_l+0x492>
    5888:	4601      	mov	r1, r0
    588a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    588c:	4620      	mov	r0, r4
    588e:	f00b ff13 	bl	116b8 <__multiply>
    5892:	900b      	str	r0, [sp, #44]	; 0x2c
    5894:	2800      	cmp	r0, #0
    5896:	f43f aea0 	beq.w	55da <_strtod_l+0x492>
    589a:	9918      	ldr	r1, [sp, #96]	; 0x60
    589c:	4620      	mov	r0, r4
    589e:	f00b fe41 	bl	11524 <_Bfree>
    58a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    58a4:	9318      	str	r3, [sp, #96]	; 0x60
    58a6:	f1b8 0f00 	cmp.w	r8, #0
    58aa:	f300 8089 	bgt.w	59c0 <_strtod_l+0x878>
    58ae:	9b06      	ldr	r3, [sp, #24]
    58b0:	2b00      	cmp	r3, #0
    58b2:	dd08      	ble.n	58c6 <_strtod_l+0x77e>
    58b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    58b6:	4620      	mov	r0, r4
    58b8:	9905      	ldr	r1, [sp, #20]
    58ba:	f00b ffa5 	bl	11808 <__pow5mult>
    58be:	9005      	str	r0, [sp, #20]
    58c0:	2800      	cmp	r0, #0
    58c2:	f43f ae8a 	beq.w	55da <_strtod_l+0x492>
    58c6:	2f00      	cmp	r7, #0
    58c8:	dd08      	ble.n	58dc <_strtod_l+0x794>
    58ca:	463a      	mov	r2, r7
    58cc:	9905      	ldr	r1, [sp, #20]
    58ce:	4620      	mov	r0, r4
    58d0:	f00b fff4 	bl	118bc <__lshift>
    58d4:	9005      	str	r0, [sp, #20]
    58d6:	2800      	cmp	r0, #0
    58d8:	f43f ae7f 	beq.w	55da <_strtod_l+0x492>
    58dc:	f1b9 0f00 	cmp.w	r9, #0
    58e0:	dd08      	ble.n	58f4 <_strtod_l+0x7ac>
    58e2:	4631      	mov	r1, r6
    58e4:	464a      	mov	r2, r9
    58e6:	4620      	mov	r0, r4
    58e8:	f00b ffe8 	bl	118bc <__lshift>
    58ec:	4606      	mov	r6, r0
    58ee:	2800      	cmp	r0, #0
    58f0:	f43f ae73 	beq.w	55da <_strtod_l+0x492>
    58f4:	9a05      	ldr	r2, [sp, #20]
    58f6:	4620      	mov	r0, r4
    58f8:	9918      	ldr	r1, [sp, #96]	; 0x60
    58fa:	f00c f84f 	bl	1199c <__mdiff>
    58fe:	4605      	mov	r5, r0
    5900:	2800      	cmp	r0, #0
    5902:	f43f ae6a 	beq.w	55da <_strtod_l+0x492>
    5906:	68c3      	ldr	r3, [r0, #12]
    5908:	4631      	mov	r1, r6
    590a:	930b      	str	r3, [sp, #44]	; 0x2c
    590c:	2300      	movs	r3, #0
    590e:	60c3      	str	r3, [r0, #12]
    5910:	f00f fdb7 	bl	15482 <__mcmp>
    5914:	2800      	cmp	r0, #0
    5916:	da5d      	bge.n	59d4 <_strtod_l+0x88c>
    5918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    591a:	ea53 030a 	orrs.w	r3, r3, sl
    591e:	d17f      	bne.n	5a20 <_strtod_l+0x8d8>
    5920:	f3cb 0313 	ubfx	r3, fp, #0, #20
    5924:	2b00      	cmp	r3, #0
    5926:	d17b      	bne.n	5a20 <_strtod_l+0x8d8>
    5928:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    592c:	0d1b      	lsrs	r3, r3, #20
    592e:	051b      	lsls	r3, r3, #20
    5930:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    5934:	d974      	bls.n	5a20 <_strtod_l+0x8d8>
    5936:	696b      	ldr	r3, [r5, #20]
    5938:	b913      	cbnz	r3, 5940 <_strtod_l+0x7f8>
    593a:	692b      	ldr	r3, [r5, #16]
    593c:	2b01      	cmp	r3, #1
    593e:	dd6f      	ble.n	5a20 <_strtod_l+0x8d8>
    5940:	4629      	mov	r1, r5
    5942:	2201      	movs	r2, #1
    5944:	4620      	mov	r0, r4
    5946:	f00b ffb9 	bl	118bc <__lshift>
    594a:	4631      	mov	r1, r6
    594c:	4605      	mov	r5, r0
    594e:	f00f fd98 	bl	15482 <__mcmp>
    5952:	2800      	cmp	r0, #0
    5954:	dd64      	ble.n	5a20 <_strtod_l+0x8d8>
    5956:	9904      	ldr	r1, [sp, #16]
    5958:	465b      	mov	r3, fp
    595a:	4a52      	ldr	r2, [pc, #328]	; (5aa4 <_strtod_l+0x95c>)
    595c:	2900      	cmp	r1, #0
    595e:	d07f      	beq.n	5a60 <_strtod_l+0x918>
    5960:	ea02 010b 	and.w	r1, r2, fp
    5964:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
    5968:	dc7a      	bgt.n	5a60 <_strtod_l+0x918>
    596a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
    596e:	f77f aeac 	ble.w	56ca <_strtod_l+0x582>
    5972:	4b4d      	ldr	r3, [pc, #308]	; (5aa8 <_strtod_l+0x960>)
    5974:	4650      	mov	r0, sl
    5976:	4659      	mov	r1, fp
    5978:	2200      	movs	r2, #0
    597a:	f7fa fda9 	bl	4d0 <__aeabi_dmul>
    597e:	460b      	mov	r3, r1
    5980:	4682      	mov	sl, r0
    5982:	468b      	mov	fp, r1
    5984:	4303      	orrs	r3, r0
    5986:	bf04      	itt	eq
    5988:	2322      	moveq	r3, #34	; 0x22
    598a:	6023      	streq	r3, [r4, #0]
    598c:	e62f      	b.n	55ee <_strtod_l+0x4a6>
    598e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5992:	fa02 f303 	lsl.w	r3, r2, r3
    5996:	ea03 0a0a 	and.w	sl, r3, sl
    599a:	e6e6      	b.n	576a <_strtod_l+0x622>
    599c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
    59a0:	910d      	str	r1, [sp, #52]	; 0x34
    59a2:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
    59a6:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
    59aa:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
    59ae:	fa01 f308 	lsl.w	r3, r1, r8
    59b2:	9308      	str	r3, [sp, #32]
    59b4:	e749      	b.n	584a <_strtod_l+0x702>
    59b6:	2300      	movs	r3, #0
    59b8:	9308      	str	r3, [sp, #32]
    59ba:	2301      	movs	r3, #1
    59bc:	930d      	str	r3, [sp, #52]	; 0x34
    59be:	e744      	b.n	584a <_strtod_l+0x702>
    59c0:	4642      	mov	r2, r8
    59c2:	9918      	ldr	r1, [sp, #96]	; 0x60
    59c4:	4620      	mov	r0, r4
    59c6:	f00b ff79 	bl	118bc <__lshift>
    59ca:	9018      	str	r0, [sp, #96]	; 0x60
    59cc:	2800      	cmp	r0, #0
    59ce:	f47f af6e 	bne.w	58ae <_strtod_l+0x766>
    59d2:	e602      	b.n	55da <_strtod_l+0x492>
    59d4:	465f      	mov	r7, fp
    59d6:	d16f      	bne.n	5ab8 <_strtod_l+0x970>
    59d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    59da:	f3cb 0313 	ubfx	r3, fp, #0, #20
    59de:	b342      	cbz	r2, 5a32 <_strtod_l+0x8ea>
    59e0:	4a32      	ldr	r2, [pc, #200]	; (5aac <_strtod_l+0x964>)
    59e2:	4293      	cmp	r3, r2
    59e4:	d128      	bne.n	5a38 <_strtod_l+0x8f0>
    59e6:	9b04      	ldr	r3, [sp, #16]
    59e8:	4651      	mov	r1, sl
    59ea:	b1eb      	cbz	r3, 5a28 <_strtod_l+0x8e0>
    59ec:	4b2d      	ldr	r3, [pc, #180]	; (5aa4 <_strtod_l+0x95c>)
    59ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    59f2:	403b      	ands	r3, r7
    59f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    59f8:	d819      	bhi.n	5a2e <_strtod_l+0x8e6>
    59fa:	0d1b      	lsrs	r3, r3, #20
    59fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    5a00:	fa02 f303 	lsl.w	r3, r2, r3
    5a04:	4299      	cmp	r1, r3
    5a06:	d117      	bne.n	5a38 <_strtod_l+0x8f0>
    5a08:	4b29      	ldr	r3, [pc, #164]	; (5ab0 <_strtod_l+0x968>)
    5a0a:	429f      	cmp	r7, r3
    5a0c:	d102      	bne.n	5a14 <_strtod_l+0x8cc>
    5a0e:	3101      	adds	r1, #1
    5a10:	f43f ade3 	beq.w	55da <_strtod_l+0x492>
    5a14:	4b23      	ldr	r3, [pc, #140]	; (5aa4 <_strtod_l+0x95c>)
    5a16:	f04f 0a00 	mov.w	sl, #0
    5a1a:	403b      	ands	r3, r7
    5a1c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
    5a20:	9b04      	ldr	r3, [sp, #16]
    5a22:	2b00      	cmp	r3, #0
    5a24:	d1a5      	bne.n	5972 <_strtod_l+0x82a>
    5a26:	e5e2      	b.n	55ee <_strtod_l+0x4a6>
    5a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a2c:	e7ea      	b.n	5a04 <_strtod_l+0x8bc>
    5a2e:	4613      	mov	r3, r2
    5a30:	e7e8      	b.n	5a04 <_strtod_l+0x8bc>
    5a32:	ea53 030a 	orrs.w	r3, r3, sl
    5a36:	d08e      	beq.n	5956 <_strtod_l+0x80e>
    5a38:	9b08      	ldr	r3, [sp, #32]
    5a3a:	b1db      	cbz	r3, 5a74 <_strtod_l+0x92c>
    5a3c:	423b      	tst	r3, r7
    5a3e:	d0ef      	beq.n	5a20 <_strtod_l+0x8d8>
    5a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a42:	4650      	mov	r0, sl
    5a44:	9a04      	ldr	r2, [sp, #16]
    5a46:	4659      	mov	r1, fp
    5a48:	b1c3      	cbz	r3, 5a7c <_strtod_l+0x934>
    5a4a:	f00f fa61 	bl	14f10 <sulp>
    5a4e:	4602      	mov	r2, r0
    5a50:	460b      	mov	r3, r1
    5a52:	ec51 0b18 	vmov	r0, r1, d8
    5a56:	f7fa fb85 	bl	164 <__adddf3>
    5a5a:	4682      	mov	sl, r0
    5a5c:	468b      	mov	fp, r1
    5a5e:	e7df      	b.n	5a20 <_strtod_l+0x8d8>
    5a60:	4013      	ands	r3, r2
    5a62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    5a66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    5a6a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
    5a6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
    5a72:	e7d5      	b.n	5a20 <_strtod_l+0x8d8>
    5a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5a76:	ea13 0f0a 	tst.w	r3, sl
    5a7a:	e7e0      	b.n	5a3e <_strtod_l+0x8f6>
    5a7c:	f00f fa48 	bl	14f10 <sulp>
    5a80:	4602      	mov	r2, r0
    5a82:	460b      	mov	r3, r1
    5a84:	ec51 0b18 	vmov	r0, r1, d8
    5a88:	f7fa fb6a 	bl	160 <__aeabi_dsub>
    5a8c:	2200      	movs	r2, #0
    5a8e:	2300      	movs	r3, #0
    5a90:	4682      	mov	sl, r0
    5a92:	468b      	mov	fp, r1
    5a94:	f7fa ff84 	bl	9a0 <__aeabi_dcmpeq>
    5a98:	2800      	cmp	r0, #0
    5a9a:	d0c1      	beq.n	5a20 <_strtod_l+0x8d8>
    5a9c:	e615      	b.n	56ca <_strtod_l+0x582>
    5a9e:	bf00      	nop
    5aa0:	fffffc02 	.word	0xfffffc02
    5aa4:	7ff00000 	.word	0x7ff00000
    5aa8:	39500000 	.word	0x39500000
    5aac:	000fffff 	.word	0x000fffff
    5ab0:	7fefffff 	.word	0x7fefffff
    5ab4:	00016030 	.word	0x00016030
    5ab8:	4631      	mov	r1, r6
    5aba:	4628      	mov	r0, r5
    5abc:	f00f fcfd 	bl	154ba <__ratio>
    5ac0:	2200      	movs	r2, #0
    5ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ac6:	ee10 0a10 	vmov	r0, s0
    5aca:	ec59 8b10 	vmov	r8, r9, d0
    5ace:	4649      	mov	r1, r9
    5ad0:	f7fa ff7a 	bl	9c8 <__aeabi_dcmple>
    5ad4:	2800      	cmp	r0, #0
    5ad6:	d07a      	beq.n	5bce <_strtod_l+0xa86>
    5ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5ada:	2b00      	cmp	r3, #0
    5adc:	d04a      	beq.n	5b74 <_strtod_l+0xa2c>
    5ade:	2200      	movs	r2, #0
    5ae0:	4b93      	ldr	r3, [pc, #588]	; (5d30 <_strtod_l+0xbe8>)
    5ae2:	f04f 0800 	mov.w	r8, #0
    5ae6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 5d30 <_strtod_l+0xbe8>
    5aea:	e9cd 2308 	strd	r2, r3, [sp, #32]
    5aee:	4b91      	ldr	r3, [pc, #580]	; (5d34 <_strtod_l+0xbec>)
    5af0:	403b      	ands	r3, r7
    5af2:	930d      	str	r3, [sp, #52]	; 0x34
    5af4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5af6:	4b90      	ldr	r3, [pc, #576]	; (5d38 <_strtod_l+0xbf0>)
    5af8:	429a      	cmp	r2, r3
    5afa:	f040 80b0 	bne.w	5c5e <_strtod_l+0xb16>
    5afe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
    5b02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5b06:	ec4b ab10 	vmov	d0, sl, fp
    5b0a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    5b0e:	f00b ffd5 	bl	11abc <__ulp>
    5b12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5b16:	ec53 2b10 	vmov	r2, r3, d0
    5b1a:	f7fa fcd9 	bl	4d0 <__aeabi_dmul>
    5b1e:	4652      	mov	r2, sl
    5b20:	465b      	mov	r3, fp
    5b22:	f7fa fb1f 	bl	164 <__adddf3>
    5b26:	460b      	mov	r3, r1
    5b28:	4982      	ldr	r1, [pc, #520]	; (5d34 <_strtod_l+0xbec>)
    5b2a:	4682      	mov	sl, r0
    5b2c:	4a83      	ldr	r2, [pc, #524]	; (5d3c <_strtod_l+0xbf4>)
    5b2e:	4019      	ands	r1, r3
    5b30:	4291      	cmp	r1, r2
    5b32:	d960      	bls.n	5bf6 <_strtod_l+0xaae>
    5b34:	ee18 3a90 	vmov	r3, s17
    5b38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
    5b3c:	4293      	cmp	r3, r2
    5b3e:	d104      	bne.n	5b4a <_strtod_l+0xa02>
    5b40:	ee18 3a10 	vmov	r3, s16
    5b44:	3301      	adds	r3, #1
    5b46:	f43f ad48 	beq.w	55da <_strtod_l+0x492>
    5b4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 5d48 <_strtod_l+0xc00>
    5b4e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    5b52:	9918      	ldr	r1, [sp, #96]	; 0x60
    5b54:	4620      	mov	r0, r4
    5b56:	f00b fce5 	bl	11524 <_Bfree>
    5b5a:	9905      	ldr	r1, [sp, #20]
    5b5c:	4620      	mov	r0, r4
    5b5e:	f00b fce1 	bl	11524 <_Bfree>
    5b62:	4631      	mov	r1, r6
    5b64:	4620      	mov	r0, r4
    5b66:	f00b fcdd 	bl	11524 <_Bfree>
    5b6a:	4629      	mov	r1, r5
    5b6c:	4620      	mov	r0, r4
    5b6e:	f00b fcd9 	bl	11524 <_Bfree>
    5b72:	e61c      	b.n	57ae <_strtod_l+0x666>
    5b74:	f1ba 0f00 	cmp.w	sl, #0
    5b78:	d11b      	bne.n	5bb2 <_strtod_l+0xa6a>
    5b7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
    5b7e:	b9f3      	cbnz	r3, 5bbe <_strtod_l+0xa76>
    5b80:	2200      	movs	r2, #0
    5b82:	4b6b      	ldr	r3, [pc, #428]	; (5d30 <_strtod_l+0xbe8>)
    5b84:	4640      	mov	r0, r8
    5b86:	4649      	mov	r1, r9
    5b88:	f7fa ff14 	bl	9b4 <__aeabi_dcmplt>
    5b8c:	b9d0      	cbnz	r0, 5bc4 <_strtod_l+0xa7c>
    5b8e:	4640      	mov	r0, r8
    5b90:	4649      	mov	r1, r9
    5b92:	2200      	movs	r2, #0
    5b94:	4b6a      	ldr	r3, [pc, #424]	; (5d40 <_strtod_l+0xbf8>)
    5b96:	f7fa fc9b 	bl	4d0 <__aeabi_dmul>
    5b9a:	4680      	mov	r8, r0
    5b9c:	4689      	mov	r9, r1
    5b9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    5ba2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    5ba6:	9315      	str	r3, [sp, #84]	; 0x54
    5ba8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    5bac:	e9cd 2308 	strd	r2, r3, [sp, #32]
    5bb0:	e79d      	b.n	5aee <_strtod_l+0x9a6>
    5bb2:	f1ba 0f01 	cmp.w	sl, #1
    5bb6:	d102      	bne.n	5bbe <_strtod_l+0xa76>
    5bb8:	2f00      	cmp	r7, #0
    5bba:	f43f ad86 	beq.w	56ca <_strtod_l+0x582>
    5bbe:	2200      	movs	r2, #0
    5bc0:	4b60      	ldr	r3, [pc, #384]	; (5d44 <_strtod_l+0xbfc>)
    5bc2:	e78e      	b.n	5ae2 <_strtod_l+0x99a>
    5bc4:	f04f 0800 	mov.w	r8, #0
    5bc8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 5d40 <_strtod_l+0xbf8>
    5bcc:	e7e7      	b.n	5b9e <_strtod_l+0xa56>
    5bce:	4b5c      	ldr	r3, [pc, #368]	; (5d40 <_strtod_l+0xbf8>)
    5bd0:	4640      	mov	r0, r8
    5bd2:	4649      	mov	r1, r9
    5bd4:	2200      	movs	r2, #0
    5bd6:	f7fa fc7b 	bl	4d0 <__aeabi_dmul>
    5bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5bdc:	4680      	mov	r8, r0
    5bde:	4689      	mov	r9, r1
    5be0:	b933      	cbnz	r3, 5bf0 <_strtod_l+0xaa8>
    5be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    5be6:	900e      	str	r0, [sp, #56]	; 0x38
    5be8:	930f      	str	r3, [sp, #60]	; 0x3c
    5bea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    5bee:	e7dd      	b.n	5bac <_strtod_l+0xa64>
    5bf0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    5bf4:	e7f9      	b.n	5bea <_strtod_l+0xaa2>
    5bf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
    5bfa:	9b04      	ldr	r3, [sp, #16]
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d1a8      	bne.n	5b52 <_strtod_l+0xa0a>
    5c00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    5c04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5c06:	0d1b      	lsrs	r3, r3, #20
    5c08:	051b      	lsls	r3, r3, #20
    5c0a:	429a      	cmp	r2, r3
    5c0c:	d1a1      	bne.n	5b52 <_strtod_l+0xa0a>
    5c0e:	4640      	mov	r0, r8
    5c10:	4649      	mov	r1, r9
    5c12:	f7fb f82d 	bl	c70 <__aeabi_d2lz>
    5c16:	f7fa fc2d 	bl	474 <__aeabi_l2d>
    5c1a:	4602      	mov	r2, r0
    5c1c:	460b      	mov	r3, r1
    5c1e:	4640      	mov	r0, r8
    5c20:	4649      	mov	r1, r9
    5c22:	f7fa fa9d 	bl	160 <__aeabi_dsub>
    5c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
    5c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5c2c:	4680      	mov	r8, r0
    5c2e:	ea43 030a 	orr.w	r3, r3, sl
    5c32:	4689      	mov	r9, r1
    5c34:	4313      	orrs	r3, r2
    5c36:	d055      	beq.n	5ce4 <_strtod_l+0xb9c>
    5c38:	a335      	add	r3, pc, #212	; (adr r3, 5d10 <_strtod_l+0xbc8>)
    5c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c3e:	f7fa feb9 	bl	9b4 <__aeabi_dcmplt>
    5c42:	2800      	cmp	r0, #0
    5c44:	f47f acd3 	bne.w	55ee <_strtod_l+0x4a6>
    5c48:	4640      	mov	r0, r8
    5c4a:	4649      	mov	r1, r9
    5c4c:	a332      	add	r3, pc, #200	; (adr r3, 5d18 <_strtod_l+0xbd0>)
    5c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c52:	f7fa fecd 	bl	9f0 <__aeabi_dcmpgt>
    5c56:	2800      	cmp	r0, #0
    5c58:	f43f af7b 	beq.w	5b52 <_strtod_l+0xa0a>
    5c5c:	e4c7      	b.n	55ee <_strtod_l+0x4a6>
    5c5e:	9b04      	ldr	r3, [sp, #16]
    5c60:	b333      	cbz	r3, 5cb0 <_strtod_l+0xb68>
    5c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    5c68:	d822      	bhi.n	5cb0 <_strtod_l+0xb68>
    5c6a:	4640      	mov	r0, r8
    5c6c:	4649      	mov	r1, r9
    5c6e:	a32c      	add	r3, pc, #176	; (adr r3, 5d20 <_strtod_l+0xbd8>)
    5c70:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c74:	f7fa fea8 	bl	9c8 <__aeabi_dcmple>
    5c78:	b1a0      	cbz	r0, 5ca4 <_strtod_l+0xb5c>
    5c7a:	4649      	mov	r1, r9
    5c7c:	4640      	mov	r0, r8
    5c7e:	f7fa ff99 	bl	bb4 <__aeabi_d2uiz>
    5c82:	2801      	cmp	r0, #1
    5c84:	bf38      	it	cc
    5c86:	2001      	movcc	r0, #1
    5c88:	f7fa fba8 	bl	3dc <__aeabi_ui2d>
    5c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5c8e:	4680      	mov	r8, r0
    5c90:	4689      	mov	r9, r1
    5c92:	bb23      	cbnz	r3, 5cde <_strtod_l+0xb96>
    5c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    5c98:	9010      	str	r0, [sp, #64]	; 0x40
    5c9a:	9311      	str	r3, [sp, #68]	; 0x44
    5c9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    5ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    5ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5ca8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
    5cac:	1a9b      	subs	r3, r3, r2
    5cae:	9309      	str	r3, [sp, #36]	; 0x24
    5cb0:	eeb0 0a48 	vmov.f32	s0, s16
    5cb4:	eef0 0a68 	vmov.f32	s1, s17
    5cb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5cbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
    5cc0:	f00b fefc 	bl	11abc <__ulp>
    5cc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5cc8:	ec53 2b10 	vmov	r2, r3, d0
    5ccc:	f7fa fc00 	bl	4d0 <__aeabi_dmul>
    5cd0:	ec53 2b18 	vmov	r2, r3, d8
    5cd4:	f7fa fa46 	bl	164 <__adddf3>
    5cd8:	4682      	mov	sl, r0
    5cda:	468b      	mov	fp, r1
    5cdc:	e78d      	b.n	5bfa <_strtod_l+0xab2>
    5cde:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
    5ce2:	e7db      	b.n	5c9c <_strtod_l+0xb54>
    5ce4:	a310      	add	r3, pc, #64	; (adr r3, 5d28 <_strtod_l+0xbe0>)
    5ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cea:	f7fa fe63 	bl	9b4 <__aeabi_dcmplt>
    5cee:	e7b2      	b.n	5c56 <_strtod_l+0xb0e>
    5cf0:	2300      	movs	r3, #0
    5cf2:	930a      	str	r3, [sp, #40]	; 0x28
    5cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5cf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5cf8:	6013      	str	r3, [r2, #0]
    5cfa:	f7ff ba6d 	b.w	51d8 <_strtod_l+0x90>
    5cfe:	2a65      	cmp	r2, #101	; 0x65
    5d00:	f43f ab61 	beq.w	53c6 <_strtod_l+0x27e>
    5d04:	2a45      	cmp	r2, #69	; 0x45
    5d06:	f43f ab5e 	beq.w	53c6 <_strtod_l+0x27e>
    5d0a:	2301      	movs	r3, #1
    5d0c:	f7ff bb96 	b.w	543c <_strtod_l+0x2f4>
    5d10:	94a03595 	.word	0x94a03595
    5d14:	3fdfffff 	.word	0x3fdfffff
    5d18:	35afe535 	.word	0x35afe535
    5d1c:	3fe00000 	.word	0x3fe00000
    5d20:	ffc00000 	.word	0xffc00000
    5d24:	41dfffff 	.word	0x41dfffff
    5d28:	94a03595 	.word	0x94a03595
    5d2c:	3fcfffff 	.word	0x3fcfffff
    5d30:	3ff00000 	.word	0x3ff00000
    5d34:	7ff00000 	.word	0x7ff00000
    5d38:	7fe00000 	.word	0x7fe00000
    5d3c:	7c9fffff 	.word	0x7c9fffff
    5d40:	3fe00000 	.word	0x3fe00000
    5d44:	bff00000 	.word	0xbff00000
    5d48:	7fefffff 	.word	0x7fefffff
    5d4c:	00000000 	.word	0x00000000

00005d50 <_dtoa_r>:
    5d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d54:	6a45      	ldr	r5, [r0, #36]	; 0x24
    5d56:	4604      	mov	r4, r0
    5d58:	ee10 aa10 	vmov	sl, s0
    5d5c:	ed2d 8b04 	vpush	{d8-d9}
    5d60:	b093      	sub	sp, #76	; 0x4c
    5d62:	ec57 6b10 	vmov	r6, r7, d0
    5d66:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    5d6a:	46bb      	mov	fp, r7
    5d6c:	9106      	str	r1, [sp, #24]
    5d6e:	9209      	str	r2, [sp, #36]	; 0x24
    5d70:	930c      	str	r3, [sp, #48]	; 0x30
    5d72:	b975      	cbnz	r5, 5d92 <_dtoa_r+0x42>
    5d74:	2010      	movs	r0, #16
    5d76:	f00a f921 	bl	ffbc <malloc>
    5d7a:	4602      	mov	r2, r0
    5d7c:	6260      	str	r0, [r4, #36]	; 0x24
    5d7e:	b920      	cbnz	r0, 5d8a <_dtoa_r+0x3a>
    5d80:	4ba7      	ldr	r3, [pc, #668]	; (6020 <_dtoa_r+0x2d0>)
    5d82:	21ea      	movs	r1, #234	; 0xea
    5d84:	48a7      	ldr	r0, [pc, #668]	; (6024 <_dtoa_r+0x2d4>)
    5d86:	f00a f8e1 	bl	ff4c <__assert_func>
    5d8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
    5d8e:	6005      	str	r5, [r0, #0]
    5d90:	60c5      	str	r5, [r0, #12]
    5d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5d94:	6819      	ldr	r1, [r3, #0]
    5d96:	b151      	cbz	r1, 5dae <_dtoa_r+0x5e>
    5d98:	685a      	ldr	r2, [r3, #4]
    5d9a:	2301      	movs	r3, #1
    5d9c:	4620      	mov	r0, r4
    5d9e:	4093      	lsls	r3, r2
    5da0:	604a      	str	r2, [r1, #4]
    5da2:	608b      	str	r3, [r1, #8]
    5da4:	f00b fbbe 	bl	11524 <_Bfree>
    5da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5daa:	2200      	movs	r2, #0
    5dac:	601a      	str	r2, [r3, #0]
    5dae:	1e3b      	subs	r3, r7, #0
    5db0:	bfad      	iteet	ge
    5db2:	2300      	movge	r3, #0
    5db4:	2201      	movlt	r2, #1
    5db6:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
    5dba:	f8c8 3000 	strge.w	r3, [r8]
    5dbe:	4b9a      	ldr	r3, [pc, #616]	; (6028 <_dtoa_r+0x2d8>)
    5dc0:	bfb8      	it	lt
    5dc2:	f8c8 2000 	strlt.w	r2, [r8]
    5dc6:	ea33 030b 	bics.w	r3, r3, fp
    5dca:	d11b      	bne.n	5e04 <_dtoa_r+0xb4>
    5dcc:	f242 730f 	movw	r3, #9999	; 0x270f
    5dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5dd2:	6013      	str	r3, [r2, #0]
    5dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
    5dd8:	4333      	orrs	r3, r6
    5dda:	f000 858f 	beq.w	68fc <_dtoa_r+0xbac>
    5dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
    5de0:	b963      	cbnz	r3, 5dfc <_dtoa_r+0xac>
    5de2:	4b92      	ldr	r3, [pc, #584]	; (602c <_dtoa_r+0x2dc>)
    5de4:	e022      	b.n	5e2c <_dtoa_r+0xdc>
    5de6:	4b92      	ldr	r3, [pc, #584]	; (6030 <_dtoa_r+0x2e0>)
    5de8:	9301      	str	r3, [sp, #4]
    5dea:	3308      	adds	r3, #8
    5dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
    5dee:	6013      	str	r3, [r2, #0]
    5df0:	9801      	ldr	r0, [sp, #4]
    5df2:	b013      	add	sp, #76	; 0x4c
    5df4:	ecbd 8b04 	vpop	{d8-d9}
    5df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dfc:	4b8b      	ldr	r3, [pc, #556]	; (602c <_dtoa_r+0x2dc>)
    5dfe:	9301      	str	r3, [sp, #4]
    5e00:	3303      	adds	r3, #3
    5e02:	e7f3      	b.n	5dec <_dtoa_r+0x9c>
    5e04:	2200      	movs	r2, #0
    5e06:	2300      	movs	r3, #0
    5e08:	4650      	mov	r0, sl
    5e0a:	4659      	mov	r1, fp
    5e0c:	f7fa fdc8 	bl	9a0 <__aeabi_dcmpeq>
    5e10:	4680      	mov	r8, r0
    5e12:	ec4b ab19 	vmov	d9, sl, fp
    5e16:	b158      	cbz	r0, 5e30 <_dtoa_r+0xe0>
    5e18:	2301      	movs	r3, #1
    5e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5e1c:	6013      	str	r3, [r2, #0]
    5e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    5e20:	2b00      	cmp	r3, #0
    5e22:	f000 8568 	beq.w	68f6 <_dtoa_r+0xba6>
    5e26:	4883      	ldr	r0, [pc, #524]	; (6034 <_dtoa_r+0x2e4>)
    5e28:	6018      	str	r0, [r3, #0]
    5e2a:	1e43      	subs	r3, r0, #1
    5e2c:	9301      	str	r3, [sp, #4]
    5e2e:	e7df      	b.n	5df0 <_dtoa_r+0xa0>
    5e30:	f3cb 550a 	ubfx	r5, fp, #20, #11
    5e34:	aa10      	add	r2, sp, #64	; 0x40
    5e36:	a911      	add	r1, sp, #68	; 0x44
    5e38:	4620      	mov	r0, r4
    5e3a:	ec4b ab10 	vmov	d0, sl, fp
    5e3e:	f00b feb7 	bl	11bb0 <__d2b>
    5e42:	ee08 0a10 	vmov	s16, r0
    5e46:	2d00      	cmp	r5, #0
    5e48:	f000 8082 	beq.w	5f50 <_dtoa_r+0x200>
    5e4c:	ee19 3a90 	vmov	r3, s19
    5e50:	4656      	mov	r6, sl
    5e52:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    5e56:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    5e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5e5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    5e62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    5e66:	2200      	movs	r2, #0
    5e68:	4b73      	ldr	r3, [pc, #460]	; (6038 <_dtoa_r+0x2e8>)
    5e6a:	4630      	mov	r0, r6
    5e6c:	4639      	mov	r1, r7
    5e6e:	f7fa f977 	bl	160 <__aeabi_dsub>
    5e72:	a365      	add	r3, pc, #404	; (adr r3, 6008 <_dtoa_r+0x2b8>)
    5e74:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e78:	f7fa fb2a 	bl	4d0 <__aeabi_dmul>
    5e7c:	a364      	add	r3, pc, #400	; (adr r3, 6010 <_dtoa_r+0x2c0>)
    5e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e82:	f7fa f96f 	bl	164 <__adddf3>
    5e86:	4606      	mov	r6, r0
    5e88:	460f      	mov	r7, r1
    5e8a:	4628      	mov	r0, r5
    5e8c:	f7fa fab6 	bl	3fc <__aeabi_i2d>
    5e90:	a361      	add	r3, pc, #388	; (adr r3, 6018 <_dtoa_r+0x2c8>)
    5e92:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e96:	f7fa fb1b 	bl	4d0 <__aeabi_dmul>
    5e9a:	4602      	mov	r2, r0
    5e9c:	460b      	mov	r3, r1
    5e9e:	4630      	mov	r0, r6
    5ea0:	4639      	mov	r1, r7
    5ea2:	f7fa f95f 	bl	164 <__adddf3>
    5ea6:	4606      	mov	r6, r0
    5ea8:	460f      	mov	r7, r1
    5eaa:	f7fa feb9 	bl	c20 <__aeabi_d2iz>
    5eae:	2200      	movs	r2, #0
    5eb0:	9000      	str	r0, [sp, #0]
    5eb2:	2300      	movs	r3, #0
    5eb4:	4630      	mov	r0, r6
    5eb6:	4639      	mov	r1, r7
    5eb8:	f7fa fd7c 	bl	9b4 <__aeabi_dcmplt>
    5ebc:	b150      	cbz	r0, 5ed4 <_dtoa_r+0x184>
    5ebe:	9800      	ldr	r0, [sp, #0]
    5ec0:	f7fa fa9c 	bl	3fc <__aeabi_i2d>
    5ec4:	4632      	mov	r2, r6
    5ec6:	463b      	mov	r3, r7
    5ec8:	f7fa fd6a 	bl	9a0 <__aeabi_dcmpeq>
    5ecc:	b910      	cbnz	r0, 5ed4 <_dtoa_r+0x184>
    5ece:	9b00      	ldr	r3, [sp, #0]
    5ed0:	3b01      	subs	r3, #1
    5ed2:	9300      	str	r3, [sp, #0]
    5ed4:	9b00      	ldr	r3, [sp, #0]
    5ed6:	2b16      	cmp	r3, #22
    5ed8:	d859      	bhi.n	5f8e <_dtoa_r+0x23e>
    5eda:	9a00      	ldr	r2, [sp, #0]
    5edc:	4b57      	ldr	r3, [pc, #348]	; (603c <_dtoa_r+0x2ec>)
    5ede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5ee2:	ec51 0b19 	vmov	r0, r1, d9
    5ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
    5eea:	f7fa fd63 	bl	9b4 <__aeabi_dcmplt>
    5eee:	2800      	cmp	r0, #0
    5ef0:	d04f      	beq.n	5f92 <_dtoa_r+0x242>
    5ef2:	9b00      	ldr	r3, [sp, #0]
    5ef4:	3b01      	subs	r3, #1
    5ef6:	9300      	str	r3, [sp, #0]
    5ef8:	2300      	movs	r3, #0
    5efa:	930b      	str	r3, [sp, #44]	; 0x2c
    5efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5efe:	1b5d      	subs	r5, r3, r5
    5f00:	1e6b      	subs	r3, r5, #1
    5f02:	9305      	str	r3, [sp, #20]
    5f04:	bf49      	itett	mi
    5f06:	f1c5 0301 	rsbmi	r3, r5, #1
    5f0a:	2300      	movpl	r3, #0
    5f0c:	9304      	strmi	r3, [sp, #16]
    5f0e:	2300      	movmi	r3, #0
    5f10:	bf54      	ite	pl
    5f12:	9304      	strpl	r3, [sp, #16]
    5f14:	9305      	strmi	r3, [sp, #20]
    5f16:	9b00      	ldr	r3, [sp, #0]
    5f18:	2b00      	cmp	r3, #0
    5f1a:	db3c      	blt.n	5f96 <_dtoa_r+0x246>
    5f1c:	9b05      	ldr	r3, [sp, #20]
    5f1e:	9a00      	ldr	r2, [sp, #0]
    5f20:	4413      	add	r3, r2
    5f22:	920a      	str	r2, [sp, #40]	; 0x28
    5f24:	9305      	str	r3, [sp, #20]
    5f26:	2300      	movs	r3, #0
    5f28:	9307      	str	r3, [sp, #28]
    5f2a:	9b06      	ldr	r3, [sp, #24]
    5f2c:	2b09      	cmp	r3, #9
    5f2e:	f200 8089 	bhi.w	6044 <_dtoa_r+0x2f4>
    5f32:	2b05      	cmp	r3, #5
    5f34:	bfc5      	ittet	gt
    5f36:	3b04      	subgt	r3, #4
    5f38:	2500      	movgt	r5, #0
    5f3a:	2501      	movle	r5, #1
    5f3c:	9306      	strgt	r3, [sp, #24]
    5f3e:	9b06      	ldr	r3, [sp, #24]
    5f40:	3b02      	subs	r3, #2
    5f42:	2b03      	cmp	r3, #3
    5f44:	f200 8089 	bhi.w	605a <_dtoa_r+0x30a>
    5f48:	e8df f003 	tbb	[pc, r3]
    5f4c:	5a393b2e 	.word	0x5a393b2e
    5f50:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
    5f54:	441d      	add	r5, r3
    5f56:	f205 4332 	addw	r3, r5, #1074	; 0x432
    5f5a:	2b20      	cmp	r3, #32
    5f5c:	bfc6      	itte	gt
    5f5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    5f62:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    5f66:	f1c3 0320 	rsble	r3, r3, #32
    5f6a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    5f6e:	bfc5      	ittet	gt
    5f70:	fa0b f303 	lslgt.w	r3, fp, r3
    5f74:	fa26 f000 	lsrgt.w	r0, r6, r0
    5f78:	fa06 f003 	lslle.w	r0, r6, r3
    5f7c:	4318      	orrgt	r0, r3
    5f7e:	f7fa fa2d 	bl	3dc <__aeabi_ui2d>
    5f82:	2301      	movs	r3, #1
    5f84:	4606      	mov	r6, r0
    5f86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    5f8a:	930e      	str	r3, [sp, #56]	; 0x38
    5f8c:	e76b      	b.n	5e66 <_dtoa_r+0x116>
    5f8e:	2301      	movs	r3, #1
    5f90:	e7b3      	b.n	5efa <_dtoa_r+0x1aa>
    5f92:	900b      	str	r0, [sp, #44]	; 0x2c
    5f94:	e7b2      	b.n	5efc <_dtoa_r+0x1ac>
    5f96:	9b04      	ldr	r3, [sp, #16]
    5f98:	9a00      	ldr	r2, [sp, #0]
    5f9a:	1a9b      	subs	r3, r3, r2
    5f9c:	9304      	str	r3, [sp, #16]
    5f9e:	4253      	negs	r3, r2
    5fa0:	9307      	str	r3, [sp, #28]
    5fa2:	2300      	movs	r3, #0
    5fa4:	930a      	str	r3, [sp, #40]	; 0x28
    5fa6:	e7c0      	b.n	5f2a <_dtoa_r+0x1da>
    5fa8:	2300      	movs	r3, #0
    5faa:	9308      	str	r3, [sp, #32]
    5fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5fae:	2b00      	cmp	r3, #0
    5fb0:	dc56      	bgt.n	6060 <_dtoa_r+0x310>
    5fb2:	2301      	movs	r3, #1
    5fb4:	461a      	mov	r2, r3
    5fb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
    5fba:	9209      	str	r2, [sp, #36]	; 0x24
    5fbc:	e00c      	b.n	5fd8 <_dtoa_r+0x288>
    5fbe:	2301      	movs	r3, #1
    5fc0:	e7f3      	b.n	5faa <_dtoa_r+0x25a>
    5fc2:	2300      	movs	r3, #0
    5fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5fc6:	9308      	str	r3, [sp, #32]
    5fc8:	9b00      	ldr	r3, [sp, #0]
    5fca:	4413      	add	r3, r2
    5fcc:	9302      	str	r3, [sp, #8]
    5fce:	3301      	adds	r3, #1
    5fd0:	2b01      	cmp	r3, #1
    5fd2:	9303      	str	r3, [sp, #12]
    5fd4:	bfb8      	it	lt
    5fd6:	2301      	movlt	r3, #1
    5fd8:	2200      	movs	r2, #0
    5fda:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5fdc:	6042      	str	r2, [r0, #4]
    5fde:	2204      	movs	r2, #4
    5fe0:	f102 0614 	add.w	r6, r2, #20
    5fe4:	6841      	ldr	r1, [r0, #4]
    5fe6:	429e      	cmp	r6, r3
    5fe8:	d93e      	bls.n	6068 <_dtoa_r+0x318>
    5fea:	4620      	mov	r0, r4
    5fec:	f00b fa5a 	bl	114a4 <_Balloc>
    5ff0:	9001      	str	r0, [sp, #4]
    5ff2:	2800      	cmp	r0, #0
    5ff4:	d13c      	bne.n	6070 <_dtoa_r+0x320>
    5ff6:	4b12      	ldr	r3, [pc, #72]	; (6040 <_dtoa_r+0x2f0>)
    5ff8:	4602      	mov	r2, r0
    5ffa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    5ffe:	e6c1      	b.n	5d84 <_dtoa_r+0x34>
    6000:	2301      	movs	r3, #1
    6002:	e7df      	b.n	5fc4 <_dtoa_r+0x274>
    6004:	f3af 8000 	nop.w
    6008:	636f4361 	.word	0x636f4361
    600c:	3fd287a7 	.word	0x3fd287a7
    6010:	8b60c8b3 	.word	0x8b60c8b3
    6014:	3fc68a28 	.word	0x3fc68a28
    6018:	509f79fb 	.word	0x509f79fb
    601c:	3fd34413 	.word	0x3fd34413
    6020:	00018860 	.word	0x00018860
    6024:	00018877 	.word	0x00018877
    6028:	7ff00000 	.word	0x7ff00000
    602c:	0001885c 	.word	0x0001885c
    6030:	00018853 	.word	0x00018853
    6034:	0001795b 	.word	0x0001795b
    6038:	3ff80000 	.word	0x3ff80000
    603c:	00016080 	.word	0x00016080
    6040:	000188d3 	.word	0x000188d3
    6044:	2501      	movs	r5, #1
    6046:	2300      	movs	r3, #0
    6048:	9508      	str	r5, [sp, #32]
    604a:	9306      	str	r3, [sp, #24]
    604c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6050:	2200      	movs	r2, #0
    6052:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6056:	2312      	movs	r3, #18
    6058:	e7af      	b.n	5fba <_dtoa_r+0x26a>
    605a:	2301      	movs	r3, #1
    605c:	9308      	str	r3, [sp, #32]
    605e:	e7f5      	b.n	604c <_dtoa_r+0x2fc>
    6060:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6062:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6066:	e7b7      	b.n	5fd8 <_dtoa_r+0x288>
    6068:	3101      	adds	r1, #1
    606a:	0052      	lsls	r2, r2, #1
    606c:	6041      	str	r1, [r0, #4]
    606e:	e7b7      	b.n	5fe0 <_dtoa_r+0x290>
    6070:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6072:	9a01      	ldr	r2, [sp, #4]
    6074:	601a      	str	r2, [r3, #0]
    6076:	9b03      	ldr	r3, [sp, #12]
    6078:	2b0e      	cmp	r3, #14
    607a:	f200 809d 	bhi.w	61b8 <_dtoa_r+0x468>
    607e:	2d00      	cmp	r5, #0
    6080:	f000 809a 	beq.w	61b8 <_dtoa_r+0x468>
    6084:	9b00      	ldr	r3, [sp, #0]
    6086:	2b00      	cmp	r3, #0
    6088:	dd32      	ble.n	60f0 <_dtoa_r+0x3a0>
    608a:	f003 030f 	and.w	r3, r3, #15
    608e:	4ab6      	ldr	r2, [pc, #728]	; (6368 <_dtoa_r+0x618>)
    6090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6094:	e9d3 8900 	ldrd	r8, r9, [r3]
    6098:	9b00      	ldr	r3, [sp, #0]
    609a:	05d8      	lsls	r0, r3, #23
    609c:	ea4f 1723 	mov.w	r7, r3, asr #4
    60a0:	d516      	bpl.n	60d0 <_dtoa_r+0x380>
    60a2:	4bb2      	ldr	r3, [pc, #712]	; (636c <_dtoa_r+0x61c>)
    60a4:	f007 070f 	and.w	r7, r7, #15
    60a8:	2503      	movs	r5, #3
    60aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    60ae:	ec51 0b19 	vmov	r0, r1, d9
    60b2:	f7fa fb37 	bl	724 <__aeabi_ddiv>
    60b6:	4682      	mov	sl, r0
    60b8:	468b      	mov	fp, r1
    60ba:	4eac      	ldr	r6, [pc, #688]	; (636c <_dtoa_r+0x61c>)
    60bc:	b957      	cbnz	r7, 60d4 <_dtoa_r+0x384>
    60be:	4642      	mov	r2, r8
    60c0:	464b      	mov	r3, r9
    60c2:	4650      	mov	r0, sl
    60c4:	4659      	mov	r1, fp
    60c6:	f7fa fb2d 	bl	724 <__aeabi_ddiv>
    60ca:	4682      	mov	sl, r0
    60cc:	468b      	mov	fp, r1
    60ce:	e028      	b.n	6122 <_dtoa_r+0x3d2>
    60d0:	2502      	movs	r5, #2
    60d2:	e7f2      	b.n	60ba <_dtoa_r+0x36a>
    60d4:	07f9      	lsls	r1, r7, #31
    60d6:	d508      	bpl.n	60ea <_dtoa_r+0x39a>
    60d8:	4640      	mov	r0, r8
    60da:	4649      	mov	r1, r9
    60dc:	3501      	adds	r5, #1
    60de:	e9d6 2300 	ldrd	r2, r3, [r6]
    60e2:	f7fa f9f5 	bl	4d0 <__aeabi_dmul>
    60e6:	4680      	mov	r8, r0
    60e8:	4689      	mov	r9, r1
    60ea:	107f      	asrs	r7, r7, #1
    60ec:	3608      	adds	r6, #8
    60ee:	e7e5      	b.n	60bc <_dtoa_r+0x36c>
    60f0:	f000 809b 	beq.w	622a <_dtoa_r+0x4da>
    60f4:	9b00      	ldr	r3, [sp, #0]
    60f6:	2502      	movs	r5, #2
    60f8:	4f9c      	ldr	r7, [pc, #624]	; (636c <_dtoa_r+0x61c>)
    60fa:	425e      	negs	r6, r3
    60fc:	4b9a      	ldr	r3, [pc, #616]	; (6368 <_dtoa_r+0x618>)
    60fe:	f006 020f 	and.w	r2, r6, #15
    6102:	1136      	asrs	r6, r6, #4
    6104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6108:	ec51 0b19 	vmov	r0, r1, d9
    610c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6110:	f7fa f9de 	bl	4d0 <__aeabi_dmul>
    6114:	2300      	movs	r3, #0
    6116:	4682      	mov	sl, r0
    6118:	468b      	mov	fp, r1
    611a:	2e00      	cmp	r6, #0
    611c:	d17a      	bne.n	6214 <_dtoa_r+0x4c4>
    611e:	2b00      	cmp	r3, #0
    6120:	d1d3      	bne.n	60ca <_dtoa_r+0x37a>
    6122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6124:	2b00      	cmp	r3, #0
    6126:	f000 8082 	beq.w	622e <_dtoa_r+0x4de>
    612a:	2200      	movs	r2, #0
    612c:	4b90      	ldr	r3, [pc, #576]	; (6370 <_dtoa_r+0x620>)
    612e:	4650      	mov	r0, sl
    6130:	4659      	mov	r1, fp
    6132:	f7fa fc3f 	bl	9b4 <__aeabi_dcmplt>
    6136:	2800      	cmp	r0, #0
    6138:	d079      	beq.n	622e <_dtoa_r+0x4de>
    613a:	9b03      	ldr	r3, [sp, #12]
    613c:	2b00      	cmp	r3, #0
    613e:	d076      	beq.n	622e <_dtoa_r+0x4de>
    6140:	9b02      	ldr	r3, [sp, #8]
    6142:	2b00      	cmp	r3, #0
    6144:	dd36      	ble.n	61b4 <_dtoa_r+0x464>
    6146:	9b00      	ldr	r3, [sp, #0]
    6148:	4650      	mov	r0, sl
    614a:	4659      	mov	r1, fp
    614c:	2200      	movs	r2, #0
    614e:	1e5f      	subs	r7, r3, #1
    6150:	4b88      	ldr	r3, [pc, #544]	; (6374 <_dtoa_r+0x624>)
    6152:	f7fa f9bd 	bl	4d0 <__aeabi_dmul>
    6156:	3501      	adds	r5, #1
    6158:	4682      	mov	sl, r0
    615a:	468b      	mov	fp, r1
    615c:	9e02      	ldr	r6, [sp, #8]
    615e:	4628      	mov	r0, r5
    6160:	46d0      	mov	r8, sl
    6162:	f7fa f94b 	bl	3fc <__aeabi_i2d>
    6166:	4652      	mov	r2, sl
    6168:	465b      	mov	r3, fp
    616a:	46d9      	mov	r9, fp
    616c:	f7fa f9b0 	bl	4d0 <__aeabi_dmul>
    6170:	2200      	movs	r2, #0
    6172:	4b81      	ldr	r3, [pc, #516]	; (6378 <_dtoa_r+0x628>)
    6174:	f7f9 fff6 	bl	164 <__adddf3>
    6178:	4682      	mov	sl, r0
    617a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
    617e:	2e00      	cmp	r6, #0
    6180:	d158      	bne.n	6234 <_dtoa_r+0x4e4>
    6182:	2200      	movs	r2, #0
    6184:	4b7d      	ldr	r3, [pc, #500]	; (637c <_dtoa_r+0x62c>)
    6186:	4640      	mov	r0, r8
    6188:	4649      	mov	r1, r9
    618a:	f7f9 ffe9 	bl	160 <__aeabi_dsub>
    618e:	4652      	mov	r2, sl
    6190:	465b      	mov	r3, fp
    6192:	4680      	mov	r8, r0
    6194:	4689      	mov	r9, r1
    6196:	f7fa fc2b 	bl	9f0 <__aeabi_dcmpgt>
    619a:	2800      	cmp	r0, #0
    619c:	f040 8293 	bne.w	66c6 <_dtoa_r+0x976>
    61a0:	4652      	mov	r2, sl
    61a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    61a6:	4640      	mov	r0, r8
    61a8:	4649      	mov	r1, r9
    61aa:	f7fa fc03 	bl	9b4 <__aeabi_dcmplt>
    61ae:	2800      	cmp	r0, #0
    61b0:	f040 8287 	bne.w	66c2 <_dtoa_r+0x972>
    61b4:	ec5b ab19 	vmov	sl, fp, d9
    61b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    61ba:	2b00      	cmp	r3, #0
    61bc:	f2c0 8148 	blt.w	6450 <_dtoa_r+0x700>
    61c0:	9a00      	ldr	r2, [sp, #0]
    61c2:	2a0e      	cmp	r2, #14
    61c4:	f300 8144 	bgt.w	6450 <_dtoa_r+0x700>
    61c8:	4b67      	ldr	r3, [pc, #412]	; (6368 <_dtoa_r+0x618>)
    61ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    61ce:	e9d3 8900 	ldrd	r8, r9, [r3]
    61d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61d4:	2b00      	cmp	r3, #0
    61d6:	f280 80d5 	bge.w	6384 <_dtoa_r+0x634>
    61da:	9b03      	ldr	r3, [sp, #12]
    61dc:	2b00      	cmp	r3, #0
    61de:	f300 80d1 	bgt.w	6384 <_dtoa_r+0x634>
    61e2:	f040 826d 	bne.w	66c0 <_dtoa_r+0x970>
    61e6:	2200      	movs	r2, #0
    61e8:	4b64      	ldr	r3, [pc, #400]	; (637c <_dtoa_r+0x62c>)
    61ea:	4640      	mov	r0, r8
    61ec:	4649      	mov	r1, r9
    61ee:	f7fa f96f 	bl	4d0 <__aeabi_dmul>
    61f2:	4652      	mov	r2, sl
    61f4:	465b      	mov	r3, fp
    61f6:	f7fa fbf1 	bl	9dc <__aeabi_dcmpge>
    61fa:	9e03      	ldr	r6, [sp, #12]
    61fc:	4637      	mov	r7, r6
    61fe:	2800      	cmp	r0, #0
    6200:	f040 8243 	bne.w	668a <_dtoa_r+0x93a>
    6204:	2331      	movs	r3, #49	; 0x31
    6206:	9d01      	ldr	r5, [sp, #4]
    6208:	f805 3b01 	strb.w	r3, [r5], #1
    620c:	9b00      	ldr	r3, [sp, #0]
    620e:	3301      	adds	r3, #1
    6210:	9300      	str	r3, [sp, #0]
    6212:	e23e      	b.n	6692 <_dtoa_r+0x942>
    6214:	07f2      	lsls	r2, r6, #31
    6216:	d505      	bpl.n	6224 <_dtoa_r+0x4d4>
    6218:	3501      	adds	r5, #1
    621a:	e9d7 2300 	ldrd	r2, r3, [r7]
    621e:	f7fa f957 	bl	4d0 <__aeabi_dmul>
    6222:	2301      	movs	r3, #1
    6224:	1076      	asrs	r6, r6, #1
    6226:	3708      	adds	r7, #8
    6228:	e777      	b.n	611a <_dtoa_r+0x3ca>
    622a:	2502      	movs	r5, #2
    622c:	e779      	b.n	6122 <_dtoa_r+0x3d2>
    622e:	9f00      	ldr	r7, [sp, #0]
    6230:	9e03      	ldr	r6, [sp, #12]
    6232:	e794      	b.n	615e <_dtoa_r+0x40e>
    6234:	9901      	ldr	r1, [sp, #4]
    6236:	4b4c      	ldr	r3, [pc, #304]	; (6368 <_dtoa_r+0x618>)
    6238:	4431      	add	r1, r6
    623a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    623e:	910d      	str	r1, [sp, #52]	; 0x34
    6240:	9908      	ldr	r1, [sp, #32]
    6242:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    6246:	2900      	cmp	r1, #0
    6248:	d043      	beq.n	62d2 <_dtoa_r+0x582>
    624a:	2000      	movs	r0, #0
    624c:	494c      	ldr	r1, [pc, #304]	; (6380 <_dtoa_r+0x630>)
    624e:	f7fa fa69 	bl	724 <__aeabi_ddiv>
    6252:	4652      	mov	r2, sl
    6254:	465b      	mov	r3, fp
    6256:	f7f9 ff83 	bl	160 <__aeabi_dsub>
    625a:	9d01      	ldr	r5, [sp, #4]
    625c:	4682      	mov	sl, r0
    625e:	468b      	mov	fp, r1
    6260:	4649      	mov	r1, r9
    6262:	4640      	mov	r0, r8
    6264:	f7fa fcdc 	bl	c20 <__aeabi_d2iz>
    6268:	4606      	mov	r6, r0
    626a:	f7fa f8c7 	bl	3fc <__aeabi_i2d>
    626e:	4602      	mov	r2, r0
    6270:	3630      	adds	r6, #48	; 0x30
    6272:	460b      	mov	r3, r1
    6274:	4640      	mov	r0, r8
    6276:	4649      	mov	r1, r9
    6278:	f7f9 ff72 	bl	160 <__aeabi_dsub>
    627c:	4652      	mov	r2, sl
    627e:	465b      	mov	r3, fp
    6280:	f805 6b01 	strb.w	r6, [r5], #1
    6284:	4680      	mov	r8, r0
    6286:	4689      	mov	r9, r1
    6288:	f7fa fb94 	bl	9b4 <__aeabi_dcmplt>
    628c:	2800      	cmp	r0, #0
    628e:	d163      	bne.n	6358 <_dtoa_r+0x608>
    6290:	4642      	mov	r2, r8
    6292:	464b      	mov	r3, r9
    6294:	2000      	movs	r0, #0
    6296:	4936      	ldr	r1, [pc, #216]	; (6370 <_dtoa_r+0x620>)
    6298:	f7f9 ff62 	bl	160 <__aeabi_dsub>
    629c:	4652      	mov	r2, sl
    629e:	465b      	mov	r3, fp
    62a0:	f7fa fb88 	bl	9b4 <__aeabi_dcmplt>
    62a4:	2800      	cmp	r0, #0
    62a6:	f040 80b5 	bne.w	6414 <_dtoa_r+0x6c4>
    62aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    62ac:	429d      	cmp	r5, r3
    62ae:	d081      	beq.n	61b4 <_dtoa_r+0x464>
    62b0:	2200      	movs	r2, #0
    62b2:	4b30      	ldr	r3, [pc, #192]	; (6374 <_dtoa_r+0x624>)
    62b4:	4650      	mov	r0, sl
    62b6:	4659      	mov	r1, fp
    62b8:	f7fa f90a 	bl	4d0 <__aeabi_dmul>
    62bc:	2200      	movs	r2, #0
    62be:	4682      	mov	sl, r0
    62c0:	468b      	mov	fp, r1
    62c2:	4640      	mov	r0, r8
    62c4:	4649      	mov	r1, r9
    62c6:	4b2b      	ldr	r3, [pc, #172]	; (6374 <_dtoa_r+0x624>)
    62c8:	f7fa f902 	bl	4d0 <__aeabi_dmul>
    62cc:	4680      	mov	r8, r0
    62ce:	4689      	mov	r9, r1
    62d0:	e7c6      	b.n	6260 <_dtoa_r+0x510>
    62d2:	4650      	mov	r0, sl
    62d4:	4659      	mov	r1, fp
    62d6:	f7fa f8fb 	bl	4d0 <__aeabi_dmul>
    62da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    62dc:	4682      	mov	sl, r0
    62de:	468b      	mov	fp, r1
    62e0:	9d01      	ldr	r5, [sp, #4]
    62e2:	930f      	str	r3, [sp, #60]	; 0x3c
    62e4:	4649      	mov	r1, r9
    62e6:	4640      	mov	r0, r8
    62e8:	f7fa fc9a 	bl	c20 <__aeabi_d2iz>
    62ec:	4606      	mov	r6, r0
    62ee:	f7fa f885 	bl	3fc <__aeabi_i2d>
    62f2:	4602      	mov	r2, r0
    62f4:	460b      	mov	r3, r1
    62f6:	4640      	mov	r0, r8
    62f8:	4649      	mov	r1, r9
    62fa:	3630      	adds	r6, #48	; 0x30
    62fc:	f7f9 ff30 	bl	160 <__aeabi_dsub>
    6300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6302:	f805 6b01 	strb.w	r6, [r5], #1
    6306:	4680      	mov	r8, r0
    6308:	429d      	cmp	r5, r3
    630a:	4689      	mov	r9, r1
    630c:	f04f 0200 	mov.w	r2, #0
    6310:	d124      	bne.n	635c <_dtoa_r+0x60c>
    6312:	4b1b      	ldr	r3, [pc, #108]	; (6380 <_dtoa_r+0x630>)
    6314:	4650      	mov	r0, sl
    6316:	4659      	mov	r1, fp
    6318:	f7f9 ff24 	bl	164 <__adddf3>
    631c:	4602      	mov	r2, r0
    631e:	460b      	mov	r3, r1
    6320:	4640      	mov	r0, r8
    6322:	4649      	mov	r1, r9
    6324:	f7fa fb64 	bl	9f0 <__aeabi_dcmpgt>
    6328:	2800      	cmp	r0, #0
    632a:	d173      	bne.n	6414 <_dtoa_r+0x6c4>
    632c:	4652      	mov	r2, sl
    632e:	465b      	mov	r3, fp
    6330:	2000      	movs	r0, #0
    6332:	4913      	ldr	r1, [pc, #76]	; (6380 <_dtoa_r+0x630>)
    6334:	f7f9 ff14 	bl	160 <__aeabi_dsub>
    6338:	4602      	mov	r2, r0
    633a:	460b      	mov	r3, r1
    633c:	4640      	mov	r0, r8
    633e:	4649      	mov	r1, r9
    6340:	f7fa fb38 	bl	9b4 <__aeabi_dcmplt>
    6344:	2800      	cmp	r0, #0
    6346:	f43f af35 	beq.w	61b4 <_dtoa_r+0x464>
    634a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    634c:	1e6b      	subs	r3, r5, #1
    634e:	930f      	str	r3, [sp, #60]	; 0x3c
    6350:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    6354:	2b30      	cmp	r3, #48	; 0x30
    6356:	d0f8      	beq.n	634a <_dtoa_r+0x5fa>
    6358:	9700      	str	r7, [sp, #0]
    635a:	e049      	b.n	63f0 <_dtoa_r+0x6a0>
    635c:	4b05      	ldr	r3, [pc, #20]	; (6374 <_dtoa_r+0x624>)
    635e:	f7fa f8b7 	bl	4d0 <__aeabi_dmul>
    6362:	4680      	mov	r8, r0
    6364:	4689      	mov	r9, r1
    6366:	e7bd      	b.n	62e4 <_dtoa_r+0x594>
    6368:	00016080 	.word	0x00016080
    636c:	00016058 	.word	0x00016058
    6370:	3ff00000 	.word	0x3ff00000
    6374:	40240000 	.word	0x40240000
    6378:	401c0000 	.word	0x401c0000
    637c:	40140000 	.word	0x40140000
    6380:	3fe00000 	.word	0x3fe00000
    6384:	4656      	mov	r6, sl
    6386:	465f      	mov	r7, fp
    6388:	9d01      	ldr	r5, [sp, #4]
    638a:	4642      	mov	r2, r8
    638c:	464b      	mov	r3, r9
    638e:	4630      	mov	r0, r6
    6390:	4639      	mov	r1, r7
    6392:	f7fa f9c7 	bl	724 <__aeabi_ddiv>
    6396:	f7fa fc43 	bl	c20 <__aeabi_d2iz>
    639a:	4682      	mov	sl, r0
    639c:	f7fa f82e 	bl	3fc <__aeabi_i2d>
    63a0:	4642      	mov	r2, r8
    63a2:	464b      	mov	r3, r9
    63a4:	f7fa f894 	bl	4d0 <__aeabi_dmul>
    63a8:	4602      	mov	r2, r0
    63aa:	4630      	mov	r0, r6
    63ac:	f10a 0630 	add.w	r6, sl, #48	; 0x30
    63b0:	460b      	mov	r3, r1
    63b2:	4639      	mov	r1, r7
    63b4:	f7f9 fed4 	bl	160 <__aeabi_dsub>
    63b8:	f805 6b01 	strb.w	r6, [r5], #1
    63bc:	9e01      	ldr	r6, [sp, #4]
    63be:	4602      	mov	r2, r0
    63c0:	9f03      	ldr	r7, [sp, #12]
    63c2:	460b      	mov	r3, r1
    63c4:	1bae      	subs	r6, r5, r6
    63c6:	42b7      	cmp	r7, r6
    63c8:	d135      	bne.n	6436 <_dtoa_r+0x6e6>
    63ca:	f7f9 fecb 	bl	164 <__adddf3>
    63ce:	4642      	mov	r2, r8
    63d0:	464b      	mov	r3, r9
    63d2:	4606      	mov	r6, r0
    63d4:	460f      	mov	r7, r1
    63d6:	f7fa fb0b 	bl	9f0 <__aeabi_dcmpgt>
    63da:	b9d0      	cbnz	r0, 6412 <_dtoa_r+0x6c2>
    63dc:	4642      	mov	r2, r8
    63de:	464b      	mov	r3, r9
    63e0:	4630      	mov	r0, r6
    63e2:	4639      	mov	r1, r7
    63e4:	f7fa fadc 	bl	9a0 <__aeabi_dcmpeq>
    63e8:	b110      	cbz	r0, 63f0 <_dtoa_r+0x6a0>
    63ea:	f01a 0f01 	tst.w	sl, #1
    63ee:	d110      	bne.n	6412 <_dtoa_r+0x6c2>
    63f0:	4620      	mov	r0, r4
    63f2:	ee18 1a10 	vmov	r1, s16
    63f6:	f00b f895 	bl	11524 <_Bfree>
    63fa:	2300      	movs	r3, #0
    63fc:	9800      	ldr	r0, [sp, #0]
    63fe:	702b      	strb	r3, [r5, #0]
    6400:	3001      	adds	r0, #1
    6402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6404:	6018      	str	r0, [r3, #0]
    6406:	9b21      	ldr	r3, [sp, #132]	; 0x84
    6408:	2b00      	cmp	r3, #0
    640a:	f43f acf1 	beq.w	5df0 <_dtoa_r+0xa0>
    640e:	601d      	str	r5, [r3, #0]
    6410:	e4ee      	b.n	5df0 <_dtoa_r+0xa0>
    6412:	9f00      	ldr	r7, [sp, #0]
    6414:	462b      	mov	r3, r5
    6416:	461d      	mov	r5, r3
    6418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    641c:	2a39      	cmp	r2, #57	; 0x39
    641e:	d106      	bne.n	642e <_dtoa_r+0x6de>
    6420:	9a01      	ldr	r2, [sp, #4]
    6422:	429a      	cmp	r2, r3
    6424:	d1f7      	bne.n	6416 <_dtoa_r+0x6c6>
    6426:	2230      	movs	r2, #48	; 0x30
    6428:	9901      	ldr	r1, [sp, #4]
    642a:	3701      	adds	r7, #1
    642c:	700a      	strb	r2, [r1, #0]
    642e:	781a      	ldrb	r2, [r3, #0]
    6430:	3201      	adds	r2, #1
    6432:	701a      	strb	r2, [r3, #0]
    6434:	e790      	b.n	6358 <_dtoa_r+0x608>
    6436:	2200      	movs	r2, #0
    6438:	4ba4      	ldr	r3, [pc, #656]	; (66cc <_dtoa_r+0x97c>)
    643a:	f7fa f849 	bl	4d0 <__aeabi_dmul>
    643e:	2200      	movs	r2, #0
    6440:	2300      	movs	r3, #0
    6442:	4606      	mov	r6, r0
    6444:	460f      	mov	r7, r1
    6446:	f7fa faab 	bl	9a0 <__aeabi_dcmpeq>
    644a:	2800      	cmp	r0, #0
    644c:	d09d      	beq.n	638a <_dtoa_r+0x63a>
    644e:	e7cf      	b.n	63f0 <_dtoa_r+0x6a0>
    6450:	9a08      	ldr	r2, [sp, #32]
    6452:	2a00      	cmp	r2, #0
    6454:	f000 80d5 	beq.w	6602 <_dtoa_r+0x8b2>
    6458:	9a06      	ldr	r2, [sp, #24]
    645a:	2a01      	cmp	r2, #1
    645c:	f300 80b9 	bgt.w	65d2 <_dtoa_r+0x882>
    6460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6462:	2a00      	cmp	r2, #0
    6464:	f000 80b1 	beq.w	65ca <_dtoa_r+0x87a>
    6468:	f203 4333 	addw	r3, r3, #1075	; 0x433
    646c:	9e07      	ldr	r6, [sp, #28]
    646e:	9d04      	ldr	r5, [sp, #16]
    6470:	9a04      	ldr	r2, [sp, #16]
    6472:	2101      	movs	r1, #1
    6474:	4620      	mov	r0, r4
    6476:	441a      	add	r2, r3
    6478:	9204      	str	r2, [sp, #16]
    647a:	9a05      	ldr	r2, [sp, #20]
    647c:	441a      	add	r2, r3
    647e:	9205      	str	r2, [sp, #20]
    6480:	f00b f904 	bl	1168c <__i2b>
    6484:	4607      	mov	r7, r0
    6486:	2d00      	cmp	r5, #0
    6488:	dd0c      	ble.n	64a4 <_dtoa_r+0x754>
    648a:	9b05      	ldr	r3, [sp, #20]
    648c:	2b00      	cmp	r3, #0
    648e:	dd09      	ble.n	64a4 <_dtoa_r+0x754>
    6490:	42ab      	cmp	r3, r5
    6492:	9a04      	ldr	r2, [sp, #16]
    6494:	bfa8      	it	ge
    6496:	462b      	movge	r3, r5
    6498:	1ad2      	subs	r2, r2, r3
    649a:	1aed      	subs	r5, r5, r3
    649c:	9204      	str	r2, [sp, #16]
    649e:	9a05      	ldr	r2, [sp, #20]
    64a0:	1ad3      	subs	r3, r2, r3
    64a2:	9305      	str	r3, [sp, #20]
    64a4:	9b07      	ldr	r3, [sp, #28]
    64a6:	b31b      	cbz	r3, 64f0 <_dtoa_r+0x7a0>
    64a8:	9b08      	ldr	r3, [sp, #32]
    64aa:	2b00      	cmp	r3, #0
    64ac:	f000 80ad 	beq.w	660a <_dtoa_r+0x8ba>
    64b0:	2e00      	cmp	r6, #0
    64b2:	dd13      	ble.n	64dc <_dtoa_r+0x78c>
    64b4:	4639      	mov	r1, r7
    64b6:	4632      	mov	r2, r6
    64b8:	4620      	mov	r0, r4
    64ba:	f00b f9a5 	bl	11808 <__pow5mult>
    64be:	ee18 2a10 	vmov	r2, s16
    64c2:	4601      	mov	r1, r0
    64c4:	4607      	mov	r7, r0
    64c6:	4620      	mov	r0, r4
    64c8:	f00b f8f6 	bl	116b8 <__multiply>
    64cc:	4680      	mov	r8, r0
    64ce:	ee18 1a10 	vmov	r1, s16
    64d2:	4620      	mov	r0, r4
    64d4:	ee08 8a10 	vmov	s16, r8
    64d8:	f00b f824 	bl	11524 <_Bfree>
    64dc:	9b07      	ldr	r3, [sp, #28]
    64de:	1b9a      	subs	r2, r3, r6
    64e0:	d006      	beq.n	64f0 <_dtoa_r+0x7a0>
    64e2:	ee18 1a10 	vmov	r1, s16
    64e6:	4620      	mov	r0, r4
    64e8:	f00b f98e 	bl	11808 <__pow5mult>
    64ec:	ee08 0a10 	vmov	s16, r0
    64f0:	2101      	movs	r1, #1
    64f2:	4620      	mov	r0, r4
    64f4:	f00b f8ca 	bl	1168c <__i2b>
    64f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    64fa:	4606      	mov	r6, r0
    64fc:	2b00      	cmp	r3, #0
    64fe:	f340 8086 	ble.w	660e <_dtoa_r+0x8be>
    6502:	461a      	mov	r2, r3
    6504:	4601      	mov	r1, r0
    6506:	4620      	mov	r0, r4
    6508:	f00b f97e 	bl	11808 <__pow5mult>
    650c:	9b06      	ldr	r3, [sp, #24]
    650e:	4606      	mov	r6, r0
    6510:	2b01      	cmp	r3, #1
    6512:	dd7f      	ble.n	6614 <_dtoa_r+0x8c4>
    6514:	f04f 0800 	mov.w	r8, #0
    6518:	6933      	ldr	r3, [r6, #16]
    651a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    651e:	6918      	ldr	r0, [r3, #16]
    6520:	f00e ff60 	bl	153e4 <__hi0bits>
    6524:	f1c0 0020 	rsb	r0, r0, #32
    6528:	9b05      	ldr	r3, [sp, #20]
    652a:	4418      	add	r0, r3
    652c:	f010 001f 	ands.w	r0, r0, #31
    6530:	f000 8091 	beq.w	6656 <_dtoa_r+0x906>
    6534:	f1c0 0320 	rsb	r3, r0, #32
    6538:	2b04      	cmp	r3, #4
    653a:	f340 8089 	ble.w	6650 <_dtoa_r+0x900>
    653e:	f1c0 001c 	rsb	r0, r0, #28
    6542:	9b04      	ldr	r3, [sp, #16]
    6544:	4405      	add	r5, r0
    6546:	4403      	add	r3, r0
    6548:	9304      	str	r3, [sp, #16]
    654a:	9b05      	ldr	r3, [sp, #20]
    654c:	4403      	add	r3, r0
    654e:	9305      	str	r3, [sp, #20]
    6550:	9b04      	ldr	r3, [sp, #16]
    6552:	2b00      	cmp	r3, #0
    6554:	dd07      	ble.n	6566 <_dtoa_r+0x816>
    6556:	ee18 1a10 	vmov	r1, s16
    655a:	461a      	mov	r2, r3
    655c:	4620      	mov	r0, r4
    655e:	f00b f9ad 	bl	118bc <__lshift>
    6562:	ee08 0a10 	vmov	s16, r0
    6566:	9b05      	ldr	r3, [sp, #20]
    6568:	2b00      	cmp	r3, #0
    656a:	dd05      	ble.n	6578 <_dtoa_r+0x828>
    656c:	4631      	mov	r1, r6
    656e:	461a      	mov	r2, r3
    6570:	4620      	mov	r0, r4
    6572:	f00b f9a3 	bl	118bc <__lshift>
    6576:	4606      	mov	r6, r0
    6578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    657a:	2b00      	cmp	r3, #0
    657c:	d06d      	beq.n	665a <_dtoa_r+0x90a>
    657e:	4631      	mov	r1, r6
    6580:	ee18 0a10 	vmov	r0, s16
    6584:	f00e ff7d 	bl	15482 <__mcmp>
    6588:	2800      	cmp	r0, #0
    658a:	da66      	bge.n	665a <_dtoa_r+0x90a>
    658c:	9b00      	ldr	r3, [sp, #0]
    658e:	ee18 1a10 	vmov	r1, s16
    6592:	220a      	movs	r2, #10
    6594:	4620      	mov	r0, r4
    6596:	3b01      	subs	r3, #1
    6598:	9300      	str	r3, [sp, #0]
    659a:	2300      	movs	r3, #0
    659c:	f00a ffe4 	bl	11568 <__multadd>
    65a0:	9b08      	ldr	r3, [sp, #32]
    65a2:	ee08 0a10 	vmov	s16, r0
    65a6:	2b00      	cmp	r3, #0
    65a8:	f000 81af 	beq.w	690a <_dtoa_r+0xbba>
    65ac:	2300      	movs	r3, #0
    65ae:	4639      	mov	r1, r7
    65b0:	220a      	movs	r2, #10
    65b2:	4620      	mov	r0, r4
    65b4:	f00a ffd8 	bl	11568 <__multadd>
    65b8:	9b02      	ldr	r3, [sp, #8]
    65ba:	4607      	mov	r7, r0
    65bc:	2b00      	cmp	r3, #0
    65be:	f300 808d 	bgt.w	66dc <_dtoa_r+0x98c>
    65c2:	9b06      	ldr	r3, [sp, #24]
    65c4:	2b02      	cmp	r3, #2
    65c6:	dc50      	bgt.n	666a <_dtoa_r+0x91a>
    65c8:	e088      	b.n	66dc <_dtoa_r+0x98c>
    65ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    65cc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    65d0:	e74c      	b.n	646c <_dtoa_r+0x71c>
    65d2:	9b03      	ldr	r3, [sp, #12]
    65d4:	1e5e      	subs	r6, r3, #1
    65d6:	9b07      	ldr	r3, [sp, #28]
    65d8:	42b3      	cmp	r3, r6
    65da:	bfb7      	itett	lt
    65dc:	9b07      	ldrlt	r3, [sp, #28]
    65de:	1b9e      	subge	r6, r3, r6
    65e0:	9607      	strlt	r6, [sp, #28]
    65e2:	1af2      	sublt	r2, r6, r3
    65e4:	bfbf      	itttt	lt
    65e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    65e8:	2600      	movlt	r6, #0
    65ea:	189b      	addlt	r3, r3, r2
    65ec:	930a      	strlt	r3, [sp, #40]	; 0x28
    65ee:	9b03      	ldr	r3, [sp, #12]
    65f0:	2b00      	cmp	r3, #0
    65f2:	bfb7      	itett	lt
    65f4:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
    65f8:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
    65fc:	1a9d      	sublt	r5, r3, r2
    65fe:	2300      	movlt	r3, #0
    6600:	e736      	b.n	6470 <_dtoa_r+0x720>
    6602:	9e07      	ldr	r6, [sp, #28]
    6604:	9d04      	ldr	r5, [sp, #16]
    6606:	9f08      	ldr	r7, [sp, #32]
    6608:	e73d      	b.n	6486 <_dtoa_r+0x736>
    660a:	9a07      	ldr	r2, [sp, #28]
    660c:	e769      	b.n	64e2 <_dtoa_r+0x792>
    660e:	9b06      	ldr	r3, [sp, #24]
    6610:	2b01      	cmp	r3, #1
    6612:	dc18      	bgt.n	6646 <_dtoa_r+0x8f6>
    6614:	f1ba 0f00 	cmp.w	sl, #0
    6618:	d115      	bne.n	6646 <_dtoa_r+0x8f6>
    661a:	f3cb 0313 	ubfx	r3, fp, #0, #20
    661e:	b993      	cbnz	r3, 6646 <_dtoa_r+0x8f6>
    6620:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    6624:	0d1b      	lsrs	r3, r3, #20
    6626:	051b      	lsls	r3, r3, #20
    6628:	b183      	cbz	r3, 664c <_dtoa_r+0x8fc>
    662a:	9b04      	ldr	r3, [sp, #16]
    662c:	f04f 0801 	mov.w	r8, #1
    6630:	3301      	adds	r3, #1
    6632:	9304      	str	r3, [sp, #16]
    6634:	9b05      	ldr	r3, [sp, #20]
    6636:	3301      	adds	r3, #1
    6638:	9305      	str	r3, [sp, #20]
    663a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    663c:	2b00      	cmp	r3, #0
    663e:	f47f af6b 	bne.w	6518 <_dtoa_r+0x7c8>
    6642:	2001      	movs	r0, #1
    6644:	e770      	b.n	6528 <_dtoa_r+0x7d8>
    6646:	f04f 0800 	mov.w	r8, #0
    664a:	e7f6      	b.n	663a <_dtoa_r+0x8ea>
    664c:	4698      	mov	r8, r3
    664e:	e7f4      	b.n	663a <_dtoa_r+0x8ea>
    6650:	f43f af7e 	beq.w	6550 <_dtoa_r+0x800>
    6654:	4618      	mov	r0, r3
    6656:	301c      	adds	r0, #28
    6658:	e773      	b.n	6542 <_dtoa_r+0x7f2>
    665a:	9b03      	ldr	r3, [sp, #12]
    665c:	2b00      	cmp	r3, #0
    665e:	dc37      	bgt.n	66d0 <_dtoa_r+0x980>
    6660:	9b06      	ldr	r3, [sp, #24]
    6662:	2b02      	cmp	r3, #2
    6664:	dd34      	ble.n	66d0 <_dtoa_r+0x980>
    6666:	9b03      	ldr	r3, [sp, #12]
    6668:	9302      	str	r3, [sp, #8]
    666a:	9b02      	ldr	r3, [sp, #8]
    666c:	b96b      	cbnz	r3, 668a <_dtoa_r+0x93a>
    666e:	4631      	mov	r1, r6
    6670:	2205      	movs	r2, #5
    6672:	4620      	mov	r0, r4
    6674:	f00a ff78 	bl	11568 <__multadd>
    6678:	4601      	mov	r1, r0
    667a:	4606      	mov	r6, r0
    667c:	ee18 0a10 	vmov	r0, s16
    6680:	f00e feff 	bl	15482 <__mcmp>
    6684:	2800      	cmp	r0, #0
    6686:	f73f adbd 	bgt.w	6204 <_dtoa_r+0x4b4>
    668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    668c:	9d01      	ldr	r5, [sp, #4]
    668e:	43db      	mvns	r3, r3
    6690:	9300      	str	r3, [sp, #0]
    6692:	f04f 0800 	mov.w	r8, #0
    6696:	4631      	mov	r1, r6
    6698:	4620      	mov	r0, r4
    669a:	f00a ff43 	bl	11524 <_Bfree>
    669e:	2f00      	cmp	r7, #0
    66a0:	f43f aea6 	beq.w	63f0 <_dtoa_r+0x6a0>
    66a4:	f1b8 0f00 	cmp.w	r8, #0
    66a8:	d005      	beq.n	66b6 <_dtoa_r+0x966>
    66aa:	45b8      	cmp	r8, r7
    66ac:	d003      	beq.n	66b6 <_dtoa_r+0x966>
    66ae:	4641      	mov	r1, r8
    66b0:	4620      	mov	r0, r4
    66b2:	f00a ff37 	bl	11524 <_Bfree>
    66b6:	4639      	mov	r1, r7
    66b8:	4620      	mov	r0, r4
    66ba:	f00a ff33 	bl	11524 <_Bfree>
    66be:	e697      	b.n	63f0 <_dtoa_r+0x6a0>
    66c0:	2600      	movs	r6, #0
    66c2:	4637      	mov	r7, r6
    66c4:	e7e1      	b.n	668a <_dtoa_r+0x93a>
    66c6:	9700      	str	r7, [sp, #0]
    66c8:	4637      	mov	r7, r6
    66ca:	e59b      	b.n	6204 <_dtoa_r+0x4b4>
    66cc:	40240000 	.word	0x40240000
    66d0:	9b08      	ldr	r3, [sp, #32]
    66d2:	2b00      	cmp	r3, #0
    66d4:	f000 80ca 	beq.w	686c <_dtoa_r+0xb1c>
    66d8:	9b03      	ldr	r3, [sp, #12]
    66da:	9302      	str	r3, [sp, #8]
    66dc:	2d00      	cmp	r5, #0
    66de:	dd05      	ble.n	66ec <_dtoa_r+0x99c>
    66e0:	4639      	mov	r1, r7
    66e2:	462a      	mov	r2, r5
    66e4:	4620      	mov	r0, r4
    66e6:	f00b f8e9 	bl	118bc <__lshift>
    66ea:	4607      	mov	r7, r0
    66ec:	f1b8 0f00 	cmp.w	r8, #0
    66f0:	d05b      	beq.n	67aa <_dtoa_r+0xa5a>
    66f2:	6879      	ldr	r1, [r7, #4]
    66f4:	4620      	mov	r0, r4
    66f6:	f00a fed5 	bl	114a4 <_Balloc>
    66fa:	4605      	mov	r5, r0
    66fc:	b928      	cbnz	r0, 670a <_dtoa_r+0x9ba>
    66fe:	4b87      	ldr	r3, [pc, #540]	; (691c <_dtoa_r+0xbcc>)
    6700:	4602      	mov	r2, r0
    6702:	f240 21ea 	movw	r1, #746	; 0x2ea
    6706:	f7ff bb3d 	b.w	5d84 <_dtoa_r+0x34>
    670a:	693a      	ldr	r2, [r7, #16]
    670c:	f107 010c 	add.w	r1, r7, #12
    6710:	300c      	adds	r0, #12
    6712:	3202      	adds	r2, #2
    6714:	0092      	lsls	r2, r2, #2
    6716:	f00e fa4e 	bl	14bb6 <memcpy>
    671a:	2201      	movs	r2, #1
    671c:	4629      	mov	r1, r5
    671e:	4620      	mov	r0, r4
    6720:	f00b f8cc 	bl	118bc <__lshift>
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	46b8      	mov	r8, r7
    6728:	4607      	mov	r7, r0
    672a:	f103 0901 	add.w	r9, r3, #1
    672e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    6732:	4413      	add	r3, r2
    6734:	9305      	str	r3, [sp, #20]
    6736:	f00a 0301 	and.w	r3, sl, #1
    673a:	9304      	str	r3, [sp, #16]
    673c:	4631      	mov	r1, r6
    673e:	ee18 0a10 	vmov	r0, s16
    6742:	f00e fc2c 	bl	14f9e <quorem>
    6746:	4641      	mov	r1, r8
    6748:	9002      	str	r0, [sp, #8]
    674a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    674e:	ee18 0a10 	vmov	r0, s16
    6752:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    6756:	f00e fe94 	bl	15482 <__mcmp>
    675a:	463a      	mov	r2, r7
    675c:	9003      	str	r0, [sp, #12]
    675e:	4631      	mov	r1, r6
    6760:	4620      	mov	r0, r4
    6762:	f00b f91b 	bl	1199c <__mdiff>
    6766:	68c2      	ldr	r2, [r0, #12]
    6768:	4605      	mov	r5, r0
    676a:	bb02      	cbnz	r2, 67ae <_dtoa_r+0xa5e>
    676c:	4601      	mov	r1, r0
    676e:	ee18 0a10 	vmov	r0, s16
    6772:	f00e fe86 	bl	15482 <__mcmp>
    6776:	4602      	mov	r2, r0
    6778:	4629      	mov	r1, r5
    677a:	4620      	mov	r0, r4
    677c:	9207      	str	r2, [sp, #28]
    677e:	f00a fed1 	bl	11524 <_Bfree>
    6782:	464d      	mov	r5, r9
    6784:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    6788:	ea43 0102 	orr.w	r1, r3, r2
    678c:	9b04      	ldr	r3, [sp, #16]
    678e:	430b      	orrs	r3, r1
    6790:	d10f      	bne.n	67b2 <_dtoa_r+0xa62>
    6792:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    6796:	d02a      	beq.n	67ee <_dtoa_r+0xa9e>
    6798:	9b03      	ldr	r3, [sp, #12]
    679a:	2b00      	cmp	r3, #0
    679c:	dd02      	ble.n	67a4 <_dtoa_r+0xa54>
    679e:	9b02      	ldr	r3, [sp, #8]
    67a0:	f103 0a31 	add.w	sl, r3, #49	; 0x31
    67a4:	f88b a000 	strb.w	sl, [fp]
    67a8:	e775      	b.n	6696 <_dtoa_r+0x946>
    67aa:	4638      	mov	r0, r7
    67ac:	e7ba      	b.n	6724 <_dtoa_r+0x9d4>
    67ae:	2201      	movs	r2, #1
    67b0:	e7e2      	b.n	6778 <_dtoa_r+0xa28>
    67b2:	9b03      	ldr	r3, [sp, #12]
    67b4:	2b00      	cmp	r3, #0
    67b6:	db04      	blt.n	67c2 <_dtoa_r+0xa72>
    67b8:	9906      	ldr	r1, [sp, #24]
    67ba:	430b      	orrs	r3, r1
    67bc:	9904      	ldr	r1, [sp, #16]
    67be:	430b      	orrs	r3, r1
    67c0:	d122      	bne.n	6808 <_dtoa_r+0xab8>
    67c2:	2a00      	cmp	r2, #0
    67c4:	ddee      	ble.n	67a4 <_dtoa_r+0xa54>
    67c6:	ee18 1a10 	vmov	r1, s16
    67ca:	2201      	movs	r2, #1
    67cc:	4620      	mov	r0, r4
    67ce:	f00b f875 	bl	118bc <__lshift>
    67d2:	4631      	mov	r1, r6
    67d4:	ee08 0a10 	vmov	s16, r0
    67d8:	f00e fe53 	bl	15482 <__mcmp>
    67dc:	2800      	cmp	r0, #0
    67de:	dc03      	bgt.n	67e8 <_dtoa_r+0xa98>
    67e0:	d1e0      	bne.n	67a4 <_dtoa_r+0xa54>
    67e2:	f01a 0f01 	tst.w	sl, #1
    67e6:	d0dd      	beq.n	67a4 <_dtoa_r+0xa54>
    67e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    67ec:	d1d7      	bne.n	679e <_dtoa_r+0xa4e>
    67ee:	2339      	movs	r3, #57	; 0x39
    67f0:	f88b 3000 	strb.w	r3, [fp]
    67f4:	462b      	mov	r3, r5
    67f6:	461d      	mov	r5, r3
    67f8:	3b01      	subs	r3, #1
    67fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    67fe:	2a39      	cmp	r2, #57	; 0x39
    6800:	d070      	beq.n	68e4 <_dtoa_r+0xb94>
    6802:	3201      	adds	r2, #1
    6804:	701a      	strb	r2, [r3, #0]
    6806:	e746      	b.n	6696 <_dtoa_r+0x946>
    6808:	2a00      	cmp	r2, #0
    680a:	dd07      	ble.n	681c <_dtoa_r+0xacc>
    680c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    6810:	d0ed      	beq.n	67ee <_dtoa_r+0xa9e>
    6812:	f10a 0301 	add.w	r3, sl, #1
    6816:	f88b 3000 	strb.w	r3, [fp]
    681a:	e73c      	b.n	6696 <_dtoa_r+0x946>
    681c:	9b05      	ldr	r3, [sp, #20]
    681e:	f809 ac01 	strb.w	sl, [r9, #-1]
    6822:	4599      	cmp	r9, r3
    6824:	d046      	beq.n	68b4 <_dtoa_r+0xb64>
    6826:	ee18 1a10 	vmov	r1, s16
    682a:	2300      	movs	r3, #0
    682c:	220a      	movs	r2, #10
    682e:	4620      	mov	r0, r4
    6830:	f00a fe9a 	bl	11568 <__multadd>
    6834:	45b8      	cmp	r8, r7
    6836:	ee08 0a10 	vmov	s16, r0
    683a:	f04f 0300 	mov.w	r3, #0
    683e:	f04f 020a 	mov.w	r2, #10
    6842:	4641      	mov	r1, r8
    6844:	4620      	mov	r0, r4
    6846:	d106      	bne.n	6856 <_dtoa_r+0xb06>
    6848:	f00a fe8e 	bl	11568 <__multadd>
    684c:	4680      	mov	r8, r0
    684e:	4607      	mov	r7, r0
    6850:	f109 0901 	add.w	r9, r9, #1
    6854:	e772      	b.n	673c <_dtoa_r+0x9ec>
    6856:	f00a fe87 	bl	11568 <__multadd>
    685a:	4639      	mov	r1, r7
    685c:	4680      	mov	r8, r0
    685e:	2300      	movs	r3, #0
    6860:	220a      	movs	r2, #10
    6862:	4620      	mov	r0, r4
    6864:	f00a fe80 	bl	11568 <__multadd>
    6868:	4607      	mov	r7, r0
    686a:	e7f1      	b.n	6850 <_dtoa_r+0xb00>
    686c:	9b03      	ldr	r3, [sp, #12]
    686e:	9302      	str	r3, [sp, #8]
    6870:	9d01      	ldr	r5, [sp, #4]
    6872:	4631      	mov	r1, r6
    6874:	ee18 0a10 	vmov	r0, s16
    6878:	f00e fb91 	bl	14f9e <quorem>
    687c:	9b01      	ldr	r3, [sp, #4]
    687e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    6882:	f805 ab01 	strb.w	sl, [r5], #1
    6886:	1aea      	subs	r2, r5, r3
    6888:	9b02      	ldr	r3, [sp, #8]
    688a:	4293      	cmp	r3, r2
    688c:	dd09      	ble.n	68a2 <_dtoa_r+0xb52>
    688e:	ee18 1a10 	vmov	r1, s16
    6892:	2300      	movs	r3, #0
    6894:	220a      	movs	r2, #10
    6896:	4620      	mov	r0, r4
    6898:	f00a fe66 	bl	11568 <__multadd>
    689c:	ee08 0a10 	vmov	s16, r0
    68a0:	e7e7      	b.n	6872 <_dtoa_r+0xb22>
    68a2:	9b02      	ldr	r3, [sp, #8]
    68a4:	f04f 0800 	mov.w	r8, #0
    68a8:	2b00      	cmp	r3, #0
    68aa:	bfcc      	ite	gt
    68ac:	461d      	movgt	r5, r3
    68ae:	2501      	movle	r5, #1
    68b0:	9b01      	ldr	r3, [sp, #4]
    68b2:	441d      	add	r5, r3
    68b4:	ee18 1a10 	vmov	r1, s16
    68b8:	2201      	movs	r2, #1
    68ba:	4620      	mov	r0, r4
    68bc:	f00a fffe 	bl	118bc <__lshift>
    68c0:	4631      	mov	r1, r6
    68c2:	ee08 0a10 	vmov	s16, r0
    68c6:	f00e fddc 	bl	15482 <__mcmp>
    68ca:	2800      	cmp	r0, #0
    68cc:	dc92      	bgt.n	67f4 <_dtoa_r+0xaa4>
    68ce:	d102      	bne.n	68d6 <_dtoa_r+0xb86>
    68d0:	f01a 0f01 	tst.w	sl, #1
    68d4:	d18e      	bne.n	67f4 <_dtoa_r+0xaa4>
    68d6:	462b      	mov	r3, r5
    68d8:	461d      	mov	r5, r3
    68da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    68de:	2a30      	cmp	r2, #48	; 0x30
    68e0:	d0fa      	beq.n	68d8 <_dtoa_r+0xb88>
    68e2:	e6d8      	b.n	6696 <_dtoa_r+0x946>
    68e4:	9a01      	ldr	r2, [sp, #4]
    68e6:	429a      	cmp	r2, r3
    68e8:	d185      	bne.n	67f6 <_dtoa_r+0xaa6>
    68ea:	9b00      	ldr	r3, [sp, #0]
    68ec:	3301      	adds	r3, #1
    68ee:	9300      	str	r3, [sp, #0]
    68f0:	2331      	movs	r3, #49	; 0x31
    68f2:	7013      	strb	r3, [r2, #0]
    68f4:	e6cf      	b.n	6696 <_dtoa_r+0x946>
    68f6:	4b0a      	ldr	r3, [pc, #40]	; (6920 <_dtoa_r+0xbd0>)
    68f8:	f7ff ba98 	b.w	5e2c <_dtoa_r+0xdc>
    68fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    68fe:	2b00      	cmp	r3, #0
    6900:	f47f aa71 	bne.w	5de6 <_dtoa_r+0x96>
    6904:	4b07      	ldr	r3, [pc, #28]	; (6924 <_dtoa_r+0xbd4>)
    6906:	f7ff ba91 	b.w	5e2c <_dtoa_r+0xdc>
    690a:	9b02      	ldr	r3, [sp, #8]
    690c:	2b00      	cmp	r3, #0
    690e:	dcaf      	bgt.n	6870 <_dtoa_r+0xb20>
    6910:	9b06      	ldr	r3, [sp, #24]
    6912:	2b02      	cmp	r3, #2
    6914:	f73f aea9 	bgt.w	666a <_dtoa_r+0x91a>
    6918:	e7aa      	b.n	6870 <_dtoa_r+0xb20>
    691a:	bf00      	nop
    691c:	000188d3 	.word	0x000188d3
    6920:	0001795a 	.word	0x0001795a
    6924:	00018853 	.word	0x00018853

00006928 <result_ready_cb>:

static size_t frame_surplus;


static void result_ready_cb(int err)
{
    6928:	b510      	push	{r4, lr}
	if (err) {
    692a:	4601      	mov	r1, r0
{
    692c:	b086      	sub	sp, #24
	if (err) {
    692e:	b128      	cbz	r0, 693c <result_ready_cb+0x14>
		printk("Result ready callback returned error (err: %d)\n", err);
    6930:	4825      	ldr	r0, [pc, #148]	; (69c8 <result_ready_cb+0xa0>)
			printk("Prediction restarted...\n");
		}

		frame_surplus--;
	}
}
    6932:	b006      	add	sp, #24
    6934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Result ready callback returned error (err: %d)\n", err);
    6938:	f00b bc95 	b.w	12266 <printk>
	printk("\nClassification results\n");
    693c:	4823      	ldr	r0, [pc, #140]	; (69cc <result_ready_cb+0xa4>)
    693e:	f00b fc92 	bl	12266 <printk>
	printk("======================\n");
    6942:	4823      	ldr	r0, [pc, #140]	; (69d0 <result_ready_cb+0xa8>)
    6944:	f00b fc8f 	bl	12266 <printk>
		printk("Value: %.2f\tLabel: %s\n", value, label);
    6948:	4c22      	ldr	r4, [pc, #136]	; (69d4 <result_ready_cb+0xac>)
		err = ei_wrapper_get_next_classification_result(&label, &value, NULL);
    694a:	a904      	add	r1, sp, #16
    694c:	2200      	movs	r2, #0
    694e:	a803      	add	r0, sp, #12
    6950:	f003 f9c0 	bl	9cd4 <ei_wrapper_get_next_classification_result>
		if (err) {
    6954:	4601      	mov	r1, r0
    6956:	b158      	cbz	r0, 6970 <result_ready_cb+0x48>
			if (err == -ENOENT) {
    6958:	1c83      	adds	r3, r0, #2
    695a:	d114      	bne.n	6986 <result_ready_cb+0x5e>
		if (ei_wrapper_classifier_has_anomaly()) {
    695c:	f00c fbb9 	bl	130d2 <ei_wrapper_classifier_has_anomaly>
    6960:	b1a0      	cbz	r0, 698c <result_ready_cb+0x64>
			err = ei_wrapper_get_anomaly(&anomaly);
    6962:	a805      	add	r0, sp, #20
    6964:	f003 fa18 	bl	9d98 <ei_wrapper_get_anomaly>
			if (err) {
    6968:	4601      	mov	r1, r0
    696a:	b300      	cbz	r0, 69ae <result_ready_cb+0x86>
				printk("Cannot get anomaly (err: %d)\n", err);
    696c:	481a      	ldr	r0, [pc, #104]	; (69d8 <result_ready_cb+0xb0>)
    696e:	e00b      	b.n	6988 <result_ready_cb+0x60>
		printk("Value: %.2f\tLabel: %s\n", value, label);
    6970:	9804      	ldr	r0, [sp, #16]
    6972:	f7f9 fd55 	bl	420 <__aeabi_f2d>
    6976:	460b      	mov	r3, r1
    6978:	9903      	ldr	r1, [sp, #12]
    697a:	4602      	mov	r2, r0
    697c:	9100      	str	r1, [sp, #0]
    697e:	4620      	mov	r0, r4
    6980:	f00b fc71 	bl	12266 <printk>
		err = ei_wrapper_get_next_classification_result(&label, &value, NULL);
    6984:	e7e1      	b.n	694a <result_ready_cb+0x22>
		printk("Cannot get classification results (err: %d)", err);
    6986:	4815      	ldr	r0, [pc, #84]	; (69dc <result_ready_cb+0xb4>)
				printk("Cannot get anomaly (err: %d)\n", err);
    6988:	f00b fc6d 	bl	12266 <printk>
	if (frame_surplus > 0) {
    698c:	4c14      	ldr	r4, [pc, #80]	; (69e0 <result_ready_cb+0xb8>)
    698e:	6823      	ldr	r3, [r4, #0]
    6990:	b15b      	cbz	r3, 69aa <result_ready_cb+0x82>
		err = ei_wrapper_start_prediction(0, 1);
    6992:	2101      	movs	r1, #1
    6994:	2000      	movs	r0, #0
    6996:	f003 f951 	bl	9c3c <ei_wrapper_start_prediction>
		if (err) {
    699a:	4601      	mov	r1, r0
    699c:	b180      	cbz	r0, 69c0 <result_ready_cb+0x98>
			printk("Cannot restart prediction (err: %d)\n", err);
    699e:	4811      	ldr	r0, [pc, #68]	; (69e4 <result_ready_cb+0xbc>)
    69a0:	f00b fc61 	bl	12266 <printk>
		frame_surplus--;
    69a4:	6823      	ldr	r3, [r4, #0]
    69a6:	3b01      	subs	r3, #1
    69a8:	6023      	str	r3, [r4, #0]
}
    69aa:	b006      	add	sp, #24
    69ac:	bd10      	pop	{r4, pc}
				printk("Anomaly: %.2f\n", anomaly);
    69ae:	9805      	ldr	r0, [sp, #20]
    69b0:	f7f9 fd36 	bl	420 <__aeabi_f2d>
    69b4:	4602      	mov	r2, r0
    69b6:	460b      	mov	r3, r1
    69b8:	480b      	ldr	r0, [pc, #44]	; (69e8 <result_ready_cb+0xc0>)
    69ba:	f00b fc54 	bl	12266 <printk>
    69be:	e7e5      	b.n	698c <result_ready_cb+0x64>
			printk("Prediction restarted...\n");
    69c0:	480a      	ldr	r0, [pc, #40]	; (69ec <result_ready_cb+0xc4>)
    69c2:	f00b fc50 	bl	12266 <printk>
    69c6:	e7ed      	b.n	69a4 <result_ready_cb+0x7c>
    69c8:	00017570 	.word	0x00017570
    69cc:	000175a0 	.word	0x000175a0
    69d0:	000175b9 	.word	0x000175b9
    69d4:	000175d1 	.word	0x000175d1
    69d8:	00017614 	.word	0x00017614
    69dc:	000175e8 	.word	0x000175e8
    69e0:	20000880 	.word	0x20000880
    69e4:	00017641 	.word	0x00017641
    69e8:	00017632 	.word	0x00017632
    69ec:	00017666 	.word	0x00017666

000069f0 <main>:

void main(void)
{
    69f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    69f2:	4c52      	ldr	r4, [pc, #328]	; (6b3c <main+0x14c>)
    69f4:	4620      	mov	r0, r4
    69f6:	f00c fdaa 	bl	1354e <z_device_is_ready>
int ret;

	if (!device_is_ready(led.port)) {
    69fa:	2800      	cmp	r0, #0
    69fc:	f000 8085 	beq.w	6b0a <main+0x11a>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    6a00:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    6a02:	68a6      	ldr	r6, [r4, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6a04:	6813      	ldr	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
    6a06:	2108      	movs	r1, #8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a0c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    6a0e:	4620      	mov	r0, r4
    6a10:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    6a14:	6833      	ldr	r3, [r6, #0]
    6a16:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
    6a18:	2800      	cmp	r0, #0
    6a1a:	db76      	blt.n	6b0a <main+0x11a>
    6a1c:	2507      	movs	r5, #7
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    6a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
    6a22:	4620      	mov	r0, r4
    6a24:	6973      	ldr	r3, [r6, #20]
    6a26:	4798      	blx	r3
		return;
	}

	for (int j = 0; j < 7; j++) {
		ret = gpio_pin_toggle_dt(&led);
		if (ret < 0) {
    6a28:	2800      	cmp	r0, #0
    6a2a:	db6e      	blt.n	6b0a <main+0x11a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    6a2c:	f242 6067 	movw	r0, #9831	; 0x2667
    6a30:	2100      	movs	r1, #0
    6a32:	f005 fded 	bl	c610 <z_impl_k_sleep>
	for (int j = 0; j < 7; j++) {
    6a36:	3d01      	subs	r5, #1
    6a38:	d1f1      	bne.n	6a1e <main+0x2e>
			return;
		}
		k_msleep(SLEEP_TIME_MS);
	}
	printk("\nDebug node\n");
    6a3a:	4841      	ldr	r0, [pc, #260]	; (6b40 <main+0x150>)
    6a3c:	f00b fc13 	bl	12266 <printk>


	int err = ei_wrapper_init(result_ready_cb);
    6a40:	4840      	ldr	r0, [pc, #256]	; (6b44 <main+0x154>)
    6a42:	f003 f9bb 	bl	9dbc <ei_wrapper_init>

	if (err) {
    6a46:	4601      	mov	r1, r0
    6a48:	b128      	cbz	r0, 6a56 <main+0x66>
		printk("Edge Impulse wrapper failed to initialize (err: %d)\n",
    6a4a:	483f      	ldr	r0, [pc, #252]	; (6b48 <main+0x158>)
		}
		cnt += ei_wrapper_get_frame_size();

		k_sleep(K_MSEC(FRAME_ADD_INTERVAL_MS));
	}
}
    6a4c:	b002      	add	sp, #8
    6a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Edge Impulse wrapper failed to initialize (err: %d)\n",
    6a52:	f00b bc08 	b.w	12266 <printk>
	if (ARRAY_SIZE(input_data) < ei_wrapper_get_window_size()) {
    6a56:	f00c fb40 	bl	130da <ei_wrapper_get_window_size>
    6a5a:	f5b0 7fbc 	cmp.w	r0, #376	; 0x178
    6a5e:	d305      	bcc.n	6a6c <main+0x7c>
		printk("Not enough input data\n");
    6a60:	483a      	ldr	r0, [pc, #232]	; (6b4c <main+0x15c>)
}
    6a62:	b002      	add	sp, #8
    6a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Increase CONFIG_EI_WRAPPER_DATA_BUF_SIZE\n");
    6a68:	f00b bbfd 	b.w	12266 <printk>
	if (ARRAY_SIZE(input_data) % ei_wrapper_get_frame_size() != 0) {
    6a6c:	f00c fb33 	bl	130d6 <ei_wrapper_get_frame_size>
    6a70:	f240 1477 	movw	r4, #375	; 0x177
    6a74:	fbb4 f3f0 	udiv	r3, r4, r0
    6a78:	fb03 4410 	mls	r4, r3, r0, r4
    6a7c:	b10c      	cbz	r4, 6a82 <main+0x92>
		printk("Improper number of input samples\n");
    6a7e:	4834      	ldr	r0, [pc, #208]	; (6b50 <main+0x160>)
    6a80:	e7ef      	b.n	6a62 <main+0x72>
	printk("Machine learning model sampling frequency: %zu\n",
    6a82:	f00c fb2d 	bl	130e0 <ei_wrapper_get_classifier_frequency>
    6a86:	4601      	mov	r1, r0
    6a88:	4832      	ldr	r0, [pc, #200]	; (6b54 <main+0x164>)
    6a8a:	f00b fbec 	bl	12266 <printk>
	printk("Labels assigned by the model:\n");
    6a8e:	4832      	ldr	r0, [pc, #200]	; (6b58 <main+0x168>)
    6a90:	f00b fbe9 	bl	12266 <printk>
		printk("- %s\n", ei_wrapper_get_classifier_label(i));
    6a94:	4d31      	ldr	r5, [pc, #196]	; (6b5c <main+0x16c>)
	for (size_t i = 0; i < ei_wrapper_get_classifier_label_count(); i++) {
    6a96:	f00c fb25 	bl	130e4 <ei_wrapper_get_classifier_label_count>
    6a9a:	42a0      	cmp	r0, r4
    6a9c:	d80f      	bhi.n	6abe <main+0xce>
	printk("\n");
    6a9e:	4830      	ldr	r0, [pc, #192]	; (6b60 <main+0x170>)
    6aa0:	f00b fbe1 	bl	12266 <printk>
	err = ei_wrapper_add_data(&input_data[cnt],
    6aa4:	f00c fb19 	bl	130da <ei_wrapper_get_window_size>
    6aa8:	4601      	mov	r1, r0
    6aaa:	482e      	ldr	r0, [pc, #184]	; (6b64 <main+0x174>)
    6aac:	f003 f84c 	bl	9b48 <ei_wrapper_add_data>
	if (err) {
    6ab0:	4601      	mov	r1, r0
    6ab2:	b168      	cbz	r0, 6ad0 <main+0xe0>
			printk("Cannot provide input data (err: %d)\n", err);
    6ab4:	482c      	ldr	r0, [pc, #176]	; (6b68 <main+0x178>)
    6ab6:	f00b fbd6 	bl	12266 <printk>
			printk("Increase CONFIG_EI_WRAPPER_DATA_BUF_SIZE\n");
    6aba:	482c      	ldr	r0, [pc, #176]	; (6b6c <main+0x17c>)
    6abc:	e7d1      	b.n	6a62 <main+0x72>
		printk("- %s\n", ei_wrapper_get_classifier_label(i));
    6abe:	4620      	mov	r0, r4
    6ac0:	f003 f838 	bl	9b34 <ei_wrapper_get_classifier_label>
    6ac4:	4601      	mov	r1, r0
    6ac6:	4628      	mov	r0, r5
    6ac8:	f00b fbcd 	bl	12266 <printk>
	for (size_t i = 0; i < ei_wrapper_get_classifier_label_count(); i++) {
    6acc:	3401      	adds	r4, #1
    6ace:	e7e2      	b.n	6a96 <main+0xa6>
    6ad0:	9001      	str	r0, [sp, #4]
	cnt += ei_wrapper_get_window_size();
    6ad2:	f00c fb02 	bl	130da <ei_wrapper_get_window_size>
	err = ei_wrapper_start_prediction(0, 0);
    6ad6:	9901      	ldr	r1, [sp, #4]
	cnt += ei_wrapper_get_window_size();
    6ad8:	4605      	mov	r5, r0
	err = ei_wrapper_start_prediction(0, 0);
    6ada:	4608      	mov	r0, r1
    6adc:	f003 f8ae 	bl	9c3c <ei_wrapper_start_prediction>
	if (err) {
    6ae0:	4601      	mov	r1, r0
    6ae2:	b1a0      	cbz	r0, 6b0e <main+0x11e>
		printk("Cannot start prediction (err: %d)\n", err);
    6ae4:	4822      	ldr	r0, [pc, #136]	; (6b70 <main+0x180>)
    6ae6:	f00b fbbe 	bl	12266 <printk>
	frame_surplus = (ARRAY_SIZE(input_data) - ei_wrapper_get_window_size())
    6aea:	f00c faf6 	bl	130da <ei_wrapper_get_window_size>
    6aee:	4604      	mov	r4, r0
			/ ei_wrapper_get_frame_size();
    6af0:	f00c faf1 	bl	130d6 <ei_wrapper_get_frame_size>
	frame_surplus = (ARRAY_SIZE(input_data) - ei_wrapper_get_window_size())
    6af4:	f5c4 73bb 	rsb	r3, r4, #374	; 0x176
    6af8:	3301      	adds	r3, #1
			/ ei_wrapper_get_frame_size();
    6afa:	fbb3 f3f0 	udiv	r3, r3, r0
	frame_surplus = (ARRAY_SIZE(input_data) - ei_wrapper_get_window_size())
    6afe:	4a1d      	ldr	r2, [pc, #116]	; (6b74 <main+0x184>)
		err = ei_wrapper_add_data(&input_data[cnt],
    6b00:	4c18      	ldr	r4, [pc, #96]	; (6b64 <main+0x174>)
	frame_surplus = (ARRAY_SIZE(input_data) - ei_wrapper_get_window_size())
    6b02:	6013      	str	r3, [r2, #0]
	while (cnt < ARRAY_SIZE(input_data)) {
    6b04:	f5b5 7fbb 	cmp.w	r5, #374	; 0x176
    6b08:	d905      	bls.n	6b16 <main+0x126>
}
    6b0a:	b002      	add	sp, #8
    6b0c:	bd70      	pop	{r4, r5, r6, pc}
		printk("Prediction started...\n");
    6b0e:	481a      	ldr	r0, [pc, #104]	; (6b78 <main+0x188>)
    6b10:	f00b fba9 	bl	12266 <printk>
    6b14:	e7e9      	b.n	6aea <main+0xfa>
		err = ei_wrapper_add_data(&input_data[cnt],
    6b16:	f00c fade 	bl	130d6 <ei_wrapper_get_frame_size>
    6b1a:	4601      	mov	r1, r0
    6b1c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    6b20:	f003 f812 	bl	9b48 <ei_wrapper_add_data>
		if (err) {
    6b24:	4601      	mov	r1, r0
    6b26:	2800      	cmp	r0, #0
    6b28:	d1c4      	bne.n	6ab4 <main+0xc4>
		cnt += ei_wrapper_get_frame_size();
    6b2a:	f00c fad4 	bl	130d6 <ei_wrapper_get_frame_size>
    6b2e:	4405      	add	r5, r0
    6b30:	2100      	movs	r1, #0
    6b32:	f640 40cd 	movw	r0, #3277	; 0xccd
    6b36:	f005 fd6b 	bl	c610 <z_impl_k_sleep>
    6b3a:	e7e3      	b.n	6b04 <main+0x114>
    6b3c:	00015840 	.word	0x00015840
    6b40:	0001767f 	.word	0x0001767f
    6b44:	00006929 	.word	0x00006929
    6b48:	0001768c 	.word	0x0001768c
    6b4c:	000176c1 	.word	0x000176c1
    6b50:	000176d8 	.word	0x000176d8
    6b54:	000176fa 	.word	0x000176fa
    6b58:	0001772a 	.word	0x0001772a
    6b5c:	00017749 	.word	0x00017749
    6b60:	00017772 	.word	0x00017772
    6b64:	00016148 	.word	0x00016148
    6b68:	0001774f 	.word	0x0001774f
    6b6c:	00017774 	.word	0x00017774
    6b70:	0001779e 	.word	0x0001779e
    6b74:	20000880 	.word	0x20000880
    6b78:	000177c1 	.word	0x000177c1

00006b7c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    6b7c:	680b      	ldr	r3, [r1, #0]
    6b7e:	3301      	adds	r3, #1
    6b80:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    6b82:	4b01      	ldr	r3, [pc, #4]	; (6b88 <char_out+0xc>)
    6b84:	681b      	ldr	r3, [r3, #0]
    6b86:	4718      	bx	r3
    6b88:	20000000 	.word	0x20000000

00006b8c <__printk_hook_install>:
	_char_out = fn;
    6b8c:	4b01      	ldr	r3, [pc, #4]	; (6b94 <__printk_hook_install+0x8>)
    6b8e:	6018      	str	r0, [r3, #0]
}
    6b90:	4770      	bx	lr
    6b92:	bf00      	nop
    6b94:	20000000 	.word	0x20000000

00006b98 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    6b98:	b507      	push	{r0, r1, r2, lr}
    6b9a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    6b9c:	2100      	movs	r1, #0
{
    6b9e:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    6ba0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    6ba2:	4803      	ldr	r0, [pc, #12]	; (6bb0 <vprintk+0x18>)
    6ba4:	a901      	add	r1, sp, #4
    6ba6:	f7fa f9e3 	bl	f70 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    6baa:	b003      	add	sp, #12
    6bac:	f85d fb04 	ldr.w	pc, [sp], #4
    6bb0:	00006b7d 	.word	0x00006b7d

00006bb4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    6bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6bb8:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    6bbc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    6bbe:	f019 0808 	ands.w	r8, r9, #8
{
    6bc2:	4693      	mov	fp, r2
	if (processing) {
    6bc4:	d00e      	beq.n	6be4 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    6bc6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    6bc8:	bf0c      	ite	eq
    6bca:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    6bce:	f049 0920 	orrne.w	r9, r9, #32
    6bd2:	f8a0 901c 	strh.w	r9, [r0, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    6bd6:	f38b 8811 	msr	BASEPRI, fp
    6bda:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    6bde:	b003      	add	sp, #12
    6be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    6be4:	f8df a190 	ldr.w	sl, [pc, #400]	; 6d78 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6be8:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    6bec:	2902      	cmp	r1, #2
    6bee:	d107      	bne.n	6c00 <process_event+0x4c>
			evt = process_recheck(mgr);
    6bf0:	4620      	mov	r0, r4
    6bf2:	f00b fb45 	bl	12280 <process_recheck>
		if (evt == EVT_NOP) {
    6bf6:	2800      	cmp	r0, #0
    6bf8:	d0ed      	beq.n	6bd6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    6bfa:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6bfc:	8ba3      	ldrh	r3, [r4, #28]
		if (evt == EVT_COMPLETE) {
    6bfe:	d14b      	bne.n	6c98 <process_event+0xe4>
			res = mgr->last_res;
    6c00:	69a7      	ldr	r7, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6c02:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
    6c04:	2f00      	cmp	r7, #0
    6c06:	da15      	bge.n	6c34 <process_event+0x80>
		*clients = mgr->clients;
    6c08:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6c0a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    6c0e:	e9c4 8800 	strd	r8, r8, [r4]
    6c12:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    6c16:	83a1      	strh	r1, [r4, #28]
		onoff_transition_fn transit = NULL;
    6c18:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    6c1a:	8ba1      	ldrh	r1, [r4, #28]
    6c1c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    6c20:	454a      	cmp	r2, r9
    6c22:	d002      	beq.n	6c2a <process_event+0x76>
		if (do_monitors
    6c24:	68a3      	ldr	r3, [r4, #8]
    6c26:	2b00      	cmp	r3, #0
    6c28:	d157      	bne.n	6cda <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    6c2a:	b90d      	cbnz	r5, 6c30 <process_event+0x7c>
		    || (transit != NULL)) {
    6c2c:	2e00      	cmp	r6, #0
    6c2e:	d06f      	beq.n	6d10 <process_event+0x15c>
    6c30:	2300      	movs	r3, #0
    6c32:	e053      	b.n	6cdc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6c34:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    6c38:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    6c3a:	2a01      	cmp	r2, #1
    6c3c:	d81d      	bhi.n	6c7a <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6c3e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    6c42:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    6c44:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6c46:	b289      	uxth	r1, r1
    6c48:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    6c4c:	d10a      	bne.n	6c64 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6c4e:	b13d      	cbz	r5, 6c60 <process_event+0xac>
    6c50:	462a      	mov	r2, r5
    6c52:	8be3      	ldrh	r3, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    6c54:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    6c56:	3301      	adds	r3, #1
    6c58:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6c5a:	2a00      	cmp	r2, #0
    6c5c:	d1fa      	bne.n	6c54 <process_event+0xa0>
    6c5e:	83e3      	strh	r3, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6c60:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    6c64:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    6c66:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    6c68:	f00b fb0a 	bl	12280 <process_recheck>
    6c6c:	2800      	cmp	r0, #0
    6c6e:	d0d3      	beq.n	6c18 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6c70:	8ba3      	ldrh	r3, [r4, #28]
    6c72:	f043 0320 	orr.w	r3, r3, #32
    6c76:	83a3      	strh	r3, [r4, #28]
    6c78:	e7ce      	b.n	6c18 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    6c7a:	2b04      	cmp	r3, #4
    6c7c:	d10a      	bne.n	6c94 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6c7e:	f021 0107 	bic.w	r1, r1, #7
    6c82:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    6c84:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    6c86:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    6c88:	f00b fafa 	bl	12280 <process_recheck>
    6c8c:	b110      	cbz	r0, 6c94 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6c8e:	f041 0120 	orr.w	r1, r1, #32
    6c92:	83a1      	strh	r1, [r4, #28]
    6c94:	2500      	movs	r5, #0
    6c96:	e7bf      	b.n	6c18 <process_event+0x64>
		} else if (evt == EVT_START) {
    6c98:	2803      	cmp	r0, #3
    6c9a:	d109      	bne.n	6cb0 <process_event+0xfc>
			transit = mgr->transitions->start;
    6c9c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6c9e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    6ca2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6ca4:	f043 0306 	orr.w	r3, r3, #6
}
    6ca8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    6caa:	83a3      	strh	r3, [r4, #28]
		res = 0;
    6cac:	462f      	mov	r7, r5
    6cae:	e7b4      	b.n	6c1a <process_event+0x66>
		} else if (evt == EVT_STOP) {
    6cb0:	2804      	cmp	r0, #4
    6cb2:	d106      	bne.n	6cc2 <process_event+0x10e>
			transit = mgr->transitions->stop;
    6cb4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6cb6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    6cba:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6cbc:	f043 0304 	orr.w	r3, r3, #4
    6cc0:	e7f2      	b.n	6ca8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    6cc2:	2805      	cmp	r0, #5
    6cc4:	d106      	bne.n	6cd4 <process_event+0x120>
			transit = mgr->transitions->reset;
    6cc6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6cc8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    6ccc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6cce:	f043 0305 	orr.w	r3, r3, #5
    6cd2:	e7e9      	b.n	6ca8 <process_event+0xf4>
    6cd4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    6cd6:	462e      	mov	r6, r5
    6cd8:	e7e8      	b.n	6cac <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    6cda:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    6cdc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    6ce0:	83a1      	strh	r1, [r4, #28]
    6ce2:	f38b 8811 	msr	BASEPRI, fp
    6ce6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    6cea:	bb03      	cbnz	r3, 6d2e <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    6cec:	2d00      	cmp	r5, #0
    6cee:	d131      	bne.n	6d54 <process_event+0x1a0>
			if (transit != NULL) {
    6cf0:	b116      	cbz	r6, 6cf8 <process_event+0x144>
				transit(mgr, transition_complete);
    6cf2:	4651      	mov	r1, sl
    6cf4:	4620      	mov	r0, r4
    6cf6:	47b0      	blx	r6
	__asm__ volatile(
    6cf8:	f04f 0320 	mov.w	r3, #32
    6cfc:	f3ef 8b11 	mrs	fp, BASEPRI
    6d00:	f383 8812 	msr	BASEPRI_MAX, r3
    6d04:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    6d08:	8ba3      	ldrh	r3, [r4, #28]
    6d0a:	f023 0308 	bic.w	r3, r3, #8
    6d0e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    6d10:	8ba3      	ldrh	r3, [r4, #28]
    6d12:	06da      	lsls	r2, r3, #27
    6d14:	d527      	bpl.n	6d66 <process_event+0x1b2>
			evt = EVT_COMPLETE;
    6d16:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    6d18:	f023 0310 	bic.w	r3, r3, #16
    6d1c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    6d1e:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    6d22:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    6d26:	2900      	cmp	r1, #0
    6d28:	f47f af60 	bne.w	6bec <process_event+0x38>
out:
    6d2c:	e753      	b.n	6bd6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    6d2e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    6d30:	2900      	cmp	r1, #0
    6d32:	d0db      	beq.n	6cec <process_event+0x138>
	return node->next;
    6d34:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    6d38:	463b      	mov	r3, r7
    6d3a:	4620      	mov	r0, r4
    6d3c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    6d40:	9201      	str	r2, [sp, #4]
    6d42:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    6d44:	9a01      	ldr	r2, [sp, #4]
    6d46:	f1b9 0f00 	cmp.w	r9, #0
    6d4a:	d0cf      	beq.n	6cec <process_event+0x138>
    6d4c:	4649      	mov	r1, r9
    6d4e:	f8d9 9000 	ldr.w	r9, [r9]
    6d52:	e7f1      	b.n	6d38 <process_event+0x184>
    6d54:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    6d56:	463b      	mov	r3, r7
    6d58:	4620      	mov	r0, r4
    6d5a:	9201      	str	r2, [sp, #4]
    6d5c:	682d      	ldr	r5, [r5, #0]
    6d5e:	f00b faab 	bl	122b8 <notify_one>
	while (!sys_slist_is_empty(list)) {
    6d62:	9a01      	ldr	r2, [sp, #4]
    6d64:	e7c2      	b.n	6cec <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    6d66:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    6d6a:	bf1e      	ittt	ne
    6d6c:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    6d70:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    6d72:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    6d74:	e7d3      	b.n	6d1e <process_event+0x16a>
    6d76:	bf00      	nop
    6d78:	000122e5 	.word	0x000122e5

00006d7c <extract_decimal>:
{
    6d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d7e:	4602      	mov	r2, r0
    6d80:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
    6d82:	270a      	movs	r7, #10
	size_t val = 0;
    6d84:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    6d86:	4e07      	ldr	r6, [pc, #28]	; (6da4 <extract_decimal+0x28>)
    6d88:	460c      	mov	r4, r1
    6d8a:	7823      	ldrb	r3, [r4, #0]
    6d8c:	3101      	adds	r1, #1
    6d8e:	5d9d      	ldrb	r5, [r3, r6]
    6d90:	076d      	lsls	r5, r5, #29
    6d92:	d401      	bmi.n	6d98 <extract_decimal+0x1c>
	*str = sp;
    6d94:	6014      	str	r4, [r2, #0]
}
    6d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    6d98:	fb07 3300 	mla	r3, r7, r0, r3
    6d9c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6da0:	e7f2      	b.n	6d88 <extract_decimal+0xc>
    6da2:	bf00      	nop
    6da4:	00018710 	.word	0x00018710

00006da8 <encode_uint>:
{
    6da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6dac:	4615      	mov	r5, r2
    6dae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6db0:	78d3      	ldrb	r3, [r2, #3]
    6db2:	4a22      	ldr	r2, [pc, #136]	; (6e3c <encode_uint+0x94>)
	switch (specifier) {
    6db4:	2b6f      	cmp	r3, #111	; 0x6f
    6db6:	f813 b002 	ldrb.w	fp, [r3, r2]
{
    6dba:	4680      	mov	r8, r0
    6dbc:	460f      	mov	r7, r1
    6dbe:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    6dc2:	d029      	beq.n	6e18 <encode_uint+0x70>
    6dc4:	d824      	bhi.n	6e10 <encode_uint+0x68>
		return 16;
    6dc6:	2b58      	cmp	r3, #88	; 0x58
    6dc8:	bf14      	ite	ne
    6dca:	260a      	movne	r6, #10
    6dcc:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    6dce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6dd2:	4632      	mov	r2, r6
    6dd4:	2300      	movs	r3, #0
    6dd6:	4640      	mov	r0, r8
    6dd8:	4639      	mov	r1, r7
    6dda:	f7f9 feb3 	bl	b44 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6dde:	2a09      	cmp	r2, #9
    6de0:	b2d4      	uxtb	r4, r2
    6de2:	d81e      	bhi.n	6e22 <encode_uint+0x7a>
    6de4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6de6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6de8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6dea:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6dee:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6df2:	d301      	bcc.n	6df8 <encode_uint+0x50>
    6df4:	45d1      	cmp	r9, sl
    6df6:	d811      	bhi.n	6e1c <encode_uint+0x74>
	if (conv->flag_hash) {
    6df8:	782b      	ldrb	r3, [r5, #0]
    6dfa:	069b      	lsls	r3, r3, #26
    6dfc:	d505      	bpl.n	6e0a <encode_uint+0x62>
		if (radix == 8) {
    6dfe:	2e08      	cmp	r6, #8
    6e00:	d115      	bne.n	6e2e <encode_uint+0x86>
			conv->altform_0 = true;
    6e02:	78ab      	ldrb	r3, [r5, #2]
    6e04:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6e08:	70ab      	strb	r3, [r5, #2]
}
    6e0a:	4648      	mov	r0, r9
    6e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6e10:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6e14:	2b70      	cmp	r3, #112	; 0x70
    6e16:	e7d7      	b.n	6dc8 <encode_uint+0x20>
	switch (specifier) {
    6e18:	2608      	movs	r6, #8
    6e1a:	e7d8      	b.n	6dce <encode_uint+0x26>
		value /= radix;
    6e1c:	4680      	mov	r8, r0
    6e1e:	460f      	mov	r7, r1
    6e20:	e7d7      	b.n	6dd2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6e22:	f1bb 0f01 	cmp.w	fp, #1
    6e26:	bf0c      	ite	eq
    6e28:	3437      	addeq	r4, #55	; 0x37
    6e2a:	3457      	addne	r4, #87	; 0x57
    6e2c:	e7db      	b.n	6de6 <encode_uint+0x3e>
		} else if (radix == 16) {
    6e2e:	2e10      	cmp	r6, #16
    6e30:	d1eb      	bne.n	6e0a <encode_uint+0x62>
			conv->altform_0c = true;
    6e32:	78ab      	ldrb	r3, [r5, #2]
    6e34:	f043 0310 	orr.w	r3, r3, #16
    6e38:	e7e6      	b.n	6e08 <encode_uint+0x60>
    6e3a:	bf00      	nop
    6e3c:	00018710 	.word	0x00018710

00006e40 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    6e40:	b508      	push	{r3, lr}
    6e42:	f04f 0220 	mov.w	r2, #32
    6e46:	f3ef 8311 	mrs	r3, BASEPRI
    6e4a:	f382 8812 	msr	BASEPRI_MAX, r2
    6e4e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    6e52:	f000 fd4b 	bl	78ec <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    6e56:	4803      	ldr	r0, [pc, #12]	; (6e64 <sys_reboot+0x24>)
    6e58:	f00b fa05 	bl	12266 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    6e5c:	f000 faa6 	bl	73ac <arch_cpu_idle>
    6e60:	e7fc      	b.n	6e5c <sys_reboot+0x1c>
    6e62:	bf00      	nop
    6e64:	000177de 	.word	0x000177de

00006e68 <nrf_gpio_pin_mcu_select.constprop.0>:

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    6e68:	4b05      	ldr	r3, [pc, #20]	; (6e80 <nrf_gpio_pin_mcu_select.constprop.0+0x18>)
    6e6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e6e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    6e72:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    6e76:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    6e7a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    6e7e:	4770      	bx	lr
    6e80:	50842500 	.word	0x50842500

00006e84 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    6e84:	b510      	push	{r4, lr}
    6e86:	f04f 0320 	mov.w	r3, #32
    6e8a:	f3ef 8411 	mrs	r4, BASEPRI
    6e8e:	f383 8812 	msr	BASEPRI_MAX, r3
    6e92:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    6e96:	2201      	movs	r2, #1
    6e98:	4b0c      	ldr	r3, [pc, #48]	; (6ecc <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    6e9a:	490d      	ldr	r1, [pc, #52]	; (6ed0 <nordicsemi_nrf53_init+0x4c>)
    6e9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    6ea0:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    6ea2:	2000      	movs	r0, #0
    6ea4:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    6ea8:	f7ff ffde 	bl	6e68 <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    6eac:	4610      	mov	r0, r2
    6eae:	f7ff ffdb 	bl	6e68 <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    6eb2:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    6eb6:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    6eba:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    6ebe:	f384 8811 	msr	BASEPRI, r4
    6ec2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6ec6:	2000      	movs	r0, #0
    6ec8:	bd10      	pop	{r4, pc}
    6eca:	bf00      	nop
    6ecc:	50001000 	.word	0x50001000
    6ed0:	50004000 	.word	0x50004000

00006ed4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6ed4:	b148      	cbz	r0, 6eea <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    6ed6:	4b05      	ldr	r3, [pc, #20]	; (6eec <arch_busy_wait+0x18>)
    6ed8:	681a      	ldr	r2, [r3, #0]
    6eda:	4b05      	ldr	r3, [pc, #20]	; (6ef0 <arch_busy_wait+0x1c>)
    6edc:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6ee0:	4b04      	ldr	r3, [pc, #16]	; (6ef4 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    6ee2:	4350      	muls	r0, r2
    6ee4:	f043 0301 	orr.w	r3, r3, #1
    6ee8:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6eea:	4770      	bx	lr
    6eec:	20000134 	.word	0x20000134
    6ef0:	000f4240 	.word	0x000f4240
    6ef4:	00015b70 	.word	0x00015b70

00006ef8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6ef8:	2806      	cmp	r0, #6
    6efa:	d107      	bne.n	6f0c <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    6efc:	2201      	movs	r2, #1
    6efe:	4b04      	ldr	r3, [pc, #16]	; (6f10 <pm_state_set+0x18>)
    6f00:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6f04:	f3bf 8f4f 	dsb	sy
        __WFE();
    6f08:	bf20      	wfe
    while (true)
    6f0a:	e7fd      	b.n	6f08 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6f0c:	4770      	bx	lr
    6f0e:	bf00      	nop
    6f10:	50004000 	.word	0x50004000

00006f14 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    6f14:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    6f16:	4c04      	ldr	r4, [pc, #16]	; (6f28 <__do_init_array_aux+0x14>)
    6f18:	4d04      	ldr	r5, [pc, #16]	; (6f2c <__do_init_array_aux+0x18>)
    6f1a:	42ac      	cmp	r4, r5
    6f1c:	d300      	bcc.n	6f20 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    6f1e:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    6f20:	f854 3b04 	ldr.w	r3, [r4], #4
    6f24:	4798      	blx	r3
		func++) {
    6f26:	e7f8      	b.n	6f1a <__do_init_array_aux+0x6>
    6f28:	00015b00 	.word	0x00015b00
    6f2c:	00015b04 	.word	0x00015b04

00006f30 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    6f30:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    6f32:	4c05      	ldr	r4, [pc, #20]	; (6f48 <__do_global_ctors_aux+0x18>)
    6f34:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    6f36:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    6f3a:	b905      	cbnz	r5, 6f3e <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    6f3c:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    6f3e:	f854 3904 	ldr.w	r3, [r4], #-4
    6f42:	3d01      	subs	r5, #1
    6f44:	4798      	blx	r3
    6f46:	e7f8      	b.n	6f3a <__do_global_ctors_aux+0xa>
    6f48:	00015af8 	.word	0x00015af8

00006f4c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f50:	4605      	mov	r5, r0
	__asm__ volatile(
    6f52:	f04f 0320 	mov.w	r3, #32
    6f56:	f3ef 8611 	mrs	r6, BASEPRI
    6f5a:	f383 8812 	msr	BASEPRI_MAX, r3
    6f5e:	f3bf 8f6f 	isb	sy
	return list->head;
    6f62:	4b0e      	ldr	r3, [pc, #56]	; (6f9c <pm_state_notify+0x50>)
    6f64:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6f66:	b19c      	cbz	r4, 6f90 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    6f68:	f04f 090c 	mov.w	r9, #12
    6f6c:	4f0c      	ldr	r7, [pc, #48]	; (6fa0 <pm_state_notify+0x54>)
    6f6e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 6fa4 <pm_state_notify+0x58>
			callback = notifier->state_exit;
    6f72:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6f76:	2d00      	cmp	r5, #0
    6f78:	bf08      	it	eq
    6f7a:	4613      	moveq	r3, r2
		if (callback) {
    6f7c:	b12b      	cbz	r3, 6f8a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    6f7e:	f898 2014 	ldrb.w	r2, [r8, #20]
    6f82:	fb09 f202 	mul.w	r2, r9, r2
    6f86:	5cb8      	ldrb	r0, [r7, r2]
    6f88:	4798      	blx	r3
	return node->next;
    6f8a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6f8c:	2c00      	cmp	r4, #0
    6f8e:	d1f0      	bne.n	6f72 <pm_state_notify+0x26>
	__asm__ volatile(
    6f90:	f386 8811 	msr	BASEPRI, r6
    6f94:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f9c:	20000888 	.word	0x20000888
    6fa0:	20000890 	.word	0x20000890
    6fa4:	20003680 	.word	0x20003680

00006fa8 <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    6fa8:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6faa:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    6fac:	f000 001f 	and.w	r0, r0, #31
    6fb0:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6fb4:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6fb6:	4b05      	ldr	r3, [pc, #20]	; (6fcc <atomic_clear_bit.constprop.0+0x24>)
    6fb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6fbc:	e8d3 2fef 	ldaex	r2, [r3]
    6fc0:	4002      	ands	r2, r0
    6fc2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6fc6:	2900      	cmp	r1, #0
    6fc8:	d1f8      	bne.n	6fbc <atomic_clear_bit.constprop.0+0x14>
}
    6fca:	4770      	bx	lr
    6fcc:	2000089c 	.word	0x2000089c

00006fd0 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    6fd0:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    6fd2:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    6fd4:	4b17      	ldr	r3, [pc, #92]	; (7034 <pm_system_resume+0x64>)
    6fd6:	7d1c      	ldrb	r4, [r3, #20]
    6fd8:	f004 031f 	and.w	r3, r4, #31
    6fdc:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6fde:	43d0      	mvns	r0, r2
    6fe0:	4b15      	ldr	r3, [pc, #84]	; (7038 <pm_system_resume+0x68>)
    6fe2:	0961      	lsrs	r1, r4, #5
    6fe4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6fe8:	e8d3 1fef 	ldaex	r1, [r3]
    6fec:	ea01 0500 	and.w	r5, r1, r0
    6ff0:	e8c3 5fec 	stlex	ip, r5, [r3]
    6ff4:	f1bc 0f00 	cmp.w	ip, #0
    6ff8:	d1f6      	bne.n	6fe8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    6ffa:	4211      	tst	r1, r2
    6ffc:	d013      	beq.n	7026 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
    6ffe:	4b0f      	ldr	r3, [pc, #60]	; (703c <pm_system_resume+0x6c>)
    7000:	4d0f      	ldr	r5, [pc, #60]	; (7040 <pm_system_resume+0x70>)
    7002:	b18b      	cbz	r3, 7028 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
    7004:	230c      	movs	r3, #12
    7006:	4363      	muls	r3, r4
    7008:	18ea      	adds	r2, r5, r3
    700a:	7851      	ldrb	r1, [r2, #1]
    700c:	5ce8      	ldrb	r0, [r5, r3]
    700e:	f00b fa62 	bl	124d6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    7012:	2000      	movs	r0, #0
    7014:	f7ff ff9a 	bl	6f4c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    7018:	230c      	movs	r3, #12
    701a:	435c      	muls	r4, r3
    701c:	2300      	movs	r3, #0
    701e:	192a      	adds	r2, r5, r4
    7020:	512b      	str	r3, [r5, r4]
    7022:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    7026:	bd38      	pop	{r3, r4, r5, pc}
    7028:	f383 8811 	msr	BASEPRI, r3
    702c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    7030:	e7ef      	b.n	7012 <pm_system_resume+0x42>
    7032:	bf00      	nop
    7034:	20003680 	.word	0x20003680
    7038:	200008a0 	.word	0x200008a0
    703c:	000124d7 	.word	0x000124d7
    7040:	20000890 	.word	0x20000890

00007044 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    7044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    7048:	4b2f      	ldr	r3, [pc, #188]	; (7108 <pm_system_suspend+0xc4>)
{
    704a:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
    704c:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    704e:	ea4f 1854 	mov.w	r8, r4, lsr #5
    7052:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7056:	4b2d      	ldr	r3, [pc, #180]	; (710c <pm_system_suspend+0xc8>)
    7058:	4443      	add	r3, r8
    705a:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    705e:	f004 091f 	and.w	r9, r4, #31
    7062:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    7066:	f013 0f01 	tst.w	r3, #1
    706a:	4e29      	ldr	r6, [pc, #164]	; (7110 <pm_system_suspend+0xcc>)
    706c:	d10a      	bne.n	7084 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    706e:	4601      	mov	r1, r0
    7070:	4620      	mov	r0, r4
    7072:	f000 f863 	bl	713c <pm_policy_next_state>
		if (info != NULL) {
    7076:	b128      	cbz	r0, 7084 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
    7078:	c807      	ldmia	r0, {r0, r1, r2}
    707a:	230c      	movs	r3, #12
    707c:	fb03 6304 	mla	r3, r3, r4, r6
    7080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    7084:	230c      	movs	r3, #12
    7086:	4363      	muls	r3, r4
    7088:	5cf5      	ldrb	r5, [r6, r3]
    708a:	18f2      	adds	r2, r6, r3
    708c:	b92d      	cbnz	r5, 709a <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    708e:	4620      	mov	r0, r4
    7090:	f7ff ff8a 	bl	6fa8 <atomic_clear_bit.constprop.0>
		ret = false;
    7094:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    7096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    709a:	1c7b      	adds	r3, r7, #1
    709c:	d00f      	beq.n	70be <pm_system_suspend+0x7a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    709e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    70a2:	2100      	movs	r1, #0
    70a4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    70a8:	481a      	ldr	r0, [pc, #104]	; (7114 <pm_system_suspend+0xd0>)
    70aa:	2300      	movs	r3, #0
    70ac:	fbec 0105 	umlal	r0, r1, ip, r5
    70b0:	4a19      	ldr	r2, [pc, #100]	; (7118 <pm_system_suspend+0xd4>)
    70b2:	f7f9 fd47 	bl	b44 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    70b6:	2101      	movs	r1, #1
    70b8:	1a38      	subs	r0, r7, r0
    70ba:	f00c fb9e 	bl	137fa <z_set_timeout_expiry>
	k_sched_lock();
    70be:	f005 f827 	bl	c110 <k_sched_lock>
	pm_state_notify(true);
    70c2:	2001      	movs	r0, #1
    70c4:	f7ff ff42 	bl	6f4c <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    70c8:	2301      	movs	r3, #1
    70ca:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    70ce:	4b13      	ldr	r3, [pc, #76]	; (711c <pm_system_suspend+0xd8>)
    70d0:	4498      	add	r8, r3
    70d2:	e8d8 3fef 	ldaex	r3, [r8]
    70d6:	ea43 0309 	orr.w	r3, r3, r9
    70da:	e8c8 3fe2 	stlex	r2, r3, [r8]
    70de:	2a00      	cmp	r2, #0
    70e0:	d1f7      	bne.n	70d2 <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
    70e2:	4b0f      	ldr	r3, [pc, #60]	; (7120 <pm_system_suspend+0xdc>)
    70e4:	b133      	cbz	r3, 70f4 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    70e6:	230c      	movs	r3, #12
    70e8:	4363      	muls	r3, r4
    70ea:	18f2      	adds	r2, r6, r3
    70ec:	7851      	ldrb	r1, [r2, #1]
    70ee:	5cf0      	ldrb	r0, [r6, r3]
    70f0:	f7ff ff02 	bl	6ef8 <pm_state_set>
	pm_system_resume();
    70f4:	f7ff ff6c 	bl	6fd0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    70f8:	4620      	mov	r0, r4
    70fa:	f7ff ff55 	bl	6fa8 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    70fe:	f005 f9d7 	bl	c4b0 <k_sched_unlock>
	bool ret = true;
    7102:	2001      	movs	r0, #1
    7104:	e7c7      	b.n	7096 <pm_system_suspend+0x52>
    7106:	bf00      	nop
    7108:	20003680 	.word	0x20003680
    710c:	2000089c 	.word	0x2000089c
    7110:	20000890 	.word	0x20000890
    7114:	000f423f 	.word	0x000f423f
    7118:	000f4240 	.word	0x000f4240
    711c:	200008a0 	.word	0x200008a0
    7120:	00006ef9 	.word	0x00006ef9

00007124 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7124:	4b04      	ldr	r3, [pc, #16]	; (7138 <pm_policy_state_lock_is_active+0x14>)
    7126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    712a:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    712e:	3800      	subs	r0, #0
    7130:	bf18      	it	ne
    7132:	2001      	movne	r0, #1
    7134:	4770      	bx	lr
    7136:	bf00      	nop
    7138:	200008a4 	.word	0x200008a4

0000713c <pm_policy_next_state>:
{
    713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7140:	b085      	sub	sp, #20
    7142:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    7144:	a903      	add	r1, sp, #12
    7146:	f000 f847 	bl	71d8 <pm_state_cpu_get_all>
    714a:	f04f 0b00 	mov.w	fp, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    714e:	3801      	subs	r0, #1
    7150:	f8df 807c 	ldr.w	r8, [pc, #124]	; 71d0 <pm_policy_next_state+0x94>
    7154:	f8df a07c 	ldr.w	sl, [pc, #124]	; 71d4 <pm_policy_next_state+0x98>
    7158:	b204      	sxth	r4, r0
    715a:	1c63      	adds	r3, r4, #1
    715c:	d104      	bne.n	7168 <pm_policy_next_state+0x2c>
	return NULL;
    715e:	2600      	movs	r6, #0
}
    7160:	4630      	mov	r0, r6
    7162:	b005      	add	sp, #20
    7164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    7168:	9a03      	ldr	r2, [sp, #12]
    716a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
    716e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
    7172:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    7176:	f7ff ffd5 	bl	7124 <pm_policy_state_lock_is_active>
    717a:	4605      	mov	r5, r0
    717c:	bb10      	cbnz	r0, 71c4 <pm_policy_next_state+0x88>
    717e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    7182:	46c4      	mov	ip, r8
    7184:	4629      	mov	r1, r5
    7186:	6870      	ldr	r0, [r6, #4]
    7188:	4652      	mov	r2, sl
    718a:	fbe0 c109 	umlal	ip, r1, r0, r9
    718e:	465b      	mov	r3, fp
    7190:	4660      	mov	r0, ip
    7192:	f7f9 fcd7 	bl	b44 <__aeabi_uldivmod>
    7196:	46c4      	mov	ip, r8
    7198:	4629      	mov	r1, r5
    719a:	9001      	str	r0, [sp, #4]
    719c:	68b0      	ldr	r0, [r6, #8]
    719e:	465b      	mov	r3, fp
    71a0:	fbe0 c109 	umlal	ip, r1, r0, r9
    71a4:	4652      	mov	r2, sl
    71a6:	4660      	mov	r0, ip
    71a8:	f7f9 fccc 	bl	b44 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    71ac:	4b07      	ldr	r3, [pc, #28]	; (71cc <pm_policy_next_state+0x90>)
    71ae:	681b      	ldr	r3, [r3, #0]
    71b0:	1c59      	adds	r1, r3, #1
    71b2:	d001      	beq.n	71b8 <pm_policy_next_state+0x7c>
    71b4:	4283      	cmp	r3, r0
    71b6:	d905      	bls.n	71c4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    71b8:	1c7a      	adds	r2, r7, #1
    71ba:	d0d1      	beq.n	7160 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    71bc:	9b01      	ldr	r3, [sp, #4]
    71be:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    71c0:	42b8      	cmp	r0, r7
    71c2:	d9cd      	bls.n	7160 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    71c4:	3c01      	subs	r4, #1
    71c6:	b224      	sxth	r4, r4
    71c8:	e7c7      	b.n	715a <pm_policy_next_state+0x1e>
    71ca:	bf00      	nop
    71cc:	20000004 	.word	0x20000004
    71d0:	000f423f 	.word	0x000f423f
    71d4:	000f4240 	.word	0x000f4240

000071d8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    71d8:	b908      	cbnz	r0, 71de <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    71da:	4b02      	ldr	r3, [pc, #8]	; (71e4 <pm_state_cpu_get_all+0xc>)
    71dc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    71de:	2000      	movs	r0, #0
    71e0:	4770      	bx	lr
    71e2:	bf00      	nop
    71e4:	00016724 	.word	0x00016724

000071e8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    71e8:	4801      	ldr	r0, [pc, #4]	; (71f0 <nrf_cc3xx_platform_abort_init+0x8>)
    71ea:	f00a bef5 	b.w	11fd8 <nrf_cc3xx_platform_set_abort>
    71ee:	bf00      	nop
    71f0:	00016724 	.word	0x00016724

000071f4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    71f4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    71f6:	4604      	mov	r4, r0
    71f8:	b918      	cbnz	r0, 7202 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    71fa:	4b0d      	ldr	r3, [pc, #52]	; (7230 <mutex_free_platform+0x3c>)
    71fc:	480d      	ldr	r0, [pc, #52]	; (7234 <mutex_free_platform+0x40>)
    71fe:	685b      	ldr	r3, [r3, #4]
    7200:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    7202:	6861      	ldr	r1, [r4, #4]
    7204:	2908      	cmp	r1, #8
    7206:	d00d      	beq.n	7224 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    7208:	f031 0304 	bics.w	r3, r1, #4
    720c:	d00a      	beq.n	7224 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    720e:	f011 0102 	ands.w	r1, r1, #2
    7212:	d008      	beq.n	7226 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    7214:	4621      	mov	r1, r4
    7216:	4808      	ldr	r0, [pc, #32]	; (7238 <mutex_free_platform+0x44>)
    7218:	f00c f9df 	bl	135da <k_mem_slab_free>
        mutex->mutex = NULL;
    721c:	2300      	movs	r3, #0
    721e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    7220:	2300      	movs	r3, #0
    7222:	6063      	str	r3, [r4, #4]
}
    7224:	bd10      	pop	{r4, pc}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    7226:	2214      	movs	r2, #20
    7228:	6820      	ldr	r0, [r4, #0]
    722a:	f00d fceb 	bl	14c04 <memset>
    722e:	e7f7      	b.n	7220 <mutex_free_platform+0x2c>
    7230:	20000498 	.word	0x20000498
    7234:	00017807 	.word	0x00017807
    7238:	200008c0 	.word	0x200008c0

0000723c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    723c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    723e:	b340      	cbz	r0, 7292 <mutex_lock_platform+0x56>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    7240:	6843      	ldr	r3, [r0, #4]
    7242:	2b04      	cmp	r3, #4
    7244:	d00b      	beq.n	725e <mutex_lock_platform+0x22>
    7246:	2b08      	cmp	r3, #8
    7248:	d016      	beq.n	7278 <mutex_lock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    724a:	b303      	cbz	r3, 728e <mutex_lock_platform+0x52>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    724c:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    724e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7256:	f004 fe01 	bl	be5c <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    725a:	b158      	cbz	r0, 7274 <mutex_lock_platform+0x38>
    725c:	e015      	b.n	728a <mutex_lock_platform+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    725e:	2201      	movs	r2, #1
    7260:	6803      	ldr	r3, [r0, #0]
    7262:	e8d3 1fef 	ldaex	r1, [r3]
    7266:	2900      	cmp	r1, #0
    7268:	d103      	bne.n	7272 <mutex_lock_platform+0x36>
    726a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    726e:	2800      	cmp	r0, #0
    7270:	d1f7      	bne.n	7262 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    7272:	d10a      	bne.n	728a <mutex_lock_platform+0x4e>
    7274:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    7276:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    7278:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    727a:	4a07      	ldr	r2, [pc, #28]	; (7298 <mutex_lock_platform+0x5c>)
    727c:	781b      	ldrb	r3, [r3, #0]
    727e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    7282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    7286:	2b00      	cmp	r3, #0
    7288:	d0f4      	beq.n	7274 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    728a:	4804      	ldr	r0, [pc, #16]	; (729c <mutex_lock_platform+0x60>)
    728c:	e7f3      	b.n	7276 <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    728e:	4804      	ldr	r0, [pc, #16]	; (72a0 <mutex_lock_platform+0x64>)
    7290:	e7f1      	b.n	7276 <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    7292:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7296:	e7ee      	b.n	7276 <mutex_lock_platform+0x3a>
    7298:	50030000 	.word	0x50030000
    729c:	ffff8fe9 	.word	0xffff8fe9
    72a0:	ffff8fea 	.word	0xffff8fea

000072a4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    72a4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    72a6:	b308      	cbz	r0, 72ec <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    72a8:	6843      	ldr	r3, [r0, #4]
    72aa:	2b04      	cmp	r3, #4
    72ac:	d007      	beq.n	72be <mutex_unlock_platform+0x1a>
    72ae:	2b08      	cmp	r3, #8
    72b0:	d013      	beq.n	72da <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    72b2:	b1f3      	cbz	r3, 72f2 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    72b4:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    72b6:	f004 fe49 	bl	bf4c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    72ba:	2000      	movs	r0, #0
    72bc:	e00c      	b.n	72d8 <mutex_unlock_platform+0x34>
    72be:	2200      	movs	r2, #0
    72c0:	6803      	ldr	r3, [r0, #0]
    72c2:	e8d3 1fef 	ldaex	r1, [r3]
    72c6:	2901      	cmp	r1, #1
    72c8:	d103      	bne.n	72d2 <mutex_unlock_platform+0x2e>
    72ca:	e8c3 2fe0 	stlex	r0, r2, [r3]
    72ce:	2800      	cmp	r0, #0
    72d0:	d1f7      	bne.n	72c2 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    72d2:	4809      	ldr	r0, [pc, #36]	; (72f8 <mutex_unlock_platform+0x54>)
    72d4:	bf08      	it	eq
    72d6:	4610      	moveq	r0, r2
    }
}
    72d8:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    72da:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    72dc:	2000      	movs	r0, #0
    72de:	781b      	ldrb	r3, [r3, #0]
    72e0:	4a06      	ldr	r2, [pc, #24]	; (72fc <mutex_unlock_platform+0x58>)
    72e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    72e6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    72ea:	e7f5      	b.n	72d8 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    72ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    72f0:	e7f2      	b.n	72d8 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    72f2:	4803      	ldr	r0, [pc, #12]	; (7300 <mutex_unlock_platform+0x5c>)
    72f4:	e7f0      	b.n	72d8 <mutex_unlock_platform+0x34>
    72f6:	bf00      	nop
    72f8:	ffff8fe9 	.word	0xffff8fe9
    72fc:	50030000 	.word	0x50030000
    7300:	ffff8fea 	.word	0xffff8fea

00007304 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    7304:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    7306:	4604      	mov	r4, r0
    7308:	b918      	cbnz	r0, 7312 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    730a:	4b16      	ldr	r3, [pc, #88]	; (7364 <mutex_init_platform+0x60>)
    730c:	4816      	ldr	r0, [pc, #88]	; (7368 <mutex_init_platform+0x64>)
    730e:	685b      	ldr	r3, [r3, #4]
    7310:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    7312:	6863      	ldr	r3, [r4, #4]
    7314:	2b04      	cmp	r3, #4
    7316:	d023      	beq.n	7360 <mutex_init_platform+0x5c>
    7318:	2b08      	cmp	r3, #8
    731a:	d021      	beq.n	7360 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    731c:	b9cb      	cbnz	r3, 7352 <mutex_init_platform+0x4e>
    731e:	6823      	ldr	r3, [r4, #0]
    7320:	b9bb      	cbnz	r3, 7352 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    7322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    732a:	4621      	mov	r1, r4
    732c:	480f      	ldr	r0, [pc, #60]	; (736c <mutex_init_platform+0x68>)
    732e:	f004 fc93 	bl	bc58 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    7332:	b908      	cbnz	r0, 7338 <mutex_init_platform+0x34>
    7334:	6823      	ldr	r3, [r4, #0]
    7336:	b91b      	cbnz	r3, 7340 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    7338:	4b0a      	ldr	r3, [pc, #40]	; (7364 <mutex_init_platform+0x60>)
    733a:	480d      	ldr	r0, [pc, #52]	; (7370 <mutex_init_platform+0x6c>)
    733c:	685b      	ldr	r3, [r3, #4]
    733e:	4798      	blx	r3
    7340:	2214      	movs	r2, #20
    7342:	2100      	movs	r1, #0
    7344:	6820      	ldr	r0, [r4, #0]
    7346:	f00d fc5d 	bl	14c04 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    734a:	6863      	ldr	r3, [r4, #4]
    734c:	f043 0302 	orr.w	r3, r3, #2
    7350:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    7352:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    7354:	f00c f982 	bl	1365c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    7358:	6863      	ldr	r3, [r4, #4]
    735a:	f043 0301 	orr.w	r3, r3, #1
    735e:	6063      	str	r3, [r4, #4]
}
    7360:	bd10      	pop	{r4, pc}
    7362:	bf00      	nop
    7364:	20000498 	.word	0x20000498
    7368:	00017807 	.word	0x00017807
    736c:	200008c0 	.word	0x200008c0
    7370:	0001782d 	.word	0x0001782d

00007374 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    7374:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    7376:	4906      	ldr	r1, [pc, #24]	; (7390 <nrf_cc3xx_platform_mutex_init+0x1c>)
    7378:	2340      	movs	r3, #64	; 0x40
    737a:	2214      	movs	r2, #20
    737c:	4805      	ldr	r0, [pc, #20]	; (7394 <nrf_cc3xx_platform_mutex_init+0x20>)
    737e:	f00c f910 	bl	135a2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    7382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    7386:	4904      	ldr	r1, [pc, #16]	; (7398 <nrf_cc3xx_platform_mutex_init+0x24>)
    7388:	4804      	ldr	r0, [pc, #16]	; (739c <nrf_cc3xx_platform_mutex_init+0x28>)
    738a:	f00a be87 	b.w	1209c <nrf_cc3xx_platform_set_mutexes>
    738e:	bf00      	nop
    7390:	200008e0 	.word	0x200008e0
    7394:	200008c0 	.word	0x200008c0
    7398:	0001673c 	.word	0x0001673c
    739c:	0001672c 	.word	0x0001672c

000073a0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    73a0:	4901      	ldr	r1, [pc, #4]	; (73a8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    73a2:	2210      	movs	r2, #16
	str	r2, [r1]
    73a4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    73a6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    73a8:	e000ed10 	.word	0xe000ed10

000073ac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    73ac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    73ae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    73b0:	f380 8811 	msr	BASEPRI, r0
	isb
    73b4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    73b8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    73bc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    73be:	b662      	cpsie	i
	isb
    73c0:	f3bf 8f6f 	isb	sy

	bx	lr
    73c4:	4770      	bx	lr
    73c6:	bf00      	nop

000073c8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    73c8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    73ca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    73cc:	f381 8811 	msr	BASEPRI, r1

	wfe
    73d0:	bf20      	wfe

	msr	BASEPRI, r0
    73d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    73d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    73d8:	4770      	bx	lr
    73da:	bf00      	nop

000073dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    73dc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    73de:	2b00      	cmp	r3, #0
    73e0:	db08      	blt.n	73f4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    73e2:	2201      	movs	r2, #1
    73e4:	f000 001f 	and.w	r0, r0, #31
    73e8:	fa02 f000 	lsl.w	r0, r2, r0
    73ec:	4a02      	ldr	r2, [pc, #8]	; (73f8 <arch_irq_enable+0x1c>)
    73ee:	095b      	lsrs	r3, r3, #5
    73f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    73f4:	4770      	bx	lr
    73f6:	bf00      	nop
    73f8:	e000e100 	.word	0xe000e100

000073fc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    73fc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    73fe:	2b00      	cmp	r3, #0
    7400:	db0d      	blt.n	741e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7402:	2201      	movs	r2, #1
    7404:	f000 001f 	and.w	r0, r0, #31
    7408:	fa02 f000 	lsl.w	r0, r2, r0
    740c:	095b      	lsrs	r3, r3, #5
    740e:	4a04      	ldr	r2, [pc, #16]	; (7420 <arch_irq_disable+0x24>)
    7410:	3320      	adds	r3, #32
    7412:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    7416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    741a:	f3bf 8f6f 	isb	sy
}
    741e:	4770      	bx	lr
    7420:	e000e100 	.word	0xe000e100

00007424 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    7424:	4b05      	ldr	r3, [pc, #20]	; (743c <arch_irq_is_enabled+0x18>)
    7426:	0942      	lsrs	r2, r0, #5
    7428:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    742c:	2301      	movs	r3, #1
    742e:	f000 001f 	and.w	r0, r0, #31
    7432:	fa03 f000 	lsl.w	r0, r3, r0
}
    7436:	4010      	ands	r0, r2
    7438:	4770      	bx	lr
    743a:	bf00      	nop
    743c:	e000e100 	.word	0xe000e100

00007440 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    7440:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    7442:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    7444:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7448:	bfac      	ite	ge
    744a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    744e:	4b06      	ldrlt	r3, [pc, #24]	; (7468 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7450:	ea4f 1141 	mov.w	r1, r1, lsl #5
    7454:	b2c9      	uxtb	r1, r1
    7456:	bfab      	itete	ge
    7458:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    745c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7460:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7464:	5419      	strblt	r1, [r3, r0]
}
    7466:	4770      	bx	lr
    7468:	e000ed14 	.word	0xe000ed14

0000746c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    746c:	bf30      	wfi
    b z_SysNmiOnReset
    746e:	f7ff bffd 	b.w	746c <z_SysNmiOnReset>
    7472:	bf00      	nop

00007474 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7474:	4a14      	ldr	r2, [pc, #80]	; (74c8 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    7476:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7478:	4b14      	ldr	r3, [pc, #80]	; (74cc <z_arm_prep_c+0x58>)
    747a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    747e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    7480:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7484:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    7488:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    748c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    7494:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7498:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    749c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    74a0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    74a4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    74a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    74ac:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    74b0:	2300      	movs	r3, #0
    74b2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    74b6:	f004 fb03 	bl	bac0 <z_bss_zero>
	z_data_copy();
    74ba:	f005 f91b 	bl	c6f4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    74be:	f000 f9d9 	bl	7874 <z_arm_interrupt_init>
	z_cstart();
    74c2:	f004 fb3d 	bl	bb40 <z_cstart>
    74c6:	bf00      	nop
    74c8:	00000000 	.word	0x00000000
    74cc:	e000ed00 	.word	0xe000ed00

000074d0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    74d0:	4a09      	ldr	r2, [pc, #36]	; (74f8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    74d2:	490a      	ldr	r1, [pc, #40]	; (74fc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    74d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    74d6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    74d8:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    74da:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    74dc:	4908      	ldr	r1, [pc, #32]	; (7500 <arch_swap+0x30>)
    74de:	684b      	ldr	r3, [r1, #4]
    74e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    74e4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    74e6:	2300      	movs	r3, #0
    74e8:	f383 8811 	msr	BASEPRI, r3
    74ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    74f0:	6893      	ldr	r3, [r2, #8]
}
    74f2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    74f4:	4770      	bx	lr
    74f6:	bf00      	nop
    74f8:	20003680 	.word	0x20003680
    74fc:	00016b70 	.word	0x00016b70
    7500:	e000ed00 	.word	0xe000ed00

00007504 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    7504:	4922      	ldr	r1, [pc, #136]	; (7590 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    7506:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    7508:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    750c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    7510:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    7512:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    7516:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    751a:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    751e:	d103      	bne.n	7528 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    7520:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    7524:	ec80 8a10 	vstmia	r0, {s16-s31}

00007528 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7528:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    752a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    752e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    7532:	4f18      	ldr	r7, [pc, #96]	; (7594 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    7534:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    7538:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    753a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    753c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    753e:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7542:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    7544:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    7546:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    7548:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    754c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    7550:	d003      	beq.n	755a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    7552:	2300      	movs	r3, #0
    vmsr fpscr, r3
    7554:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    7558:	e003      	b.n	7562 <in_fp_endif>

0000755a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    755a:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    755e:	ec90 8a10 	vldmia	r0, {s16-s31}

00007562 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    7562:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    7566:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    756a:	f383 8814 	msr	CONTROL, r3
    isb
    756e:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    7572:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    7576:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    757a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    757e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    7582:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    7584:	f00a ffcb 	bl	1251e <configure_builtin_stack_guard>
    pop {r2, lr}
    7588:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    758c:	4770      	bx	lr
    758e:	0000      	.short	0x0000
    ldr r1, =_kernel
    7590:	20003680 	.word	0x20003680
    ldr v4, =_SCS_ICSR
    7594:	e000ed04 	.word	0xe000ed04

00007598 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    7598:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    759c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    759e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    75a2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    75a6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    75a8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    75ac:	2902      	cmp	r1, #2
    beq _oops
    75ae:	d0ff      	beq.n	75b0 <_oops>

000075b0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    75b0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    75b2:	f00a ffa5 	bl	12500 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    75b6:	bd01      	pop	{r0, pc}

000075b8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    75b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    75bc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    75be:	490d      	ldr	r1, [pc, #52]	; (75f4 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    75c0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    75c4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    75c6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    75ca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    75ce:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    75d0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    75d4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    75d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    75dc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    75e0:	2300      	movs	r3, #0
    75e2:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    75e4:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    75e8:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    75ea:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    75ec:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    75f0:	4770      	bx	lr
    75f2:	bf00      	nop
    75f4:	00012431 	.word	0x00012431

000075f8 <arch_switch_to_main_thread>:
    75f8:	2300      	movs	r3, #0
    75fa:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    75fe:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    7602:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    7606:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    760a:	f3bf 8f6f 	isb	sy
    760e:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    7612:	4b09      	ldr	r3, [pc, #36]	; (7638 <arch_switch_to_main_thread+0x40>)
    7614:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    7616:	6e43      	ldr	r3, [r0, #100]	; 0x64
    7618:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    761c:	4610      	mov	r0, r2
    761e:	f381 8809 	msr	PSP, r1
    7622:	2100      	movs	r1, #0
    7624:	b663      	cpsie	if
    7626:	f381 8811 	msr	BASEPRI, r1
    762a:	f3bf 8f6f 	isb	sy
    762e:	2200      	movs	r2, #0
    7630:	2300      	movs	r3, #0
    7632:	f00a fefd 	bl	12430 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7636:	bf00      	nop
    7638:	20003680 	.word	0x20003680

0000763c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    763c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    763e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7640:	4a0b      	ldr	r2, [pc, #44]	; (7670 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    7642:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    7644:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    7646:	bf1e      	ittt	ne
	movne	r1, #0
    7648:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    764a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    764c:	f00b fff7 	blne	1363e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    7650:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    7652:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    7656:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    765a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    765e:	4905      	ldr	r1, [pc, #20]	; (7674 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    7660:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    7662:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    7664:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    7666:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    766a:	4903      	ldr	r1, [pc, #12]	; (7678 <_isr_wrapper+0x3c>)
	bx r1
    766c:	4708      	bx	r1
    766e:	0000      	.short	0x0000
	ldr r2, =_kernel
    7670:	20003680 	.word	0x20003680
	ldr r1, =_sw_isr_table
    7674:	000158d0 	.word	0x000158d0
	ldr r1, =z_arm_int_exit
    7678:	0000767d 	.word	0x0000767d

0000767c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    767c:	4b04      	ldr	r3, [pc, #16]	; (7690 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    767e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7680:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    7682:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7684:	d003      	beq.n	768e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    7686:	4903      	ldr	r1, [pc, #12]	; (7694 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    768c:	600a      	str	r2, [r1, #0]

0000768e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    768e:	4770      	bx	lr
	ldr r3, =_kernel
    7690:	20003680 	.word	0x20003680
	ldr r1, =_SCS_ICSR
    7694:	e000ed04 	.word	0xe000ed04

00007698 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7698:	4b09      	ldr	r3, [pc, #36]	; (76c0 <usage_fault.constprop.0+0x28>)
    769a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    769c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    769e:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    76a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    76a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    76a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    76a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    76a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    76aa:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    76ae:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    76b2:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    76b6:	bf18      	it	ne
    76b8:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    76ba:	629a      	str	r2, [r3, #40]	; 0x28
}
    76bc:	4770      	bx	lr
    76be:	bf00      	nop
    76c0:	e000ed00 	.word	0xe000ed00

000076c4 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    76c4:	4b0d      	ldr	r3, [pc, #52]	; (76fc <bus_fault.constprop.0+0x38>)
    76c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    76c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    76ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    76cc:	0592      	lsls	r2, r2, #22
    76ce:	d508      	bpl.n	76e2 <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
    76d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    76d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    76d4:	0412      	lsls	r2, r2, #16
    76d6:	d504      	bpl.n	76e2 <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    76d8:	b118      	cbz	r0, 76e2 <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    76da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    76dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    76e0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    76e2:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    76e4:	4b05      	ldr	r3, [pc, #20]	; (76fc <bus_fault.constprop.0+0x38>)
    76e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    76e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    76ea:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    76ec:	bf58      	it	pl
    76ee:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    76f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    76f2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    76f6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    76f8:	7008      	strb	r0, [r1, #0]
}
    76fa:	4770      	bx	lr
    76fc:	e000ed00 	.word	0xe000ed00

00007700 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7700:	4b12      	ldr	r3, [pc, #72]	; (774c <mem_manage_fault.constprop.0+0x4c>)
    7702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    7704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    7706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7708:	0792      	lsls	r2, r2, #30
    770a:	d508      	bpl.n	771e <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    770c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    770e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7710:	0612      	lsls	r2, r2, #24
    7712:	d504      	bpl.n	771e <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    7714:	b118      	cbz	r0, 771e <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    771c:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    771e:	4b0b      	ldr	r3, [pc, #44]	; (774c <mem_manage_fault.constprop.0+0x4c>)
    7720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7726:	06d0      	lsls	r0, r2, #27
	*recoverable = memory_fault_recoverable(esf, true);
    7728:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    772c:	bf58      	it	pl
    772e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7732:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    7734:	bf42      	ittt	mi
    7736:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    7738:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    773c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    773e:	4a03      	ldr	r2, [pc, #12]	; (774c <mem_manage_fault.constprop.0+0x4c>)
    7740:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7742:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7746:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    7748:	7008      	strb	r0, [r1, #0]
}
    774a:	4770      	bx	lr
    774c:	e000ed00 	.word	0xe000ed00

00007750 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7750:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7752:	4b3c      	ldr	r3, [pc, #240]	; (7844 <z_arm_fault+0xf4>)
    7754:	2500      	movs	r5, #0
    7756:	685b      	ldr	r3, [r3, #4]
{
    7758:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    775a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    775e:	f385 8811 	msr	BASEPRI, r5
    7762:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7766:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    776a:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    776e:	d112      	bne.n	7796 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7770:	f002 040c 	and.w	r4, r2, #12
    7774:	2c08      	cmp	r4, #8
    7776:	d00e      	beq.n	7796 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7778:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    777a:	bf4e      	itee	mi
    777c:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
    777e:	4606      	movpl	r6, r0
			*nested_exc = true;
    7780:	2501      	movpl	r5, #1
	*recoverable = false;
    7782:	2200      	movs	r2, #0
	switch (fault) {
    7784:	3b03      	subs	r3, #3
	*recoverable = false;
    7786:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    778a:	2b03      	cmp	r3, #3
    778c:	d852      	bhi.n	7834 <z_arm_fault+0xe4>
    778e:	e8df f003 	tbb	[pc, r3]
    7792:	4904      	.short	0x4904
    7794:	464d      	.short	0x464d
		return NULL;
    7796:	462e      	mov	r6, r5
    7798:	e7f3      	b.n	7782 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    779a:	4b2a      	ldr	r3, [pc, #168]	; (7844 <z_arm_fault+0xf4>)
    779c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    779e:	f014 0402 	ands.w	r4, r4, #2
    77a2:	d147      	bne.n	7834 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    77a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77a6:	2a00      	cmp	r2, #0
    77a8:	db14      	blt.n	77d4 <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    77aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77ac:	0052      	lsls	r2, r2, #1
    77ae:	d511      	bpl.n	77d4 <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
    77b0:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    77b2:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    77b6:	f64d 7202 	movw	r2, #57090	; 0xdf02
    77ba:	4291      	cmp	r1, r2
    77bc:	d009      	beq.n	77d2 <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    77be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    77c2:	b1fa      	cbz	r2, 7804 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    77c4:	2001      	movs	r0, #1
    77c6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    77ca:	f7ff ff99 	bl	7700 <mem_manage_fault.constprop.0>
    77ce:	4604      	mov	r4, r0
		break;
    77d0:	e000      	b.n	77d4 <z_arm_fault+0x84>
			reason = esf->basic.r0;
    77d2:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    77d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77d8:	b993      	cbnz	r3, 7800 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    77da:	2268      	movs	r2, #104	; 0x68
    77dc:	4631      	mov	r1, r6
    77de:	a802      	add	r0, sp, #8
    77e0:	f00d f9e9 	bl	14bb6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    77e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    77e6:	b33d      	cbz	r5, 7838 <z_arm_fault+0xe8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    77e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    77ec:	b922      	cbnz	r2, 77f8 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    77ee:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    77f2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    77f6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    77f8:	4620      	mov	r0, r4
    77fa:	a902      	add	r1, sp, #8
    77fc:	f00a fe7e 	bl	124fc <z_arm_fatal_error>
}
    7800:	b01c      	add	sp, #112	; 0x70
    7802:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    7804:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    7808:	b12a      	cbz	r2, 7816 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    780a:	2001      	movs	r0, #1
    780c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    7810:	f7ff ff58 	bl	76c4 <bus_fault.constprop.0>
    7814:	e7db      	b.n	77ce <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    7816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    7818:	b29b      	uxth	r3, r3
    781a:	2b00      	cmp	r3, #0
    781c:	d0da      	beq.n	77d4 <z_arm_fault+0x84>
		reason = usage_fault(esf);
    781e:	f7ff ff3b 	bl	7698 <usage_fault.constprop.0>
    7822:	e7d4      	b.n	77ce <z_arm_fault+0x7e>
		reason = mem_manage_fault(esf, 0, recoverable);
    7824:	2000      	movs	r0, #0
    7826:	f10d 0107 	add.w	r1, sp, #7
    782a:	e7ce      	b.n	77ca <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    782c:	2000      	movs	r0, #0
    782e:	f10d 0107 	add.w	r1, sp, #7
    7832:	e7ed      	b.n	7810 <z_arm_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7834:	2400      	movs	r4, #0
    7836:	e7cd      	b.n	77d4 <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7838:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    783c:	f023 0301 	bic.w	r3, r3, #1
    7840:	e7d9      	b.n	77f6 <z_arm_fault+0xa6>
    7842:	bf00      	nop
    7844:	e000ed00 	.word	0xe000ed00

00007848 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7848:	4b04      	ldr	r3, [pc, #16]	; (785c <z_arm_fault_init+0x14>)
    784a:	695a      	ldr	r2, [r3, #20]
    784c:	f042 0210 	orr.w	r2, r2, #16
    7850:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    7852:	695a      	ldr	r2, [r3, #20]
    7854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7858:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    785a:	4770      	bx	lr
    785c:	e000ed00 	.word	0xe000ed00

00007860 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7860:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7864:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7868:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    786a:	4672      	mov	r2, lr
	bl z_arm_fault
    786c:	f7ff ff70 	bl	7750 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7870:	bd01      	pop	{r0, pc}
    7872:	bf00      	nop

00007874 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7874:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7876:	2120      	movs	r1, #32
    7878:	4803      	ldr	r0, [pc, #12]	; (7888 <z_arm_interrupt_init+0x14>)
    787a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    787c:	3301      	adds	r3, #1
    787e:	2b45      	cmp	r3, #69	; 0x45
    7880:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7884:	d1f9      	bne.n	787a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7886:	4770      	bx	lr
    7888:	e000e100 	.word	0xe000e100

0000788c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    788c:	2000      	movs	r0, #0
    msr CONTROL, r0
    788e:	f380 8814 	msr	CONTROL, r0
    isb
    7892:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    7896:	2000      	movs	r0, #0
    msr MSPLIM, r0
    7898:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    789c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    78a0:	f00d ff70 	bl	15784 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    78a4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    78a6:	490e      	ldr	r1, [pc, #56]	; (78e0 <__start+0x54>)
    str r0, [r1]
    78a8:	6008      	str	r0, [r1, #0]
    dsb
    78aa:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    78ae:	480d      	ldr	r0, [pc, #52]	; (78e4 <__start+0x58>)
    msr msp, r0
    78b0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    78b4:	f000 f83e 	bl	7934 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    78b8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    78ba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    78be:	480a      	ldr	r0, [pc, #40]	; (78e8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    78c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    78c4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    78c6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    78ca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    78ce:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    78d0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    78d2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    78d6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    78da:	f7ff fdcb 	bl	7474 <z_arm_prep_c>
    78de:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    78e0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    78e4:	20005570 	.word	0x20005570
    ldr r0, =z_interrupt_stacks
    78e8:	200056b0 	.word	0x200056b0

000078ec <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    78ec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    78f0:	4905      	ldr	r1, [pc, #20]	; (7908 <sys_arch_reboot+0x1c>)
    78f2:	4b06      	ldr	r3, [pc, #24]	; (790c <sys_arch_reboot+0x20>)
    78f4:	68ca      	ldr	r2, [r1, #12]
    78f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    78fa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    78fc:	60cb      	str	r3, [r1, #12]
    78fe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    7902:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7904:	e7fd      	b.n	7902 <sys_arch_reboot+0x16>
    7906:	bf00      	nop
    7908:	e000ed00 	.word	0xe000ed00
    790c:	05fa0004 	.word	0x05fa0004

00007910 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    7910:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    7912:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    7914:	4906      	ldr	r1, [pc, #24]	; (7930 <z_arm_clear_arm_mpu_config+0x20>)
    7916:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    791a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    791e:	4293      	cmp	r3, r2
    7920:	d100      	bne.n	7924 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    7922:	4770      	bx	lr
  mpu->RNR = rnr;
    7924:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    7928:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    792c:	3301      	adds	r3, #1
    792e:	e7f6      	b.n	791e <z_arm_clear_arm_mpu_config+0xe>
    7930:	e000ed00 	.word	0xe000ed00

00007934 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    7934:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    7936:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    7938:	2400      	movs	r4, #0
    793a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    793e:	f7ff ffe7 	bl	7910 <z_arm_clear_arm_mpu_config>
    7942:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    7944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7948:	4a0b      	ldr	r2, [pc, #44]	; (7978 <z_arm_init_arch_hw_at_boot+0x44>)
    794a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    794e:	3301      	adds	r3, #1
    7950:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    7952:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    7956:	d1f8      	bne.n	794a <z_arm_init_arch_hw_at_boot+0x16>
    7958:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    795a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    795e:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    7962:	3301      	adds	r3, #1
    7964:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    7966:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    796a:	d1f8      	bne.n	795e <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    796c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    796e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7972:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    7976:	bd10      	pop	{r4, pc}
    7978:	e000e100 	.word	0xe000e100

0000797c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    797c:	4b08      	ldr	r3, [pc, #32]	; (79a0 <z_impl_k_thread_abort+0x24>)
    797e:	689b      	ldr	r3, [r3, #8]
    7980:	4283      	cmp	r3, r0
    7982:	d10b      	bne.n	799c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7984:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7988:	b143      	cbz	r3, 799c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    798a:	4b06      	ldr	r3, [pc, #24]	; (79a4 <z_impl_k_thread_abort+0x28>)
    798c:	685a      	ldr	r2, [r3, #4]
    798e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    7992:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    7994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    799a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    799c:	f004 be58 	b.w	c650 <z_thread_abort>
    79a0:	20003680 	.word	0x20003680
    79a4:	e000ed00 	.word	0xe000ed00

000079a8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    79a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    79aa:	4c09      	ldr	r4, [pc, #36]	; (79d0 <z_arm_configure_static_mpu_regions+0x28>)
    79ac:	4a09      	ldr	r2, [pc, #36]	; (79d4 <z_arm_configure_static_mpu_regions+0x2c>)
    79ae:	4623      	mov	r3, r4
    79b0:	2101      	movs	r1, #1
    79b2:	4809      	ldr	r0, [pc, #36]	; (79d8 <z_arm_configure_static_mpu_regions+0x30>)
    79b4:	f000 f8f2 	bl	7b9c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    79b8:	2300      	movs	r3, #0
    79ba:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    79bc:	4b07      	ldr	r3, [pc, #28]	; (79dc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    79be:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    79c0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    79c2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    79c4:	9301      	str	r3, [sp, #4]
    79c6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    79c8:	f000 f8f2 	bl	7bb0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    79cc:	b004      	add	sp, #16
    79ce:	bd10      	pop	{r4, pc}
    79d0:	20070000 	.word	0x20070000
    79d4:	20000000 	.word	0x20000000
    79d8:	00016750 	.word	0x00016750
    79dc:	200005c0 	.word	0x200005c0

000079e0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    79e0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    79e2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    79e4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    79e6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    79ea:	f004 031f 	and.w	r3, r4, #31
    79ee:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    79f0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    79f2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    79f4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    79f8:	4905      	ldr	r1, [pc, #20]	; (7a10 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    79fa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    79fe:	f043 0301 	orr.w	r3, r3, #1
    7a02:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    7a06:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    7a0a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    7a0e:	bd10      	pop	{r4, pc}
    7a10:	e000ed00 	.word	0xe000ed00

00007a14 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    7a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a18:	460f      	mov	r7, r1
    7a1a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7a1c:	4606      	mov	r6, r0
    7a1e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    7a22:	4d52      	ldr	r5, [pc, #328]	; (7b6c <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    7a24:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    7a26:	45b8      	cmp	r8, r7
    7a28:	da09      	bge.n	7a3e <mpu_configure_regions_and_partition.constprop.0+0x2a>
		if (regions[i].size == 0U) {
    7a2a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    7a2e:	f1b9 0f00 	cmp.w	r9, #0
    7a32:	d03a      	beq.n	7aaa <mpu_configure_regions_and_partition.constprop.0+0x96>
		&&
    7a34:	f1b9 0f1f 	cmp.w	r9, #31
    7a38:	d805      	bhi.n	7a46 <mpu_configure_regions_and_partition.constprop.0+0x32>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    7a3a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    7a3e:	4620      	mov	r0, r4
    7a40:	b005      	add	sp, #20
    7a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    7a46:	f019 0f1f 	tst.w	r9, #31
    7a4a:	d1f6      	bne.n	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
		((part->start &
    7a4c:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    7a50:	f01a 0f1f 	tst.w	sl, #31
    7a54:	d1f1      	bne.n	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    7a56:	4650      	mov	r0, sl
    7a58:	f00a fd6a 	bl	12530 <arm_cmse_mpu_region_get>
    7a5c:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    7a5e:	eb09 000a 	add.w	r0, r9, sl
    7a62:	3801      	subs	r0, #1
    7a64:	f00a fd64 	bl	12530 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    7a68:	4583      	cmp	fp, r0
    7a6a:	d1e6      	bne.n	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
		if ((u_reg_index == -EINVAL) ||
    7a6c:	f11b 0f16 	cmn.w	fp, #22
    7a70:	d0e3      	beq.n	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
    7a72:	455c      	cmp	r4, fp
    7a74:	dde1      	ble.n	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
    7a76:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    7a7a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    7a7e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    7a82:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    7a86:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    7a8a:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    7a8e:	e9d6 3200 	ldrd	r3, r2, [r6]
    7a92:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    7a94:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    7a96:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    7a9a:	d11e      	bne.n	7ada <mpu_configure_regions_and_partition.constprop.0+0xc6>
    7a9c:	45ca      	cmp	sl, r9
    7a9e:	d108      	bne.n	7ab2 <mpu_configure_regions_and_partition.constprop.0+0x9e>
			mpu_configure_region(u_reg_index, &regions[i]);
    7aa0:	4631      	mov	r1, r6
    7aa2:	fa5f f08b 	uxtb.w	r0, fp
    7aa6:	f00a fd4d 	bl	12544 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    7aaa:	f108 0801 	add.w	r8, r8, #1
    7aae:	360c      	adds	r6, #12
    7ab0:	e7b9      	b.n	7a26 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    7ab2:	4631      	mov	r1, r6
	MPU->RNR = index;
    7ab4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    7ab8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    7abc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    7ac0:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    7ac4:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    7ac6:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    7aca:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    7acc:	f00a fd3a 	bl	12544 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    7ad0:	f110 0f16 	cmn.w	r0, #22
    7ad4:	d0b1      	beq.n	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
			reg_index++;
    7ad6:	1c44      	adds	r4, r0, #1
    7ad8:	e7e7      	b.n	7aaa <mpu_configure_regions_and_partition.constprop.0+0x96>
				regions[i].start - 1);
    7ada:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    7adc:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    7ade:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    7ae0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    7ae4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    7ae8:	d108      	bne.n	7afc <mpu_configure_regions_and_partition.constprop.0+0xe8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    7aea:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    7aee:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    7af0:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    7af4:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    7af6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    7afa:	e7e7      	b.n	7acc <mpu_configure_regions_and_partition.constprop.0+0xb8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    7afc:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    7b00:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    7b04:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    7b06:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    7b0a:	4631      	mov	r1, r6
    7b0c:	f00a fd1a 	bl	12544 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    7b10:	f110 0f16 	cmn.w	r0, #22
    7b14:	d091      	beq.n	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
    7b16:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    7b1a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    7b1e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    7b22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    7b26:	f362 0304 	bfi	r3, r2, #0, #5
    7b2a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    7b2e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    7b32:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7b36:	085b      	lsrs	r3, r3, #1
    7b38:	f363 1247 	bfi	r2, r3, #5, #3
    7b3c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    7b40:	e9d6 3200 	ldrd	r3, r2, [r6]
    7b44:	4413      	add	r3, r2
    7b46:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    7b48:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    7b4c:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    7b4e:	4453      	add	r3, sl
    7b50:	eba3 0309 	sub.w	r3, r3, r9
    7b54:	b2c8      	uxtb	r0, r1
    7b56:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    7b5a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    7b5c:	9303      	str	r3, [sp, #12]
    7b5e:	f63f af6c 	bhi.w	7a3a <mpu_configure_regions_and_partition.constprop.0+0x26>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    7b62:	4669      	mov	r1, sp
    7b64:	f7ff ff3c 	bl	79e0 <region_init>
    7b68:	e7b5      	b.n	7ad6 <mpu_configure_regions_and_partition.constprop.0+0xc2>
    7b6a:	bf00      	nop
    7b6c:	e000ed00 	.word	0xe000ed00

00007b70 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7b70:	2205      	movs	r2, #5
    7b72:	4b04      	ldr	r3, [pc, #16]	; (7b84 <arm_core_mpu_enable+0x14>)
    7b74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7b78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7b7c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7b80:	4770      	bx	lr
    7b82:	bf00      	nop
    7b84:	e000ed00 	.word	0xe000ed00

00007b88 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    7b88:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7b8c:	2200      	movs	r2, #0
    7b8e:	4b02      	ldr	r3, [pc, #8]	; (7b98 <arm_core_mpu_disable+0x10>)
    7b90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7b94:	4770      	bx	lr
    7b96:	bf00      	nop
    7b98:	e000ed00 	.word	0xe000ed00

00007b9c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    7b9c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7b9e:	4c03      	ldr	r4, [pc, #12]	; (7bac <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    7ba0:	7822      	ldrb	r2, [r4, #0]
    7ba2:	f7ff ff37 	bl	7a14 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7ba6:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    7ba8:	bd10      	pop	{r4, pc}
    7baa:	bf00      	nop
    7bac:	20003d54 	.word	0x20003d54

00007bb0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    7bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bb4:	4d29      	ldr	r5, [pc, #164]	; (7c5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    7bb6:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    7bb8:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    7bba:	f04f 0800 	mov.w	r8, #0
    7bbe:	46ab      	mov	fp, r5
	MPU->RNR = index;
    7bc0:	4f27      	ldr	r7, [pc, #156]	; (7c60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    7bc2:	45d0      	cmp	r8, sl
    7bc4:	da1b      	bge.n	7bfe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    7bc6:	f8d6 9004 	ldr.w	r9, [r6, #4]
    7bca:	f1b9 0f00 	cmp.w	r9, #0
    7bce:	d03f      	beq.n	7c50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    7bd0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    7bd2:	4608      	mov	r0, r1
    7bd4:	9101      	str	r1, [sp, #4]
    7bd6:	f00a fcab 	bl	12530 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    7bda:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    7bdc:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    7bde:	eb09 0001 	add.w	r0, r9, r1
    7be2:	3801      	subs	r0, #1
    7be4:	f00a fca4 	bl	12530 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    7be8:	4284      	cmp	r4, r0
    7bea:	f04f 0214 	mov.w	r2, #20
    7bee:	4b1d      	ldr	r3, [pc, #116]	; (7c64 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    7bf0:	d008      	beq.n	7c04 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    7bf2:	f06f 0315 	mvn.w	r3, #21
    7bf6:	fb02 f808 	mul.w	r8, r2, r8
    7bfa:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    7bfe:	b003      	add	sp, #12
    7c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    7c04:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    7c08:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    7c0a:	d0f8      	beq.n	7bfe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    7c0c:	7819      	ldrb	r1, [r3, #0]
    7c0e:	42a1      	cmp	r1, r4
    7c10:	ddf5      	ble.n	7bfe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    7c12:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    7c16:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    7c1a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    7c1e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    7c22:	f100 0108 	add.w	r1, r0, #8
    7c26:	7b00      	ldrb	r0, [r0, #12]
    7c28:	f364 0004 	bfi	r0, r4, #0, #5
    7c2c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    7c2e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    7c32:	790c      	ldrb	r4, [r1, #4]
    7c34:	0840      	lsrs	r0, r0, #1
    7c36:	f360 1447 	bfi	r4, r0, #5, #3
    7c3a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    7c3c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    7c40:	f021 011f 	bic.w	r1, r1, #31
    7c44:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    7c46:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    7c4a:	f021 011f 	bic.w	r1, r1, #31
    7c4e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    7c50:	f108 0801 	add.w	r8, r8, #1
    7c54:	3514      	adds	r5, #20
    7c56:	360c      	adds	r6, #12
    7c58:	e7b3      	b.n	7bc2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    7c5a:	bf00      	nop
    7c5c:	20000de0 	.word	0x20000de0
    7c60:	e000ed00 	.word	0xe000ed00
    7c64:	20003d54 	.word	0x20003d54

00007c68 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    7c68:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7c6a:	4d0e      	ldr	r5, [pc, #56]	; (7ca4 <z_arm_mpu_init+0x3c>)
    7c6c:	682c      	ldr	r4, [r5, #0]
    7c6e:	2c08      	cmp	r4, #8
    7c70:	d815      	bhi.n	7c9e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7c72:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    7c74:	f7ff ff88 	bl	7b88 <arm_core_mpu_disable>
	MPU->MAIR0 =
    7c78:	4b0b      	ldr	r3, [pc, #44]	; (7ca8 <z_arm_mpu_init+0x40>)
    7c7a:	4a0c      	ldr	r2, [pc, #48]	; (7cac <z_arm_mpu_init+0x44>)
    7c7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7c80:	4284      	cmp	r4, r0
    7c82:	d105      	bne.n	7c90 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7c84:	4b0a      	ldr	r3, [pc, #40]	; (7cb0 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    7c86:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    7c88:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    7c8a:	f7ff ff71 	bl	7b70 <arm_core_mpu_enable>
}
    7c8e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    7c90:	6869      	ldr	r1, [r5, #4]
    7c92:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    7c96:	f7ff fea3 	bl	79e0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7c9a:	3001      	adds	r0, #1
    7c9c:	e7f0      	b.n	7c80 <z_arm_mpu_init+0x18>
		return -1;
    7c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ca2:	e7f4      	b.n	7c8e <z_arm_mpu_init+0x26>
    7ca4:	0001675c 	.word	0x0001675c
    7ca8:	e000ed00 	.word	0xe000ed00
    7cac:	0044ffaa 	.word	0x0044ffaa
    7cb0:	20003d54 	.word	0x20003d54

00007cb4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7cb4:	4b01      	ldr	r3, [pc, #4]	; (7cbc <__stdout_hook_install+0x8>)
    7cb6:	6018      	str	r0, [r3, #0]
}
    7cb8:	4770      	bx	lr
    7cba:	bf00      	nop
    7cbc:	2000002c 	.word	0x2000002c

00007cc0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    7cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cc2:	4606      	mov	r6, r0
    7cc4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    7cc6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    7cc8:	4f06      	ldr	r7, [pc, #24]	; (7ce4 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    7cca:	42ac      	cmp	r4, r5
    7ccc:	da08      	bge.n	7ce0 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    7cce:	683b      	ldr	r3, [r7, #0]
    7cd0:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    7cd2:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    7cd4:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    7cd6:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    7cda:	d001      	beq.n	7ce0 <z_impl_zephyr_read_stdin+0x20>
    7cdc:	280d      	cmp	r0, #13
    7cde:	d1f4      	bne.n	7cca <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    7ce0:	4620      	mov	r0, r4
    7ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ce4:	20000028 	.word	0x20000028

00007ce8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    7ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cea:	460d      	mov	r5, r1
    7cec:	4f09      	ldr	r7, [pc, #36]	; (7d14 <z_impl_zephyr_write_stdout+0x2c>)
    7cee:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    7cf0:	f1c0 0401 	rsb	r4, r0, #1
    7cf4:	19a3      	adds	r3, r4, r6
    7cf6:	429d      	cmp	r5, r3
    7cf8:	dc01      	bgt.n	7cfe <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    7cfa:	4628      	mov	r0, r5
    7cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    7cfe:	7873      	ldrb	r3, [r6, #1]
    7d00:	2b0a      	cmp	r3, #10
    7d02:	d102      	bne.n	7d0a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    7d04:	200d      	movs	r0, #13
    7d06:	683b      	ldr	r3, [r7, #0]
    7d08:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    7d0a:	683b      	ldr	r3, [r7, #0]
    7d0c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    7d10:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    7d12:	e7ef      	b.n	7cf4 <z_impl_zephyr_write_stdout+0xc>
    7d14:	2000002c 	.word	0x2000002c

00007d18 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    7d18:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    7d1a:	2105      	movs	r1, #5
    7d1c:	4801      	ldr	r0, [pc, #4]	; (7d24 <_exit+0xc>)
    7d1e:	f7ff ffe3 	bl	7ce8 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    7d22:	e7fe      	b.n	7d22 <_exit+0xa>
    7d24:	0001785a 	.word	0x0001785a

00007d28 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    7d28:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    7d2a:	4c07      	ldr	r4, [pc, #28]	; (7d48 <_sbrk+0x20>)
    7d2c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    7d2e:	18c2      	adds	r2, r0, r3
    7d30:	4806      	ldr	r0, [pc, #24]	; (7d4c <_sbrk+0x24>)
    7d32:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    7d36:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
    7d3a:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    7d3c:	bf2e      	itee	cs
    7d3e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
    7d42:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    7d44:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
    7d46:	bd10      	pop	{r4, pc}
    7d48:	20000df4 	.word	0x20000df4
    7d4c:	20005eb0 	.word	0x20005eb0

00007d50 <z_impl_gpio_pin_configure.constprop.0>:
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7d50:	2201      	movs	r2, #1
static inline int z_impl_gpio_pin_configure(const struct device *port,
    7d52:	b430      	push	{r4, r5}
	struct gpio_driver_data *data =
    7d54:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    7d56:	6885      	ldr	r5, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7d58:	6823      	ldr	r3, [r4, #0]
    7d5a:	408a      	lsls	r2, r1
    7d5c:	4313      	orrs	r3, r2
    7d5e:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    7d60:	4a01      	ldr	r2, [pc, #4]	; (7d68 <z_impl_gpio_pin_configure.constprop.0+0x18>)
    7d62:	682b      	ldr	r3, [r5, #0]
}
    7d64:	bc30      	pop	{r4, r5}
	return api->pin_configure(port, pin, flags);
    7d66:	4718      	bx	r3
    7d68:	000a0001 	.word	0x000a0001

00007d6c <setup>:
	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */
}

static int setup(const struct device *dev)
{
    7d6c:	b508      	push	{r3, lr}
    7d6e:	480c      	ldr	r0, [pc, #48]	; (7da0 <setup+0x34>)
    7d70:	f00b fbed 	bl	1354e <z_device_is_ready>

	const struct device *gpio;
	int err;

	gpio = DEVICE_DT_GET(ADXL362_GPIO_NODE);
	if (!device_is_ready(gpio)) {
    7d74:	b910      	cbnz	r0, 7d7c <setup+0x10>
		LOG_ERR("%s device not ready", gpio->name);
		return -ENODEV;
    7d76:	f06f 0012 	mvn.w	r0, #18
	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
	}

	return 0;
}
    7d7a:	bd08      	pop	{r3, pc}
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    7d7c:	2116      	movs	r1, #22
    7d7e:	4808      	ldr	r0, [pc, #32]	; (7da0 <setup+0x34>)
    7d80:	f7ff ffe6 	bl	7d50 <z_impl_gpio_pin_configure.constprop.0>
	if (err < 0) {
    7d84:	2800      	cmp	r0, #0
    7d86:	dbf8      	blt.n	7d7a <setup+0xe>
    7d88:	4806      	ldr	r0, [pc, #24]	; (7da4 <setup+0x38>)
    7d8a:	f00b fbe0 	bl	1354e <z_device_is_ready>
	if (!device_is_ready(gpio)) {
    7d8e:	2800      	cmp	r0, #0
    7d90:	d0f1      	beq.n	7d76 <setup+0xa>
    7d92:	2104      	movs	r1, #4
    7d94:	4803      	ldr	r0, [pc, #12]	; (7da4 <setup+0x38>)
    7d96:	f7ff ffdb 	bl	7d50 <z_impl_gpio_pin_configure.constprop.0>
	if (err < 0) {
    7d9a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    7d9e:	e7ec      	b.n	7d7a <setup+0xe>
    7da0:	00015828 	.word	0x00015828
    7da4:	00015840 	.word	0x00015840

00007da8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7da8:	b570      	push	{r4, r5, r6, lr}
    7daa:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    7dac:	4906      	ldr	r1, [pc, #24]	; (7dc8 <onoff_stop+0x20>)
{
    7dae:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    7db0:	1a41      	subs	r1, r0, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7db2:	1149      	asrs	r1, r1, #5
    7db4:	2240      	movs	r2, #64	; 0x40
    7db6:	4805      	ldr	r0, [pc, #20]	; (7dcc <onoff_stop+0x24>)
    7db8:	f00a fc34 	bl	12624 <stop>
	notify(mgr, res);
    7dbc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7dbe:	4601      	mov	r1, r0
	notify(mgr, res);
    7dc0:	4620      	mov	r0, r4
}
    7dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    7dc6:	4718      	bx	r3
    7dc8:	20000e08 	.word	0x20000e08
    7dcc:	00015810 	.word	0x00015810

00007dd0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7dd2:	2340      	movs	r3, #64	; 0x40
{
    7dd4:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    7dd6:	490a      	ldr	r1, [pc, #40]	; (7e00 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7dd8:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    7dda:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7ddc:	1149      	asrs	r1, r1, #5
{
    7dde:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7de0:	4623      	mov	r3, r4
    7de2:	4a08      	ldr	r2, [pc, #32]	; (7e04 <onoff_start+0x34>)
    7de4:	4808      	ldr	r0, [pc, #32]	; (7e08 <onoff_start+0x38>)
    7de6:	f00a fc4b 	bl	12680 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    7dea:	1e01      	subs	r1, r0, #0
    7dec:	da05      	bge.n	7dfa <onoff_start+0x2a>
		notify(mgr, err);
    7dee:	4628      	mov	r0, r5
    7df0:	4623      	mov	r3, r4
	}
}
    7df2:	b003      	add	sp, #12
    7df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    7df8:	4718      	bx	r3
}
    7dfa:	b003      	add	sp, #12
    7dfc:	bd30      	pop	{r4, r5, pc}
    7dfe:	bf00      	nop
    7e00:	20000e08 	.word	0x20000e08
    7e04:	000126f3 	.word	0x000126f3
    7e08:	00015810 	.word	0x00015810

00007e0c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    7e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7e10:	2200      	movs	r2, #0
    7e12:	2101      	movs	r1, #1
{
    7e14:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7e16:	2005      	movs	r0, #5
    7e18:	f7ff fb12 	bl	7440 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7e1c:	4811      	ldr	r0, [pc, #68]	; (7e64 <clk_init+0x58>)
    7e1e:	f002 fc8d 	bl	a73c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    7e22:	4b11      	ldr	r3, [pc, #68]	; (7e68 <clk_init+0x5c>)
    7e24:	4298      	cmp	r0, r3
    7e26:	d119      	bne.n	7e5c <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7e28:	f00b fa74 	bl	13314 <nrfx_clock_enable>
    7e2c:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7e2e:	f04f 080c 	mov.w	r8, #12
    7e32:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7e34:	f8df 9034 	ldr.w	r9, [pc, #52]	; 7e6c <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    7e38:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7e3a:	4649      	mov	r1, r9
    7e3c:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    7e40:	f00a fa6e 	bl	12320 <onoff_manager_init>
		if (err < 0) {
    7e44:	2800      	cmp	r0, #0
    7e46:	db07      	blt.n	7e58 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7e48:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    7e4c:	3401      	adds	r4, #1
    7e4e:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7e50:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    7e54:	d1f0      	bne.n	7e38 <clk_init+0x2c>
	}

	return 0;
    7e56:	2000      	movs	r0, #0
}
    7e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    7e5c:	f06f 0004 	mvn.w	r0, #4
    7e60:	e7fa      	b.n	7e58 <clk_init+0x4c>
    7e62:	bf00      	nop
    7e64:	00007ead 	.word	0x00007ead
    7e68:	0bad0000 	.word	0x0bad0000
    7e6c:	000167bc 	.word	0x000167bc

00007e70 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    7e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    7e72:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    7e74:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    7e76:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    7e78:	434b      	muls	r3, r1
    7e7a:	480a      	ldr	r0, [pc, #40]	; (7ea4 <clkstarted_handle.constprop.0+0x34>)
    7e7c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    7e7e:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    7e80:	e9d4 5220 	ldrd	r5, r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    7e84:	4418      	add	r0, r3
	sub_data->cb = NULL;
    7e86:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	void *user_data = sub_data->user_data;
    7e8a:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    7e8c:	f00a fbb7 	bl	125fe <set_on_state>
	if (callback) {
    7e90:	b135      	cbz	r5, 7ea0 <clkstarted_handle.constprop.0+0x30>
		callback(dev, (clock_control_subsys_t)type, user_data);
    7e92:	462b      	mov	r3, r5
    7e94:	9a01      	ldr	r2, [sp, #4]
    7e96:	4804      	ldr	r0, [pc, #16]	; (7ea8 <clkstarted_handle.constprop.0+0x38>)
}
    7e98:	b002      	add	sp, #8
    7e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    7e9e:	4718      	bx	r3
}
    7ea0:	b002      	add	sp, #8
    7ea2:	bd70      	pop	{r4, r5, r6, pc}
    7ea4:	20000e08 	.word	0x20000e08
    7ea8:	00015810 	.word	0x00015810

00007eac <clock_event_handler>:
	switch (event) {
    7eac:	2805      	cmp	r0, #5
    7eae:	d812      	bhi.n	7ed6 <clock_event_handler+0x2a>
    7eb0:	e8df f000 	tbb	[pc, r0]
    7eb4:	11110f03 	.word	0x11110f03
    7eb8:	0b0d      	.short	0x0b0d
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    7eba:	4b07      	ldr	r3, [pc, #28]	; (7ed8 <clock_event_handler+0x2c>)
    7ebc:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    7ec0:	f010 0007 	ands.w	r0, r0, #7
    7ec4:	d107      	bne.n	7ed6 <clock_event_handler+0x2a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7ec6:	f7ff bfd3 	b.w	7e70 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    7eca:	2002      	movs	r0, #2
    7ecc:	e7fb      	b.n	7ec6 <clock_event_handler+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    7ece:	2003      	movs	r0, #3
    7ed0:	e7f9      	b.n	7ec6 <clock_event_handler+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7ed2:	2001      	movs	r0, #1
    7ed4:	e7f7      	b.n	7ec6 <clock_event_handler+0x1a>
}
    7ed6:	4770      	bx	lr
    7ed8:	20000e08 	.word	0x20000e08

00007edc <generic_hfclk_start>:
{
    7edc:	b508      	push	{r3, lr}
	__asm__ volatile(
    7ede:	f04f 0320 	mov.w	r3, #32
    7ee2:	f3ef 8111 	mrs	r1, BASEPRI
    7ee6:	f383 8812 	msr	BASEPRI_MAX, r3
    7eea:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    7eee:	4a12      	ldr	r2, [pc, #72]	; (7f38 <generic_hfclk_start+0x5c>)
    7ef0:	6813      	ldr	r3, [r2, #0]
    7ef2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    7ef6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    7efa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    7efc:	d00c      	beq.n	7f18 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7efe:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7f02:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7f06:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    7f0a:	f013 0301 	ands.w	r3, r3, #1
    7f0e:	d003      	beq.n	7f18 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    7f10:	480a      	ldr	r0, [pc, #40]	; (7f3c <generic_hfclk_start+0x60>)
    7f12:	f00a fb74 	bl	125fe <set_on_state>
			already_started = true;
    7f16:	2301      	movs	r3, #1
	__asm__ volatile(
    7f18:	f381 8811 	msr	BASEPRI, r1
    7f1c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    7f20:	b123      	cbz	r3, 7f2c <generic_hfclk_start+0x50>
}
    7f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    7f26:	2000      	movs	r0, #0
    7f28:	f7ff bfa2 	b.w	7e70 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7f2c:	2001      	movs	r0, #1
}
    7f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7f32:	f00b ba01 	b.w	13338 <nrfx_clock_start>
    7f36:	bf00      	nop
    7f38:	20000eb8 	.word	0x20000eb8
    7f3c:	20000e90 	.word	0x20000e90

00007f40 <api_blocking_start>:
{
    7f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7f42:	2200      	movs	r2, #0
    7f44:	2301      	movs	r3, #1
    7f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7f4a:	466b      	mov	r3, sp
    7f4c:	4a08      	ldr	r2, [pc, #32]	; (7f70 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7f4e:	f8cd d000 	str.w	sp, [sp]
    7f52:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7f56:	f00a fbc5 	bl	126e4 <api_start>
	if (err < 0) {
    7f5a:	2800      	cmp	r0, #0
    7f5c:	db05      	blt.n	7f6a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    7f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7f62:	2300      	movs	r3, #0
    7f64:	4668      	mov	r0, sp
    7f66:	f004 f853 	bl	c010 <z_impl_k_sem_take>
}
    7f6a:	b005      	add	sp, #20
    7f6c:	f85d fb04 	ldr.w	pc, [sp], #4
    7f70:	00012723 	.word	0x00012723

00007f74 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7f74:	4b07      	ldr	r3, [pc, #28]	; (7f94 <generic_hfclk_stop+0x20>)
    7f76:	e8d3 2fef 	ldaex	r2, [r3]
    7f7a:	f022 0102 	bic.w	r1, r2, #2
    7f7e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    7f82:	2800      	cmp	r0, #0
    7f84:	d1f7      	bne.n	7f76 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    7f86:	07d3      	lsls	r3, r2, #31
    7f88:	d402      	bmi.n	7f90 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7f8a:	2001      	movs	r0, #1
    7f8c:	f00b ba34 	b.w	133f8 <nrfx_clock_stop>
}
    7f90:	4770      	bx	lr
    7f92:	bf00      	nop
    7f94:	20000eb8 	.word	0x20000eb8

00007f98 <z_nrf_clock_control_lf_on>:
{
    7f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7f9c:	2201      	movs	r2, #1
    7f9e:	4607      	mov	r7, r0
    7fa0:	4937      	ldr	r1, [pc, #220]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7fa2:	e8d1 3fef 	ldaex	r3, [r1]
    7fa6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    7faa:	2800      	cmp	r0, #0
    7fac:	d1f9      	bne.n	7fa2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    7fae:	b933      	cbnz	r3, 7fbe <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    7fb0:	4934      	ldr	r1, [pc, #208]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
		err = onoff_request(mgr, &cli);
    7fb2:	4835      	ldr	r0, [pc, #212]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fb4:	604b      	str	r3, [r1, #4]
    7fb6:	60cb      	str	r3, [r1, #12]
    7fb8:	608a      	str	r2, [r1, #8]
    7fba:	f00a f9c4 	bl	12346 <onoff_request>
	switch (start_mode) {
    7fbe:	1e7b      	subs	r3, r7, #1
    7fc0:	2b01      	cmp	r3, #1
    7fc2:	d82f      	bhi.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7fc4:	2f01      	cmp	r7, #1
    7fc6:	d107      	bne.n	7fd8 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7fc8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7fcc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7fd0:	f003 0303 	and.w	r3, r3, #3
    7fd4:	2b02      	cmp	r3, #2
    7fd6:	d025      	beq.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7fd8:	f00b fb28 	bl	1362c <k_is_in_isr>
    7fdc:	4604      	mov	r4, r0
    7fde:	b918      	cbnz	r0, 7fe8 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    7fe0:	4b2a      	ldr	r3, [pc, #168]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
	int key = isr_mode ? irq_lock() : 0;
    7fe2:	781b      	ldrb	r3, [r3, #0]
    7fe4:	2b00      	cmp	r3, #0
    7fe6:	d144      	bne.n	8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
	__asm__ volatile(
    7fe8:	f04f 0320 	mov.w	r3, #32
    7fec:	f3ef 8611 	mrs	r6, BASEPRI
    7ff0:	f383 8812 	msr	BASEPRI_MAX, r3
    7ff4:	f3bf 8f6f 	isb	sy
    7ff8:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7ffa:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ffe:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    8002:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8006:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    800a:	03d2      	lsls	r2, r2, #15
    800c:	d50c      	bpl.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    800e:	f003 0303 	and.w	r3, r3, #3
    8012:	2b02      	cmp	r3, #2
    8014:	d001      	beq.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    8016:	2f01      	cmp	r7, #1
    8018:	d106      	bne.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
	if (isr_mode) {
    801a:	b324      	cbz	r4, 8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
	__asm__ volatile(
    801c:	f386 8811 	msr	BASEPRI, r6
    8020:	f3bf 8f6f 	isb	sy
}
    8024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    8028:	b1c4      	cbz	r4, 805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    802a:	4630      	mov	r0, r6
    802c:	f7ff f9cc 	bl	73c8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    8030:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    8034:	b2db      	uxtb	r3, r3
    8036:	2b01      	cmp	r3, #1
    8038:	d1e3      	bne.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    803a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    803e:	2a00      	cmp	r2, #0
    8040:	d0df      	beq.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8042:	2200      	movs	r2, #0
    8044:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    8048:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    804c:	2202      	movs	r2, #2
    804e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    8052:	2220      	movs	r2, #32
    8054:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8058:	60ab      	str	r3, [r5, #8]
}
    805a:	e7d2      	b.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
	return z_impl_k_sleep(timeout);
    805c:	2100      	movs	r1, #0
    805e:	2021      	movs	r0, #33	; 0x21
    8060:	f004 fad6 	bl	c610 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    8064:	e7e4      	b.n	8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    p_reg->INTENSET = mask;
    8066:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    806a:	2202      	movs	r2, #2
    806c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8070:	e7d8      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    p_reg->INTENCLR = mask;
    8072:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8076:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    8078:	4606      	mov	r6, r0
    807a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    807e:	e7bc      	b.n	7ffa <z_nrf_clock_control_lf_on+0x62>
    8080:	20000ebc 	.word	0x20000ebc
    8084:	20000df8 	.word	0x20000df8
    8088:	20000e28 	.word	0x20000e28
    808c:	20003d65 	.word	0x20003d65
    8090:	e000e100 	.word	0xe000e100

00008094 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    8094:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    8096:	4808      	ldr	r0, [pc, #32]	; (80b8 <uart_console_init+0x24>)
    8098:	4b08      	ldr	r3, [pc, #32]	; (80bc <uart_console_init+0x28>)
    809a:	6018      	str	r0, [r3, #0]
    809c:	f00b fa57 	bl	1354e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    80a0:	b138      	cbz	r0, 80b2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    80a2:	4807      	ldr	r0, [pc, #28]	; (80c0 <uart_console_init+0x2c>)
    80a4:	f7ff fe06 	bl	7cb4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    80a8:	4805      	ldr	r0, [pc, #20]	; (80c0 <uart_console_init+0x2c>)
    80aa:	f7fe fd6f 	bl	6b8c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    80ae:	2000      	movs	r0, #0
}
    80b0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    80b2:	f06f 0012 	mvn.w	r0, #18
    80b6:	e7fb      	b.n	80b0 <uart_console_init+0x1c>
    80b8:	00015858 	.word	0x00015858
    80bc:	20000ec0 	.word	0x20000ec0
    80c0:	000080c5 	.word	0x000080c5

000080c4 <console_out>:
	if ('\n' == c) {
    80c4:	280a      	cmp	r0, #10
{
    80c6:	b538      	push	{r3, r4, r5, lr}
    80c8:	4604      	mov	r4, r0
    80ca:	4d07      	ldr	r5, [pc, #28]	; (80e8 <console_out+0x24>)
	if ('\n' == c) {
    80cc:	d104      	bne.n	80d8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    80ce:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    80d0:	6883      	ldr	r3, [r0, #8]
    80d2:	210d      	movs	r1, #13
    80d4:	685b      	ldr	r3, [r3, #4]
    80d6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    80d8:	6828      	ldr	r0, [r5, #0]
    80da:	6883      	ldr	r3, [r0, #8]
    80dc:	b2e1      	uxtb	r1, r4
    80de:	685b      	ldr	r3, [r3, #4]
    80e0:	4798      	blx	r3
}
    80e2:	4620      	mov	r0, r4
    80e4:	bd38      	pop	{r3, r4, r5, pc}
    80e6:	bf00      	nop
    80e8:	20000ec0 	.word	0x20000ec0

000080ec <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    80ec:	b530      	push	{r4, r5, lr}
	return port->config;
    80ee:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    80f0:	f001 051f 	and.w	r5, r1, #31
    80f4:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    80f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    80fa:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    80fe:	b085      	sub	sp, #20
    8100:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    8104:	d104      	bne.n	8110 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    8106:	4628      	mov	r0, r5
    8108:	f002 fdc8 	bl	ac9c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    810c:	2000      	movs	r0, #0
    810e:	e031      	b.n	8174 <gpio_nrfx_pin_interrupt_configure+0x88>
	if (mode == GPIO_INT_MODE_LEVEL) {
    8110:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    8114:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    8118:	d12e      	bne.n	8178 <gpio_nrfx_pin_interrupt_configure+0x8c>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    811a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    811e:	bf0c      	ite	eq
    8120:	2304      	moveq	r3, #4
    8122:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    8124:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    8128:	6883      	ldr	r3, [r0, #8]
    812a:	fa23 f101 	lsr.w	r1, r3, r1
    812e:	07c9      	lsls	r1, r1, #31
    8130:	d42e      	bmi.n	8190 <gpio_nrfx_pin_interrupt_configure+0xa4>
    8132:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    8136:	d12b      	bne.n	8190 <gpio_nrfx_pin_interrupt_configure+0xa4>
        case 1: return NRF_P1;
    8138:	4a1e      	ldr	r2, [pc, #120]	; (81b4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    813a:	481f      	ldr	r0, [pc, #124]	; (81b8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    813c:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
    813e:	2901      	cmp	r1, #1
    8140:	bf08      	it	eq
    8142:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    8144:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    8148:	3380      	adds	r3, #128	; 0x80
    814a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    814e:	07db      	lsls	r3, r3, #31
    8150:	d41e      	bmi.n	8190 <gpio_nrfx_pin_interrupt_configure+0xa4>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    8152:	f10d 0407 	add.w	r4, sp, #7
    8156:	4621      	mov	r1, r4
    8158:	4628      	mov	r0, r5
    815a:	f002 fd05 	bl	ab68 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    815e:	4b17      	ldr	r3, [pc, #92]	; (81bc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    8160:	4298      	cmp	r0, r3
    8162:	d114      	bne.n	818e <gpio_nrfx_pin_interrupt_configure+0xa2>
			err = nrfx_gpiote_channel_alloc(&ch);
    8164:	4620      	mov	r0, r4
    8166:	f002 fd4d 	bl	ac04 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    816a:	4b15      	ldr	r3, [pc, #84]	; (81c0 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    816c:	4298      	cmp	r0, r3
    816e:	d00e      	beq.n	818e <gpio_nrfx_pin_interrupt_configure+0xa2>
				return -ENOMEM;
    8170:	f06f 000b 	mvn.w	r0, #11
}
    8174:	b005      	add	sp, #20
    8176:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8178:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    817c:	d005      	beq.n	818a <gpio_nrfx_pin_interrupt_configure+0x9e>
    817e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    8182:	bf0c      	ite	eq
    8184:	2302      	moveq	r3, #2
    8186:	2301      	movne	r3, #1
    8188:	e7cc      	b.n	8124 <gpio_nrfx_pin_interrupt_configure+0x38>
    818a:	2303      	movs	r3, #3
    818c:	e7ca      	b.n	8124 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    818e:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    8190:	2300      	movs	r3, #0
    8192:	4628      	mov	r0, r5
    8194:	4619      	mov	r1, r3
    8196:	aa02      	add	r2, sp, #8
    8198:	f002 fbc0 	bl	a91c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    819c:	4b08      	ldr	r3, [pc, #32]	; (81c0 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    819e:	4298      	cmp	r0, r3
    81a0:	d104      	bne.n	81ac <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    81a2:	2101      	movs	r1, #1
    81a4:	4628      	mov	r0, r5
    81a6:	f002 fd33 	bl	ac10 <nrfx_gpiote_trigger_enable>
    81aa:	e7af      	b.n	810c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    81ac:	f06f 0004 	mvn.w	r0, #4
    81b0:	e7e0      	b.n	8174 <gpio_nrfx_pin_interrupt_configure+0x88>
    81b2:	bf00      	nop
    81b4:	50842500 	.word	0x50842500
    81b8:	50842800 	.word	0x50842800
    81bc:	0bad0004 	.word	0x0bad0004
    81c0:	0bad0000 	.word	0x0bad0000

000081c4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    81c4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    81c6:	f002 fd0d 	bl	abe4 <nrfx_gpiote_is_init>
    81ca:	4604      	mov	r4, r0
    81cc:	b968      	cbnz	r0, 81ea <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    81ce:	f002 fce1 	bl	ab94 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    81d2:	4b08      	ldr	r3, [pc, #32]	; (81f4 <gpio_nrfx_init+0x30>)
    81d4:	4298      	cmp	r0, r3
    81d6:	d10a      	bne.n	81ee <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    81d8:	4621      	mov	r1, r4
    81da:	4807      	ldr	r0, [pc, #28]	; (81f8 <gpio_nrfx_init+0x34>)
    81dc:	f002 fcbe 	bl	ab5c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    81e0:	4622      	mov	r2, r4
    81e2:	2105      	movs	r1, #5
    81e4:	200d      	movs	r0, #13
    81e6:	f7ff f92b 	bl	7440 <z_arm_irq_priority_set>
		return 0;
    81ea:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    81ec:	bd10      	pop	{r4, pc}
		return -EIO;
    81ee:	f06f 0004 	mvn.w	r0, #4
    81f2:	e7fb      	b.n	81ec <gpio_nrfx_init+0x28>
    81f4:	0bad0000 	.word	0x0bad0000
    81f8:	000081fd 	.word	0x000081fd

000081fc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    81fc:	0943      	lsrs	r3, r0, #5
{
    81fe:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    8200:	d002      	beq.n	8208 <nrfx_gpio_handler+0xc>
    8202:	2b01      	cmp	r3, #1
    8204:	d015      	beq.n	8232 <nrfx_gpio_handler+0x36>
}
    8206:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    8208:	4e0b      	ldr	r6, [pc, #44]	; (8238 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    820a:	6933      	ldr	r3, [r6, #16]
    820c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    820e:	2900      	cmp	r1, #0
    8210:	d0f9      	beq.n	8206 <nrfx_gpio_handler+0xa>
    8212:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    8214:	f000 031f 	and.w	r3, r0, #31
    8218:	680c      	ldr	r4, [r1, #0]
    821a:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    821c:	688a      	ldr	r2, [r1, #8]
    821e:	402a      	ands	r2, r5
    8220:	d002      	beq.n	8228 <nrfx_gpio_handler+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    8222:	4630      	mov	r0, r6
    8224:	684b      	ldr	r3, [r1, #4]
    8226:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8228:	2c00      	cmp	r4, #0
    822a:	d0ec      	beq.n	8206 <nrfx_gpio_handler+0xa>
    822c:	4621      	mov	r1, r4
    822e:	6824      	ldr	r4, [r4, #0]
    8230:	e7f4      	b.n	821c <nrfx_gpio_handler+0x20>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    8232:	4e02      	ldr	r6, [pc, #8]	; (823c <nrfx_gpio_handler+0x40>)
    8234:	e7e9      	b.n	820a <nrfx_gpio_handler+0xe>
    8236:	bf00      	nop
    8238:	00015828 	.word	0x00015828
    823c:	00015840 	.word	0x00015840

00008240 <gpio_nrfx_pin_configure>:
{
    8240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    8244:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8246:	f001 051f 	and.w	r5, r1, #31
    824a:	7b3b      	ldrb	r3, [r7, #12]
{
    824c:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    824e:	4614      	mov	r4, r2
{
    8250:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8252:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    8256:	b9ca      	cbnz	r2, 828c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    8258:	a902      	add	r1, sp, #8
    825a:	4628      	mov	r0, r5
    825c:	f002 fc84 	bl	ab68 <nrfx_gpiote_channel_get>
    8260:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    8262:	4628      	mov	r0, r5
    8264:	f002 fd42 	bl	acec <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    8268:	4b49      	ldr	r3, [pc, #292]	; (8390 <gpio_nrfx_pin_configure+0x150>)
    826a:	4298      	cmp	r0, r3
    826c:	d004      	beq.n	8278 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    826e:	f06f 0004 	mvn.w	r0, #4
}
    8272:	b005      	add	sp, #20
    8274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    8278:	4284      	cmp	r4, r0
    827a:	d105      	bne.n	8288 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    827c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    8280:	f002 fcba 	bl	abf8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    8284:	42a0      	cmp	r0, r4
    8286:	d1f2      	bne.n	826e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    8288:	2000      	movs	r0, #0
    828a:	e7f2      	b.n	8272 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    828c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    8290:	f10d 0103 	add.w	r1, sp, #3
    8294:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    8296:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    829a:	f002 fc65 	bl	ab68 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    829e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    82a0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    82a2:	4649      	mov	r1, r9
    82a4:	4628      	mov	r0, r5
    82a6:	aa02      	add	r2, sp, #8
    82a8:	f002 fb38 	bl	a91c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    82ac:	4b38      	ldr	r3, [pc, #224]	; (8390 <gpio_nrfx_pin_configure+0x150>)
    82ae:	4298      	cmp	r0, r3
    82b0:	d002      	beq.n	82b8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    82b2:	f06f 0015 	mvn.w	r0, #21
    82b6:	e7dc      	b.n	8272 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    82b8:	4580      	cmp	r8, r0
    82ba:	d103      	bne.n	82c4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    82bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    82c0:	f002 fc9a 	bl	abf8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    82c4:	03a3      	lsls	r3, r4, #14
    82c6:	d54f      	bpl.n	8368 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    82c8:	f240 6306 	movw	r3, #1542	; 0x606
    82cc:	f240 2206 	movw	r2, #518	; 0x206
    82d0:	4023      	ands	r3, r4
    82d2:	4293      	cmp	r3, r2
    82d4:	d03a      	beq.n	834c <gpio_nrfx_pin_configure+0x10c>
    82d6:	d80c      	bhi.n	82f2 <gpio_nrfx_pin_configure+0xb2>
    82d8:	2b06      	cmp	r3, #6
    82da:	d015      	beq.n	8308 <gpio_nrfx_pin_configure+0xc8>
    82dc:	d804      	bhi.n	82e8 <gpio_nrfx_pin_configure+0xa8>
    82de:	b19b      	cbz	r3, 8308 <gpio_nrfx_pin_configure+0xc8>
    82e0:	2b02      	cmp	r3, #2
    82e2:	d1e6      	bne.n	82b2 <gpio_nrfx_pin_configure+0x72>
    82e4:	2304      	movs	r3, #4
    82e6:	e00f      	b.n	8308 <gpio_nrfx_pin_configure+0xc8>
    82e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    82ec:	d1e1      	bne.n	82b2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    82ee:	2301      	movs	r3, #1
    82f0:	e00a      	b.n	8308 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    82f2:	f240 4202 	movw	r2, #1026	; 0x402
    82f6:	4293      	cmp	r3, r2
    82f8:	d02a      	beq.n	8350 <gpio_nrfx_pin_configure+0x110>
    82fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    82fe:	d029      	beq.n	8354 <gpio_nrfx_pin_configure+0x114>
    8300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8304:	d1d5      	bne.n	82b2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    8306:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    8308:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    830c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    8310:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    8314:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    8316:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    831a:	bf4c      	ite	mi
    831c:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    831e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    8322:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    8324:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    8328:	d516      	bpl.n	8358 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    832a:	2101      	movs	r1, #1
    832c:	687b      	ldr	r3, [r7, #4]
    832e:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    8332:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    8334:	2200      	movs	r2, #0
    8336:	4628      	mov	r0, r5
    8338:	a901      	add	r1, sp, #4
    833a:	f002 fb9b 	bl	aa74 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    833e:	4b14      	ldr	r3, [pc, #80]	; (8390 <gpio_nrfx_pin_configure+0x150>)
    8340:	4298      	cmp	r0, r3
    8342:	bf14      	ite	ne
    8344:	f06f 0015 	mvnne.w	r0, #21
    8348:	2000      	moveq	r0, #0
    834a:	e792      	b.n	8272 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    834c:	2307      	movs	r3, #7
    834e:	e7db      	b.n	8308 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    8350:	2305      	movs	r3, #5
    8352:	e7d9      	b.n	8308 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    8354:	2303      	movs	r3, #3
    8356:	e7d7      	b.n	8308 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    8358:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    835a:	bf41      	itttt	mi
    835c:	2101      	movmi	r1, #1
    835e:	687b      	ldrmi	r3, [r7, #4]
    8360:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    8364:	60de      	strmi	r6, [r3, #12]
}
    8366:	e7e5      	b.n	8334 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
    8368:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    836a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    836e:	bf4c      	ite	mi
    8370:	2403      	movmi	r4, #3
    8372:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    8376:	461a      	mov	r2, r3
    8378:	4628      	mov	r0, r5
    837a:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    837c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    8380:	f002 facc 	bl	a91c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    8384:	4b02      	ldr	r3, [pc, #8]	; (8390 <gpio_nrfx_pin_configure+0x150>)
    8386:	4298      	cmp	r0, r3
    8388:	f43f af7e 	beq.w	8288 <gpio_nrfx_pin_configure+0x48>
    838c:	e791      	b.n	82b2 <gpio_nrfx_pin_configure+0x72>
    838e:	bf00      	nop
    8390:	0bad0000 	.word	0x0bad0000

00008394 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    8394:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    8396:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    8398:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    839c:	f003 fae4 	bl	b968 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    83a0:	4b03      	ldr	r3, [pc, #12]	; (83b0 <i2c_nrfx_twim_recover_bus+0x1c>)
    83a2:	4298      	cmp	r0, r3
}
    83a4:	bf14      	ite	ne
    83a6:	f06f 000f 	mvnne.w	r0, #15
    83aa:	2000      	moveq	r0, #0
    83ac:	bd08      	pop	{r3, pc}
    83ae:	bf00      	nop
    83b0:	0bad0000 	.word	0x0bad0000

000083b4 <init_twim>:
{
    83b4:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    83b6:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    83b8:	4a08      	ldr	r2, [pc, #32]	; (83dc <init_twim+0x28>)
    83ba:	4623      	mov	r3, r4
    83bc:	f104 0120 	add.w	r1, r4, #32
    83c0:	6840      	ldr	r0, [r0, #4]
    83c2:	f002 ff9f 	bl	b304 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    83c6:	4b06      	ldr	r3, [pc, #24]	; (83e0 <init_twim+0x2c>)
    83c8:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
    83ca:	bf05      	ittet	eq
    83cc:	2301      	moveq	r3, #1
	return 0;
    83ce:	2000      	moveq	r0, #0
		return -EIO;
    83d0:	f06f 0004 	mvnne.w	r0, #4
	dev_data->twim_initialized = true;
    83d4:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
}
    83d8:	bd10      	pop	{r4, pc}
    83da:	bf00      	nop
    83dc:	00008431 	.word	0x00008431
    83e0:	0bad0000 	.word	0x0bad0000

000083e4 <i2c_nrfx_twim_configure>:
{
    83e4:	b570      	push	{r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    83e6:	f011 0401 	ands.w	r4, r1, #1
{
    83ea:	4605      	mov	r5, r0
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    83ec:	6906      	ldr	r6, [r0, #16]
	if (I2C_ADDR_10_BITS & i2c_config) {
    83ee:	d118      	bne.n	8422 <i2c_nrfx_twim_configure+0x3e>
	switch (I2C_SPEED_GET(i2c_config)) {
    83f0:	f3c1 0142 	ubfx	r1, r1, #1, #3
    83f4:	3901      	subs	r1, #1
    83f6:	2902      	cmp	r1, #2
    83f8:	d813      	bhi.n	8422 <i2c_nrfx_twim_configure+0x3e>
    83fa:	4b0c      	ldr	r3, [pc, #48]	; (842c <i2c_nrfx_twim_configure+0x48>)
	if (frequency != dev_data->twim_config.frequency) {
    83fc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    83fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    8402:	4293      	cmp	r3, r2
    8404:	d010      	beq.n	8428 <i2c_nrfx_twim_configure+0x44>
		dev_data->twim_config.frequency = frequency;
    8406:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dev_data->twim_initialized) {
    8408:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    840c:	b123      	cbz	r3, 8418 <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
    840e:	6840      	ldr	r0, [r0, #4]
    8410:	f003 f82e 	bl	b470 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    8414:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
		return init_twim(dev);
    8418:	4628      	mov	r0, r5
}
    841a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return init_twim(dev);
    841e:	f7ff bfc9 	b.w	83b4 <init_twim>
		return -EINVAL;
    8422:	f06f 0015 	mvn.w	r0, #21
}
    8426:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    8428:	4620      	mov	r0, r4
    842a:	e7fc      	b.n	8426 <i2c_nrfx_twim_configure+0x42>
    842c:	0001680c 	.word	0x0001680c

00008430 <event_handler>:
	switch (p_event->type) {
    8430:	7803      	ldrb	r3, [r0, #0]
    8432:	2b01      	cmp	r3, #1
    8434:	d008      	beq.n	8448 <event_handler+0x18>
    8436:	2b02      	cmp	r3, #2
    8438:	d008      	beq.n	844c <event_handler+0x1c>
    843a:	b94b      	cbnz	r3, 8450 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    843c:	4b05      	ldr	r3, [pc, #20]	; (8454 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    843e:	634b      	str	r3, [r1, #52]	; 0x34
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8440:	f101 0010 	add.w	r0, r1, #16
    8444:	f003 bdc4 	b.w	bfd0 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    8448:	4b03      	ldr	r3, [pc, #12]	; (8458 <event_handler+0x28>)
    844a:	e7f8      	b.n	843e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    844c:	4b03      	ldr	r3, [pc, #12]	; (845c <event_handler+0x2c>)
    844e:	e7f6      	b.n	843e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    8450:	4b03      	ldr	r3, [pc, #12]	; (8460 <event_handler+0x30>)
    8452:	e7f4      	b.n	843e <event_handler+0xe>
    8454:	0bad0000 	.word	0x0bad0000
    8458:	0bae0001 	.word	0x0bae0001
    845c:	0bae0002 	.word	0x0bae0002
    8460:	0bad0001 	.word	0x0bad0001

00008464 <i2c_nrfx_twim_transfer>:
{
    8464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8468:	4698      	mov	r8, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    846a:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    846c:	6906      	ldr	r6, [r0, #16]
{
    846e:	b089      	sub	sp, #36	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    8470:	893b      	ldrh	r3, [r7, #8]
{
    8472:	4605      	mov	r5, r0
    8474:	460c      	mov	r4, r1
    8476:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    8478:	2100      	movs	r1, #0
    847a:	2214      	movs	r2, #20
    847c:	a803      	add	r0, sp, #12
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    847e:	9300      	str	r3, [sp, #0]
	uint8_t *msg_buf = dev_data->msg_buf;
    8480:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
    8484:	f00c fbbe 	bl	14c04 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    8488:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
	nrfx_twim_xfer_desc_t cur_xfer = {
    848c:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    8490:	b1bb      	cbz	r3, 84c2 <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
    8492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    849a:	4630      	mov	r0, r6
    849c:	f003 fdb8 	bl	c010 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    84a0:	f106 0a10 	add.w	sl, r6, #16
	for (size_t i = 0; i < num_msgs; i++) {
    84a4:	f04f 0800 	mov.w	r8, #0
    84a8:	2200      	movs	r2, #0
    84aa:	2300      	movs	r3, #0
    84ac:	4650      	mov	r0, sl
    84ae:	f003 fdaf 	bl	c010 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    84b2:	4638      	mov	r0, r7
    84b4:	f002 ffae 	bl	b414 <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
    84b8:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    84ba:	45d8      	cmp	r8, fp
    84bc:	d309      	bcc.n	84d2 <i2c_nrfx_twim_transfer+0x6e>
    84be:	2400      	movs	r4, #0
    84c0:	e051      	b.n	8566 <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    84c2:	4628      	mov	r0, r5
    84c4:	f7ff ff76 	bl	83b4 <init_twim>
    84c8:	2800      	cmp	r0, #0
    84ca:	dae2      	bge.n	8492 <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
    84cc:	f06f 0404 	mvn.w	r4, #4
    84d0:	e04f      	b.n	8572 <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    84d2:	7a21      	ldrb	r1, [r4, #8]
    84d4:	070a      	lsls	r2, r1, #28
    84d6:	f100 808e 	bmi.w	85f6 <i2c_nrfx_twim_transfer+0x192>
		bool concat_next = ((i + 1) < num_msgs)
    84da:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    84de:	45d8      	cmp	r8, fp
    84e0:	6862      	ldr	r2, [r4, #4]
    84e2:	d20a      	bcs.n	84fa <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    84e4:	078b      	lsls	r3, r1, #30
    84e6:	d408      	bmi.n	84fa <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    84e8:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    84ea:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    84ee:	f000 0001 	and.w	r0, r0, #1
    84f2:	f003 0304 	and.w	r3, r3, #4
    84f6:	4303      	orrs	r3, r0
    84f8:	d016      	beq.n	8528 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
    84fa:	b1bd      	cbz	r5, 852c <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
    84fc:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    84fe:	9800      	ldr	r0, [sp, #0]
    8500:	eb05 0c02 	add.w	ip, r5, r2
    8504:	4584      	cmp	ip, r0
    8506:	d879      	bhi.n	85fc <i2c_nrfx_twim_transfer+0x198>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    8508:	07c8      	lsls	r0, r1, #31
    850a:	d406      	bmi.n	851a <i2c_nrfx_twim_transfer+0xb6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    850c:	6821      	ldr	r1, [r4, #0]
    850e:	eb09 0005 	add.w	r0, r9, r5
    8512:	9301      	str	r3, [sp, #4]
    8514:	f00c fb4f 	bl	14bb6 <memcpy>
    8518:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
    851a:	6862      	ldr	r2, [r4, #4]
    851c:	4415      	add	r5, r2
    851e:	b2ad      	uxth	r5, r5
		if (concat_next) {
    8520:	2b00      	cmp	r3, #0
    8522:	d037      	beq.n	8594 <i2c_nrfx_twim_transfer+0x130>
    8524:	340c      	adds	r4, #12
    8526:	e7c8      	b.n	84ba <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
    8528:	2301      	movs	r3, #1
    852a:	e7e8      	b.n	84fe <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    852c:	07c9      	lsls	r1, r1, #31
    852e:	d524      	bpl.n	857a <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
    8530:	2500      	movs	r5, #0
    8532:	6823      	ldr	r3, [r4, #0]
    8534:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    8536:	6863      	ldr	r3, [r4, #4]
    8538:	9304      	str	r3, [sp, #16]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    853a:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    853c:	4638      	mov	r0, r7
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    853e:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    8542:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    8546:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    854a:	a903      	add	r1, sp, #12
    854c:	bf0c      	ite	eq
    854e:	2220      	moveq	r2, #32
    8550:	2200      	movne	r2, #0
    8552:	f002 ffb9 	bl	b4c8 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    8556:	4b2e      	ldr	r3, [pc, #184]	; (8610 <i2c_nrfx_twim_transfer+0x1ac>)
    8558:	4298      	cmp	r0, r3
    855a:	d021      	beq.n	85a0 <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
    855c:	330b      	adds	r3, #11
    855e:	4298      	cmp	r0, r3
    8560:	d052      	beq.n	8608 <i2c_nrfx_twim_transfer+0x1a4>
			ret = -EIO;
    8562:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    8566:	4638      	mov	r0, r7
    8568:	f002 ff64 	bl	b434 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    856c:	4630      	mov	r0, r6
    856e:	f003 fd2f 	bl	bfd0 <z_impl_k_sem_give>
}
    8572:	4620      	mov	r0, r4
    8574:	b009      	add	sp, #36	; 0x24
    8576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    857a:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    857c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    8580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8584:	d0d4      	beq.n	8530 <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    8586:	897b      	ldrh	r3, [r7, #10]
    8588:	4293      	cmp	r3, r2
    858a:	d33a      	bcc.n	8602 <i2c_nrfx_twim_transfer+0x19e>
    858c:	4648      	mov	r0, r9
    858e:	f00c fb12 	bl	14bb6 <memcpy>
			msg_buf_used = msgs[i].len;
    8592:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    8594:	2d00      	cmp	r5, #0
    8596:	d0cb      	beq.n	8530 <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
    8598:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
    859c:	9504      	str	r5, [sp, #16]
    859e:	e7cc      	b.n	853a <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
    85a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    85a4:	2300      	movs	r3, #0
    85a6:	4650      	mov	r0, sl
    85a8:	f003 fd32 	bl	c010 <z_impl_k_sem_take>
		if (ret != 0) {
    85ac:	b138      	cbz	r0, 85be <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
    85ae:	4638      	mov	r0, r7
    85b0:	f002 ff40 	bl	b434 <nrfx_twim_disable>
    85b4:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
    85b8:	f003 f9d6 	bl	b968 <nrfx_twi_twim_bus_recover>
    85bc:	e7d1      	b.n	8562 <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
    85be:	6b73      	ldr	r3, [r6, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
    85c0:	4a13      	ldr	r2, [pc, #76]	; (8610 <i2c_nrfx_twim_transfer+0x1ac>)
    85c2:	4293      	cmp	r3, r2
    85c4:	d1cd      	bne.n	8562 <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
    85c6:	7a23      	ldrb	r3, [r4, #8]
    85c8:	07db      	lsls	r3, r3, #31
    85ca:	d401      	bmi.n	85d0 <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
    85cc:	2500      	movs	r5, #0
    85ce:	e7a9      	b.n	8524 <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
    85d0:	9b06      	ldr	r3, [sp, #24]
    85d2:	4599      	cmp	r9, r3
    85d4:	d1fa      	bne.n	85cc <i2c_nrfx_twim_transfer+0x168>
    85d6:	4623      	mov	r3, r4
    85d8:	e008      	b.n	85ec <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
    85da:	1aa9      	subs	r1, r5, r2
    85dc:	68d8      	ldr	r0, [r3, #12]
    85de:	b28d      	uxth	r5, r1
    85e0:	fa19 f181 	uxtah	r1, r9, r1
    85e4:	9301      	str	r3, [sp, #4]
    85e6:	f00c fae6 	bl	14bb6 <memcpy>
				j--;
    85ea:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
    85ec:	685a      	ldr	r2, [r3, #4]
    85ee:	3b0c      	subs	r3, #12
    85f0:	4295      	cmp	r5, r2
    85f2:	d2f2      	bcs.n	85da <i2c_nrfx_twim_transfer+0x176>
    85f4:	e7ea      	b.n	85cc <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
    85f6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    85fa:	e7b4      	b.n	8566 <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
    85fc:	f06f 041b 	mvn.w	r4, #27
    8600:	e7b1      	b.n	8566 <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
    8602:	f06f 0415 	mvn.w	r4, #21
    8606:	e7ae      	b.n	8566 <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
    8608:	f06f 040f 	mvn.w	r4, #15
    860c:	e7ab      	b.n	8566 <i2c_nrfx_twim_transfer+0x102>
    860e:	bf00      	nop
    8610:	0bad0000 	.word	0x0bad0000

00008614 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
    8614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    8618:	6905      	ldr	r5, [r0, #16]
{
    861a:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    861c:	6caf      	ldr	r7, [r5, #72]	; 0x48
		return ctx->rx_len;
    861e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
	if (!ctx->tx_len) {
    8620:	b98f      	cbnz	r7, 8646 <transfer_next_chunk+0x32>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    8622:	2c00      	cmp	r4, #0
    8624:	d14c      	bne.n	86c0 <transfer_next_chunk+0xac>
	_spi_context_cs_control(ctx, on, false);
    8626:	2200      	movs	r2, #0
    8628:	4628      	mov	r0, r5
    862a:	4611      	mov	r1, r2
    862c:	f00a f90b 	bl	12846 <_spi_context_cs_control>
	ctx->sync_status = status;
    8630:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    8632:	f105 0020 	add.w	r0, r5, #32
    8636:	f003 fccb 	bl	bfd0 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    863a:	2300      	movs	r3, #0
    863c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    8640:	b005      	add	sp, #20
    8642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (!ctx->rx_len) {
    8646:	463e      	mov	r6, r7
    8648:	b114      	cbz	r4, 8650 <transfer_next_chunk+0x3c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    864a:	42a7      	cmp	r7, r4
    864c:	bf28      	it	cs
    864e:	4626      	movcs	r6, r4
		const uint8_t *tx_buf = ctx->tx_buf;
    8650:	f8d5 8044 	ldr.w	r8, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    8654:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    8658:	f1b8 0f00 	cmp.w	r8, #0
    865c:	d032      	beq.n	86c4 <transfer_next_chunk+0xb0>
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    865e:	b38f      	cbz	r7, 86c4 <transfer_next_chunk+0xb0>
    8660:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
    8664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8668:	d02c      	beq.n	86c4 <transfer_next_chunk+0xb0>
			if (chunk_len > sizeof(dev_data->buffer)) {
    866a:	2e08      	cmp	r6, #8
    866c:	bf28      	it	cs
    866e:	2608      	movcs	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    8670:	f105 035e 	add.w	r3, r5, #94	; 0x5e
    8674:	4618      	mov	r0, r3
    8676:	4632      	mov	r2, r6
    8678:	4641      	mov	r1, r8
    867a:	f00c fa9c 	bl	14bb6 <memcpy>
    867e:	4603      	mov	r3, r0
		if (chunk_len > dev_config->max_chunk_len) {
    8680:	f8d9 2008 	ldr.w	r2, [r9, #8]
		xfer.p_tx_buffer = tx_buf;
    8684:	9300      	str	r3, [sp, #0]
    8686:	4296      	cmp	r6, r2
    8688:	bf28      	it	cs
    868a:	4616      	movcs	r6, r2
		dev_data->chunk_len = chunk_len;
    868c:	65ae      	str	r6, [r5, #88]	; 0x58
    868e:	f1b8 0f00 	cmp.w	r8, #0
    8692:	d019      	beq.n	86c8 <transfer_next_chunk+0xb4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    8694:	2f00      	cmp	r7, #0
    8696:	bf18      	it	ne
    8698:	4637      	movne	r7, r6
		xfer.p_rx_buffer = ctx->rx_buf;
    869a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    869c:	9701      	str	r7, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    869e:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    86a0:	b1a3      	cbz	r3, 86cc <transfer_next_chunk+0xb8>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    86a2:	2c00      	cmp	r4, #0
    86a4:	bf18      	it	ne
    86a6:	4634      	movne	r4, r6
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    86a8:	2200      	movs	r2, #0
    86aa:	4669      	mov	r1, sp
    86ac:	4648      	mov	r0, r9
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    86ae:	9403      	str	r4, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    86b0:	f002 fd7a 	bl	b1a8 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    86b4:	4b06      	ldr	r3, [pc, #24]	; (86d0 <transfer_next_chunk+0xbc>)
    86b6:	4298      	cmp	r0, r3
    86b8:	d0c2      	beq.n	8640 <transfer_next_chunk+0x2c>
			error = -EIO;
    86ba:	f06f 0404 	mvn.w	r4, #4
    86be:	e7b2      	b.n	8626 <transfer_next_chunk+0x12>
    86c0:	4626      	mov	r6, r4
    86c2:	e7c5      	b.n	8650 <transfer_next_chunk+0x3c>
    86c4:	4643      	mov	r3, r8
    86c6:	e7db      	b.n	8680 <transfer_next_chunk+0x6c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    86c8:	4647      	mov	r7, r8
    86ca:	e7e6      	b.n	869a <transfer_next_chunk+0x86>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    86cc:	461c      	mov	r4, r3
    86ce:	e7eb      	b.n	86a8 <transfer_next_chunk+0x94>
    86d0:	0bad0000 	.word	0x0bad0000

000086d4 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    86d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86d8:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    86da:	888b      	ldrh	r3, [r1, #4]
    86dc:	4681      	mov	r9, r0
	struct spi_nrfx_data *dev_data = dev->data;
    86de:	6904      	ldr	r4, [r0, #16]
    86e0:	0498      	lsls	r0, r3, #18
{
    86e2:	460d      	mov	r5, r1
    86e4:	4690      	mov	r8, r2
    86e6:	b08b      	sub	sp, #44	; 0x2c
    86e8:	f100 80e2 	bmi.w	88b0 <spi_nrfx_transceive+0x1dc>
	return z_impl_k_sem_take(sem, timeout);
    86ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    86f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    86f4:	f104 0010 	add.w	r0, r4, #16
    86f8:	f003 fc8a 	bl	c010 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    86fc:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    86fe:	f8d9 b004 	ldr.w	fp, [r9, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    8702:	f8d9 a010 	ldr.w	sl, [r9, #16]
	uint32_t max_freq = dev_config->max_freq;
    8706:	f8db 300c 	ldr.w	r3, [fp, #12]
    870a:	9301      	str	r3, [sp, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    870c:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
    8710:	9302      	str	r3, [sp, #8]
    8712:	b11b      	cbz	r3, 871c <spi_nrfx_transceive+0x48>
    8714:	f8da 3000 	ldr.w	r3, [sl]
    8718:	429d      	cmp	r5, r3
    871a:	d07b      	beq.n	8814 <spi_nrfx_transceive+0x140>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    871c:	88ae      	ldrh	r6, [r5, #4]
    871e:	0531      	lsls	r1, r6, #20
    8720:	f100 80fb 	bmi.w	891a <spi_nrfx_transceive+0x246>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    8724:	f016 0f09 	tst.w	r6, #9
    8728:	f040 80f4 	bne.w	8914 <spi_nrfx_transceive+0x240>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    872c:	f3c6 1345 	ubfx	r3, r6, #5, #6
    8730:	2b08      	cmp	r3, #8
    8732:	f040 80ef 	bne.w	8914 <spi_nrfx_transceive+0x240>
	if (spi_cfg->frequency < 125000) {
    8736:	682b      	ldr	r3, [r5, #0]
    8738:	9303      	str	r3, [sp, #12]
    873a:	9a03      	ldr	r2, [sp, #12]
    873c:	4b82      	ldr	r3, [pc, #520]	; (8948 <spi_nrfx_transceive+0x274>)
    873e:	429a      	cmp	r2, r3
    8740:	f240 80e8 	bls.w	8914 <spi_nrfx_transceive+0x240>
	if (max_freq > 16000000 &&
    8744:	4b81      	ldr	r3, [pc, #516]	; (894c <spi_nrfx_transceive+0x278>)
    8746:	9a01      	ldr	r2, [sp, #4]
    8748:	429a      	cmp	r2, r3
    874a:	d909      	bls.n	8760 <spi_nrfx_transceive+0x8c>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
    874c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    8750:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
    8754:	f012 0f03 	tst.w	r2, #3
    8758:	9a01      	ldr	r2, [sp, #4]
    875a:	bf18      	it	ne
    875c:	461a      	movne	r2, r3
    875e:	9201      	str	r2, [sp, #4]
	config = dev_config->def_config;
    8760:	f10d 0c14 	add.w	ip, sp, #20
    8764:	f10b 0e10 	add.w	lr, fp, #16
    8768:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    876c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8770:	f8de 3000 	ldr.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    8774:	9a01      	ldr	r2, [sp, #4]
	config = dev_config->def_config;
    8776:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    877a:	9b03      	ldr	r3, [sp, #12]
    877c:	4293      	cmp	r3, r2
    877e:	bf28      	it	cs
    8780:	4613      	movcs	r3, r2
	if (frequency < 250000) {
    8782:	4a73      	ldr	r2, [pc, #460]	; (8950 <spi_nrfx_transceive+0x27c>)
    8784:	4293      	cmp	r3, r2
    8786:	f240 809c 	bls.w	88c2 <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 500000) {
    878a:	4a72      	ldr	r2, [pc, #456]	; (8954 <spi_nrfx_transceive+0x280>)
    878c:	4293      	cmp	r3, r2
    878e:	f240 809b 	bls.w	88c8 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 1000000) {
    8792:	4a71      	ldr	r2, [pc, #452]	; (8958 <spi_nrfx_transceive+0x284>)
    8794:	4293      	cmp	r3, r2
    8796:	f240 809a 	bls.w	88ce <spi_nrfx_transceive+0x1fa>
	} else if (frequency < 2000000) {
    879a:	4a70      	ldr	r2, [pc, #448]	; (895c <spi_nrfx_transceive+0x288>)
    879c:	4293      	cmp	r3, r2
    879e:	f240 8099 	bls.w	88d4 <spi_nrfx_transceive+0x200>
	} else if (frequency < 4000000) {
    87a2:	4a6f      	ldr	r2, [pc, #444]	; (8960 <spi_nrfx_transceive+0x28c>)
    87a4:	4293      	cmp	r3, r2
    87a6:	f240 8098 	bls.w	88da <spi_nrfx_transceive+0x206>
	} else if (frequency < 8000000) {
    87aa:	4a6e      	ldr	r2, [pc, #440]	; (8964 <spi_nrfx_transceive+0x290>)
    87ac:	4293      	cmp	r3, r2
    87ae:	f0c0 8097 	bcc.w	88e0 <spi_nrfx_transceive+0x20c>
	} else if (frequency < 16000000) {
    87b2:	4a66      	ldr	r2, [pc, #408]	; (894c <spi_nrfx_transceive+0x278>)
    87b4:	4293      	cmp	r3, r2
    87b6:	f0c0 8096 	bcc.w	88e6 <spi_nrfx_transceive+0x212>
		return NRF_SPIM_FREQ_32M;
    87ba:	4a6b      	ldr	r2, [pc, #428]	; (8968 <spi_nrfx_transceive+0x294>)
    87bc:	4293      	cmp	r3, r2
    87be:	bf34      	ite	cc
    87c0:	f04f 6320 	movcc.w	r3, #167772160	; 0xa000000
    87c4:	f04f 53a0 	movcs.w	r3, #335544320	; 0x14000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    87c8:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    87ca:	9307      	str	r3, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    87cc:	f006 0304 	and.w	r3, r6, #4
    87d0:	f140 808c 	bpl.w	88ec <spi_nrfx_transceive+0x218>
			return NRF_SPIM_MODE_2;
    87d4:	2b00      	cmp	r3, #0
    87d6:	bf14      	ite	ne
    87d8:	2303      	movne	r3, #3
    87da:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    87dc:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    87e0:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
    87e2:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    87e6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    87ea:	b12b      	cbz	r3, 87f8 <spi_nrfx_transceive+0x124>
		nrfx_spim_uninit(&dev_config->spim);
    87ec:	4658      	mov	r0, fp
    87ee:	f002 fc93 	bl	b118 <nrfx_spim_uninit>
		dev_data->initialized = false;
    87f2:	2300      	movs	r3, #0
    87f4:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    87f8:	4653      	mov	r3, sl
    87fa:	4658      	mov	r0, fp
    87fc:	4a5b      	ldr	r2, [pc, #364]	; (896c <spi_nrfx_transceive+0x298>)
    87fe:	a905      	add	r1, sp, #20
    8800:	f002 fba8 	bl	af54 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    8804:	4b5a      	ldr	r3, [pc, #360]	; (8970 <spi_nrfx_transceive+0x29c>)
    8806:	4298      	cmp	r0, r3
    8808:	d174      	bne.n	88f4 <spi_nrfx_transceive+0x220>
	dev_data->initialized = true;
    880a:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
    880c:	f8ca 5000 	str.w	r5, [sl]
	dev_data->initialized = true;
    8810:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		dev_data->busy = true;
    8814:	2301      	movs	r3, #1
    8816:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    881a:	f1b8 0f00 	cmp.w	r8, #0
    881e:	d17f      	bne.n	8920 <spi_nrfx_transceive+0x24c>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8820:	4642      	mov	r2, r8
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    8822:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8826:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    8828:	f104 0138 	add.w	r1, r4, #56	; 0x38
    882c:	f104 0248 	add.w	r2, r4, #72	; 0x48
    8830:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8834:	f009 ffe2 	bl	127fc <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    8838:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    883a:	2f00      	cmp	r7, #0
    883c:	d179      	bne.n	8932 <spi_nrfx_transceive+0x25e>
    883e:	63e7      	str	r7, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    8840:	6427      	str	r7, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    8842:	f104 0250 	add.w	r2, r4, #80	; 0x50
    8846:	f104 0140 	add.w	r1, r4, #64	; 0x40
    884a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    884e:	f009 ffd5 	bl	127fc <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    8852:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    8854:	2101      	movs	r1, #1
    8856:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    8858:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
    885a:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    885c:	4620      	mov	r0, r4
    885e:	f009 fff2 	bl	12846 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    8862:	4648      	mov	r0, r9
    8864:	f7ff fed6 	bl	8614 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    8868:	6d25      	ldr	r5, [r4, #80]	; 0x50
    886a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    886c:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    886e:	429d      	cmp	r5, r3
    8870:	bf38      	it	cc
    8872:	461d      	movcc	r5, r3
    8874:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    8878:	435d      	muls	r5, r3
			     ctx->config->frequency;
    887a:	f857 3b20 	ldr.w	r3, [r7], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    887e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    8882:	681b      	ldr	r3, [r3, #0]
    8884:	4631      	mov	r1, r6
    8886:	fbb5 f5f3 	udiv	r5, r5, r3
    888a:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    888e:	35c8      	adds	r5, #200	; 0xc8
    8890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8894:	2300      	movs	r3, #0
    8896:	fbe5 010c 	umlal	r0, r1, r5, ip
    889a:	f7f8 f953 	bl	b44 <__aeabi_uldivmod>
    889e:	4602      	mov	r2, r0
    88a0:	460b      	mov	r3, r1
    88a2:	4638      	mov	r0, r7
    88a4:	f003 fbb4 	bl	c010 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    88a8:	2800      	cmp	r0, #0
    88aa:	d149      	bne.n	8940 <spi_nrfx_transceive+0x26c>
	status = ctx->sync_status;
    88ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    88ae:	e023      	b.n	88f8 <spi_nrfx_transceive+0x224>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    88b0:	69a3      	ldr	r3, [r4, #24]
    88b2:	2b00      	cmp	r3, #0
    88b4:	f47f af1a 	bne.w	86ec <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    88b8:	6863      	ldr	r3, [r4, #4]
    88ba:	4299      	cmp	r1, r3
    88bc:	f47f af16 	bne.w	86ec <spi_nrfx_transceive+0x18>
    88c0:	e71d      	b.n	86fe <spi_nrfx_transceive+0x2a>
		return NRF_SPIM_FREQ_125K;
    88c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    88c6:	e77f      	b.n	87c8 <spi_nrfx_transceive+0xf4>
		return NRF_SPIM_FREQ_250K;
    88c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    88cc:	e77c      	b.n	87c8 <spi_nrfx_transceive+0xf4>
		return NRF_SPIM_FREQ_500K;
    88ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    88d2:	e779      	b.n	87c8 <spi_nrfx_transceive+0xf4>
		return NRF_SPIM_FREQ_1M;
    88d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    88d8:	e776      	b.n	87c8 <spi_nrfx_transceive+0xf4>
		return NRF_SPIM_FREQ_2M;
    88da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    88de:	e773      	b.n	87c8 <spi_nrfx_transceive+0xf4>
		return NRF_SPIM_FREQ_4M;
    88e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88e4:	e770      	b.n	87c8 <spi_nrfx_transceive+0xf4>
		return NRF_SPIM_FREQ_8M;
    88e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    88ea:	e76d      	b.n	87c8 <spi_nrfx_transceive+0xf4>
			return NRF_SPIM_MODE_0;
    88ec:	3b00      	subs	r3, #0
    88ee:	bf18      	it	ne
    88f0:	2301      	movne	r3, #1
    88f2:	e773      	b.n	87dc <spi_nrfx_transceive+0x108>
		return -EIO;
    88f4:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    88f8:	6823      	ldr	r3, [r4, #0]
    88fa:	889b      	ldrh	r3, [r3, #4]
    88fc:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    8900:	d104      	bne.n	890c <spi_nrfx_transceive+0x238>
		ctx->owner = NULL;
    8902:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    8904:	f104 0010 	add.w	r0, r4, #16
    8908:	f003 fb62 	bl	bfd0 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
    890c:	4628      	mov	r0, r5
    890e:	b00b      	add	sp, #44	; 0x2c
    8910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    8914:	f06f 0515 	mvn.w	r5, #21
    8918:	e7ee      	b.n	88f8 <spi_nrfx_transceive+0x224>
		return -ENOTSUP;
    891a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    891e:	e7eb      	b.n	88f8 <spi_nrfx_transceive+0x224>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    8920:	f8d8 2000 	ldr.w	r2, [r8]
    8924:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8926:	2a00      	cmp	r2, #0
    8928:	f43f af7d 	beq.w	8826 <spi_nrfx_transceive+0x152>
    892c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8930:	e779      	b.n	8826 <spi_nrfx_transceive+0x152>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    8932:	683b      	ldr	r3, [r7, #0]
    8934:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    8936:	b10b      	cbz	r3, 893c <spi_nrfx_transceive+0x268>
    8938:	687f      	ldr	r7, [r7, #4]
    893a:	e781      	b.n	8840 <spi_nrfx_transceive+0x16c>
    893c:	461f      	mov	r7, r3
    893e:	e77f      	b.n	8840 <spi_nrfx_transceive+0x16c>
		return -ETIMEDOUT;
    8940:	f06f 0573 	mvn.w	r5, #115	; 0x73
    8944:	e7d8      	b.n	88f8 <spi_nrfx_transceive+0x224>
    8946:	bf00      	nop
    8948:	0001e847 	.word	0x0001e847
    894c:	00f42400 	.word	0x00f42400
    8950:	0003d08f 	.word	0x0003d08f
    8954:	0007a11f 	.word	0x0007a11f
    8958:	000f423f 	.word	0x000f423f
    895c:	001e847f 	.word	0x001e847f
    8960:	003d08ff 	.word	0x003d08ff
    8964:	007a1200 	.word	0x007a1200
    8968:	01e84800 	.word	0x01e84800
    896c:	00012983 	.word	0x00012983
    8970:	0bad0000 	.word	0x0bad0000

00008974 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    8974:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    8976:	794b      	ldrb	r3, [r1, #5]
    8978:	2b01      	cmp	r3, #1
    897a:	d028      	beq.n	89ce <uarte_nrfx_configure+0x5a>
    897c:	2b03      	cmp	r3, #3
    897e:	d123      	bne.n	89c8 <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    8980:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8982:	798b      	ldrb	r3, [r1, #6]
    8984:	2b03      	cmp	r3, #3
    8986:	d11f      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    8988:	79cd      	ldrb	r5, [r1, #7]
    898a:	b10d      	cbz	r5, 8990 <uarte_nrfx_configure+0x1c>
    898c:	2d01      	cmp	r5, #1
    898e:	d11b      	bne.n	89c8 <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    8990:	790a      	ldrb	r2, [r1, #4]
    8992:	2a01      	cmp	r2, #1
    8994:	d01d      	beq.n	89d2 <uarte_nrfx_configure+0x5e>
    8996:	2a02      	cmp	r2, #2
    8998:	d01f      	beq.n	89da <uarte_nrfx_configure+0x66>
    899a:	b9aa      	cbnz	r2, 89c8 <uarte_nrfx_configure+0x54>
    899c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    899e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    89a0:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    89a2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    89a6:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    89a8:	d06e      	beq.n	8a88 <uarte_nrfx_configure+0x114>
    89aa:	d833      	bhi.n	8a14 <uarte_nrfx_configure+0xa0>
    89ac:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    89b0:	d06d      	beq.n	8a8e <uarte_nrfx_configure+0x11a>
    89b2:	d81c      	bhi.n	89ee <uarte_nrfx_configure+0x7a>
    89b4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    89b8:	d06b      	beq.n	8a92 <uarte_nrfx_configure+0x11e>
    89ba:	d810      	bhi.n	89de <uarte_nrfx_configure+0x6a>
    89bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    89c0:	d06a      	beq.n	8a98 <uarte_nrfx_configure+0x124>
    89c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    89c6:	d06a      	beq.n	8a9e <uarte_nrfx_configure+0x12a>
    89c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    89cc:	e05b      	b.n	8a86 <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
    89ce:	2700      	movs	r7, #0
    89d0:	e7d7      	b.n	8982 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    89d2:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    89d6:	220e      	movs	r2, #14
    89d8:	e7e1      	b.n	899e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    89da:	2400      	movs	r4, #0
    89dc:	e7fb      	b.n	89d6 <uarte_nrfx_configure+0x62>
	switch (baudrate) {
    89de:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    89e2:	d05f      	beq.n	8aa4 <uarte_nrfx_configure+0x130>
    89e4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    89e8:	d1ee      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    89ea:	4b39      	ldr	r3, [pc, #228]	; (8ad0 <uarte_nrfx_configure+0x15c>)
    89ec:	e03e      	b.n	8a6c <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    89ee:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    89f2:	d05a      	beq.n	8aaa <uarte_nrfx_configure+0x136>
    89f4:	d807      	bhi.n	8a06 <uarte_nrfx_configure+0x92>
    89f6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    89fa:	d058      	beq.n	8aae <uarte_nrfx_configure+0x13a>
    89fc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    8a00:	d1e2      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    8a02:	4b34      	ldr	r3, [pc, #208]	; (8ad4 <uarte_nrfx_configure+0x160>)
    8a04:	e032      	b.n	8a6c <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    8a06:	f647 2c12 	movw	ip, #31250	; 0x7a12
    8a0a:	4563      	cmp	r3, ip
    8a0c:	d1dc      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    8a0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8a12:	e02b      	b.n	8a6c <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    8a14:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    8a18:	d04b      	beq.n	8ab2 <uarte_nrfx_configure+0x13e>
    8a1a:	d813      	bhi.n	8a44 <uarte_nrfx_configure+0xd0>
    8a1c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    8a20:	d04a      	beq.n	8ab8 <uarte_nrfx_configure+0x144>
    8a22:	d809      	bhi.n	8a38 <uarte_nrfx_configure+0xc4>
    8a24:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    8a28:	4563      	cmp	r3, ip
    8a2a:	d047      	beq.n	8abc <uarte_nrfx_configure+0x148>
    8a2c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    8a30:	d1ca      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    8a32:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    8a36:	e019      	b.n	8a6c <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    8a38:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    8a3c:	d1c4      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    8a3e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    8a42:	e013      	b.n	8a6c <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    8a44:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    8a48:	d03b      	beq.n	8ac2 <uarte_nrfx_configure+0x14e>
    8a4a:	d809      	bhi.n	8a60 <uarte_nrfx_configure+0xec>
    8a4c:	f8df c098 	ldr.w	ip, [pc, #152]	; 8ae8 <uarte_nrfx_configure+0x174>
    8a50:	4563      	cmp	r3, ip
    8a52:	d039      	beq.n	8ac8 <uarte_nrfx_configure+0x154>
    8a54:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    8a58:	d1b6      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    8a5a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    8a5e:	e005      	b.n	8a6c <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    8a60:	f8df c088 	ldr.w	ip, [pc, #136]	; 8aec <uarte_nrfx_configure+0x178>
    8a64:	4563      	cmp	r3, ip
    8a66:	d1af      	bne.n	89c8 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    8a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    8a6c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    8a6e:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    8a70:	433a      	orrs	r2, r7
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    8a72:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    8a76:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    8a78:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    8a7a:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    8a7e:	c903      	ldmia	r1, {r0, r1}
    8a80:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    8a84:	2000      	movs	r0, #0
}
    8a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    8a88:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    8a8c:	e7ee      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    8a8e:	4b12      	ldr	r3, [pc, #72]	; (8ad8 <uarte_nrfx_configure+0x164>)
    8a90:	e7ec      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    8a92:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    8a96:	e7e9      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
    8a98:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    8a9c:	e7e6      	b.n	8a6c <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    8a9e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    8aa2:	e7e3      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    8aa4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    8aa8:	e7e0      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    8aaa:	4b0c      	ldr	r3, [pc, #48]	; (8adc <uarte_nrfx_configure+0x168>)
    8aac:	e7de      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    8aae:	4b0c      	ldr	r3, [pc, #48]	; (8ae0 <uarte_nrfx_configure+0x16c>)
    8ab0:	e7dc      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    8ab2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    8ab6:	e7d9      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    8ab8:	4b0a      	ldr	r3, [pc, #40]	; (8ae4 <uarte_nrfx_configure+0x170>)
    8aba:	e7d7      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    8abc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    8ac0:	e7d4      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    8ac2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    8ac6:	e7d1      	b.n	8a6c <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    8ac8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8acc:	e7ce      	b.n	8a6c <uarte_nrfx_configure+0xf8>
    8ace:	bf00      	nop
    8ad0:	0013b000 	.word	0x0013b000
    8ad4:	004ea000 	.word	0x004ea000
    8ad8:	00275000 	.word	0x00275000
    8adc:	0075c000 	.word	0x0075c000
    8ae0:	003af000 	.word	0x003af000
    8ae4:	013a9000 	.word	0x013a9000
    8ae8:	0003d090 	.word	0x0003d090
    8aec:	000f4240 	.word	0x000f4240

00008af0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8af0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8af4:	4607      	mov	r7, r0
    8af6:	2200      	movs	r2, #0
    8af8:	2101      	movs	r1, #1
    8afa:	2008      	movs	r0, #8
    8afc:	f7fe fca0 	bl	7440 <z_arm_irq_priority_set>
    8b00:	2008      	movs	r0, #8
    8b02:	f7fe fc6b 	bl	73dc <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8b06:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    8b08:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    8b0c:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    8b0e:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    8b12:	f8d8 900c 	ldr.w	r9, [r8, #12]
    8b16:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    8b1a:	4648      	mov	r0, r9
	data->dev = dev;
    8b1c:	6037      	str	r7, [r6, #0]
    8b1e:	aa01      	add	r2, sp, #4
    8b20:	f00a f863 	bl	12bea <pinctrl_lookup_state>
	if (ret < 0) {
    8b24:	1e05      	subs	r5, r0, #0
    8b26:	db4f      	blt.n	8bc8 <uarte_0_init+0xd8>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    8b28:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    8b2a:	f8d9 2000 	ldr.w	r2, [r9]
    8b2e:	7919      	ldrb	r1, [r3, #4]
    8b30:	6818      	ldr	r0, [r3, #0]
    8b32:	f00a f877 	bl	12c24 <pinctrl_configure_pins>
	if (err < 0) {
    8b36:	1e05      	subs	r5, r0, #0
    8b38:	db46      	blt.n	8bc8 <uarte_0_init+0xd8>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    8b3a:	4638      	mov	r0, r7
    8b3c:	1d31      	adds	r1, r6, #4
    8b3e:	f7ff ff19 	bl	8974 <uarte_nrfx_configure>
	if (err) {
    8b42:	4605      	mov	r5, r0
    8b44:	2800      	cmp	r0, #0
    8b46:	d13f      	bne.n	8bc8 <uarte_0_init+0xd8>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    8b48:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    8b4c:	0799      	lsls	r1, r3, #30
    8b4e:	d512      	bpl.n	8b76 <uarte_0_init+0x86>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    8b50:	f106 0012 	add.w	r0, r6, #18
    8b54:	f001 fe5a 	bl	a80c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    8b58:	4b1f      	ldr	r3, [pc, #124]	; (8bd8 <uarte_0_init+0xe8>)
    8b5a:	4298      	cmp	r0, r3
    8b5c:	d138      	bne.n	8bd0 <uarte_0_init+0xe0>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    8b5e:	7cb2      	ldrb	r2, [r6, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    8b60:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    8b64:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    8b68:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    8b6c:	2301      	movs	r3, #1
    8b6e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    8b70:	4a1a      	ldr	r2, [pc, #104]	; (8bdc <uarte_0_init+0xec>)
    8b72:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8b76:	2308      	movs	r3, #8
    8b78:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    8b7c:	f898 3008 	ldrb.w	r3, [r8, #8]
    8b80:	b95b      	cbnz	r3, 8b9a <uarte_0_init+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b82:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    8b86:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8b8a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8b8e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8b92:	2301      	movs	r3, #1
    8b94:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8b98:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8b9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8b9e:	3610      	adds	r6, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8ba0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    8ba2:	bf5c      	itt	pl
    8ba4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    8ba8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8bac:	06db      	lsls	r3, r3, #27
    8bae:	bf44      	itt	mi
    8bb0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    8bb4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    8bb8:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8bba:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8bbe:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8bc2:	2301      	movs	r3, #1
    8bc4:	60a3      	str	r3, [r4, #8]
    8bc6:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    8bc8:	4628      	mov	r0, r5
    8bca:	b003      	add	sp, #12
    8bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    8bd0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    8bd4:	e7f8      	b.n	8bc8 <uarte_0_init+0xd8>
    8bd6:	bf00      	nop
    8bd8:	0bad0000 	.word	0x0bad0000
    8bdc:	50017000 	.word	0x50017000

00008be0 <uarte_nrfx_poll_out>:
{
    8be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8be2:	4605      	mov	r5, r0
    8be4:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    8be6:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    8be8:	f00a fd20 	bl	1362c <k_is_in_isr>
    8bec:	b910      	cbnz	r0, 8bf4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    8bee:	4b2c      	ldr	r3, [pc, #176]	; (8ca0 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	b983      	cbnz	r3, 8c16 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    8bf4:	f04f 0320 	mov.w	r3, #32
    8bf8:	f3ef 8411 	mrs	r4, BASEPRI
    8bfc:	f383 8812 	msr	BASEPRI_MAX, r3
    8c00:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    8c04:	6868      	ldr	r0, [r5, #4]
    8c06:	f009 ffa5 	bl	12b54 <is_tx_ready.isra.0>
    8c0a:	bb28      	cbnz	r0, 8c58 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    8c0c:	f384 8811 	msr	BASEPRI, r4
    8c10:	f3bf 8f6f 	isb	sy
}
    8c14:	e7ee      	b.n	8bf4 <uarte_nrfx_poll_out+0x14>
{
    8c16:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    8c18:	6868      	ldr	r0, [r5, #4]
    8c1a:	f009 ff9b 	bl	12b54 <is_tx_ready.isra.0>
    8c1e:	b970      	cbnz	r0, 8c3e <uarte_nrfx_poll_out+0x5e>
    8c20:	2001      	movs	r0, #1
    8c22:	f00a fafa 	bl	1321a <nrfx_busy_wait>
    8c26:	3c01      	subs	r4, #1
    8c28:	d1f6      	bne.n	8c18 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    8c2a:	2100      	movs	r1, #0
    8c2c:	2021      	movs	r0, #33	; 0x21
    8c2e:	f003 fcef 	bl	c610 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    8c32:	e7f0      	b.n	8c16 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    8c34:	f384 8811 	msr	BASEPRI, r4
    8c38:	f3bf 8f6f 	isb	sy
}
    8c3c:	e7f5      	b.n	8c2a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    8c3e:	f04f 0320 	mov.w	r3, #32
    8c42:	f3ef 8411 	mrs	r4, BASEPRI
    8c46:	f383 8812 	msr	BASEPRI_MAX, r3
    8c4a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    8c4e:	6868      	ldr	r0, [r5, #4]
    8c50:	f009 ff80 	bl	12b54 <is_tx_ready.isra.0>
    8c54:	2800      	cmp	r0, #0
    8c56:	d0ed      	beq.n	8c34 <uarte_nrfx_poll_out+0x54>
    p_reg->TXD.MAXCNT = length;
    8c58:	2201      	movs	r2, #1
	data->char_out = c;
    8c5a:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    8c5e:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    8c60:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8c62:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8c66:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c6a:	2200      	movs	r2, #0
    8c6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    8c70:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    8c74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    8c78:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8c7c:	684a      	ldr	r2, [r1, #4]
    8c7e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8c80:	bf41      	itttt	mi
    8c82:	2208      	movmi	r2, #8
    8c84:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    8c88:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    8c8c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c90:	2201      	movs	r2, #1
    8c92:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    8c94:	f384 8811 	msr	BASEPRI, r4
    8c98:	f3bf 8f6f 	isb	sy
}
    8c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c9e:	bf00      	nop
    8ca0:	20003d65 	.word	0x20003d65

00008ca4 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    8ca4:	2301      	movs	r3, #1
    8ca6:	4083      	lsls	r3, r0
{
    8ca8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    8caa:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8cac:	4a0d      	ldr	r2, [pc, #52]	; (8ce4 <compare_int_lock+0x40>)
    8cae:	e8d2 1fef 	ldaex	r1, [r2]
    8cb2:	ea01 0c04 	and.w	ip, r1, r4
    8cb6:	e8c2 cfee 	stlex	lr, ip, [r2]
    8cba:	f1be 0f00 	cmp.w	lr, #0
    8cbe:	d1f6      	bne.n	8cae <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8cc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8cc4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    8cc8:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    8ccc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    8cd0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8cd4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    8cd8:	420b      	tst	r3, r1
}
    8cda:	bf14      	ite	ne
    8cdc:	2001      	movne	r0, #1
    8cde:	2000      	moveq	r0, #0
    8ce0:	bd10      	pop	{r4, pc}
    8ce2:	bf00      	nop
    8ce4:	20000ef0 	.word	0x20000ef0

00008ce8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8ce8:	4919      	ldr	r1, [pc, #100]	; (8d50 <sys_clock_timeout_handler+0x68>)
{
    8cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cec:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    8cee:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8cf2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    8cf4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    8cf8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8cfc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    8cfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    8d02:	d222      	bcs.n	8d4a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    8d04:	4b13      	ldr	r3, [pc, #76]	; (8d54 <sys_clock_timeout_handler+0x6c>)
    8d06:	681b      	ldr	r3, [r3, #0]
    8d08:	0a1a      	lsrs	r2, r3, #8
    8d0a:	061b      	lsls	r3, r3, #24
    8d0c:	195e      	adds	r6, r3, r5
    8d0e:	4b12      	ldr	r3, [pc, #72]	; (8d58 <sys_clock_timeout_handler+0x70>)
    8d10:	f142 0700 	adc.w	r7, r2, #0
    8d14:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    8d18:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    8d1a:	f003 fdc7 	bl	c8ac <sys_clock_announce>
    return p_reg->CC[ch];
    8d1e:	00a3      	lsls	r3, r4, #2
    8d20:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    8d24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    8d28:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    8d2c:	42aa      	cmp	r2, r5
    8d2e:	d10b      	bne.n	8d48 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    8d30:	b91e      	cbnz	r6, 8d3a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    8d32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    8d36:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8d3a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    8d3e:	4b07      	ldr	r3, [pc, #28]	; (8d5c <sys_clock_timeout_handler+0x74>)
    8d40:	fa00 f404 	lsl.w	r4, r0, r4
    8d44:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    8d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    8d4a:	2600      	movs	r6, #0
    8d4c:	e7e5      	b.n	8d1a <sys_clock_timeout_handler+0x32>
    8d4e:	bf00      	nop
    8d50:	200005d8 	.word	0x200005d8
    8d54:	20000ef4 	.word	0x20000ef4
    8d58:	200005c0 	.word	0x200005c0
    8d5c:	50015000 	.word	0x50015000

00008d60 <compare_int_unlock>:
	if (key) {
    8d60:	b1e1      	cbz	r1, 8d9c <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    8d62:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8d64:	4a0e      	ldr	r2, [pc, #56]	; (8da0 <compare_int_unlock+0x40>)
    8d66:	4083      	lsls	r3, r0
    8d68:	e8d2 1fef 	ldaex	r1, [r2]
    8d6c:	4319      	orrs	r1, r3
    8d6e:	e8c2 1fec 	stlex	ip, r1, [r2]
    8d72:	f1bc 0f00 	cmp.w	ip, #0
    8d76:	d1f7      	bne.n	8d68 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    8d7c:	4a09      	ldr	r2, [pc, #36]	; (8da4 <compare_int_unlock+0x44>)
    8d7e:	4083      	lsls	r3, r0
    8d80:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8d84:	4b08      	ldr	r3, [pc, #32]	; (8da8 <compare_int_unlock+0x48>)
    8d86:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    8d8a:	fa23 f000 	lsr.w	r0, r3, r0
    8d8e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d90:	bf42      	ittt	mi
    8d92:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    8d96:	4b05      	ldrmi	r3, [pc, #20]	; (8dac <compare_int_unlock+0x4c>)
    8d98:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    8d9c:	4770      	bx	lr
    8d9e:	bf00      	nop
    8da0:	20000ef0 	.word	0x20000ef0
    8da4:	50015000 	.word	0x50015000
    8da8:	20000eec 	.word	0x20000eec
    8dac:	e000e100 	.word	0xe000e100

00008db0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    8db0:	4b0d      	ldr	r3, [pc, #52]	; (8de8 <z_nrf_rtc_timer_read+0x38>)
    8db2:	6818      	ldr	r0, [r3, #0]
    8db4:	0a01      	lsrs	r1, r0, #8
    8db6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    8db8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    8dbc:	4b0b      	ldr	r3, [pc, #44]	; (8dec <z_nrf_rtc_timer_read+0x3c>)
    8dbe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    8dc2:	1818      	adds	r0, r3, r0
    8dc4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    8dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8dcc:	d20a      	bcs.n	8de4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    8dce:	4b08      	ldr	r3, [pc, #32]	; (8df0 <z_nrf_rtc_timer_read+0x40>)
    8dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    8dd4:	4290      	cmp	r0, r2
    8dd6:	eb71 0303 	sbcs.w	r3, r1, r3
    8dda:	d203      	bcs.n	8de4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    8ddc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    8de0:	f141 0100 	adc.w	r1, r1, #0
}
    8de4:	4770      	bx	lr
    8de6:	bf00      	nop
    8de8:	20000ef4 	.word	0x20000ef4
    8dec:	50015000 	.word	0x50015000
    8df0:	200005c0 	.word	0x200005c0

00008df4 <compare_set>:
{
    8df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8df8:	ed2d 8b02 	vpush	{d8}
    8dfc:	b085      	sub	sp, #20
    8dfe:	4616      	mov	r6, r2
    8e00:	4698      	mov	r8, r3
    8e02:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    8e04:	f7ff ff4e 	bl	8ca4 <compare_int_lock>
    8e08:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    8e0c:	f7ff ffd0 	bl	8db0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    8e10:	42b0      	cmp	r0, r6
    8e12:	eb71 0308 	sbcs.w	r3, r1, r8
    8e16:	d279      	bcs.n	8f0c <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
    8e18:	4b44      	ldr	r3, [pc, #272]	; (8f2c <compare_set+0x138>)
    8e1a:	1a30      	subs	r0, r6, r0
    8e1c:	eb68 0101 	sbc.w	r1, r8, r1
    8e20:	4298      	cmp	r0, r3
    8e22:	f171 0300 	sbcs.w	r3, r1, #0
    8e26:	d27e      	bcs.n	8f26 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    8e28:	4b41      	ldr	r3, [pc, #260]	; (8f30 <compare_set+0x13c>)
    8e2a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    8e2e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    8e32:	45d8      	cmp	r8, fp
    8e34:	bf08      	it	eq
    8e36:	4556      	cmpeq	r6, sl
    8e38:	d050      	beq.n	8edc <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    8e3e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    8e42:	4614      	mov	r4, r2
    8e44:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8e48:	f105 0750 	add.w	r7, r5, #80	; 0x50
    8e4c:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    8e50:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8e52:	40ab      	lsls	r3, r5
    8e54:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8e58:	b2bf      	uxth	r7, r7
    8e5a:	f107 2750 	add.w	r7, r7, #1342197760	; 0x50005000
    8e5e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    8e60:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    8e64:	4b33      	ldr	r3, [pc, #204]	; (8f34 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8e66:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
     return p_reg->COUNTER;
    8e6a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    8e6e:	1a40      	subs	r0, r0, r1
    8e70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    8e74:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    8e78:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    8e7a:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    8e7e:	d107      	bne.n	8e90 <compare_set+0x9c>
    8e80:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    8e84:	2013      	movs	r0, #19
    8e86:	f00a fcd9 	bl	1383c <z_impl_k_busy_wait>
    8e8a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    8e8e:	4b29      	ldr	r3, [pc, #164]	; (8f34 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    8e90:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    8e94:	eba4 000c 	sub.w	r0, r4, ip
    8e98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    8e9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8ea0:	bf88      	it	hi
    8ea2:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8ea4:	2000      	movs	r0, #0
    8ea6:	6038      	str	r0, [r7, #0]
    8ea8:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    8eaa:	9801      	ldr	r0, [sp, #4]
    8eac:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    8eb0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    8eb4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    8eb8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    8ebc:	4281      	cmp	r1, r0
    8ebe:	d006      	beq.n	8ece <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
    8ec0:	1a20      	subs	r0, r4, r0
    8ec2:	3802      	subs	r0, #2
    8ec4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    8ec8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8ecc:	d81c      	bhi.n	8f08 <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
    8ece:	1aa4      	subs	r4, r4, r2
    8ed0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    8ed4:	eb14 0a06 	adds.w	sl, r4, r6
    8ed8:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
    8edc:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    8ede:	4914      	ldr	r1, [pc, #80]	; (8f30 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    8ee0:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
    8ee2:	012b      	lsls	r3, r5, #4
    8ee4:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    8ee8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    8eea:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
    8eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ef0:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    8ef2:	4628      	mov	r0, r5
    8ef4:	ee18 1a10 	vmov	r1, s16
    8ef8:	f7ff ff32 	bl	8d60 <compare_int_unlock>
}
    8efc:	4620      	mov	r0, r4
    8efe:	b005      	add	sp, #20
    8f00:	ecbd 8b02 	vpop	{d8}
    8f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f08:	4620      	mov	r0, r4
    8f0a:	e7ae      	b.n	8e6a <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    8f0c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8f0e:	4a0a      	ldr	r2, [pc, #40]	; (8f38 <compare_set+0x144>)
    8f10:	40ab      	lsls	r3, r5
    8f12:	e8d2 1fef 	ldaex	r1, [r2]
    8f16:	4319      	orrs	r1, r3
    8f18:	e8c2 1fe0 	stlex	r0, r1, [r2]
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d1f8      	bne.n	8f12 <compare_set+0x11e>
    8f20:	46b2      	mov	sl, r6
    8f22:	46c3      	mov	fp, r8
    8f24:	e7da      	b.n	8edc <compare_set+0xe8>
			return -EINVAL;
    8f26:	f06f 0415 	mvn.w	r4, #21
    8f2a:	e7e2      	b.n	8ef2 <compare_set+0xfe>
    8f2c:	01000001 	.word	0x01000001
    8f30:	200005c8 	.word	0x200005c8
    8f34:	50015000 	.word	0x50015000
    8f38:	20000eec 	.word	0x20000eec

00008f3c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    8f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    8f3e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    8f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f48:	4d16      	ldr	r5, [pc, #88]	; (8fa4 <sys_clock_driver_init+0x68>)
    8f4a:	4b17      	ldr	r3, [pc, #92]	; (8fa8 <sys_clock_driver_init+0x6c>)
    8f4c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    8f50:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    8f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8f58:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    8f5e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    8f62:	4b12      	ldr	r3, [pc, #72]	; (8fac <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    8f64:	2101      	movs	r1, #1
    8f66:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    8f6a:	2015      	movs	r0, #21
    8f6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    8f70:	4622      	mov	r2, r4
    8f72:	f7fe fa65 	bl	7440 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    8f76:	2015      	movs	r0, #21
    8f78:	f7fe fa30 	bl	73dc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    8f7c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    8f7e:	4a0c      	ldr	r2, [pc, #48]	; (8fb0 <sys_clock_driver_init+0x74>)
    8f80:	60ab      	str	r3, [r5, #8]
    8f82:	602b      	str	r3, [r5, #0]
    8f84:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    8f86:	4b0b      	ldr	r3, [pc, #44]	; (8fb4 <sys_clock_driver_init+0x78>)
    8f88:	4a0b      	ldr	r2, [pc, #44]	; (8fb8 <sys_clock_driver_init+0x7c>)
    8f8a:	9300      	str	r3, [sp, #0]
    8f8c:	4620      	mov	r0, r4
    8f8e:	2300      	movs	r3, #0
    8f90:	9401      	str	r4, [sp, #4]
    8f92:	f7ff ff2f 	bl	8df4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    8f96:	4630      	mov	r0, r6
    8f98:	f7fe fffe 	bl	7f98 <z_nrf_clock_control_lf_on>

	return 0;
}
    8f9c:	4620      	mov	r0, r4
    8f9e:	b002      	add	sp, #8
    8fa0:	bd70      	pop	{r4, r5, r6, pc}
    8fa2:	bf00      	nop
    8fa4:	50015000 	.word	0x50015000
    8fa8:	200005c8 	.word	0x200005c8
    8fac:	e000e100 	.word	0xe000e100
    8fb0:	20000ef0 	.word	0x20000ef0
    8fb4:	00008ce9 	.word	0x00008ce9
    8fb8:	007fffff 	.word	0x007fffff

00008fbc <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    8fbc:	4b35      	ldr	r3, [pc, #212]	; (9094 <rtc_nrf_isr+0xd8>)
{
    8fbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8fc2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    8fc6:	0791      	lsls	r1, r2, #30
    8fc8:	d50b      	bpl.n	8fe2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8fca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    8fce:	b142      	cbz	r2, 8fe2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8fd0:	2200      	movs	r2, #0
    8fd2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    8fd6:	4a30      	ldr	r2, [pc, #192]	; (9098 <rtc_nrf_isr+0xdc>)
    8fd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8fdc:	6813      	ldr	r3, [r2, #0]
    8fde:	3301      	adds	r3, #1
    8fe0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    8fe2:	f04f 0320 	mov.w	r3, #32
    8fe6:	f3ef 8111 	mrs	r1, BASEPRI
    8fea:	f383 8812 	msr	BASEPRI_MAX, r3
    8fee:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    8ff2:	4b28      	ldr	r3, [pc, #160]	; (9094 <rtc_nrf_isr+0xd8>)
    8ff4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    8ff8:	03d2      	lsls	r2, r2, #15
    8ffa:	d50d      	bpl.n	9018 <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8ffc:	4a27      	ldr	r2, [pc, #156]	; (909c <rtc_nrf_isr+0xe0>)
    8ffe:	e8d2 0fef 	ldaex	r0, [r2]
    9002:	f020 0401 	bic.w	r4, r0, #1
    9006:	e8c2 4fe5 	stlex	r5, r4, [r2]
    900a:	2d00      	cmp	r5, #0
    900c:	d1f7      	bne.n	8ffe <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    900e:	2800      	cmp	r0, #0
    9010:	d136      	bne.n	9080 <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9012:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
    9016:	bb9a      	cbnz	r2, 9080 <rtc_nrf_isr+0xc4>
{
    9018:	2300      	movs	r3, #0
	__asm__ volatile(
    901a:	f381 8811 	msr	BASEPRI, r1
    901e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    9022:	b353      	cbz	r3, 907a <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
    9024:	f7ff fec4 	bl	8db0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    9028:	f04f 0320 	mov.w	r3, #32
    902c:	f3ef 8711 	mrs	r7, BASEPRI
    9030:	f383 8812 	msr	BASEPRI_MAX, r3
    9034:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    9038:	4b19      	ldr	r3, [pc, #100]	; (90a0 <rtc_nrf_isr+0xe4>)
    903a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
    903e:	42a0      	cmp	r0, r4
    9040:	eb71 0205 	sbcs.w	r2, r1, r5
    9044:	f04f 0200 	mov.w	r2, #0
    9048:	d321      	bcc.n	908e <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
    904a:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    904e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9052:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    9056:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    9058:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    905c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    9060:	4b0c      	ldr	r3, [pc, #48]	; (9094 <rtc_nrf_isr+0xd8>)
    9062:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    9066:	f387 8811 	msr	BASEPRI, r7
    906a:	f3bf 8f6f 	isb	sy
		if (handler) {
    906e:	b121      	cbz	r1, 907a <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
    9070:	4622      	mov	r2, r4
    9072:	462b      	mov	r3, r5
    9074:	2000      	movs	r0, #0
    9076:	9600      	str	r6, [sp, #0]
    9078:	4788      	blx	r1
}
    907a:	b003      	add	sp, #12
    907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    9080:	2200      	movs	r2, #0
    9082:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    9086:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    908a:	2301      	movs	r3, #1
}
    908c:	e7c5      	b.n	901a <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    908e:	4611      	mov	r1, r2
    9090:	e7e9      	b.n	9066 <rtc_nrf_isr+0xaa>
    9092:	bf00      	nop
    9094:	50015000 	.word	0x50015000
    9098:	20000ef4 	.word	0x20000ef4
    909c:	20000eec 	.word	0x20000eec
    90a0:	200005c8 	.word	0x200005c8

000090a4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    90a4:	1c43      	adds	r3, r0, #1
{
    90a6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    90a8:	d020      	beq.n	90ec <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    90aa:	2801      	cmp	r0, #1
    90ac:	dd20      	ble.n	90f0 <sys_clock_set_timeout+0x4c>
    90ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    90b2:	da1f      	bge.n	90f4 <sys_clock_set_timeout+0x50>
    90b4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    90b6:	f7ff fe7b 	bl	8db0 <z_nrf_rtc_timer_read>
    90ba:	4b0f      	ldr	r3, [pc, #60]	; (90f8 <sys_clock_set_timeout+0x54>)
    90bc:	e9d3 1300 	ldrd	r1, r3, [r3]
    90c0:	1a40      	subs	r0, r0, r1
		ticks = 0;
    90c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    90c6:	bf28      	it	cs
    90c8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    90ca:	3001      	adds	r0, #1
    90cc:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    90ce:	480b      	ldr	r0, [pc, #44]	; (90fc <sys_clock_set_timeout+0x58>)
    90d0:	4282      	cmp	r2, r0
    90d2:	bf28      	it	cs
    90d4:	4602      	movcs	r2, r0
    90d6:	2000      	movs	r0, #0
    90d8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    90da:	4909      	ldr	r1, [pc, #36]	; (9100 <sys_clock_set_timeout+0x5c>)
    90dc:	9001      	str	r0, [sp, #4]
    90de:	9100      	str	r1, [sp, #0]
    90e0:	f143 0300 	adc.w	r3, r3, #0
    90e4:	f7ff fe86 	bl	8df4 <compare_set>
}
    90e8:	b002      	add	sp, #8
    90ea:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    90ec:	4803      	ldr	r0, [pc, #12]	; (90fc <sys_clock_set_timeout+0x58>)
    90ee:	e7e1      	b.n	90b4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    90f0:	2400      	movs	r4, #0
    90f2:	e7e0      	b.n	90b6 <sys_clock_set_timeout+0x12>
    90f4:	4c01      	ldr	r4, [pc, #4]	; (90fc <sys_clock_set_timeout+0x58>)
    90f6:	e7de      	b.n	90b6 <sys_clock_set_timeout+0x12>
    90f8:	200005d8 	.word	0x200005d8
    90fc:	007fffff 	.word	0x007fffff
    9100:	00008ce9 	.word	0x00008ce9

00009104 <sys_clock_elapsed>:
{
    9104:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    9106:	f7ff fe53 	bl	8db0 <z_nrf_rtc_timer_read>
    910a:	4b02      	ldr	r3, [pc, #8]	; (9114 <sys_clock_elapsed+0x10>)
    910c:	681b      	ldr	r3, [r3, #0]
}
    910e:	1ac0      	subs	r0, r0, r3
    9110:	bd08      	pop	{r3, pc}
    9112:	bf00      	nop
    9114:	200005d8 	.word	0x200005d8

00009118 <nrf_gpio_pin_clear>:
        case 1: return NRF_P1;
    9118:	4a05      	ldr	r2, [pc, #20]	; (9130 <nrf_gpio_pin_clear+0x18>)
    911a:	4b06      	ldr	r3, [pc, #24]	; (9134 <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
    911c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    9120:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    9122:	2801      	cmp	r0, #1
    9124:	bf08      	it	eq
    9126:	4613      	moveq	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9128:	2201      	movs	r2, #1
    912a:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    912c:	60da      	str	r2, [r3, #12]
}
    912e:	4770      	bx	lr
    9130:	50842800 	.word	0x50842800
    9134:	50842500 	.word	0x50842500

00009138 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    9138:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
    913c:	b570      	push	{r4, r5, r6, lr}
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    913e:	2b00      	cmp	r3, #0
        case 1: return NRF_P1;
    9140:	4e0e      	ldr	r6, [pc, #56]	; (917c <nrf_pin_configure+0x44>)
    9142:	bf1c      	itt	ne
    9144:	2201      	movne	r2, #1
    9146:	2100      	movne	r1, #0
    9148:	f010 0f20 	tst.w	r0, #32
    914c:	4b0c      	ldr	r3, [pc, #48]	; (9180 <nrf_pin_configure+0x48>)
    914e:	bf18      	it	ne
    9150:	4633      	movne	r3, r6
    *p_pin = pin_number & 0x1F;
    9152:	f000 041f 	and.w	r4, r0, #31
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9156:	f3c0 1581 	ubfx	r5, r0, #6, #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    915a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    915e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    9162:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9166:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
    916a:	4308      	orrs	r0, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    916c:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9170:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    9174:	4322      	orrs	r2, r4
    reg->PIN_CNF[pin_number] = cnf;
    9176:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    917a:	bd70      	pop	{r4, r5, r6, pc}
    917c:	50842800 	.word	0x50842800
    9180:	50842500 	.word	0x50842500

00009184 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    9184:	4a05      	ldr	r2, [pc, #20]	; (919c <nrf_gpio_pin_set+0x18>)
    9186:	4b06      	ldr	r3, [pc, #24]	; (91a0 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    9188:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    918c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    918e:	2801      	cmp	r0, #1
    9190:	bf08      	it	eq
    9192:	4613      	moveq	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9194:	2201      	movs	r2, #1
    9196:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    9198:	609a      	str	r2, [r3, #8]
}
    919a:	4770      	bx	lr
    919c:	50842800 	.word	0x50842800
    91a0:	50842500 	.word	0x50842500

000091a4 <_ZL15can_read_resultv>:
		processing_finished(err);
	}
}

static bool can_read_result(void)
{
    91a4:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
    91a6:	f003 fa4d 	bl	c644 <z_impl_z_current_get>
	/* User is allowed to access results only from the result ready callback. */
	return (k_current_get() == ei_thread_id);
    91aa:	4b03      	ldr	r3, [pc, #12]	; (91b8 <_ZL15can_read_resultv+0x14>)
    91ac:	681b      	ldr	r3, [r3, #0]
}
    91ae:	1a1b      	subs	r3, r3, r0
    91b0:	4258      	negs	r0, r3
    91b2:	4158      	adcs	r0, r3
    91b4:	bd08      	pop	{r3, pc}
    91b6:	bf00      	nop
    91b8:	20000efc 	.word	0x20000efc

000091bc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
    91bc:	b508      	push	{r3, lr}
	assert(ptr);
    91be:	b928      	cbnz	r0, 91cc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
    91c0:	215f      	movs	r1, #95	; 0x5f
    91c2:	4b06      	ldr	r3, [pc, #24]	; (91dc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
    91c4:	4a06      	ldr	r2, [pc, #24]	; (91e0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
    91c6:	4807      	ldr	r0, [pc, #28]	; (91e4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
    91c8:	f006 fec0 	bl	ff4c <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
    91cc:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
    91d0:	1ac0      	subs	r0, r0, r3
}
    91d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
    91d6:	f00a bb4e 	b.w	13876 <_Z7ei_freePv>
    91da:	bf00      	nop
    91dc:	00018476 	.word	0x00018476
    91e0:	000178c2 	.word	0x000178c2
    91e4:	000178eb 	.word	0x000178eb

000091e8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
    91e8:	1e43      	subs	r3, r0, #1
    91ea:	4203      	tst	r3, r0
{
    91ec:	b510      	push	{r4, lr}
    91ee:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
    91f0:	d005      	beq.n	91fe <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
    91f2:	213c      	movs	r1, #60	; 0x3c
    91f4:	4b0c      	ldr	r3, [pc, #48]	; (9228 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
    91f6:	4a0d      	ldr	r2, [pc, #52]	; (922c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
    91f8:	480d      	ldr	r0, [pc, #52]	; (9230 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
    91fa:	f006 fea7 	bl	ff4c <__assert_func>
	if(align && size)
    91fe:	b910      	cbnz	r0, 9206 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
    9200:	2400      	movs	r4, #0
}
    9202:	4620      	mov	r0, r4
    9204:	bd10      	pop	{r4, pc}
	if(align && size)
    9206:	2900      	cmp	r1, #0
    9208:	d0fa      	beq.n	9200 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
    920a:	1c48      	adds	r0, r1, #1
    920c:	4420      	add	r0, r4
    920e:	2101      	movs	r1, #1
    9210:	f00a fb2f 	bl	13872 <_Z9ei_callocjj>
		if(p)
    9214:	2800      	cmp	r0, #0
    9216:	d0f3      	beq.n	9200 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
    9218:	1c63      	adds	r3, r4, #1
    921a:	4403      	add	r3, r0
    921c:	4264      	negs	r4, r4
    921e:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
    9220:	1a20      	subs	r0, r4, r0
    9222:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
    9226:	e7ec      	b.n	9202 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
    9228:	00017941 	.word	0x00017941
    922c:	0001795c 	.word	0x0001795c
    9230:	000178eb 	.word	0x000178eb

00009234 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
    static int scale(matrix_t *matrix, float scale) {
    9234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
    9236:	6842      	ldr	r2, [r0, #4]
    9238:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    923c:	d217      	bcs.n	926e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
    923e:	6883      	ldr	r3, [r0, #8]
    9240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9244:	d213      	bcs.n	926e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9246:	6801      	ldr	r1, [r0, #0]
    9248:	b292      	uxth	r2, r2
    924a:	b29b      	uxth	r3, r3
    924c:	9101      	str	r1, [sp, #4]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    924e:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    9250:	4668      	mov	r0, sp
    9252:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9254:	f8ad 2000 	strh.w	r2, [sp]
    9258:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    925c:	f8ad 2008 	strh.w	r2, [sp, #8]
    9260:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    9264:	f00a fbc5 	bl	139f2 <arm_mat_scale_f32>
    }
    9268:	b005      	add	sp, #20
    926a:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
    926e:	4801      	ldr	r0, [pc, #4]	; (9274 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
    9270:	e7fa      	b.n	9268 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
    9272:	bf00      	nop
    9274:	fffffc0c 	.word	0xfffffc0c

00009278 <_ZL20raw_feature_get_datajjPf>:
{
    9278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((read_end > ARRAY_SIZE(b->buf)) && (read_start < ARRAY_SIZE(b->buf))) {
    927c:	f640 16c4 	movw	r6, #2500	; 0x9c4
	size_t read_start = b->process_idx + offset;
    9280:	f8df 8054 	ldr.w	r8, [pc, #84]	; 92d8 <_ZL20raw_feature_get_datajjPf+0x60>
{
    9284:	460d      	mov	r5, r1
	size_t read_start = b->process_idx + offset;
    9286:	f508 5300 	add.w	r3, r8, #8192	; 0x2000
    928a:	f8d3 4710 	ldr.w	r4, [r3, #1808]	; 0x710
{
    928e:	4617      	mov	r7, r2
	size_t read_start = b->process_idx + offset;
    9290:	4404      	add	r4, r0
	size_t read_end = read_start + len;
    9292:	190b      	adds	r3, r1, r4
	if ((read_end > ARRAY_SIZE(b->buf)) && (read_start < ARRAY_SIZE(b->buf))) {
    9294:	42b3      	cmp	r3, r6
    9296:	f640 13c3 	movw	r3, #2499	; 0x9c3
    929a:	d914      	bls.n	92c6 <_ZL20raw_feature_get_datajjPf+0x4e>
    929c:	429c      	cmp	r4, r3
    929e:	d814      	bhi.n	92ca <_ZL20raw_feature_get_datajjPf+0x52>
		size_t copy_cnt = ARRAY_SIZE(b->buf) - read_start;
    92a0:	1b36      	subs	r6, r6, r4
		memcpy(b_res, &b->buf[read_start],
    92a2:	00b6      	lsls	r6, r6, #2
    92a4:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    92a8:	4632      	mov	r2, r6
    92aa:	4638      	mov	r0, r7
    92ac:	f00b fc83 	bl	14bb6 <memcpy>
		memcpy(b_res + copy_cnt, &b->buf[0],
    92b0:	4641      	mov	r1, r8
		       (len - copy_cnt) * sizeof(b->buf[0]));
    92b2:	f6a5 15c4 	subw	r5, r5, #2500	; 0x9c4
    92b6:	442c      	add	r4, r5
		memcpy(b_res + copy_cnt, &b->buf[0],
    92b8:	00a2      	lsls	r2, r4, #2
    92ba:	19b8      	adds	r0, r7, r6
		memcpy(b_res, &b->buf[read_start], len * sizeof(b->buf[0]));
    92bc:	f00b fc7b 	bl	14bb6 <memcpy>
}
    92c0:	2000      	movs	r0, #0
    92c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (read_start >= ARRAY_SIZE(b->buf)) {
    92c6:	429c      	cmp	r4, r3
    92c8:	d901      	bls.n	92ce <_ZL20raw_feature_get_datajjPf+0x56>
			read_start -= ARRAY_SIZE(b->buf);
    92ca:	f6a4 14c4 	subw	r4, r4, #2500	; 0x9c4
		memcpy(b_res, &b->buf[read_start], len * sizeof(b->buf[0]));
    92ce:	4638      	mov	r0, r7
    92d0:	00aa      	lsls	r2, r5, #2
    92d2:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    92d6:	e7f1      	b.n	92bc <_ZL20raw_feature_get_datajjPf+0x44>
    92d8:	20000f04 	.word	0x20000f04

000092dc <_ZL11buf_cleanupP11data_bufferPb.constprop.0>:
	*cancelled = false;
    92dc:	2300      	movs	r3, #0
    92de:	7003      	strb	r3, [r0, #0]
	__asm__ volatile(
    92e0:	f04f 0320 	mov.w	r3, #32
    92e4:	f3ef 8111 	mrs	r1, BASEPRI
    92e8:	f383 8812 	msr	BASEPRI_MAX, r3
    92ec:	f3bf 8f6f 	isb	sy
	if (b->state == STATE_PROCESSING) {
    92f0:	4b0c      	ldr	r3, [pc, #48]	; (9324 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x48>)
    92f2:	f893 271d 	ldrb.w	r2, [r3, #1821]	; 0x71d
    92f6:	2a02      	cmp	r2, #2
    92f8:	d011      	beq.n	931e <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x42>
		if (b->state == STATE_WAITING_FOR_DATA) {
    92fa:	2a01      	cmp	r2, #1
			*cancelled = true;
    92fc:	bf08      	it	eq
    92fe:	7002      	strbeq	r2, [r0, #0]
		b->process_idx = 0;
    9300:	2000      	movs	r0, #0
		b->state = STATE_READY;
    9302:	2203      	movs	r2, #3
		b->process_idx = 0;
    9304:	f8c3 0710 	str.w	r0, [r3, #1808]	; 0x710
		b->append_idx = 0;
    9308:	f8c3 0714 	str.w	r0, [r3, #1812]	; 0x714
		b->wait_data_size = 0;
    930c:	f8c3 0718 	str.w	r0, [r3, #1816]	; 0x718
		b->state = STATE_READY;
    9310:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
	__asm__ volatile(
    9314:	f381 8811 	msr	BASEPRI, r1
    9318:	f3bf 8f6f 	isb	sy
}
    931c:	4770      	bx	lr
		err = -EBUSY;
    931e:	f06f 000f 	mvn.w	r0, #15
    9322:	e7f7      	b.n	9314 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x38>
    9324:	20002f04 	.word	0x20002f04

00009328 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(uint64_t ctx_start_us,
    9328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    932c:	ed2d 8b04 	vpush	{d8-d9}
    9330:	4605      	mov	r5, r0
    9332:	4688      	mov	r8, r1
    9334:	4617      	mov	r7, r2
    9336:	461c      	mov	r4, r3
    9338:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    TfLiteTensor* scores_tensor,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
    if(trained_model_invoke() != kTfLiteOk) {
    933c:	f003 fd16 	bl	cd6c <_Z20trained_model_invokev>
    9340:	2800      	cmp	r0, #0
    9342:	d173      	bne.n	942c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x104>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
    9344:	f00a fa81 	bl	1384a <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
    9348:	1b40      	subs	r0, r0, r5
    934a:	eb61 0108 	sbc.w	r1, r1, r8
    result->timing.classification = (int)(result->timing.classification_us / 1000);
    934e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9352:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
    9354:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    result->timing.classification = (int)(result->timing.classification_us / 1000);
    9358:	f7f7 fba4 	bl	aa4 <__aeabi_ldivmod>
    935c:	4601      	mov	r1, r0
    935e:	6320      	str	r0, [r4, #48]	; 0x30

    // Read the predicted y value from the model's output tensor
    if (debug) {
    9360:	b116      	cbz	r6, 9368 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x40>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
    9362:	4834      	ldr	r0, [pc, #208]	; (9434 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x10c>)
    9364:	f003 fb92 	bl	ca8c <_Z9ei_printfPKcz>
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
    if (int8_output) {
    9368:	783b      	ldrb	r3, [r7, #0]
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
    936a:	687d      	ldr	r5, [r7, #4]
    if (int8_output) {
    936c:	2b09      	cmp	r3, #9
    936e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 943c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x114>
    9372:	f104 0404 	add.w	r4, r4, #4
    9376:	d139      	bne.n	93ec <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xc4>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
    9378:	edd7 7a04 	vldr	s15, [r7, #16]
    937c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = static_cast<float>(data[ix] - zero_point) * scale;

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9380:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 9440 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    9384:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9444 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x11c>
    9388:	ed97 9a03 	vldr	s18, [r7, #12]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    938c:	3d01      	subs	r5, #1
    938e:	f1a8 0710 	sub.w	r7, r8, #16
        float value = static_cast<float>(data[ix] - zero_point) * scale;
    9392:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
    9396:	ee08 3a10 	vmov	s16, r3
    939a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    939e:	ee38 8a68 	vsub.f32	s16, s16, s17
    93a2:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
    93a6:	b156      	cbz	r6, 93be <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x96>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    93a8:	4650      	mov	r0, sl
    93aa:	6839      	ldr	r1, [r7, #0]
    93ac:	f003 fb6e 	bl	ca8c <_Z9ei_printfPKcz>
            ei_printf_float(value);
    93b0:	eeb0 0a48 	vmov.f32	s0, s16
    93b4:	f003 fb84 	bl	cac0 <_Z15ei_printf_floatf>
            ei_printf("\n");
    93b8:	4648      	mov	r0, r9
    93ba:	f003 fb67 	bl	ca8c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    93be:	f857 3b04 	ldr.w	r3, [r7], #4
    93c2:	f844 3c04 	str.w	r3, [r4, #-4]
        result->classification[ix].value = value;
    93c6:	4623      	mov	r3, r4
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    93c8:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    93ca:	ed83 8a00 	vstr	s16, [r3]
    93ce:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    93d2:	d1de      	bne.n	9392 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x6a>
    else {
        fill_result_struct_f32(result, output->data.f, debug);
    }
#endif

    trained_model_reset(ei_aligned_free);
    93d4:	4818      	ldr	r0, [pc, #96]	; (9438 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x110>)
    93d6:	f003 fceb 	bl	cdb0 <_Z19trained_model_resetPFvPvE>

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    93da:	f00a fa34 	bl	13846 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
    93de:	1c83      	adds	r3, r0, #2
    93e0:	bf18      	it	ne
    93e2:	2000      	movne	r0, #0
}
    93e4:	ecbd 8b04 	vpop	{d8-d9}
    93e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    93ec:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9440 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    93f0:	f8df a050 	ldr.w	sl, [pc, #80]	; 9444 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x11c>
    93f4:	f1a8 0710 	sub.w	r7, r8, #16
        float value = data[ix];
    93f8:	ecb5 8a01 	vldmia	r5!, {s16}
        if (debug) {
    93fc:	b156      	cbz	r6, 9414 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xec>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    93fe:	4648      	mov	r0, r9
    9400:	6839      	ldr	r1, [r7, #0]
    9402:	f003 fb43 	bl	ca8c <_Z9ei_printfPKcz>
            ei_printf_float(value);
    9406:	eeb0 0a48 	vmov.f32	s0, s16
    940a:	f003 fb59 	bl	cac0 <_Z15ei_printf_floatf>
            ei_printf("\n");
    940e:	4650      	mov	r0, sl
    9410:	f003 fb3c 	bl	ca8c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    9414:	f857 3b04 	ldr.w	r3, [r7], #4
    9418:	f844 3c04 	str.w	r3, [r4, #-4]
        result->classification[ix].value = value;
    941c:	4623      	mov	r3, r4
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    941e:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    9420:	ed83 8a00 	vstr	s16, [r3]
    9424:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9428:	d1e6      	bne.n	93f8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xd0>
    942a:	e7d3      	b.n	93d4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xac>
        return EI_IMPULSE_TFLITE_ERROR;
    942c:	f06f 0002 	mvn.w	r0, #2
    9430:	e7d8      	b.n	93e4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xbc>
    9432:	bf00      	nop
    9434:	00017991 	.word	0x00017991
    9438:	000091bd 	.word	0x000091bd
    943c:	200000f8 	.word	0x200000f8
    9440:	000179ae 	.word	0x000179ae
    9444:	00017772 	.word	0x00017772

00009448 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>:
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    9448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    944a:	4607      	mov	r7, r0
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    944c:	482d      	ldr	r0, [pc, #180]	; (9504 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xbc>)
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    944e:	460d      	mov	r5, r1
    9450:	4616      	mov	r6, r2
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    9452:	f003 fb9d 	bl	cb90 <_Z18trained_model_initPFPvjjE>
    if (init_status != kTfLiteOk) {
    9456:	4604      	mov	r4, r0
    9458:	b130      	cbz	r0, 9468 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x20>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
    945a:	4601      	mov	r1, r0
    945c:	482a      	ldr	r0, [pc, #168]	; (9508 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc0>)
    945e:	f003 fb15 	bl	ca8c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    9462:	f06f 0005 	mvn.w	r0, #5
}
    9466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *ctx_start_us = ei_read_timer_us();
    9468:	f00a f9ef 	bl	1384a <_Z16ei_read_timer_usv>
    946c:	e9c7 0100 	strd	r0, r1, [r7]
    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    9470:	4620      	mov	r0, r4
    9472:	f003 fc6d 	bl	cd50 <_Z19trained_model_inputi>
    9476:	6028      	str	r0, [r5, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    9478:	4620      	mov	r0, r4
    947a:	f003 fc6f 	bl	cd5c <_Z20trained_model_outputi>
    if (tflite_first_run) {
    947e:	4a23      	ldr	r2, [pc, #140]	; (950c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc4>)
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    9480:	6030      	str	r0, [r6, #0]
    if (tflite_first_run) {
    9482:	7813      	ldrb	r3, [r2, #0]
    9484:	2b00      	cmp	r3, #0
    9486:	d03b      	beq.n	9500 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xb8>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
    9488:	682b      	ldr	r3, [r5, #0]
    948a:	7819      	ldrb	r1, [r3, #0]
    948c:	2909      	cmp	r1, #9
    948e:	d005      	beq.n	949c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x54>
    9490:	2163      	movs	r1, #99	; 0x63
    9492:	4b1f      	ldr	r3, [pc, #124]	; (9510 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc8>)
    9494:	4a1f      	ldr	r2, [pc, #124]	; (9514 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
    9496:	4820      	ldr	r0, [pc, #128]	; (9518 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd0>)
    9498:	f006 fd58 	bl	ff4c <__assert_func>
    949c:	7801      	ldrb	r1, [r0, #0]
    949e:	2909      	cmp	r1, #9
    94a0:	d003      	beq.n	94aa <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    94a2:	2164      	movs	r1, #100	; 0x64
    94a4:	4b1d      	ldr	r3, [pc, #116]	; (951c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd4>)
    94a6:	4a1b      	ldr	r2, [pc, #108]	; (9514 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    94a8:	e7f5      	b.n	9496 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
    94aa:	ed93 7a03 	vldr	s14, [r3, #12]
    94ae:	eddf 7a1c 	vldr	s15, [pc, #112]	; 9520 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd8>
    94b2:	eeb4 7a67 	vcmp.f32	s14, s15
    94b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94ba:	d003      	beq.n	94c4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x7c>
    94bc:	216b      	movs	r1, #107	; 0x6b
    94be:	4b19      	ldr	r3, [pc, #100]	; (9524 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xdc>)
    94c0:	4a14      	ldr	r2, [pc, #80]	; (9514 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    94c2:	e7e8      	b.n	9496 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
    94c4:	691b      	ldr	r3, [r3, #16]
    94c6:	3380      	adds	r3, #128	; 0x80
    94c8:	d003      	beq.n	94d2 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x8a>
    94ca:	216c      	movs	r1, #108	; 0x6c
    94cc:	4b16      	ldr	r3, [pc, #88]	; (9528 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe0>)
    94ce:	4a11      	ldr	r2, [pc, #68]	; (9514 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    94d0:	e7e1      	b.n	9496 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
    94d2:	ed90 7a03 	vldr	s14, [r0, #12]
    94d6:	eddf 7a15 	vldr	s15, [pc, #84]	; 952c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe4>
    94da:	eeb4 7a67 	vcmp.f32	s14, s15
    94de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94e2:	d003      	beq.n	94ec <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xa4>
    94e4:	216f      	movs	r1, #111	; 0x6f
    94e6:	4b12      	ldr	r3, [pc, #72]	; (9530 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe8>)
    94e8:	4a0a      	ldr	r2, [pc, #40]	; (9514 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    94ea:	e7d4      	b.n	9496 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
    94ec:	6903      	ldr	r3, [r0, #16]
    94ee:	3380      	adds	r3, #128	; 0x80
    94f0:	d003      	beq.n	94fa <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xb2>
    94f2:	2170      	movs	r1, #112	; 0x70
    94f4:	4b0f      	ldr	r3, [pc, #60]	; (9534 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xec>)
    94f6:	4a07      	ldr	r2, [pc, #28]	; (9514 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    94f8:	e7cd      	b.n	9496 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
    return EI_IMPULSE_OK;
    94fa:	4620      	mov	r0, r4
        tflite_first_run = false;
    94fc:	7014      	strb	r4, [r2, #0]
    94fe:	e7b2      	b.n	9466 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x1e>
    return EI_IMPULSE_OK;
    9500:	4618      	mov	r0, r3
    9502:	e7b0      	b.n	9466 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x1e>
    9504:	000091e9 	.word	0x000091e9
    9508:	000179b3 	.word	0x000179b3
    950c:	200004f8 	.word	0x200004f8
    9510:	000179e4 	.word	0x000179e4
    9514:	00017a1a 	.word	0x00017a1a
    9518:	00017a7f 	.word	0x00017a7f
    951c:	00017ae2 	.word	0x00017ae2
    9520:	3df0c450 	.word	0x3df0c450
    9524:	00017b1a 	.word	0x00017b1a
    9528:	00017b55 	.word	0x00017b55
    952c:	3b800000 	.word	0x3b800000
    9530:	00017b99 	.word	0x00017b99
    9534:	00017bd6 	.word	0x00017bd6

00009538 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
    static int transpose(matrix_t *matrix) {
    9538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
    953c:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
    static int transpose(matrix_t *matrix) {
    9540:	b088      	sub	sp, #32
        EI_DSP_MATRIX(temp_matrix, rows, columns);
    9542:	2300      	movs	r3, #0
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
    9544:	f8d0 8000 	ldr.w	r8, [r0]
    static int transpose(matrix_t *matrix) {
    9548:	4605      	mov	r5, r0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
    954a:	463a      	mov	r2, r7
    954c:	4631      	mov	r1, r6
    954e:	a804      	add	r0, sp, #16
    9550:	f009 fd96 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    9554:	9b04      	ldr	r3, [sp, #16]
    9556:	b363      	cbz	r3, 95b2 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7a>
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
    9558:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    955c:	da2b      	bge.n	95b6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7e>
    955e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    9562:	da28      	bge.n	95b6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7e>
        };
    9564:	b2b1      	uxth	r1, r6
    9566:	b2ba      	uxth	r2, r7
    9568:	f8ad 1002 	strh.w	r1, [sp, #2]
        };
    956c:	f8ad 1008 	strh.w	r1, [sp, #8]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
    9570:	4668      	mov	r0, sp
    9572:	a902      	add	r1, sp, #8
        };
    9574:	f8ad 2000 	strh.w	r2, [sp]
    9578:	f8cd 8004 	str.w	r8, [sp, #4]
        };
    957c:	f8ad 200a 	strh.w	r2, [sp, #10]
    9580:	9303      	str	r3, [sp, #12]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
    9582:	f00a fa45 	bl	13a10 <arm_mat_trans_f32>
        if (status != ARM_MATH_SUCCESS) {
    9586:	4604      	mov	r4, r0
    9588:	b930      	cbnz	r0, 9598 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
    958a:	fb07 f206 	mul.w	r2, r7, r6
    958e:	4640      	mov	r0, r8
    9590:	9904      	ldr	r1, [sp, #16]
    9592:	0092      	lsls	r2, r2, #2
    9594:	f00b fb0f 	bl	14bb6 <memcpy>
        EI_DSP_MATRIX(temp_matrix, rows, columns);
    9598:	a804      	add	r0, sp, #16
    959a:	f009 fbe6 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        if (r != 0) {
    959e:	b924      	cbnz	r4, 95aa <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x72>
        uint16_t old_rows = matrix->rows;
    95a0:	686b      	ldr	r3, [r5, #4]
        matrix->rows = old_cols;
    95a2:	892a      	ldrh	r2, [r5, #8]
        matrix->cols = old_rows;
    95a4:	b29b      	uxth	r3, r3
        matrix->rows = old_cols;
    95a6:	606a      	str	r2, [r5, #4]
        matrix->cols = old_rows;
    95a8:	60ab      	str	r3, [r5, #8]
    }
    95aa:	4620      	mov	r0, r4
    95ac:	b008      	add	sp, #32
    95ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        EI_DSP_MATRIX(temp_matrix, rows, columns);
    95b2:	4c02      	ldr	r4, [pc, #8]	; (95bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x84>)
    95b4:	e7f0      	b.n	9598 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
            return EIDSP_NARROWING;
    95b6:	4c02      	ldr	r4, [pc, #8]	; (95c0 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x88>)
    95b8:	e7ee      	b.n	9598 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
    95ba:	bf00      	nop
    95bc:	fffffc16 	.word	0xfffffc16
    95c0:	fffffc0c 	.word	0xfffffc0c

000095c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
    95c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (matrix->rows != subtract_matrix->rows) {
    95c6:	6842      	ldr	r2, [r0, #4]
    95c8:	684b      	ldr	r3, [r1, #4]
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
    95ca:	4605      	mov	r5, r0
        if (matrix->rows != subtract_matrix->rows) {
    95cc:	429a      	cmp	r2, r3
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
    95ce:	460f      	mov	r7, r1
    95d0:	b085      	sub	sp, #20
        if (matrix->rows != subtract_matrix->rows) {
    95d2:	d128      	bne.n	9626 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
        if (subtract_matrix->cols != 1) {
    95d4:	688b      	ldr	r3, [r1, #8]
    95d6:	2b01      	cmp	r3, #1
    95d8:	d125      	bne.n	9626 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
        for (size_t row = 0; row < matrix->rows; row++) {
    95da:	2600      	movs	r6, #0
    95dc:	686b      	ldr	r3, [r5, #4]
    95de:	42b3      	cmp	r3, r6
    95e0:	d923      	bls.n	962a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x66>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
    95e2:	68aa      	ldr	r2, [r5, #8]
    95e4:	682b      	ldr	r3, [r5, #0]
    95e6:	fb06 f102 	mul.w	r1, r6, r2
    95ea:	4668      	mov	r0, sp
    95ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    95f0:	2101      	movs	r1, #1
    95f2:	f009 fd45 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    95f6:	9b00      	ldr	r3, [sp, #0]
    95f8:	b173      	cbz	r3, 9618 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x54>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
    95fa:	683b      	ldr	r3, [r7, #0]
    95fc:	4668      	mov	r0, sp
    95fe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    9602:	ed93 0a00 	vldr	s0, [r3]
    9606:	f009 fd51 	bl	130ac <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
            if (ret != EIDSP_OK) {
    960a:	4604      	mov	r4, r0
    960c:	b928      	cbnz	r0, 961a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x56>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
    960e:	4668      	mov	r0, sp
    9610:	f009 fbab 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < matrix->rows; row++) {
    9614:	3601      	adds	r6, #1
    9616:	e7e1      	b.n	95dc <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x18>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
    9618:	4c05      	ldr	r4, [pc, #20]	; (9630 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x6c>)
    961a:	4668      	mov	r0, sp
    961c:	f009 fba5 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    }
    9620:	4620      	mov	r0, r4
    9622:	b005      	add	sp, #20
    9624:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    9626:	4c03      	ldr	r4, [pc, #12]	; (9634 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x70>)
    9628:	e7fa      	b.n	9620 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5c>
        return EIDSP_OK;
    962a:	2400      	movs	r4, #0
    962c:	e7f8      	b.n	9620 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5c>
    962e:	bf00      	nop
    9630:	fffffc16 	.word	0xfffffc16
    9634:	fffffc14 	.word	0xfffffc14

00009638 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
        if (input_matrix->rows != output_matrix->rows) {
    9638:	6842      	ldr	r2, [r0, #4]
    963a:	684b      	ldr	r3, [r1, #4]
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
    963c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        if (input_matrix->rows != output_matrix->rows) {
    963e:	429a      	cmp	r2, r3
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
    9640:	4604      	mov	r4, r0
    9642:	460e      	mov	r6, r1
        if (input_matrix->rows != output_matrix->rows) {
    9644:	d116      	bne.n	9674 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3c>
        if (output_matrix->cols != 1) {
    9646:	688b      	ldr	r3, [r1, #8]
    9648:	2b01      	cmp	r3, #1
    964a:	d113      	bne.n	9674 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3c>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    964c:	2500      	movs	r5, #0
    964e:	6863      	ldr	r3, [r4, #4]
    9650:	42ab      	cmp	r3, r5
    9652:	d912      	bls.n	967a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x42>
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
    9654:	68a1      	ldr	r1, [r4, #8]
    9656:	6823      	ldr	r3, [r4, #0]
    9658:	fb01 f005 	mul.w	r0, r1, r5
    965c:	aa01      	add	r2, sp, #4
    965e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9662:	f003 fa3b 	bl	cadc <arm_mean_f32>
            output_matrix->buffer[row] = mean;
    9666:	6833      	ldr	r3, [r6, #0]
    9668:	9a01      	ldr	r2, [sp, #4]
    966a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    966e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    9670:	3501      	adds	r5, #1
    9672:	e7ec      	b.n	964e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x16>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    9674:	4802      	ldr	r0, [pc, #8]	; (9680 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x48>)
    }
    9676:	b002      	add	sp, #8
    9678:	bd70      	pop	{r4, r5, r6, pc}
    967a:	2000      	movs	r0, #0
    967c:	e7fb      	b.n	9676 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3e>
    967e:	bf00      	nop
    9680:	fffffc14 	.word	0xfffffc14

00009684 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
    9684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9688:	b091      	sub	sp, #68	; 0x44
    968a:	9c18      	ldr	r4, [sp, #96]	; 0x60
    968c:	4615      	mov	r5, r2
        size_t n_fft_out_features = (n_fft / 2) + 1;
    968e:	0862      	lsrs	r2, r4, #1
    9690:	3201      	adds	r2, #1
        if (output_size != n_fft_out_features) {
    9692:	429a      	cmp	r2, r3
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
    9694:	4607      	mov	r7, r0
    9696:	460e      	mov	r6, r1
        if (output_size != n_fft_out_features) {
    9698:	f040 808c 	bne.w	97b4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
            fft_input_buffer = (float*)src;
    969c:	428c      	cmp	r4, r1
    969e:	bf94      	ite	ls
    96a0:	4680      	movls	r8, r0
    96a2:	f04f 0800 	movhi.w	r8, #0
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
    96a6:	4622      	mov	r2, r4
    96a8:	4643      	mov	r3, r8
    96aa:	2101      	movs	r1, #1
    96ac:	a802      	add	r0, sp, #8
    96ae:	f009 fce7 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    96b2:	9802      	ldr	r0, [sp, #8]
    96b4:	b390      	cbz	r0, 971c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x98>
        if (!fft_input_buffer) {
    96b6:	f1b8 0f00 	cmp.w	r8, #0
    96ba:	d10f      	bne.n	96dc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x58>
    96bc:	42a6      	cmp	r6, r4
    96be:	bf28      	it	cs
    96c0:	4626      	movcs	r6, r4
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
    96c2:	ea4f 0986 	mov.w	r9, r6, lsl #2
    96c6:	464a      	mov	r2, r9
    96c8:	4639      	mov	r1, r7
    96ca:	f00b fa74 	bl	14bb6 <memcpy>
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
    96ce:	9802      	ldr	r0, [sp, #8]
    96d0:	1ba6      	subs	r6, r4, r6
    96d2:	4641      	mov	r1, r8
    96d4:	00b2      	lsls	r2, r6, #2
    96d6:	4448      	add	r0, r9
    96d8:	f00b fa94 	bl	14c04 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
    96dc:	2c20      	cmp	r4, #32
    96de:	d067      	beq.n	97b0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12c>
    96e0:	2c40      	cmp	r4, #64	; 0x40
    96e2:	d065      	beq.n	97b0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12c>
    96e4:	2c80      	cmp	r4, #128	; 0x80
    96e6:	d02a      	beq.n	973e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xba>
    96e8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    96ec:	d060      	beq.n	97b0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12c>
    96ee:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    96f2:	d05d      	beq.n	97b0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12c>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
    96f4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    96f8:	d05a      	beq.n	97b0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12c>
    96fa:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    96fe:	d057      	beq.n	97b0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12c>
    9700:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    9704:	d054      	beq.n	97b0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12c>
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
    9706:	ab0a      	add	r3, sp, #40	; 0x28
    9708:	9300      	str	r3, [sp, #0]
    970a:	2300      	movs	r3, #0
    970c:	4620      	mov	r0, r4
    970e:	461a      	mov	r2, r3
    9710:	4619      	mov	r1, r3
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
    9712:	9e02      	ldr	r6, [sp, #8]
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
    9714:	f7f9 f8e4 	bl	28e0 <kiss_fftr_alloc>
        if (!cfg) {
    9718:	4604      	mov	r4, r0
    971a:	b908      	cbnz	r0, 9720 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x9c>
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
    971c:	4c26      	ldr	r4, [pc, #152]	; (97b8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x134>)
    971e:	e007      	b.n	9730 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xac>
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
    9720:	462a      	mov	r2, r5
    9722:	4631      	mov	r1, r6
    9724:	f003 f942 	bl	c9ac <kiss_fftr>
        ei_dsp_free(cfg, kiss_fftr_mem_length);
    9728:	4620      	mov	r0, r4
    972a:	f00a f8a4 	bl	13876 <_Z7ei_freePv>
        return EIDSP_OK;
    972e:	2400      	movs	r4, #0
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
    9730:	a802      	add	r0, sp, #8
    9732:	f009 fb1a 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    }
    9736:	4620      	mov	r0, r4
    9738:	b011      	add	sp, #68	; 0x44
    973a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                S->fftLen = 64U;
    973e:	2340      	movs	r3, #64	; 0x40
    9740:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                S->bitRevLength = arm_cfft_sR_f32_len64.bitRevLength;
    9744:	4b1d      	ldr	r3, [pc, #116]	; (97bc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x138>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    9746:	2101      	movs	r1, #1
                S->bitRevLength = arm_cfft_sR_f32_len64.bitRevLength;
    9748:	899a      	ldrh	r2, [r3, #12]
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    974a:	a806      	add	r0, sp, #24
                S->bitRevLength = arm_cfft_sR_f32_len64.bitRevLength;
    974c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                S->pBitRevTable = arm_cfft_sR_f32_len64.pBitRevTable;
    9750:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len64.pTwiddle;
    9752:	685b      	ldr	r3, [r3, #4]
                S->pBitRevTable = arm_cfft_sR_f32_len64.pBitRevTable;
    9754:	920c      	str	r2, [sp, #48]	; 0x30
                S->pTwiddle = arm_cfft_sR_f32_len64.pTwiddle;
    9756:	930b      	str	r3, [sp, #44]	; 0x2c
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_128;
    9758:	4b19      	ldr	r3, [pc, #100]	; (97c0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x13c>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    975a:	4622      	mov	r2, r4
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_128;
    975c:	930f      	str	r3, [sp, #60]	; 0x3c
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    975e:	2300      	movs	r3, #0
                rfft_instance->fftLenRFFT = 128U;
    9760:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    9764:	f009 fc8c 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    9768:	9a06      	ldr	r2, [sp, #24]
    976a:	b91a      	cbnz	r2, 9774 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf0>
    976c:	a806      	add	r0, sp, #24
    976e:	f009 fafc 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    9772:	e7d3      	b.n	971c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x98>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
    9774:	2300      	movs	r3, #0
    9776:	9902      	ldr	r1, [sp, #8]
    9778:	a80a      	add	r0, sp, #40	; 0x28
    977a:	f00a f91e 	bl	139ba <arm_rfft_fast_f32>
            output[0].r = fft_output.buffer[0];
    977e:	9b06      	ldr	r3, [sp, #24]
    9780:	681a      	ldr	r2, [r3, #0]
    9782:	602a      	str	r2, [r5, #0]
            output[0].i = 0.0f;
    9784:	2200      	movs	r2, #0
    9786:	606a      	str	r2, [r5, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
    9788:	6859      	ldr	r1, [r3, #4]
            output[n_fft_out_features - 1].i = 0.0f;
    978a:	f8c5 2204 	str.w	r2, [r5, #516]	; 0x204
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
    978e:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    9792:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
    9796:	6899      	ldr	r1, [r3, #8]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    9798:	3308      	adds	r3, #8
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
    979a:	60a9      	str	r1, [r5, #8]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
    979c:	6859      	ldr	r1, [r3, #4]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    979e:	4293      	cmp	r3, r2
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
    97a0:	60e9      	str	r1, [r5, #12]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    97a2:	f105 0508 	add.w	r5, r5, #8
    97a6:	d1f6      	bne.n	9796 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x112>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    97a8:	a806      	add	r0, sp, #24
    97aa:	f009 fade 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    97ae:	e7be      	b.n	972e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xaa>
                return EIDSP_FFT_TABLE_NOT_LOADED;
    97b0:	4c04      	ldr	r4, [pc, #16]	; (97c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x140>)
    97b2:	e7bd      	b.n	9730 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xac>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
    97b4:	4c04      	ldr	r4, [pc, #16]	; (97c8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x144>)
    97b6:	e7be      	b.n	9736 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb2>
    97b8:	fffffc16 	.word	0xfffffc16
    97bc:	00016f74 	.word	0x00016f74
    97c0:	00016d74 	.word	0x00016d74
    97c4:	fffffc08 	.word	0xfffffc08
    97c8:	fffffc11 	.word	0xfffffc11

000097cc <_ZN2ei5numpy8linspaceEffjPf>:
    static int linspace(float start, float stop, uint32_t number, float *out)
    97cc:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
    97ce:	b318      	cbz	r0, 9818 <_ZN2ei5numpy8linspaceEffjPf+0x4c>
    97d0:	b311      	cbz	r1, 9818 <_ZN2ei5numpy8linspaceEffjPf+0x4c>
        if (number == 1) {
    97d2:	2801      	cmp	r0, #1
    97d4:	d103      	bne.n	97de <_ZN2ei5numpy8linspaceEffjPf+0x12>
            out[0] = start;
    97d6:	ed81 0a00 	vstr	s0, [r1]
        return EIDSP_OK;
    97da:	2000      	movs	r0, #0
    }
    97dc:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
    97de:	1e42      	subs	r2, r0, #1
    97e0:	ee07 2a10 	vmov	s14, r2
    97e4:	ee70 7ac0 	vsub.f32	s15, s1, s0
    97e8:	eef8 6a47 	vcvt.f32.u32	s13, s14
    97ec:	460c      	mov	r4, r1
    97ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        for (uint32_t ix = 0; ix < number - 1; ix++) {
    97f2:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
    97f4:	ee07 3a90 	vmov	s15, r3
    97f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    97fc:	eef0 7a40 	vmov.f32	s15, s0
    9800:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
    9804:	3301      	adds	r3, #1
    9806:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
    9808:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
    980c:	d8f2      	bhi.n	97f4 <_ZN2ei5numpy8linspaceEffjPf+0x28>
        out[number - 1] = stop;
    980e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9812:	ed41 0a01 	vstr	s1, [r1, #-4]
    9816:	e7e0      	b.n	97da <_ZN2ei5numpy8linspaceEffjPf+0xe>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
    9818:	4800      	ldr	r0, [pc, #0]	; (981c <_ZN2ei5numpy8linspaceEffjPf+0x50>)
    981a:	e7df      	b.n	97dc <_ZN2ei5numpy8linspaceEffjPf+0x10>
    981c:	fffffc10 	.word	0xfffffc10

00009820 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
    9820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9824:	461e      	mov	r6, r3
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
    9826:	6843      	ldr	r3, [r0, #4]
    ) {
    9828:	4607      	mov	r7, r0
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
    982a:	2b01      	cmp	r3, #1
    ) {
    982c:	460d      	mov	r5, r1
    982e:	4614      	mov	r4, r2
    9830:	b08b      	sub	sp, #44	; 0x2c
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
    9832:	f040 809e 	bne.w	9972 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x152>
    9836:	684b      	ldr	r3, [r1, #4]
    9838:	2b01      	cmp	r3, #1
    983a:	f040 809a 	bne.w	9972 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x152>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (edges_matrix->cols != 1) {
    983e:	6893      	ldr	r3, [r2, #8]
    9840:	2b01      	cmp	r3, #1
    9842:	f040 8096 	bne.w	9972 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x152>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
    9846:	6853      	ldr	r3, [r2, #4]
    9848:	6872      	ldr	r2, [r6, #4]
    984a:	3b01      	subs	r3, #1
    984c:	429a      	cmp	r2, r3
    984e:	f040 8090 	bne.w	9972 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x152>
    9852:	68b1      	ldr	r1, [r6, #8]
    9854:	2901      	cmp	r1, #1
    9856:	f040 808c 	bne.w	9972 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x152>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (fft_matrix->cols != freq_matrix->cols) {
    985a:	6880      	ldr	r0, [r0, #8]
    985c:	68ab      	ldr	r3, [r5, #8]
    985e:	4298      	cmp	r0, r3
    9860:	f040 8087 	bne.w	9972 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x152>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
    9864:	2300      	movs	r3, #0
    9866:	a802      	add	r0, sp, #8
    9868:	9101      	str	r1, [sp, #4]
    986a:	f009 fc09 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    986e:	9b02      	ldr	r3, [sp, #8]
    9870:	2b00      	cmp	r3, #0
    9872:	d07c      	beq.n	996e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14e>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
    9874:	6862      	ldr	r2, [r4, #4]
    9876:	2300      	movs	r3, #0
    9878:	9901      	ldr	r1, [sp, #4]
    987a:	3a01      	subs	r2, #1
    987c:	a806      	add	r0, sp, #24
    987e:	f009 fbff 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    9882:	9806      	ldr	r0, [sp, #24]
    9884:	2800      	cmp	r0, #0
    9886:	d065      	beq.n	9954 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x134>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
            float t = freq_matrix->buffer[ix];
            float v = fft_matrix->buffer[ix];

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
    9888:	f04f 0e00 	mov.w	lr, #0
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
                    buckets.buffer[ex] += v;
                    bucket_count.buffer[ex]++;
    988c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
    9890:	6862      	ldr	r2, [r4, #4]
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
    9892:	f8d5 8008 	ldr.w	r8, [r5, #8]
                    buckets.buffer[ex] += v;
    9896:	f8dd c008 	ldr.w	ip, [sp, #8]
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
    989a:	3a01      	subs	r2, #1
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
    989c:	fa1f f18e 	uxth.w	r1, lr
    98a0:	4588      	cmp	r8, r1
    98a2:	d938      	bls.n	9916 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xf6>
            float t = freq_matrix->buffer[ix];
    98a4:	682b      	ldr	r3, [r5, #0]
    98a6:	f04f 0a00 	mov.w	sl, #0
    98aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    98ae:	edd3 7a00 	vldr	s15, [r3]
    98b2:	ea4f 0981 	mov.w	r9, r1, lsl #2
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
    98b6:	fa1f fb8a 	uxth.w	fp, sl
    98ba:	455a      	cmp	r2, fp
    98bc:	d925      	bls.n	990a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xea>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
    98be:	6821      	ldr	r1, [r4, #0]
    98c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
    98c4:	eb01 018b 	add.w	r1, r1, fp, lsl #2
    98c8:	edd1 6a00 	vldr	s13, [r1]
    98cc:	eef4 6ae7 	vcmpe.f32	s13, s15
    98d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98d4:	d81c      	bhi.n	9910 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xf0>
    98d6:	edd1 6a01 	vldr	s13, [r1, #4]
    98da:	eef4 6ae7 	vcmpe.f32	s13, s15
    98de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98e2:	dd15      	ble.n	9910 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xf0>
            float v = fft_matrix->buffer[ix];
    98e4:	6839      	ldr	r1, [r7, #0]
                    buckets.buffer[ex] += v;
    98e6:	eb0c 0a03 	add.w	sl, ip, r3
            float v = fft_matrix->buffer[ix];
    98ea:	4449      	add	r1, r9
                    buckets.buffer[ex] += v;
    98ec:	edda 7a00 	vldr	s15, [sl]
    98f0:	edd1 6a00 	vldr	s13, [r1]
    98f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
    98f8:	edca 7a00 	vstr	s15, [sl]
                    bucket_count.buffer[ex]++;
    98fc:	4403      	add	r3, r0
    98fe:	edd3 7a00 	vldr	s15, [r3]
    9902:	ee77 7a87 	vadd.f32	s15, s15, s14
    9906:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
    990a:	f10e 0e01 	add.w	lr, lr, #1
    990e:	e7c5      	b.n	989c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
    9910:	f10a 0a01 	add.w	sl, sl, #1
    9914:	e7cf      	b.n	98b6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x96>
    9916:	2400      	movs	r4, #0
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
            if (bucket_count.buffer[ex] == 0.0f) {
    9918:	2700      	movs	r7, #0
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
    991a:	b2a1      	uxth	r1, r4
    991c:	428a      	cmp	r2, r1
    991e:	d924      	bls.n	996a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
            if (bucket_count.buffer[ex] == 0.0f) {
    9920:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    9924:	edd3 7a00 	vldr	s15, [r3]
    9928:	eef5 7a40 	vcmp.f32	s15, #0.0
    992c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                output_matrix->buffer[ex] = 0.0f;
    9930:	6833      	ldr	r3, [r6, #0]
            if (bucket_count.buffer[ex] == 0.0f) {
    9932:	ea4f 0581 	mov.w	r5, r1, lsl #2
                output_matrix->buffer[ex] = 0.0f;
    9936:	eb03 0381 	add.w	r3, r3, r1, lsl #2
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
    993a:	bf1d      	ittte	ne
    993c:	eb0c 0105 	addne.w	r1, ip, r5
    9940:	edd1 6a00 	vldrne	s13, [r1]
    9944:	ee86 7aa7 	vdivne.f32	s14, s13, s15
                output_matrix->buffer[ex] = 0.0f;
    9948:	601f      	streq	r7, [r3, #0]
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
    994a:	bf18      	it	ne
    994c:	ed83 7a00 	vstrne	s14, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
    9950:	3401      	adds	r4, #1
    9952:	e7e2      	b.n	991a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xfa>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
    9954:	4c08      	ldr	r4, [pc, #32]	; (9978 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x158>)
    9956:	a806      	add	r0, sp, #24
    9958:	f009 fa07 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
    995c:	a802      	add	r0, sp, #8
    995e:	f009 fa04 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
            }
        }

        return EIDSP_OK;
    }
    9962:	4620      	mov	r0, r4
    9964:	b00b      	add	sp, #44	; 0x2c
    9966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return EIDSP_OK;
    996a:	2400      	movs	r4, #0
    996c:	e7f3      	b.n	9956 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x136>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
    996e:	4c02      	ldr	r4, [pc, #8]	; (9978 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x158>)
    9970:	e7f4      	b.n	995c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x13c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    9972:	4c02      	ldr	r4, [pc, #8]	; (997c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>)
    9974:	e7f5      	b.n	9962 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x142>
    9976:	bf00      	nop
    9978:	fffffc16 	.word	0xfffffc16
    997c:	fffffc14 	.word	0xfffffc14

00009980 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
    9980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9984:	ed2d 8b02 	vpush	{d8}
    9988:	461e      	mov	r6, r3
        if (input_matrix->rows != 1) {
    998a:	6843      	ldr	r3, [r0, #4]
    {
    998c:	4605      	mov	r5, r0
        if (input_matrix->rows != 1) {
    998e:	2b01      	cmp	r3, #1
    {
    9990:	460f      	mov	r7, r1
    9992:	4614      	mov	r4, r2
    9994:	eef0 8a40 	vmov.f32	s17, s0
    9998:	b08e      	sub	sp, #56	; 0x38
        if (input_matrix->rows != 1) {
    999a:	f040 80c2 	bne.w	9b22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
    999e:	684b      	ldr	r3, [r1, #4]
    99a0:	2b01      	cmp	r3, #1
    99a2:	f040 80be 	bne.w	9b22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a2>
    99a6:	688b      	ldr	r3, [r1, #8]
    99a8:	ea4f 0856 	mov.w	r8, r6, lsr #1
    99ac:	f108 0901 	add.w	r9, r8, #1
    99b0:	454b      	cmp	r3, r9
    99b2:	f040 80b6 	bne.w	9b22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
    99b6:	6851      	ldr	r1, [r2, #4]
    99b8:	2901      	cmp	r1, #1
    99ba:	f040 80b2 	bne.w	9b22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a2>
    99be:	6893      	ldr	r3, [r2, #8]
    99c0:	4599      	cmp	r9, r3
    99c2:	f040 80ae 	bne.w	9b22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (input_matrix->buffer == NULL) {
    99c6:	6803      	ldr	r3, [r0, #0]
    99c8:	2b00      	cmp	r3, #0
    99ca:	f000 80ac 	beq.w	9b26 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (out_fft_matrix->buffer == NULL) {
    99ce:	683a      	ldr	r2, [r7, #0]
    99d0:	2a00      	cmp	r2, #0
    99d2:	f000 80a8 	beq.w	9b26 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (out_freq_matrix->buffer == NULL) {
    99d6:	6822      	ldr	r2, [r4, #0]
    99d8:	2a00      	cmp	r2, #0
    99da:	f000 80a4 	beq.w	9b26 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
    99de:	6882      	ldr	r2, [r0, #8]
    99e0:	a802      	add	r0, sp, #8
    99e2:	f009 fb4d 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    99e6:	9b02      	ldr	r3, [sp, #8]
    99e8:	2b00      	cmp	r3, #0
    99ea:	f000 8098 	beq.w	9b1e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x19e>

        uint16_t nperseg = n_fft;

        if (n_fft > input_matrix->cols) {
    99ee:	68ad      	ldr	r5, [r5, #8]
    99f0:	42ae      	cmp	r6, r5
    99f2:	d913      	bls.n	9a1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
            nperseg = input_matrix->cols;
    99f4:	b2ad      	uxth	r5, r5
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
            welch_matrix.cols = n_fft;
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
    99f6:	2300      	movs	r3, #0
    99f8:	462a      	mov	r2, r5
    99fa:	2101      	movs	r1, #1
    99fc:	a806      	add	r0, sp, #24
    99fe:	f009 fb3f 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    9a02:	9b06      	ldr	r3, [sp, #24]
    9a04:	2b00      	cmp	r3, #0
    9a06:	f000 8088 	beq.w	9b1a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x19a>
    9a0a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    9a0e:	eb03 0285 	add.w	r2, r3, r5, lsl #2
        for (uint16_t ix = 0; ix < nperseg; ix++) {
    9a12:	4293      	cmp	r3, r2
    9a14:	d006      	beq.n	9a24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xa4>
            triage_segments.buffer[ix] = 1.0f;
    9a16:	eca3 8a01 	vstmia	r3!, {s16}
        for (uint16_t ix = 0; ix < nperseg; ix++) {
    9a1a:	e7fa      	b.n	9a12 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x92>
        uint16_t nperseg = n_fft;
    9a1c:	4635      	mov	r5, r6
            welch_matrix.cols = n_fft;
    9a1e:	bf38      	it	cc
    9a20:	9604      	strcc	r6, [sp, #16]
    9a22:	e7e8      	b.n	99f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x76>
        }

        float scale = 1.0f / (sampling_freq * nperseg);

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
    9a24:	ee07 6a90 	vmov	s15, r6
    9a28:	ee88 7a28 	vdiv.f32	s14, s16, s17
    9a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9a30:	ee67 7a87 	vmul.f32	s15, s15, s14
    9a34:	2300      	movs	r3, #0
    9a36:	ee88 7a27 	vdiv.f32	s14, s16, s15
    9a3a:	6822      	ldr	r2, [r4, #0]
    9a3c:	b299      	uxth	r1, r3
    9a3e:	ee07 1a90 	vmov	s15, r1
    9a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9a46:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
    9a4a:	3301      	adds	r3, #1
    9a4c:	b299      	uxth	r1, r3
    9a4e:	4588      	cmp	r8, r1
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
    9a50:	ece2 7a01 	vstmia	r2!, {s15}
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
    9a54:	d2f2      	bcs.n	9a3c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xbc>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
    9a56:	2201      	movs	r2, #1
    9a58:	2300      	movs	r3, #0
    9a5a:	4611      	mov	r1, r2
    9a5c:	a80a      	add	r0, sp, #40	; 0x28
    9a5e:	f009 fb0f 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    9a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9a64:	2b00      	cmp	r3, #0
    9a66:	d056      	beq.n	9b16 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x196>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
    9a68:	a90a      	add	r1, sp, #40	; 0x28
    9a6a:	a802      	add	r0, sp, #8
    9a6c:	f7ff fde4 	bl	9638 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
    9a70:	4604      	mov	r4, r0
    9a72:	b9b8      	cbnz	r0, 9aa4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x124>
            EIDSP_ERR(ret);
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
    9a74:	a90a      	add	r1, sp, #40	; 0x28
    9a76:	a802      	add	r0, sp, #8
    9a78:	f7ff fda4 	bl	95c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
    9a7c:	4604      	mov	r4, r0
    9a7e:	b988      	cbnz	r0, 9aa4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x124>
            EIDSP_ERR(ret);
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
    9a80:	2101      	movs	r1, #1
    9a82:	ea4f 00c9 	mov.w	r0, r9, lsl #3
    9a86:	f009 fef4 	bl	13872 <_Z9ei_callocjj>
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
    9a8a:	464b      	mov	r3, r9
    9a8c:	4602      	mov	r2, r0
        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
    9a8e:	4682      	mov	sl, r0
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
    9a90:	9904      	ldr	r1, [sp, #16]
    9a92:	9802      	ldr	r0, [sp, #8]
    9a94:	9600      	str	r6, [sp, #0]
    9a96:	f7ff fdf5 	bl	9684 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
        if (ret != EIDSP_OK) {
    9a9a:	4604      	mov	r4, r0
    9a9c:	b188      	cbz	r0, 9ac2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x142>

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
    9a9e:	4650      	mov	r0, sl
    9aa0:	f009 fee9 	bl	13876 <_Z7ei_freePv>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
    9aa4:	a80a      	add	r0, sp, #40	; 0x28
    9aa6:	f009 f960 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
    9aaa:	a806      	add	r0, sp, #24
    9aac:	f009 f95d 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
    9ab0:	a802      	add	r0, sp, #8
    9ab2:	f009 f95a 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>

        return EIDSP_OK;
    }
    9ab6:	4620      	mov	r0, r4
    9ab8:	b00e      	add	sp, #56	; 0x38
    9aba:	ecbd 8b02 	vpop	{d8}
    9abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        float scale = 1.0f / (sampling_freq * nperseg);
    9ac2:	ee07 5a90 	vmov	s15, r5
    9ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9aca:	ee27 0aa8 	vmul.f32	s0, s15, s17
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
    9ace:	4602      	mov	r2, r0
        float scale = 1.0f / (sampling_freq * nperseg);
    9ad0:	eec8 6a00 	vdiv.f32	s13, s16, s0
            fft_output[ix].i = 0.0f;
    9ad4:	2500      	movs	r5, #0
    9ad6:	6839      	ldr	r1, [r7, #0]
    9ad8:	f10a 0304 	add.w	r3, sl, #4
                (abs(fft_output[ix].i * fft_output[ix].i));
    9adc:	edd3 7a00 	vldr	s15, [r3]
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
    9ae0:	ed13 7a01 	vldr	s14, [r3, #-4]
                (abs(fft_output[ix].i * fft_output[ix].i));
    9ae4:	ee67 7aa7 	vmul.f32	s15, s15, s15
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
    9ae8:	eee7 7a07 	vfma.f32	s15, s14, s14
            fft_output[ix].r *= scale;
    9aec:	ee67 7aa6 	vmul.f32	s15, s15, s13
            if (ix != n_fft / 2) {
    9af0:	b290      	uxth	r0, r2
    9af2:	4580      	cmp	r8, r0
                fft_output[ix].r *= 2;
    9af4:	bf18      	it	ne
    9af6:	ee77 7aa7 	vaddne.f32	s15, s15, s15
    9afa:	ed43 7a01 	vstr	s15, [r3, #-4]
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
    9afe:	f853 0c04 	ldr.w	r0, [r3, #-4]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
    9b02:	3201      	adds	r2, #1
            fft_output[ix].i = 0.0f;
    9b04:	601d      	str	r5, [r3, #0]
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
    9b06:	f841 0b04 	str.w	r0, [r1], #4
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
    9b0a:	b290      	uxth	r0, r2
    9b0c:	4580      	cmp	r8, r0
    9b0e:	f103 0308 	add.w	r3, r3, #8
    9b12:	d2e3      	bcs.n	9adc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x15c>
    9b14:	e7c3      	b.n	9a9e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x11e>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
    9b16:	4c05      	ldr	r4, [pc, #20]	; (9b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1ac>)
    9b18:	e7c4      	b.n	9aa4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x124>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
    9b1a:	4c04      	ldr	r4, [pc, #16]	; (9b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1ac>)
    9b1c:	e7c5      	b.n	9aaa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x12a>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
    9b1e:	4c03      	ldr	r4, [pc, #12]	; (9b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1ac>)
    9b20:	e7c6      	b.n	9ab0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x130>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    9b22:	4c03      	ldr	r4, [pc, #12]	; (9b30 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b0>)
    9b24:	e7c7      	b.n	9ab6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x136>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    9b26:	4c01      	ldr	r4, [pc, #4]	; (9b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1ac>)
    9b28:	e7c5      	b.n	9ab6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x136>
    9b2a:	bf00      	nop
    9b2c:	fffffc16 	.word	0xfffffc16
    9b30:	fffffc14 	.word	0xfffffc14

00009b34 <ei_wrapper_get_classifier_label>:
	if (idx >= ei_wrapper_get_classifier_label_count()) {
    9b34:	2803      	cmp	r0, #3
	return ei_classifier_inferencing_categories[idx];
    9b36:	bf9a      	itte	ls
    9b38:	4b02      	ldrls	r3, [pc, #8]	; (9b44 <ei_wrapper_get_classifier_label+0x10>)
    9b3a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
		return NULL;
    9b3e:	2000      	movhi	r0, #0
}
    9b40:	4770      	bx	lr
    9b42:	bf00      	nop
    9b44:	200000e8 	.word	0x200000e8

00009b48 <ei_wrapper_add_data>:
{
    9b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b4c:	4b37      	ldr	r3, [pc, #220]	; (9c2c <ei_wrapper_add_data+0xe4>)
    9b4e:	4606      	mov	r6, r0
    9b50:	434b      	muls	r3, r1
	if (data_size % INPUT_FRAME_SIZE) {
    9b52:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
{
    9b56:	460f      	mov	r7, r1
	if (data_size % INPUT_FRAME_SIZE) {
    9b58:	d863      	bhi.n	9c22 <ei_wrapper_add_data+0xda>
	__asm__ volatile(
    9b5a:	f04f 0320 	mov.w	r3, #32
    9b5e:	f3ef 8111 	mrs	r1, BASEPRI
    9b62:	f383 8812 	msr	BASEPRI_MAX, r3
    9b66:	f3bf 8f6f 	isb	sy
	if (b->wait_data_size > 0) {
    9b6a:	4c31      	ldr	r4, [pc, #196]	; (9c30 <ei_wrapper_add_data+0xe8>)
    9b6c:	f8d4 5718 	ldr.w	r5, [r4, #1816]	; 0x718
    9b70:	b15d      	cbz	r5, 9b8a <ei_wrapper_add_data+0x42>
		       INPUT_WINDOW_SIZE - 1;
    9b72:	f605 034c 	addw	r3, r5, #2124	; 0x84c
	if (buf_calc_free_space(b) < len) {
    9b76:	429f      	cmp	r7, r3
    9b78:	d914      	bls.n	9ba4 <ei_wrapper_add_data+0x5c>
	__asm__ volatile(
    9b7a:	f381 8811 	msr	BASEPRI, r1
    9b7e:	f3bf 8f6f 	isb	sy
		return -ENOMEM;
    9b82:	f06f 000b 	mvn.w	r0, #11
}
    9b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (b->append_idx >= b->process_idx) {
    9b8a:	f8d4 2714 	ldr.w	r2, [r4, #1812]	; 0x714
    9b8e:	f8d4 3710 	ldr.w	r3, [r4, #1808]	; 0x710
    9b92:	429a      	cmp	r2, r3
	return (ARRAY_SIZE(b->buf) - b->process_idx) + b->append_idx;
    9b94:	bf38      	it	cc
    9b96:	f602 12c4 	addwcc	r2, r2, #2500	; 0x9c4
    9b9a:	1ad3      	subs	r3, r2, r3
	return ARRAY_SIZE(b->buf) - buf_get_collected_data_count(b) - 1;
    9b9c:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
    9ba0:	3303      	adds	r3, #3
    9ba2:	e7e8      	b.n	9b76 <ei_wrapper_add_data+0x2e>
	size_t cur_idx = b->append_idx;
    9ba4:	f8d4 8714 	ldr.w	r8, [r4, #1812]	; 0x714
	size_t new_idx = b->append_idx + len;
    9ba8:	2000      	movs	r0, #0
    9baa:	eb07 0308 	add.w	r3, r7, r8
	if (b->wait_data_size > 0) {
    9bae:	b165      	cbz	r5, 9bca <ei_wrapper_add_data+0x82>
		if (b->wait_data_size > len) {
    9bb0:	42af      	cmp	r7, r5
			b->wait_data_size -= len;
    9bb2:	bf35      	itete	cc
    9bb4:	1bed      	subcc	r5, r5, r7
			b->state = STATE_PROCESSING;
    9bb6:	2202      	movcs	r2, #2
			b->wait_data_size -= len;
    9bb8:	f8c4 5718 	strcc.w	r5, [r4, #1816]	; 0x718
			*process_buf = true;
    9bbc:	2501      	movcs	r5, #1
	*process_buf = false;
    9bbe:	bf32      	itee	cc
    9bc0:	4605      	movcc	r5, r0
			b->wait_data_size = 0;
    9bc2:	f8c4 0718 	strcs.w	r0, [r4, #1816]	; 0x718
			b->state = STATE_PROCESSING;
    9bc6:	f884 271d 	strbcs.w	r2, [r4, #1821]	; 0x71d
	if (new_idx >= ARRAY_SIZE(b->buf)) {
    9bca:	f640 12c3 	movw	r2, #2499	; 0x9c3
    9bce:	4293      	cmp	r3, r2
		new_idx -= ARRAY_SIZE(b->buf);
    9bd0:	bf86      	itte	hi
    9bd2:	f6a3 13c4 	subwhi	r3, r3, #2500	; 0x9c4
		looped = true;
    9bd6:	2201      	movhi	r2, #1
	bool looped = false;
    9bd8:	2200      	movls	r2, #0
	b->append_idx = new_idx;
    9bda:	f8df 905c 	ldr.w	r9, [pc, #92]	; 9c38 <ei_wrapper_add_data+0xf0>
    9bde:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
    9be2:	f381 8811 	msr	BASEPRI, r1
    9be6:	f3bf 8f6f 	isb	sy
		memcpy(&b->buf[cur_idx], data, copy_cnt * sizeof(b->buf[0]));
    9bea:	eb09 0088 	add.w	r0, r9, r8, lsl #2
	if (looped) {
    9bee:	b1aa      	cbz	r2, 9c1c <ei_wrapper_add_data+0xd4>
		size_t copy_cnt = ARRAY_SIZE(b->buf) - cur_idx;
    9bf0:	f5c8 621c 	rsb	r2, r8, #2496	; 0x9c0
    9bf4:	3204      	adds	r2, #4
		memcpy(&b->buf[cur_idx], data, copy_cnt * sizeof(b->buf[0]));
    9bf6:	0094      	lsls	r4, r2, #2
    9bf8:	4622      	mov	r2, r4
    9bfa:	4631      	mov	r1, r6
    9bfc:	f00a ffdb 	bl	14bb6 <memcpy>
		memcpy(&b->buf[0], data + copy_cnt,
    9c00:	4648      	mov	r0, r9
		      (len - copy_cnt) * sizeof(b->buf[0]));
    9c02:	f6a8 13c4 	subw	r3, r8, #2500	; 0x9c4
    9c06:	19da      	adds	r2, r3, r7
		memcpy(&b->buf[0], data + copy_cnt,
    9c08:	0092      	lsls	r2, r2, #2
    9c0a:	1931      	adds	r1, r6, r4
		memcpy(&b->buf[cur_idx], data, len * sizeof(b->buf[0]));
    9c0c:	f00a ffd3 	bl	14bb6 <memcpy>
	if (!err && process_buf) {
    9c10:	b155      	cbz	r5, 9c28 <ei_wrapper_add_data+0xe0>
	z_impl_k_sem_give(sem);
    9c12:	4808      	ldr	r0, [pc, #32]	; (9c34 <ei_wrapper_add_data+0xec>)
    9c14:	f002 f9dc 	bl	bfd0 <z_impl_k_sem_give>
}
    9c18:	2000      	movs	r0, #0
    9c1a:	e7b4      	b.n	9b86 <ei_wrapper_add_data+0x3e>
		memcpy(&b->buf[cur_idx], data, len * sizeof(b->buf[0]));
    9c1c:	4631      	mov	r1, r6
    9c1e:	00ba      	lsls	r2, r7, #2
    9c20:	e7f4      	b.n	9c0c <ei_wrapper_add_data+0xc4>
		return -EINVAL;
    9c22:	f06f 0015 	mvn.w	r0, #21
    9c26:	e7ae      	b.n	9b86 <ei_wrapper_add_data+0x3e>
    9c28:	4628      	mov	r0, r5
    9c2a:	e7ac      	b.n	9b86 <ei_wrapper_add_data+0x3e>
    9c2c:	aaaaaaab 	.word	0xaaaaaaab
    9c30:	20002f04 	.word	0x20002f04
    9c34:	200005ac 	.word	0x200005ac
    9c38:	20000f04 	.word	0x20000f04

00009c3c <ei_wrapper_start_prediction>:
{
    9c3c:	b538      	push	{r3, r4, r5, lr}
			      frame_shift * ei_wrapper_get_frame_size();
    9c3e:	f240 1377 	movw	r3, #375	; 0x177
    9c42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9c46:	fb03 1000 	mla	r0, r3, r0, r1
	__asm__ volatile(
    9c4a:	f04f 0320 	mov.w	r3, #32
    9c4e:	f3ef 8511 	mrs	r5, BASEPRI
    9c52:	f383 8812 	msr	BASEPRI_MAX, r3
    9c56:	f3bf 8f6f 	isb	sy
	if (b->state == STATE_READY) {
    9c5a:	4c1c      	ldr	r4, [pc, #112]	; (9ccc <ei_wrapper_start_prediction+0x90>)
    9c5c:	f894 371d 	ldrb.w	r3, [r4, #1821]	; 0x71d
    9c60:	2b03      	cmp	r3, #3
    9c62:	d129      	bne.n	9cb8 <ei_wrapper_start_prediction+0x7c>
		b->state = STATE_WAITING_FOR_DATA;
    9c64:	2301      	movs	r3, #1
	if (b->append_idx >= b->process_idx) {
    9c66:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
		b->state = STATE_WAITING_FOR_DATA;
    9c6a:	f884 371d 	strb.w	r3, [r4, #1821]	; 0x71d
	if (b->append_idx >= b->process_idx) {
    9c6e:	f8d4 3710 	ldr.w	r3, [r4, #1808]	; 0x710
    9c72:	4299      	cmp	r1, r3
	return (ARRAY_SIZE(b->buf) - b->process_idx) + b->append_idx;
    9c74:	bf38      	it	cc
    9c76:	f601 11c4 	addwcc	r1, r1, #2500	; 0x9c4
    9c7a:	1aca      	subs	r2, r1, r3
	if (b->process_idx >= ARRAY_SIZE(b->buf)) {
    9c7c:	f640 11c3 	movw	r1, #2499	; 0x9c3
	b->process_idx += move;
    9c80:	4403      	add	r3, r0
	if (b->process_idx >= ARRAY_SIZE(b->buf)) {
    9c82:	428b      	cmp	r3, r1
    9c84:	d81f      	bhi.n	9cc6 <ei_wrapper_start_prediction+0x8a>
	size_t processing_end_move = move + INPUT_WINDOW_SIZE;
    9c86:	f200 1177 	addw	r1, r0, #375	; 0x177
	if (processing_end_move > max_move) {
    9c8a:	4291      	cmp	r1, r2
		b->process_idx -= ARRAY_SIZE(b->buf);
    9c8c:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
		b->state = STATE_PROCESSING;
    9c90:	bf93      	iteet	ls
    9c92:	2302      	movls	r3, #2
		b->wait_data_size = processing_end_move - max_move;
    9c94:	1a89      	subhi	r1, r1, r2
	*process_buf = false;
    9c96:	2000      	movhi	r0, #0
		*process_buf = true;
    9c98:	2001      	movls	r0, #1
		b->wait_data_size = processing_end_move - max_move;
    9c9a:	bf8c      	ite	hi
    9c9c:	f8c4 1718 	strhi.w	r1, [r4, #1816]	; 0x718
		b->state = STATE_PROCESSING;
    9ca0:	f884 371d 	strbls.w	r3, [r4, #1821]	; 0x71d
	__asm__ volatile(
    9ca4:	f385 8811 	msr	BASEPRI, r5
    9ca8:	f3bf 8f6f 	isb	sy
	if (!err && process_buf) {
    9cac:	b150      	cbz	r0, 9cc4 <ei_wrapper_start_prediction+0x88>
	z_impl_k_sem_give(sem);
    9cae:	4808      	ldr	r0, [pc, #32]	; (9cd0 <ei_wrapper_start_prediction+0x94>)
    9cb0:	f002 f98e 	bl	bfd0 <z_impl_k_sem_give>
	return 0;
    9cb4:	2000      	movs	r0, #0
}
    9cb6:	e005      	b.n	9cc4 <ei_wrapper_start_prediction+0x88>
    9cb8:	f385 8811 	msr	BASEPRI, r5
    9cbc:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    9cc0:	f06f 000f 	mvn.w	r0, #15
}
    9cc4:	bd38      	pop	{r3, r4, r5, pc}
		b->process_idx -= ARRAY_SIZE(b->buf);
    9cc6:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
    9cca:	e7dc      	b.n	9c86 <ei_wrapper_start_prediction+0x4a>
    9ccc:	20002f04 	.word	0x20002f04
    9cd0:	200005ac 	.word	0x200005ac

00009cd4 <ei_wrapper_get_next_classification_result>:

	return max_idx;
}

int ei_wrapper_get_next_classification_result(const char **label, float *value, size_t *idx)
{
    9cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cd6:	4606      	mov	r6, r0
    9cd8:	460d      	mov	r5, r1
    9cda:	4614      	mov	r4, r2
	if (!can_read_result()) {
    9cdc:	f7ff fa62 	bl	91a4 <_ZL15can_read_resultv>
    9ce0:	2800      	cmp	r0, #0
    9ce2:	d04c      	beq.n	9d7e <ei_wrapper_get_next_classification_result+0xaa>
		LOG_WRN("Result can be read only from callback context");
		return -EACCES;
	}

	cur_res_idx = get_next_result_idx(cur_res_idx);
    9ce4:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 9d94 <ei_wrapper_get_next_classification_result+0xc0>
    9ce8:	f8dc 0000 	ldr.w	r0, [ip]
	if (cur_idx == RESULT_LABEL_COUNT) {
    9cec:	2804      	cmp	r0, #4
    9cee:	d102      	bne.n	9cf6 <ei_wrapper_get_next_classification_result+0x22>

	__ASSERT_NO_MSG((cur_res_idx >= 0) && (cur_res_idx <= RESULT_LABEL_COUNT));

	if (cur_res_idx == RESULT_LABEL_COUNT) {
		return -ENOENT;
    9cf0:	f06f 0001 	mvn.w	r0, #1
	if (idx) {
		*idx = cur_res_idx;
	}

	return 0;
}
    9cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float max_val = -INFINITY;
    9cf6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 9d88 <ei_wrapper_get_next_classification_result+0xb4>
    9cfa:	4a24      	ldr	r2, [pc, #144]	; (9d8c <ei_wrapper_get_next_classification_result+0xb8>)
	if (cur_idx >= 0) {
    9cfc:	2800      	cmp	r0, #0
		limit = ei_result.classification[cur_idx].value;
    9cfe:	bfa6      	itte	ge
    9d00:	eb02 03c0 	addge.w	r3, r2, r0, lsl #3
    9d04:	edd3 6a01 	vldrge	s13, [r3, #4]
	float limit = INFINITY;
    9d08:	eddf 6a21 	vldrlt	s13, [pc, #132]	; 9d90 <ei_wrapper_get_next_classification_result+0xbc>
	int max_idx = RESULT_LABEL_COUNT;
    9d0c:	2104      	movs	r1, #4
	for (int idx = 0; idx < RESULT_LABEL_COUNT; idx++) {
    9d0e:	2300      	movs	r3, #0
    9d10:	eeb0 6a47 	vmov.f32	s12, s14
    9d14:	4f1d      	ldr	r7, [pc, #116]	; (9d8c <ei_wrapper_get_next_classification_result+0xb8>)
		if ((idx > cur_idx) && (val == limit)) {
    9d16:	4298      	cmp	r0, r3
		float val = ei_result.classification[idx].value;
    9d18:	edd7 7a01 	vldr	s15, [r7, #4]
		if ((idx > cur_idx) && (val == limit)) {
    9d1c:	da04      	bge.n	9d28 <ei_wrapper_get_next_classification_result+0x54>
    9d1e:	eef4 7a66 	vcmp.f32	s15, s13
    9d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d26:	d019      	beq.n	9d5c <ei_wrapper_get_next_classification_result+0x88>
		if ((val < limit) &&
    9d28:	eef4 7ae6 	vcmpe.f32	s15, s13
    9d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d30:	d50e      	bpl.n	9d50 <ei_wrapper_get_next_classification_result+0x7c>
    9d32:	eef4 7ac7 	vcmpe.f32	s15, s14
    9d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d3a:	dc06      	bgt.n	9d4a <ei_wrapper_get_next_classification_result+0x76>
		    ((val > max_val) || ((val == -INFINITY) && (max_idx == RESULT_LABEL_COUNT)))) {
    9d3c:	eef4 7a46 	vcmp.f32	s15, s12
    9d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d44:	d104      	bne.n	9d50 <ei_wrapper_get_next_classification_result+0x7c>
    9d46:	2904      	cmp	r1, #4
    9d48:	d102      	bne.n	9d50 <ei_wrapper_get_next_classification_result+0x7c>
    9d4a:	4619      	mov	r1, r3
			max_val = val;
    9d4c:	eeb0 7a67 	vmov.f32	s14, s15
	for (int idx = 0; idx < RESULT_LABEL_COUNT; idx++) {
    9d50:	3301      	adds	r3, #1
    9d52:	2b04      	cmp	r3, #4
    9d54:	f107 0708 	add.w	r7, r7, #8
    9d58:	d1dd      	bne.n	9d16 <ei_wrapper_get_next_classification_result+0x42>
    9d5a:	460b      	mov	r3, r1
	if (cur_res_idx == RESULT_LABEL_COUNT) {
    9d5c:	2b04      	cmp	r3, #4
	cur_res_idx = get_next_result_idx(cur_res_idx);
    9d5e:	f8cc 3000 	str.w	r3, [ip]
	if (cur_res_idx == RESULT_LABEL_COUNT) {
    9d62:	d0c5      	beq.n	9cf0 <ei_wrapper_get_next_classification_result+0x1c>
	if (label) {
    9d64:	b116      	cbz	r6, 9d6c <ei_wrapper_get_next_classification_result+0x98>
		*label = ei_result.classification[cur_res_idx].label;
    9d66:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    9d6a:	6031      	str	r1, [r6, #0]
	if (value) {
    9d6c:	b11d      	cbz	r5, 9d76 <ei_wrapper_get_next_classification_result+0xa2>
		*value = ei_result.classification[cur_res_idx].value;
    9d6e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    9d72:	6852      	ldr	r2, [r2, #4]
    9d74:	602a      	str	r2, [r5, #0]
	if (idx) {
    9d76:	b12c      	cbz	r4, 9d84 <ei_wrapper_get_next_classification_result+0xb0>
	return 0;
    9d78:	2000      	movs	r0, #0
		*idx = cur_res_idx;
    9d7a:	6023      	str	r3, [r4, #0]
    9d7c:	e7ba      	b.n	9cf4 <ei_wrapper_get_next_classification_result+0x20>
		return -EACCES;
    9d7e:	f06f 000c 	mvn.w	r0, #12
    9d82:	e7b7      	b.n	9cf4 <ei_wrapper_get_next_classification_result+0x20>
	return 0;
    9d84:	4620      	mov	r0, r4
    9d86:	e7b5      	b.n	9cf4 <ei_wrapper_get_next_classification_result+0x20>
    9d88:	ff800000 	.word	0xff800000
    9d8c:	200006a0 	.word	0x200006a0
    9d90:	7f800000 	.word	0x7f800000
    9d94:	20000ef8 	.word	0x20000ef8

00009d98 <ei_wrapper_get_anomaly>:

int ei_wrapper_get_anomaly(float *anomaly)
{
    9d98:	b510      	push	{r4, lr}
    9d9a:	4604      	mov	r4, r0
	if (!can_read_result()) {
    9d9c:	f7ff fa02 	bl	91a4 <_ZL15can_read_resultv>
    9da0:	b128      	cbz	r0, 9dae <ei_wrapper_get_anomaly+0x16>

	if (!HAS_ANOMALY) {
		return -ENOTSUP;
	}

	if (anomaly) {
    9da2:	b13c      	cbz	r4, 9db4 <ei_wrapper_get_anomaly+0x1c>
		*anomaly = ei_result.anomaly;
	}

	return 0;
    9da4:	2000      	movs	r0, #0
		*anomaly = ei_result.anomaly;
    9da6:	4b04      	ldr	r3, [pc, #16]	; (9db8 <ei_wrapper_get_anomaly+0x20>)
    9da8:	6a1b      	ldr	r3, [r3, #32]
    9daa:	6023      	str	r3, [r4, #0]
}
    9dac:	bd10      	pop	{r4, pc}
		return -EACCES;
    9dae:	f06f 000c 	mvn.w	r0, #12
    9db2:	e7fb      	b.n	9dac <ei_wrapper_get_anomaly+0x14>
	return 0;
    9db4:	4620      	mov	r0, r4
    9db6:	e7f9      	b.n	9dac <ei_wrapper_get_anomaly+0x14>
    9db8:	200006a0 	.word	0x200006a0

00009dbc <ei_wrapper_init>:

	return 0;
}

int ei_wrapper_init(ei_wrapper_result_ready_cb cb)
{
    9dbc:	b510      	push	{r4, lr}
    9dbe:	b08a      	sub	sp, #40	; 0x28
	if (!cb) {
    9dc0:	b308      	cbz	r0, 9e06 <ei_wrapper_init+0x4a>
		return -EINVAL;
	}

	if (user_cb) {
    9dc2:	4b14      	ldr	r3, [pc, #80]	; (9e14 <ei_wrapper_init+0x58>)
    9dc4:	681c      	ldr	r4, [r3, #0]
    9dc6:	bb0c      	cbnz	r4, 9e0c <ei_wrapper_init+0x50>
		return -EALREADY;
	}

	user_cb = cb;
    9dc8:	6018      	str	r0, [r3, #0]

	bool cancelled;
	int err = buf_cleanup(&ei_input, &cancelled);
    9dca:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    9dce:	f7ff fa85 	bl	92dc <_ZL11buf_cleanupP11data_bufferPb.constprop.0>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9dd2:	2200      	movs	r2, #0
    9dd4:	2300      	movs	r3, #0
    9dd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9dda:	2305      	movs	r3, #5
    9ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    9de0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    9de4:	e9cd 4400 	strd	r4, r4, [sp]
    9de8:	4b0b      	ldr	r3, [pc, #44]	; (9e18 <ei_wrapper_init+0x5c>)
    9dea:	490c      	ldr	r1, [pc, #48]	; (9e1c <ei_wrapper_init+0x60>)
    9dec:	9404      	str	r4, [sp, #16]
    9dee:	480c      	ldr	r0, [pc, #48]	; (9e20 <ei_wrapper_init+0x64>)
    9df0:	f001 ff90 	bl	bd14 <z_impl_k_thread_create>

	__ASSERT_NO_MSG(!cancelled);
	__ASSERT_NO_MSG(!err);
	ARG_UNUSED(err);

	ei_thread_id = k_thread_create(&thread, thread_stack, THREAD_STACK_SIZE,
    9df4:	4b0b      	ldr	r3, [pc, #44]	; (9e24 <ei_wrapper_init+0x68>)
    9df6:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread, str);
    9df8:	490b      	ldr	r1, [pc, #44]	; (9e28 <ei_wrapper_init+0x6c>)
    9dfa:	4809      	ldr	r0, [pc, #36]	; (9e20 <ei_wrapper_init+0x64>)
    9dfc:	f009 fc1c 	bl	13638 <z_impl_k_thread_name_set>
				       (k_thread_entry_t)edge_impulse_thread_fn,
				       NULL, NULL, NULL,
				       THREAD_PRIORITY, 0, K_NO_WAIT);
	k_thread_name_set(&thread, "edge_impulse_thread");

	return 0;
    9e00:	4620      	mov	r0, r4
}
    9e02:	b00a      	add	sp, #40	; 0x28
    9e04:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9e06:	f06f 0015 	mvn.w	r0, #21
    9e0a:	e7fa      	b.n	9e02 <ei_wrapper_init+0x46>
		return -EALREADY;
    9e0c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9e10:	e7f7      	b.n	9e02 <ei_wrapper_init+0x46>
    9e12:	bf00      	nop
    9e14:	20000f00 	.word	0x20000f00
    9e18:	0000a25d 	.word	0x0000a25d
    9e1c:	20004170 	.word	0x20004170
    9e20:	200005e0 	.word	0x200005e0
    9e24:	20000efc 	.word	0x20000efc
    9e28:	00017c1c 	.word	0x00017c1c

00009e2c <_ZN2ei5numpy13software_rfftEPfS1_jj>:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    9e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e30:	4607      	mov	r7, r0
    9e32:	b085      	sub	sp, #20
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    9e34:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    9e36:	460d      	mov	r5, r1
    9e38:	4616      	mov	r6, r2
    9e3a:	469a      	mov	sl, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    9e3c:	f009 fd17 	bl	1386e <_Z9ei_mallocj>
        if (!fft_output) {
    9e40:	4604      	mov	r4, r0
    9e42:	b160      	cbz	r0, 9e5e <_ZN2ei5numpy13software_rfftEPfS1_jj+0x32>
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
    9e44:	ab03      	add	r3, sp, #12
    9e46:	9300      	str	r3, [sp, #0]
    9e48:	2300      	movs	r3, #0
    9e4a:	4630      	mov	r0, r6
    9e4c:	461a      	mov	r2, r3
    9e4e:	4619      	mov	r1, r3
    9e50:	f7f8 fd46 	bl	28e0 <kiss_fftr_alloc>
        if (!cfg) {
    9e54:	4606      	mov	r6, r0
    9e56:	b920      	cbnz	r0, 9e62 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    9e58:	4620      	mov	r0, r4
    9e5a:	f009 fd0c 	bl	13876 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    9e5e:	481b      	ldr	r0, [pc, #108]	; (9ecc <_ZN2ei5numpy13software_rfftEPfS1_jj+0xa0>)
    9e60:	e030      	b.n	9ec4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x98>
        kiss_fftr(cfg, fft_input, fft_output);
    9e62:	4639      	mov	r1, r7
    9e64:	4622      	mov	r2, r4
    9e66:	f002 fda1 	bl	c9ac <kiss_fftr>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    9e6a:	4627      	mov	r7, r4
    9e6c:	f04f 0b00 	mov.w	fp, #0
    9e70:	45d3      	cmp	fp, sl
    9e72:	f107 0708 	add.w	r7, r7, #8
    9e76:	d01e      	beq.n	9eb6 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x8a>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
    9e78:	2002      	movs	r0, #2
    9e7a:	ed17 0a02 	vldr	s0, [r7, #-8]
    9e7e:	f009 f933 	bl	130e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
    9e82:	2002      	movs	r0, #2
    9e84:	ec59 8b10 	vmov	r8, r9, d0
    9e88:	ed17 0a01 	vldr	s0, [r7, #-4]
    9e8c:	f009 f92c 	bl	130e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
    9e90:	4640      	mov	r0, r8
    9e92:	ec53 2b10 	vmov	r2, r3, d0
    9e96:	4649      	mov	r1, r9
    9e98:	f7f6 f964 	bl	164 <__adddf3>
    9e9c:	ec41 0b10 	vmov	d0, r0, r1
    9ea0:	f005 fda6 	bl	f9f0 <sqrt>
    9ea4:	ec51 0b10 	vmov	r0, r1, d0
    9ea8:	f7f6 fdac 	bl	a04 <__aeabi_d2f>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    9eac:	f10b 0b01 	add.w	fp, fp, #1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
    9eb0:	f845 0b04 	str.w	r0, [r5], #4
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    9eb4:	e7dc      	b.n	9e70 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x44>
        ei_dsp_free(cfg, kiss_fftr_mem_length);
    9eb6:	4630      	mov	r0, r6
    9eb8:	f009 fcdd 	bl	13876 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    9ebc:	4620      	mov	r0, r4
    9ebe:	f009 fcda 	bl	13876 <_Z7ei_freePv>
        return EIDSP_OK;
    9ec2:	2000      	movs	r0, #0
    }
    9ec4:	b005      	add	sp, #20
    9ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eca:	bf00      	nop
    9ecc:	fffffc16 	.word	0xfffffc16

00009ed0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
    9ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ed4:	b088      	sub	sp, #32
    9ed6:	4690      	mov	r8, r2
    9ed8:	4607      	mov	r7, r0
    9eda:	460e      	mov	r6, r1
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    uint64_t ctx_start_us = ei_read_timer_us();
    9edc:	f009 fcb5 	bl	1384a <_Z16ei_read_timer_usv>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    9ee0:	4b27      	ldr	r3, [pc, #156]	; (9f80 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb0>)
    9ee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9ee6:	9306      	str	r3, [sp, #24]
    9ee8:	2300      	movs	r3, #0
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
    9eea:	aa03      	add	r2, sp, #12
    9eec:	a902      	add	r1, sp, #8
    9eee:	a804      	add	r0, sp, #16
    9ef0:	9307      	str	r3, [sp, #28]
    9ef2:	f7ff faa9 	bl	9448 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &output_labels,
        &output_scores,
#endif
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
    9ef6:	4605      	mov	r5, r0
    9ef8:	2800      	cmp	r0, #0
    9efa:	d13a      	bne.n	9f72 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xa2>
        else {
            input->data.f[ix] = fmatrix->buffer[ix];
        }
    }
#else
    bool int8_input = input->type == TfLiteType::kTfLiteInt8;
    9efc:	9b02      	ldr	r3, [sp, #8]
    9efe:	7818      	ldrb	r0, [r3, #0]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    9f00:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    9f04:	4353      	muls	r3, r2
    9f06:	42ab      	cmp	r3, r5
    9f08:	d921      	bls.n	9f4e <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x7e>
        // Quantize the input if it is int8
        if (int8_input) {
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    9f0a:	6839      	ldr	r1, [r7, #0]
    9f0c:	9a02      	ldr	r2, [sp, #8]
    9f0e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
        if (int8_input) {
    9f12:	2809      	cmp	r0, #9
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    9f14:	ed91 7a00 	vldr	s14, [r1]
    9f18:	6853      	ldr	r3, [r2, #4]
    9f1a:	ea4f 0485 	mov.w	r4, r5, lsl #2
        if (int8_input) {
    9f1e:	d112      	bne.n	9f46 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x76>
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    9f20:	edd2 6a03 	vldr	s13, [r2, #12]
    9f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    9f28:	feb8 7a67 	vrinta.f32	s14, s15
    9f2c:	edd2 7a04 	vldr	s15, [r2, #16]
    9f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9f34:	ee77 7a87 	vadd.f32	s15, s15, s14
    9f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    9f3c:	ee17 4a90 	vmov	r4, s15
    9f40:	555c      	strb	r4, [r3, r5]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    9f42:	3501      	adds	r5, #1
    9f44:	e7dc      	b.n	9f00 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x30>
            // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
        } else {
            input->data.f[ix] = fmatrix->buffer[ix];
    9f46:	4423      	add	r3, r4
    9f48:	ed83 7a00 	vstr	s14, [r3]
    9f4c:	e7f9      	b.n	9f42 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x72>
        }
    }
#endif

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
    9f4e:	4633      	mov	r3, r6
    9f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9f54:	9a03      	ldr	r2, [sp, #12]
    9f56:	f8cd 8000 	str.w	r8, [sp]
    9f5a:	f7ff f9e5 	bl	9328 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0>
    9f5e:	4605      	mov	r5, r0
        output_labels,
        output_scores,
#endif
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
    9f60:	f009 fc73 	bl	1384a <_Z16ei_read_timer_usv>
    9f64:	9b04      	ldr	r3, [sp, #16]
    9f66:	1ac0      	subs	r0, r0, r3
    9f68:	9b05      	ldr	r3, [sp, #20]
    9f6a:	eb61 0103 	sbc.w	r1, r1, r3
    9f6e:	e9c6 0110 	strd	r0, r1, [r6, #64]	; 0x40
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
    9f72:	a806      	add	r0, sp, #24
    9f74:	f009 f911 	bl	1319a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
    9f78:	4628      	mov	r0, r5
    9f7a:	b008      	add	sp, #32
    9f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f80:	000091bd 	.word	0x000091bd

00009f84 <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
    9f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f88:	ed2d 8b04 	vpush	{d8-d9}
    9f8c:	b089      	sub	sp, #36	; 0x24
    9f8e:	4606      	mov	r6, r0
    9f90:	460d      	mov	r5, r1
    9f92:	9200      	str	r2, [sp, #0]
#if (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL)

    EI_IMPULSE_ERROR run_res = run_nn_inference(fmatrix, result, debug);
    9f94:	f7ff ff9c 	bl	9ed0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>
    if (run_res != EI_IMPULSE_OK) {
    9f98:	4604      	mov	r4, r0
    9f9a:	2800      	cmp	r0, #0
    9f9c:	d179      	bne.n	a092 <run_inference+0x10e>

#if EI_CLASSIFIER_HAS_ANOMALY == 1

    // Anomaly detection
    {
        uint64_t anomaly_start_us = ei_read_timer_us();
    9f9e:	f009 fc54 	bl	1384a <_Z16ei_read_timer_usv>

        float input[EI_CLASSIFIER_ANOM_AXIS_SIZE];
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
            input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
    9fa2:	6833      	ldr	r3, [r6, #0]
        uint64_t anomaly_start_us = ei_read_timer_us();
    9fa4:	4680      	mov	r8, r0
            input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
    9fa6:	2603      	movs	r6, #3
    9fa8:	681a      	ldr	r2, [r3, #0]
        uint64_t anomaly_start_us = ei_read_timer_us();
    9faa:	9101      	str	r1, [sp, #4]
            input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
    9fac:	9205      	str	r2, [sp, #20]
    9fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9fb2:	9206      	str	r2, [sp, #24]
    9fb4:	493a      	ldr	r1, [pc, #232]	; (a0a0 <run_inference+0x11c>)
    9fb6:	4a3b      	ldr	r2, [pc, #236]	; (a0a4 <run_inference+0x120>)
    9fb8:	9307      	str	r3, [sp, #28]
    9fba:	ab05      	add	r3, sp, #20
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
    for (size_t ix = 0; ix < input_size; ix++) {
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
    9fbc:	edd3 7a00 	vldr	s15, [r3]
    9fc0:	ecb1 7a01 	vldmia	r1!, {s14}
    9fc4:	ecf2 6a01 	vldmia	r2!, {s13}
    9fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    9fcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    for (size_t ix = 0; ix < input_size; ix++) {
    9fd0:	3e01      	subs	r6, #1
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
    9fd2:	eca3 7a01 	vstmia	r3!, {s14}
    for (size_t ix = 0; ix < input_size; ix++) {
    9fd6:	d1f1      	bne.n	9fbc <run_inference+0x38>
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
    float min = 1000.0f;
    9fd8:	ed9f 8a33 	vldr	s16, [pc, #204]	; a0a8 <run_inference+0x124>
    float dist = 0.0f;
    9fdc:	ed9f 9a33 	vldr	s18, [pc, #204]	; a0ac <run_inference+0x128>
    9fe0:	4f33      	ldr	r7, [pc, #204]	; (a0b0 <run_inference+0x12c>)
    float min = 1000.0f;
    9fe2:	46b9      	mov	r9, r7
    float dist = 0.0f;
    9fe4:	eef0 8a49 	vmov.f32	s17, s18
    float min = 1000.0f;
    9fe8:	f10d 0a14 	add.w	sl, sp, #20
    for (size_t ix = 0; ix < input_size; ix++) {
    9fec:	f107 0b0c 	add.w	fp, r7, #12
        dist += pow(input[ix] - cluster->centroid[ix], 2);
    9ff0:	ecf9 7a01 	vldmia	r9!, {s15}
    9ff4:	ecba 0a01 	vldmia	sl!, {s0}
    9ff8:	2002      	movs	r0, #2
    9ffa:	ee30 0a67 	vsub.f32	s0, s0, s15
    9ffe:	f009 f873 	bl	130e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
    a002:	ee18 0a90 	vmov	r0, s17
    a006:	ed8d 0b02 	vstr	d0, [sp, #8]
    a00a:	f7f6 fa09 	bl	420 <__aeabi_f2d>
    a00e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a012:	f7f6 f8a7 	bl	164 <__adddf3>
    a016:	f7f6 fcf5 	bl	a04 <__aeabi_d2f>
    for (size_t ix = 0; ix < input_size; ix++) {
    a01a:	45cb      	cmp	fp, r9
        dist += pow(input[ix] - cluster->centroid[ix], 2);
    a01c:	ee08 0a90 	vmov	s17, r0
    for (size_t ix = 0; ix < input_size; ix++) {
    a020:	d1e6      	bne.n	9ff0 <run_inference+0x6c>
  { return __builtin_sqrtf(__x); }
    a022:	ee00 0a10 	vmov	s0, r0
    a026:	f005 fd55 	bl	fad4 <sqrtf>
    return sqrt(dist) - cluster->max_error;
    a02a:	edd7 7a03 	vldr	s15, [r7, #12]
    a02e:	ee30 0a67 	vsub.f32	s0, s0, s15
    for (size_t ix = 0; ix < cluster_size; ix++) {
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
        if (dist < min) {
            min = dist;
    a032:	eeb4 8a40 	vcmp.f32	s16, s0
    a036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    for (size_t ix = 0; ix < cluster_size; ix++) {
    a03a:	f106 0601 	add.w	r6, r6, #1
            min = dist;
    a03e:	fe30 8a08 	vselgt.f32	s16, s0, s16
    for (size_t ix = 0; ix < cluster_size; ix++) {
    a042:	2e20      	cmp	r6, #32
    a044:	f107 0710 	add.w	r7, r7, #16
    a048:	d1cb      	bne.n	9fe2 <run_inference+0x5e>
        }
        standard_scaler(input, ei_classifier_anom_scale, ei_classifier_anom_mean, EI_CLASSIFIER_ANOM_AXIS_SIZE);
        float anomaly = get_min_distance_to_cluster(
            input, EI_CLASSIFIER_ANOM_AXIS_SIZE, ei_classifier_anom_clusters, EI_CLASSIFIER_ANOM_CLUSTER_COUNT);

        uint64_t anomaly_end_us = ei_read_timer_us();
    a04a:	f009 fbfe 	bl	1384a <_Z16ei_read_timer_usv>

        result->timing.anomaly_us = anomaly_end_us - anomaly_start_us;
    a04e:	9b01      	ldr	r3, [sp, #4]
    a050:	ebb0 0008 	subs.w	r0, r0, r8
    a054:	eb61 0103 	sbc.w	r1, r1, r3
        result->timing.anomaly = (int)(result->timing.anomaly_us / 1000);
    a058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a05c:	2300      	movs	r3, #0
        result->timing.anomaly_us = anomaly_end_us - anomaly_start_us;
    a05e:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
        result->timing.anomaly = (int)(result->timing.anomaly_us / 1000);
    a062:	f7f6 fd1f 	bl	aa4 <__aeabi_ldivmod>
        result->anomaly = anomaly;

        if (debug) {
    a066:	9b00      	ldr	r3, [sp, #0]
        result->timing.anomaly = (int)(result->timing.anomaly_us / 1000);
    a068:	4601      	mov	r1, r0
        result->anomaly = anomaly;
    a06a:	ed85 8a08 	vstr	s16, [r5, #32]
        result->timing.anomaly = (int)(result->timing.anomaly_us / 1000);
    a06e:	6368      	str	r0, [r5, #52]	; 0x34
        if (debug) {
    a070:	b14b      	cbz	r3, a086 <run_inference+0x102>
            ei_printf("Anomaly score (time: %d ms.): ", result->timing.anomaly);
    a072:	4810      	ldr	r0, [pc, #64]	; (a0b4 <run_inference+0x130>)
    a074:	f002 fd0a 	bl	ca8c <_Z9ei_printfPKcz>
            ei_printf_float(anomaly);
    a078:	eeb0 0a48 	vmov.f32	s0, s16
    a07c:	f002 fd20 	bl	cac0 <_Z15ei_printf_floatf>
            ei_printf("\n");
    a080:	480d      	ldr	r0, [pc, #52]	; (a0b8 <run_inference+0x134>)
    a082:	f002 fd03 	bl	ca8c <_Z9ei_printfPKcz>
        }
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    a086:	f009 fbde 	bl	13846 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    a08a:	3002      	adds	r0, #2
    a08c:	bf08      	it	eq
    a08e:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
    a092:	4620      	mov	r0, r4
    a094:	b009      	add	sp, #36	; 0x24
    a096:	ecbd 8b04 	vpop	{d8-d9}
    a09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a09e:	bf00      	nop
    a0a0:	00016944 	.word	0x00016944
    a0a4:	00016950 	.word	0x00016950
    a0a8:	447a0000 	.word	0x447a0000
    a0ac:	00000000 	.word	0x00000000
    a0b0:	0001695c 	.word	0x0001695c
    a0b4:	00017c30 	.word	0x00017c30
    a0b8:	00017772 	.word	0x00017772

0000a0bc <_ZN14SignalWithAxes10get_signalEv>:
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    {

    }

    signal_t * get_signal() {
    a0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
    a0be:	6882      	ldr	r2, [r0, #8]
            return this->_original_signal;
    a0c0:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
    a0c2:	2a03      	cmp	r2, #3
    a0c4:	d013      	beq.n	a0ee <_ZN14SignalWithAxes10get_signalEv+0x32>
        }

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
    a0c6:	2103      	movs	r1, #3
    a0c8:	6923      	ldr	r3, [r4, #16]
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
            return this->get_data(offset, length, out_ptr);
        };
    a0ca:	f100 040c 	add.w	r4, r0, #12
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
    a0ce:	fbb3 f3f1 	udiv	r3, r3, r1
    a0d2:	4353      	muls	r3, r2
    a0d4:	61c3      	str	r3, [r0, #28]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
    a0d6:	4b07      	ldr	r3, [pc, #28]	; (a0f4 <_ZN14SignalWithAxes10get_signalEv+0x38>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    a0d8:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
    a0da:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
    a0dc:	4b06      	ldr	r3, [pc, #24]	; (a0f8 <_ZN14SignalWithAxes10get_signalEv+0x3c>)
	  function(std::forward<_Functor>(__f)).swap(*this);
    a0de:	4668      	mov	r0, sp
    a0e0:	4621      	mov	r1, r4
	    _M_manager = &_My_handler::_M_manager;
    a0e2:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a0e4:	f009 f861 	bl	131aa <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    a0e8:	4668      	mov	r0, sp
    a0ea:	f008 ffc0 	bl	1306e <_ZNSt14_Function_baseD1Ev>
#endif
        return &wrapped_signal;
    }
    a0ee:	4620      	mov	r0, r4
    a0f0:	b004      	add	sp, #16
    a0f2:	bd10      	pop	{r4, pc}
    a0f4:	00013137 	.word	0x00013137
    a0f8:	00012eef 	.word	0x00012eef

0000a0fc <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a100:	460c      	mov	r4, r1
    a102:	b093      	sub	sp, #76	; 0x4c
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
    a104:	2100      	movs	r1, #0
{
    a106:	4607      	mov	r7, r0
    a108:	4615      	mov	r5, r2
    memset(result, 0, sizeof(ei_impulse_result_t));
    a10a:	4620      	mov	r0, r4
    a10c:	2258      	movs	r2, #88	; 0x58
    a10e:	f00a fd79 	bl	14c04 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    a112:	2300      	movs	r3, #0
    a114:	2221      	movs	r2, #33	; 0x21
    a116:	2101      	movs	r1, #1
    a118:	a802      	add	r0, sp, #8
    a11a:	f008 ffb1 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>

    uint64_t dsp_start_us = ei_read_timer_us();
    a11e:	f009 fb94 	bl	1384a <_Z16ei_read_timer_usv>

    size_t out_features_index = 0;

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a122:	4b3a      	ldr	r3, [pc, #232]	; (a20c <run_classifier+0x110>)
    uint64_t dsp_start_us = ei_read_timer_us();
    a124:	4606      	mov	r6, r0
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a126:	681a      	ldr	r2, [r3, #0]
    uint64_t dsp_start_us = ei_read_timer_us();
    a128:	468a      	mov	sl, r1

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
    a12a:	2a21      	cmp	r2, #33	; 0x21
    a12c:	d90b      	bls.n	a146 <run_classifier+0x4a>
            ei_printf("ERR: Would write outside feature buffer\n");
    a12e:	4838      	ldr	r0, [pc, #224]	; (a210 <run_classifier+0x114>)
    a130:	f002 fcac 	bl	ca8c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    a134:	f06f 0704 	mvn.w	r7, #4
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    a138:	a802      	add	r0, sp, #8
    a13a:	f008 fe16 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
        ei_printf("Running neural network...\n");
    }
#endif

    return run_inference(&features_matrix, result, debug);
}
    a13e:	4638      	mov	r0, r7
    a140:	b013      	add	sp, #76	; 0x4c
    a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a146:	e9d3 8901 	ldrd	r8, r9, [r3, #4]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a14a:	2101      	movs	r1, #1
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a14c:	e9d3 b303 	ldrd	fp, r3, [r3, #12]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a150:	a806      	add	r0, sp, #24
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a152:	9301      	str	r3, [sp, #4]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a154:	9b02      	ldr	r3, [sp, #8]
    a156:	f008 ff93 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    a15a:	9b01      	ldr	r3, [sp, #4]
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
    a15c:	a80a      	add	r0, sp, #40	; 0x28
    a15e:	930c      	str	r3, [sp, #48]	; 0x30
    _Function_base() : _M_manager(nullptr) { }
    a160:	2300      	movs	r3, #0
    a162:	e9cd 7b0a 	strd	r7, fp, [sp, #40]	; 0x28
    a166:	930f      	str	r3, [sp, #60]	; 0x3c
    a168:	f7ff ffa8 	bl	a0bc <_ZN14SignalWithAxes10get_signalEv>
    a16c:	ed9f 0a29 	vldr	s0, [pc, #164]	; a214 <run_classifier+0x118>
    a170:	464a      	mov	r2, r9
    a172:	a906      	add	r1, sp, #24
    a174:	47c0      	blx	r8
        if (ret != EIDSP_OK) {
    a176:	4680      	mov	r8, r0
    a178:	b160      	cbz	r0, a194 <run_classifier+0x98>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
    a17a:	4601      	mov	r1, r0
    a17c:	4826      	ldr	r0, [pc, #152]	; (a218 <run_classifier+0x11c>)
    a17e:	f002 fc85 	bl	ca8c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    a182:	f06f 0704 	mvn.w	r7, #4
    class function<_Res(_ArgTypes...)>
    a186:	a80d      	add	r0, sp, #52	; 0x34
    a188:	f008 ff71 	bl	1306e <_ZNSt14_Function_baseD1Ev>
    a18c:	a806      	add	r0, sp, #24
    a18e:	f008 fdec 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    a192:	e7d1      	b.n	a138 <run_classifier+0x3c>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    a194:	f009 fb57 	bl	13846 <_Z29ei_run_impulse_check_canceledv>
    a198:	1c83      	adds	r3, r0, #2
    a19a:	4607      	mov	r7, r0
    a19c:	d0f3      	beq.n	a186 <run_classifier+0x8a>
    a19e:	a80d      	add	r0, sp, #52	; 0x34
    a1a0:	f008 ff65 	bl	1306e <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a1a4:	a806      	add	r0, sp, #24
    a1a6:	f008 fde0 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
    a1aa:	f009 fb4e 	bl	1384a <_Z16ei_read_timer_usv>
    a1ae:	1b80      	subs	r0, r0, r6
    a1b0:	eb61 010a 	sbc.w	r1, r1, sl
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
    a1b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a1b8:	2300      	movs	r3, #0
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
    a1ba:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
    a1be:	f7f6 fc71 	bl	aa4 <__aeabi_ldivmod>
    a1c2:	4601      	mov	r1, r0
    a1c4:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (debug) {
    a1c6:	b1cd      	cbz	r5, a1fc <run_classifier+0x100>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
    a1c8:	4814      	ldr	r0, [pc, #80]	; (a21c <run_classifier+0x120>)
    a1ca:	f002 fc5f 	bl	ca8c <_Z9ei_printfPKcz>
            ei_printf(" ");
    a1ce:	4f14      	ldr	r7, [pc, #80]	; (a220 <run_classifier+0x124>)
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    a1d0:	9b04      	ldr	r3, [sp, #16]
    a1d2:	4543      	cmp	r3, r8
    a1d4:	d90c      	bls.n	a1f0 <run_classifier+0xf4>
            ei_printf_float(features_matrix.buffer[ix]);
    a1d6:	9b02      	ldr	r3, [sp, #8]
    a1d8:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    a1dc:	ed93 0a00 	vldr	s0, [r3]
    a1e0:	f002 fc6e 	bl	cac0 <_Z15ei_printf_floatf>
            ei_printf(" ");
    a1e4:	4638      	mov	r0, r7
    a1e6:	f002 fc51 	bl	ca8c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    a1ea:	f108 0801 	add.w	r8, r8, #1
    a1ee:	e7ef      	b.n	a1d0 <run_classifier+0xd4>
        ei_printf("\n");
    a1f0:	480c      	ldr	r0, [pc, #48]	; (a224 <run_classifier+0x128>)
    a1f2:	f002 fc4b 	bl	ca8c <_Z9ei_printfPKcz>
        ei_printf("Running neural network...\n");
    a1f6:	480c      	ldr	r0, [pc, #48]	; (a228 <run_classifier+0x12c>)
    a1f8:	f002 fc48 	bl	ca8c <_Z9ei_printfPKcz>
    return run_inference(&features_matrix, result, debug);
    a1fc:	462a      	mov	r2, r5
    a1fe:	4621      	mov	r1, r4
    a200:	a802      	add	r0, sp, #8
    a202:	f7ff febf 	bl	9f84 <run_inference>
    a206:	4607      	mov	r7, r0
    a208:	e796      	b.n	a138 <run_classifier+0x3c>
    a20a:	bf00      	nop
    a20c:	200000f8 	.word	0x200000f8
    a210:	00017cb1 	.word	0x00017cb1
    a214:	427a0000 	.word	0x427a0000
    a218:	00017c8c 	.word	0x00017c8c
    a21c:	00017d25 	.word	0x00017d25
    a220:	00018814 	.word	0x00018814
    a224:	00017772 	.word	0x00017772
    a228:	00017d71 	.word	0x00017d71

0000a22c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
    a22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
    a22e:	2300      	movs	r3, #0
    a230:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
    a232:	b121      	cbz	r1, a23e <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
    a234:	4b07      	ldr	r3, [pc, #28]	; (a254 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    a236:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
    a238:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
    a23a:	4b07      	ldr	r3, [pc, #28]	; (a258 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
    a23c:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a23e:	4601      	mov	r1, r0
    a240:	4668      	mov	r0, sp
    a242:	f008 ffb2 	bl	131aa <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    a246:	4668      	mov	r0, sp
    a248:	f008 ff11 	bl	1306e <_ZNSt14_Function_baseD1Ev>
	}
    a24c:	b005      	add	sp, #20
    a24e:	f85d fb04 	ldr.w	pc, [sp], #4
    a252:	bf00      	nop
    a254:	00012f17 	.word	0x00012f17
    a258:	00012f03 	.word	0x00012f03

0000a25c <_ZL22edge_impulse_thread_fnv>:
    _Function_base() : _M_manager(nullptr) { }
    a25c:	2300      	movs	r3, #0
{
    a25e:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_sem_take(sem, timeout);
    a260:	4e17      	ldr	r6, [pc, #92]	; (a2c0 <_ZL22edge_impulse_thread_fnv+0x64>)
    a262:	b086      	sub	sp, #24
		features_signal.get_data = &raw_feature_get_data;
    a264:	4d17      	ldr	r5, [pc, #92]	; (a2c4 <_ZL22edge_impulse_thread_fnv+0x68>)
		EI_IMPULSE_ERROR err = run_classifier(&features_signal,
    a266:	4c18      	ldr	r4, [pc, #96]	; (a2c8 <_ZL22edge_impulse_thread_fnv+0x6c>)
    a268:	9303      	str	r3, [sp, #12]
    a26a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a272:	4630      	mov	r0, r6
    a274:	f001 fecc 	bl	c010 <z_impl_k_sem_take>
		features_signal.get_data = &raw_feature_get_data;
    a278:	4629      	mov	r1, r5
    a27a:	a801      	add	r0, sp, #4
    a27c:	f7ff ffd6 	bl	a22c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
		features_signal.total_length = INPUT_WINDOW_SIZE;
    a280:	f240 1377 	movw	r3, #375	; 0x177
		EI_IMPULSE_ERROR err = run_classifier(&features_signal,
    a284:	2200      	movs	r2, #0
    a286:	4621      	mov	r1, r4
    a288:	a801      	add	r0, sp, #4
		features_signal.total_length = INPUT_WINDOW_SIZE;
    a28a:	9305      	str	r3, [sp, #20]
		EI_IMPULSE_ERROR err = run_classifier(&features_signal,
    a28c:	f7ff ff36 	bl	a0fc <run_classifier>
	__asm__ volatile(
    a290:	f04f 0220 	mov.w	r2, #32
    a294:	f3ef 8311 	mrs	r3, BASEPRI
    a298:	f382 8812 	msr	BASEPRI_MAX, r2
    a29c:	f3bf 8f6f 	isb	sy
	b->state = STATE_READY;
    a2a0:	2103      	movs	r1, #3
    a2a2:	4a0a      	ldr	r2, [pc, #40]	; (a2cc <_ZL22edge_impulse_thread_fnv+0x70>)
    a2a4:	f882 171d 	strb.w	r1, [r2, #1821]	; 0x71d
	__asm__ volatile(
    a2a8:	f383 8811 	msr	BASEPRI, r3
    a2ac:	f3bf 8f6f 	isb	sy
	cur_res_idx = -1;
    a2b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a2b4:	4b06      	ldr	r3, [pc, #24]	; (a2d0 <_ZL22edge_impulse_thread_fnv+0x74>)
    a2b6:	601a      	str	r2, [r3, #0]
	user_cb(err);
    a2b8:	4b06      	ldr	r3, [pc, #24]	; (a2d4 <_ZL22edge_impulse_thread_fnv+0x78>)
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	4798      	blx	r3
    a2be:	e7d4      	b.n	a26a <_ZL22edge_impulse_thread_fnv+0xe>
    a2c0:	200005ac 	.word	0x200005ac
    a2c4:	00009279 	.word	0x00009279
    a2c8:	200006a0 	.word	0x200006a0
    a2cc:	20002f04 	.word	0x20002f04
    a2d0:	20000ef8 	.word	0x20000ef8
    a2d4:	20000f00 	.word	0x20000f00

0000a2d8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    a2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a2dc:	e9d0 9800 	ldrd	r9, r8, [r0]

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    a2e0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    a2e4:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a2e6:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
    a2ea:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
    a2ee:	4607      	mov	r7, r0
    a2f0:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a2f2:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
    a2f6:	d102      	bne.n	a2fe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
    a2f8:	481e      	ldr	r0, [pc, #120]	; (a374 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x9c>)
    a2fa:	f00a fc1d 	bl	14b38 <_ZSt20__throw_length_errorPKc>
    a2fe:	2c01      	cmp	r4, #1
    a300:	4622      	mov	r2, r4
    a302:	bf38      	it	cc
    a304:	2201      	movcc	r2, #1
    a306:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
    a308:	eba1 0509 	sub.w	r5, r1, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    a30c:	d22e      	bcs.n	a36c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a30e:	b37c      	cbz	r4, a370 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x98>
    a310:	429c      	cmp	r4, r3
    a312:	bf28      	it	cs
    a314:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a316:	00e0      	lsls	r0, r4, #3
    a318:	f00a fbfb 	bl	14b12 <_Znwj>
    a31c:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    a31e:	1973      	adds	r3, r6, r5
    a320:	bf1c      	itt	ne
    a322:	e9db 0100 	ldrdne	r0, r1, [fp]
    a326:	e9c3 0100 	strdne	r0, r1, [r3]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    a32a:	2d00      	cmp	r5, #0
    a32c:	dd04      	ble.n	a338 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    a32e:	462a      	mov	r2, r5
    a330:	4649      	mov	r1, r9
    a332:	4630      	mov	r0, r6
    a334:	f00a fc4c 	bl	14bd0 <memmove>
      ptrdiff_t __count = __last - __first;
    a338:	eba8 080a 	sub.w	r8, r8, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    a33c:	3508      	adds	r5, #8
      if (__count > 0)
    a33e:	f1b8 0f00 	cmp.w	r8, #0
    a342:	4435      	add	r5, r6
    a344:	dd04      	ble.n	a350 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    a346:	4642      	mov	r2, r8
    a348:	4651      	mov	r1, sl
    a34a:	4628      	mov	r0, r5
    a34c:	f00a fc33 	bl	14bb6 <memcpy>
      return __result + __count;
    a350:	4445      	add	r5, r8
	if (__p)
    a352:	f1b9 0f00 	cmp.w	r9, #0
    a356:	d002      	beq.n	a35e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x86>
	::operator delete(__p
    a358:	4648      	mov	r0, r9
    a35a:	f00a fbd6 	bl	14b0a <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    a35e:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
    a362:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    a366:	60bc      	str	r4, [r7, #8]
    }
    a368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    a36c:	461c      	mov	r4, r3
    a36e:	e7d2      	b.n	a316 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a370:	4626      	mov	r6, r4
    a372:	e7d4      	b.n	a31e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x46>
    a374:	00017d8c 	.word	0x00017d8c

0000a378 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
// this is the frame we work on... allocate it statically so we share between invocations
static float *ei_dsp_cont_current_frame = nullptr;
static size_t ei_dsp_cont_current_frame_size = 0;
static int ei_dsp_cont_current_frame_ix = 0;

__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a37c:	ed2d 8b04 	vpush	{d8-d9}
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
    a380:	6953      	ldr	r3, [r2, #20]
__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a382:	b0af      	sub	sp, #188	; 0xbc
    int ret;

    const float sampling_freq = frequency;

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
    a384:	6855      	ldr	r5, [r2, #4]
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
    a386:	9304      	str	r3, [sp, #16]
__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a388:	460c      	mov	r4, r1
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
    a38a:	6993      	ldr	r3, [r2, #24]
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
    a38c:	6901      	ldr	r1, [r0, #16]
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
    a38e:	edd2 8a02 	vldr	s17, [r2, #8]
    a392:	ed92 9a04 	vldr	s18, [r2, #16]
    a396:	edd2 9a08 	vldr	s19, [r2, #32]
    a39a:	f8d2 900c 	ldr.w	r9, [r2, #12]
    a39e:	69d6      	ldr	r6, [r2, #28]
    a3a0:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
    a3a4:	9305      	str	r3, [sp, #20]
__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a3a6:	4682      	mov	sl, r0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
    a3a8:	2300      	movs	r3, #0
    a3aa:	462a      	mov	r2, r5
    a3ac:	fbb1 f1f5 	udiv	r1, r1, r5
    a3b0:	a806      	add	r0, sp, #24
__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a3b2:	eeb0 8a40 	vmov.f32	s16, s0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
    a3b6:	f008 fe63 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    if (!input_matrix.buffer) {
    a3ba:	9b06      	ldr	r3, [sp, #24]
    a3bc:	2b00      	cmp	r3, #0
    a3be:	f000 80ab 	beq.w	a518 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
    a3c2:	2100      	movs	r1, #0
    a3c4:	4650      	mov	r0, sl
    a3c6:	f8da 2010 	ldr.w	r2, [sl, #16]
    a3ca:	f008 fea5 	bl	13118 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        if (scale == 1.0f) return EIDSP_OK;
    a3ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a3d2:	eef4 8a67 	vcmp.f32	s17, s15
    a3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3da:	d013      	beq.n	a404 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8c>
    a3dc:	eeb0 0a68 	vmov.f32	s0, s17
    a3e0:	a806      	add	r0, sp, #24
    a3e2:	f7fe ff27 	bl	9234 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
    if (ret != EIDSP_OK) {
    a3e6:	4607      	mov	r7, r0
    a3e8:	b160      	cbz	r0, a404 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8c>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
    a3ea:	4601      	mov	r1, r0
    a3ec:	484b      	ldr	r0, [pc, #300]	; (a51c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
    a3ee:	f002 fb4d 	bl	ca8c <_Z9ei_printfPKcz>
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
    a3f2:	a806      	add	r0, sp, #24
    a3f4:	f008 fcb9 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    // flatten again
    output_matrix->cols = config.axes * output_matrix_cols;
    output_matrix->rows = 1;

    return EIDSP_OK;
}
    a3f8:	4638      	mov	r0, r7
    a3fa:	b02f      	add	sp, #188	; 0xbc
    a3fc:	ecbd 8b04 	vpop	{d8-d9}
    a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = numpy::transpose(&input_matrix);
    a404:	a806      	add	r0, sp, #24
    a406:	f7ff f897 	bl	9538 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
    if (ret != EIDSP_OK) {
    a40a:	4607      	mov	r7, r0
    a40c:	b110      	cbz	r0, a414 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9c>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
    a40e:	4601      	mov	r1, r0
    a410:	4843      	ldr	r0, [pc, #268]	; (a520 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
    a412:	e7ec      	b.n	a3ee <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x76>
    matrix_t edges_matrix_in(64, 1);
    a414:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    a418:	4603      	mov	r3, r0
    a41a:	2201      	movs	r2, #1
    a41c:	2140      	movs	r1, #64	; 0x40
    a41e:	4650      	mov	r0, sl
    a420:	f008 fe2e 	bl	13080 <_ZN2ei9ei_matrixC1EjjPf>
    char spectral_str[128] = { 0 };
    a424:	227c      	movs	r2, #124	; 0x7c
    a426:	4639      	mov	r1, r7
    a428:	a80f      	add	r0, sp, #60	; 0x3c
    a42a:	970e      	str	r7, [sp, #56]	; 0x38
    a42c:	f00a fbea 	bl	14c04 <memset>
    if (strlen(config.spectral_power_edges) > sizeof(spectral_str) - 1) {
    a430:	4640      	mov	r0, r8
    a432:	f7f6 fd92 	bl	f5a <strlen>
    a436:	287f      	cmp	r0, #127	; 0x7f
    a438:	d86a      	bhi.n	a510 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x198>
    memcpy(spectral_str, config.spectral_power_edges, strlen(config.spectral_power_edges));
    a43a:	4640      	mov	r0, r8
    a43c:	f7f6 fd8d 	bl	f5a <strlen>
    a440:	4641      	mov	r1, r8
    a442:	4602      	mov	r2, r0
    a444:	a80e      	add	r0, sp, #56	; 0x38
    a446:	f00a fbb6 	bl	14bb6 <memcpy>
    size_t edge_matrix_ix = 0;
    a44a:	46bb      	mov	fp, r7
    char *spectral_ptr = spectral_str;
    a44c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    size_t edge_matrix_ix = 0;
    a450:	4642      	mov	r2, r8
        while((*spectral_ptr) == ' ') {
    a452:	7811      	ldrb	r1, [r2, #0]
    a454:	4690      	mov	r8, r2
    a456:	2920      	cmp	r1, #32
            spectral_ptr++;
    a458:	f102 0201 	add.w	r2, r2, #1
        while((*spectral_ptr) == ' ') {
    a45c:	d0f9      	beq.n	a452 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xda>
        edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
    a45e:	4640      	mov	r0, r8
    a460:	f00a fb98 	bl	14b94 <atof>
    a464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a466:	ec51 0b10 	vmov	r0, r1, d0
    a46a:	f10b 0b01 	add.w	fp, fp, #1
    a46e:	eb02 078b 	add.w	r7, r2, fp, lsl #2
    a472:	f7f6 fac7 	bl	a04 <__aeabi_d2f>
    a476:	f847 0c04 	str.w	r0, [r7, #-4]
        while((*spectral_ptr != ',')) {
    a47a:	f898 1000 	ldrb.w	r1, [r8]
            if (*spectral_ptr == '\0') break;
    a47e:	f818 7f01 	ldrb.w	r7, [r8, #1]!
        while((*spectral_ptr != ',')) {
    a482:	292c      	cmp	r1, #44	; 0x2c
    a484:	d0e4      	beq.n	a450 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xd8>
            if (*spectral_ptr == '\0') break;
    a486:	2f00      	cmp	r7, #0
    a488:	d1f7      	bne.n	a47a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x102>
    edges_matrix_in.rows = edge_matrix_ix;
    a48a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
        count += (peaks_count * 2);
    a48e:	0070      	lsls	r0, r6, #1
        if (spectral_edges_count > 0) {
    a490:	f1bb 0f00 	cmp.w	fp, #0
    a494:	d101      	bne.n	a49a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x122>
        count += (peaks_count * 2);
    a496:	3001      	adds	r0, #1
    a498:	e000      	b.n	a49c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>
            count += (spectral_edges_count - 1);
    a49a:	4458      	add	r0, fp
    if (output_matrix->cols * output_matrix->rows != static_cast<uint32_t>(output_matrix_cols * config.axes)) {
    a49c:	fb00 f805 	mul.w	r8, r0, r5
    a4a0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    a4a4:	4359      	muls	r1, r3
    a4a6:	4541      	cmp	r1, r8
    a4a8:	d134      	bne.n	a514 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>
    output_matrix->rows = config.axes;
    a4aa:	e9c4 5001 	strd	r5, r0, [r4, #4]
    if (strcmp(config.filter_type, "low") == 0) {
    a4ae:	491d      	ldr	r1, [pc, #116]	; (a524 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ac>)
    a4b0:	4648      	mov	r0, r9
    a4b2:	f7f6 fd48 	bl	f46 <strcmp>
    a4b6:	b320      	cbz	r0, a502 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18a>
    else if (strcmp(config.filter_type, "high") == 0) {
    a4b8:	4648      	mov	r0, r9
    a4ba:	491b      	ldr	r1, [pc, #108]	; (a528 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>)
    a4bc:	f7f6 fd43 	bl	f46 <strcmp>
        filter_type = spectral::filter_highpass;
    a4c0:	2800      	cmp	r0, #0
    a4c2:	bf08      	it	eq
    a4c4:	2702      	moveq	r7, #2
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
    a4c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a4ca:	b2f6      	uxtb	r6, r6
    a4cc:	463a      	mov	r2, r7
    a4ce:	9300      	str	r3, [sp, #0]
    a4d0:	eeb0 1a69 	vmov.f32	s2, s19
    a4d4:	eef0 0a49 	vmov.f32	s1, s18
    a4d8:	eeb0 0a48 	vmov.f32	s0, s16
    a4dc:	4620      	mov	r0, r4
    a4de:	f89d 3010 	ldrb.w	r3, [sp, #16]
    a4e2:	f8cd a008 	str.w	sl, [sp, #8]
    a4e6:	9601      	str	r6, [sp, #4]
    a4e8:	a906      	add	r1, sp, #24
    a4ea:	f7f7 fc4d 	bl	1d88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
    if (ret != EIDSP_OK) {
    a4ee:	4607      	mov	r7, r0
    a4f0:	b148      	cbz	r0, a506 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18e>
        ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
    a4f2:	4601      	mov	r1, r0
    a4f4:	480d      	ldr	r0, [pc, #52]	; (a52c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>)
    a4f6:	f002 fac9 	bl	ca8c <_Z9ei_printfPKcz>
    matrix_t edges_matrix_in(64, 1);
    a4fa:	a80a      	add	r0, sp, #40	; 0x28
    a4fc:	f008 fc35 	bl	12d6a <_ZN2ei9ei_matrixD1Ev>
    a500:	e777      	b.n	a3f2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7a>
        filter_type = spectral::filter_lowpass;
    a502:	2701      	movs	r7, #1
    a504:	e7df      	b.n	a4c6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
    output_matrix->rows = 1;
    a506:	2201      	movs	r2, #1
    output_matrix->cols = config.axes * output_matrix_cols;
    a508:	f8c4 8008 	str.w	r8, [r4, #8]
    output_matrix->rows = 1;
    a50c:	6062      	str	r2, [r4, #4]
    return EIDSP_OK;
    a50e:	e7f4      	b.n	a4fa <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
    a510:	4f07      	ldr	r7, [pc, #28]	; (a530 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>)
    a512:	e7f2      	b.n	a4fa <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    a514:	4f07      	ldr	r7, [pc, #28]	; (a534 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
    a516:	e7f0      	b.n	a4fa <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
    a518:	4f07      	ldr	r7, [pc, #28]	; (a538 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
    a51a:	e76a      	b.n	a3f2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7a>
    a51c:	00017da6 	.word	0x00017da6
    a520:	00017dc8 	.word	0x00017dc8
    a524:	00017dee 	.word	0x00017dee
    a528:	00017df2 	.word	0x00017df2
    a52c:	00017df7 	.word	0x00017df7
    a530:	fffffc10 	.word	0xfffffc10
    a534:	fffffc14 	.word	0xfffffc14
    a538:	fffffc16 	.word	0xfffffc16

0000a53c <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    a53c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    a540:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    a544:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    a548:	2a07      	cmp	r2, #7
    a54a:	d105      	bne.n	a558 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    a54c:	3b02      	subs	r3, #2
    a54e:	2b03      	cmp	r3, #3
    a550:	d802      	bhi.n	a558 <nrf53_errata_42+0x1c>
    a552:	4a02      	ldr	r2, [pc, #8]	; (a55c <nrf53_errata_42+0x20>)
    a554:	5cd0      	ldrb	r0, [r2, r3]
    a556:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    a558:	2000      	movs	r0, #0
    #endif
}
    a55a:	4770      	bx	lr
    a55c:	00017e57 	.word	0x00017e57

0000a560 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    a560:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a564:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    a568:	4b03      	ldr	r3, [pc, #12]	; (a578 <SystemCoreClockUpdate+0x18>)
    a56a:	f002 0203 	and.w	r2, r2, #3
    a56e:	40d3      	lsrs	r3, r2
    a570:	4a02      	ldr	r2, [pc, #8]	; (a57c <SystemCoreClockUpdate+0x1c>)
    a572:	6013      	str	r3, [r2, #0]
#endif
}
    a574:	4770      	bx	lr
    a576:	bf00      	nop
    a578:	07a12000 	.word	0x07a12000
    a57c:	20000134 	.word	0x20000134

0000a580 <SystemInit>:

void SystemInit(void)
{
    a580:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    a582:	f7ff ffdb 	bl	a53c <nrf53_errata_42>
    a586:	b158      	cbz	r0, a5a0 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    a588:	4b44      	ldr	r3, [pc, #272]	; (a69c <SystemInit+0x11c>)
    a58a:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    a58e:	b93a      	cbnz	r2, a5a0 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    a590:	210d      	movs	r1, #13
    a592:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    a596:	2101      	movs	r1, #1
    a598:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    a59c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    a5a0:	2200      	movs	r2, #0
    a5a2:	00d3      	lsls	r3, r2, #3
    a5a4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    a5a8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    a5ac:	3101      	adds	r1, #1
    a5ae:	d007      	beq.n	a5c0 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    a5b0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    a5b4:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    a5b6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    a5ba:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    a5bc:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    a5be:	d1f0      	bne.n	a5a2 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    a5c0:	f7ff ffbc 	bl	a53c <nrf53_errata_42>
    a5c4:	2800      	cmp	r0, #0
    a5c6:	d161      	bne.n	a68c <SystemInit+0x10c>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    a5c8:	f7ff ffb8 	bl	a53c <nrf53_errata_42>
    a5cc:	b140      	cbz	r0, a5e0 <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    a5ce:	4b34      	ldr	r3, [pc, #208]	; (a6a0 <SystemInit+0x120>)
    a5d0:	4a34      	ldr	r2, [pc, #208]	; (a6a4 <SystemInit+0x124>)
    a5d2:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    a5d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a5da:	2201      	movs	r2, #1
    a5dc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    a5e0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    a5e4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    a5e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    a5ec:	2a07      	cmp	r2, #7
    a5ee:	d109      	bne.n	a604 <SystemInit+0x84>
                {
                    switch(var2)
    a5f0:	3b02      	subs	r3, #2
    a5f2:	2b03      	cmp	r3, #3
    a5f4:	d806      	bhi.n	a604 <SystemInit+0x84>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    a5f6:	4a2c      	ldr	r2, [pc, #176]	; (a6a8 <SystemInit+0x128>)
    a5f8:	5cd3      	ldrb	r3, [r2, r3]
    a5fa:	b11b      	cbz	r3, a604 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    a5fc:	2200      	movs	r2, #0
    a5fe:	4b2b      	ldr	r3, [pc, #172]	; (a6ac <SystemInit+0x12c>)
    a600:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    a604:	f7ff ff9a 	bl	a53c <nrf53_errata_42>
    a608:	b150      	cbz	r0, a620 <SystemInit+0xa0>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    a60a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a60e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    a612:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    a614:	bf42      	ittt	mi
    a616:	2200      	movmi	r2, #0
    a618:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    a61c:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    a620:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    a624:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    a628:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    a62c:	2a07      	cmp	r2, #7
    a62e:	d109      	bne.n	a644 <SystemInit+0xc4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    a630:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a634:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    a638:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    a63a:	bf44      	itt	mi
    a63c:	f06f 0201 	mvnmi.w	r2, #1
    a640:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    a644:	f7ff ff7a 	bl	a53c <nrf53_errata_42>
    a648:	b118      	cbz	r0, a652 <SystemInit+0xd2>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    a64a:	2265      	movs	r2, #101	; 0x65
    a64c:	4b13      	ldr	r3, [pc, #76]	; (a69c <SystemInit+0x11c>)
    a64e:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    a652:	4b17      	ldr	r3, [pc, #92]	; (a6b0 <SystemInit+0x130>)
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    a654:	4917      	ldr	r1, [pc, #92]	; (a6b4 <SystemInit+0x134>)
    a656:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    a65a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    a65e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    a662:	6808      	ldr	r0, [r1, #0]
    a664:	4a14      	ldr	r2, [pc, #80]	; (a6b8 <SystemInit+0x138>)
    a666:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    a66a:	69c9      	ldr	r1, [r1, #28]
    a66c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    a670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    a674:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    a678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    a67c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a680:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    a684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    a688:	f7ff bf6a 	b.w	a560 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    a68c:	2229      	movs	r2, #41	; 0x29
    a68e:	4b03      	ldr	r3, [pc, #12]	; (a69c <SystemInit+0x11c>)
    a690:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    a694:	2203      	movs	r2, #3
    a696:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    a69a:	e795      	b.n	a5c8 <SystemInit+0x48>
    a69c:	50004000 	.word	0x50004000
    a6a0:	50039000 	.word	0x50039000
    a6a4:	beef0044 	.word	0xbeef0044
    a6a8:	00017e5b 	.word	0x00017e5b
    a6ac:	50032000 	.word	0x50032000
    a6b0:	e000ed00 	.word	0xe000ed00
    a6b4:	00ff8000 	.word	0x00ff8000
    a6b8:	50006000 	.word	0x50006000

0000a6bc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    a6bc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    a6be:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    a6c0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    a6c2:	fab2 f382 	clz	r3, r2
    a6c6:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    a6ca:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    a6cc:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    a6ce:	d010      	beq.n	a6f2 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    a6d0:	fa05 f303 	lsl.w	r3, r5, r3
    a6d4:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a6d8:	e8d0 6fef 	ldaex	r6, [r0]
    a6dc:	4296      	cmp	r6, r2
    a6de:	d104      	bne.n	a6ea <nrfx_flag32_alloc+0x2e>
    a6e0:	e8c0 3fec 	stlex	ip, r3, [r0]
    a6e4:	f1bc 0f00 	cmp.w	ip, #0
    a6e8:	d1f6      	bne.n	a6d8 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    a6ea:	d1e9      	bne.n	a6c0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    a6ec:	4802      	ldr	r0, [pc, #8]	; (a6f8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    a6ee:	700c      	strb	r4, [r1, #0]
}
    a6f0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    a6f2:	4802      	ldr	r0, [pc, #8]	; (a6fc <nrfx_flag32_alloc+0x40>)
    a6f4:	e7fc      	b.n	a6f0 <nrfx_flag32_alloc+0x34>
    a6f6:	bf00      	nop
    a6f8:	0bad0000 	.word	0x0bad0000
    a6fc:	0bad0002 	.word	0x0bad0002

0000a700 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    a700:	6803      	ldr	r3, [r0, #0]
{
    a702:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    a704:	40cb      	lsrs	r3, r1
    a706:	07db      	lsls	r3, r3, #31
    a708:	d411      	bmi.n	a72e <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    a70a:	2301      	movs	r3, #1
    a70c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    a710:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    a712:	ea41 0203 	orr.w	r2, r1, r3
    a716:	e8d0 4fef 	ldaex	r4, [r0]
    a71a:	429c      	cmp	r4, r3
    a71c:	d104      	bne.n	a728 <nrfx_flag32_free+0x28>
    a71e:	e8c0 2fec 	stlex	ip, r2, [r0]
    a722:	f1bc 0f00 	cmp.w	ip, #0
    a726:	d1f6      	bne.n	a716 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    a728:	d1f2      	bne.n	a710 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    a72a:	4802      	ldr	r0, [pc, #8]	; (a734 <nrfx_flag32_free+0x34>)
}
    a72c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    a72e:	4802      	ldr	r0, [pc, #8]	; (a738 <nrfx_flag32_free+0x38>)
    a730:	e7fc      	b.n	a72c <nrfx_flag32_free+0x2c>
    a732:	bf00      	nop
    a734:	0bad0000 	.word	0x0bad0000
    a738:	0bad0004 	.word	0x0bad0004

0000a73c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    a73c:	4b04      	ldr	r3, [pc, #16]	; (a750 <nrfx_clock_init+0x14>)
    a73e:	791a      	ldrb	r2, [r3, #4]
    a740:	b922      	cbnz	r2, a74c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    a742:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    a744:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    a746:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    a748:	4802      	ldr	r0, [pc, #8]	; (a754 <nrfx_clock_init+0x18>)
    a74a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    a74c:	4802      	ldr	r0, [pc, #8]	; (a758 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a74e:	4770      	bx	lr
    a750:	20003624 	.word	0x20003624
    a754:	0bad0000 	.word	0x0bad0000
    a758:	0bad000c 	.word	0x0bad000c

0000a75c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a75c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a760:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    a764:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    a766:	b152      	cbz	r2, a77e <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a768:	2000      	movs	r0, #0
    a76a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    a76e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    a772:	2201      	movs	r2, #1
    a774:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    a778:	4b23      	ldr	r3, [pc, #140]	; (a808 <nrfx_power_clock_irq_handler+0xac>)
    a77a:	681b      	ldr	r3, [r3, #0]
    a77c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a77e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a782:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    a786:	b18a      	cbz	r2, a7ac <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a788:	2200      	movs	r2, #0
    a78a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    a78e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a792:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a796:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    a79a:	f002 0203 	and.w	r2, r2, #3
    a79e:	2a01      	cmp	r2, #1
    a7a0:	f04f 0102 	mov.w	r1, #2
    a7a4:	d128      	bne.n	a7f8 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    a7a6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a7aa:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a7ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a7b0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    a7b4:	b162      	cbz	r2, a7d0 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a7b6:	2200      	movs	r2, #0
    a7b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    a7bc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    a7c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    a7c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    a7c8:	4b0f      	ldr	r3, [pc, #60]	; (a808 <nrfx_power_clock_irq_handler+0xac>)
    a7ca:	2004      	movs	r0, #4
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a7d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a7d4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    a7d8:	b1aa      	cbz	r2, a806 <nrfx_power_clock_irq_handler+0xaa>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    a7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a7de:	2200      	movs	r2, #0
    a7e0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    a7e4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    a7e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    a7ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    a7f0:	4b05      	ldr	r3, [pc, #20]	; (a808 <nrfx_power_clock_irq_handler+0xac>)
    a7f2:	2005      	movs	r0, #5
    a7f4:	681b      	ldr	r3, [r3, #0]
    a7f6:	4718      	bx	r3
    a7f8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    a7fc:	4b02      	ldr	r3, [pc, #8]	; (a808 <nrfx_power_clock_irq_handler+0xac>)
    a7fe:	2001      	movs	r0, #1
    a800:	681b      	ldr	r3, [r3, #0]
    a802:	4798      	blx	r3
    a804:	e7d2      	b.n	a7ac <nrfx_power_clock_irq_handler+0x50>
}
    a806:	bd10      	pop	{r4, pc}
    a808:	20003624 	.word	0x20003624

0000a80c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    a80c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    a80e:	4801      	ldr	r0, [pc, #4]	; (a814 <nrfx_dppi_channel_alloc+0x8>)
    a810:	f7ff bf54 	b.w	a6bc <nrfx_flag32_alloc>
    a814:	20000138 	.word	0x20000138

0000a818 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    a818:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    a81a:	f003 021f 	and.w	r2, r3, #31
    a81e:	6002      	str	r2, [r0, #0]
}
    a820:	4a03      	ldr	r2, [pc, #12]	; (a830 <nrf_gpio_pin_port_decode+0x18>)
    a822:	4804      	ldr	r0, [pc, #16]	; (a834 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    a824:	095b      	lsrs	r3, r3, #5
}
    a826:	2b01      	cmp	r3, #1
    a828:	bf08      	it	eq
    a82a:	4610      	moveq	r0, r2
    a82c:	4770      	bx	lr
    a82e:	bf00      	nop
    a830:	50842800 	.word	0x50842800
    a834:	50842500 	.word	0x50842500

0000a838 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    a838:	4b03      	ldr	r3, [pc, #12]	; (a848 <pin_in_use_by_te+0x10>)
    a83a:	3008      	adds	r0, #8
    a83c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    a840:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a844:	4770      	bx	lr
    a846:	bf00      	nop
    a848:	2000013c 	.word	0x2000013c

0000a84c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    a84c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    a84e:	4c0d      	ldr	r4, [pc, #52]	; (a884 <call_handler+0x38>)
    a850:	f100 0308 	add.w	r3, r0, #8
    a854:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    a858:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    a85a:	05da      	lsls	r2, r3, #23
{
    a85c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    a85e:	d507      	bpl.n	a870 <call_handler+0x24>
    a860:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    a864:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    a868:	6852      	ldr	r2, [r2, #4]
    a86a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    a86e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    a870:	68a3      	ldr	r3, [r4, #8]
    a872:	b12b      	cbz	r3, a880 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    a874:	4631      	mov	r1, r6
    a876:	4628      	mov	r0, r5
    a878:	68e2      	ldr	r2, [r4, #12]
    }
}
    a87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    a87e:	4718      	bx	r3
}
    a880:	bd70      	pop	{r4, r5, r6, pc}
    a882:	bf00      	nop
    a884:	2000013c 	.word	0x2000013c

0000a888 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    a888:	4a13      	ldr	r2, [pc, #76]	; (a8d8 <release_handler+0x50>)
    a88a:	3008      	adds	r0, #8
    a88c:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    a890:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    a892:	05d9      	lsls	r1, r3, #23
    a894:	d51c      	bpl.n	a8d0 <release_handler+0x48>
    a896:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    a89a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    a89e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    a8a2:	2000      	movs	r0, #0
    a8a4:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    a8a8:	f834 3b02 	ldrh.w	r3, [r4], #2
    a8ac:	f413 7f80 	tst.w	r3, #256	; 0x100
    a8b0:	d003      	beq.n	a8ba <release_handler+0x32>
    a8b2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    a8b6:	4299      	cmp	r1, r3
    a8b8:	d00a      	beq.n	a8d0 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    a8ba:	3001      	adds	r0, #1
    a8bc:	2830      	cmp	r0, #48	; 0x30
    a8be:	d1f3      	bne.n	a8a8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    a8c0:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    a8c2:	4806      	ldr	r0, [pc, #24]	; (a8dc <release_handler+0x54>)
}
    a8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
        m_cb.handlers[handler_id].handler = NULL;
    a8c8:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    a8cc:	f7ff bf18 	b.w	a700 <nrfx_flag32_free>
}
    a8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    a8d4:	4770      	bx	lr
    a8d6:	bf00      	nop
    a8d8:	2000013c 	.word	0x2000013c
    a8dc:	200001b0 	.word	0x200001b0

0000a8e0 <pin_handler_trigger_uninit>:
{
    a8e0:	b538      	push	{r3, r4, r5, lr}
    a8e2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    a8e4:	f7ff ffa8 	bl	a838 <pin_in_use_by_te>
    a8e8:	4c0b      	ldr	r4, [pc, #44]	; (a918 <pin_handler_trigger_uninit+0x38>)
    a8ea:	f102 0508 	add.w	r5, r2, #8
    a8ee:	b160      	cbz	r0, a90a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    a8f0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    a8f2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    a8f6:	0b5b      	lsrs	r3, r3, #13
    a8f8:	009b      	lsls	r3, r3, #2
    a8fa:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    a8fe:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    a902:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    a906:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    a90a:	4610      	mov	r0, r2
    a90c:	f7ff ffbc 	bl	a888 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    a910:	2300      	movs	r3, #0
    a912:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    a916:	bd38      	pop	{r3, r4, r5, pc}
    a918:	2000013c 	.word	0x2000013c

0000a91c <nrfx_gpiote_input_configure>:
{
    a91c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    a920:	4604      	mov	r4, r0
    a922:	4616      	mov	r6, r2
    a924:	461d      	mov	r5, r3
    if (p_input_config)
    a926:	b321      	cbz	r1, a972 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    a928:	4f4e      	ldr	r7, [pc, #312]	; (aa64 <nrfx_gpiote_input_configure+0x148>)
    a92a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    a92e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    a932:	079b      	lsls	r3, r3, #30
    a934:	d506      	bpl.n	a944 <nrfx_gpiote_input_configure+0x28>
    a936:	f7ff ff7f 	bl	a838 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    a93a:	b118      	cbz	r0, a944 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    a93c:	484a      	ldr	r0, [pc, #296]	; (aa68 <nrfx_gpiote_input_configure+0x14c>)
}
    a93e:	b004      	add	sp, #16
    a940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    a944:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    a946:	4620      	mov	r0, r4
    a948:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    a94c:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    a950:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    a954:	f10d 020f 	add.w	r2, sp, #15
    a958:	460b      	mov	r3, r1
    a95a:	f10d 010e 	add.w	r1, sp, #14
    a95e:	f008 fd4d 	bl	133fc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    a962:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    a966:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    a96a:	f043 0301 	orr.w	r3, r3, #1
    a96e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    a972:	b196      	cbz	r6, a99a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    a974:	483b      	ldr	r0, [pc, #236]	; (aa64 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    a976:	7833      	ldrb	r3, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    a978:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    a97a:	f104 0608 	add.w	r6, r4, #8
    a97e:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        if (pin_is_output(pin))
    a982:	078f      	lsls	r7, r1, #30
    a984:	d50c      	bpl.n	a9a0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    a986:	2a00      	cmp	r2, #0
    a988:	d1d8      	bne.n	a93c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    a98a:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
    a98e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    a992:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    a996:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (p_handler_config)
    a99a:	bbcd      	cbnz	r5, aa10 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    a99c:	4833      	ldr	r0, [pc, #204]	; (aa6c <nrfx_gpiote_input_configure+0x150>)
    a99e:	e7ce      	b.n	a93e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    a9a0:	f021 0120 	bic.w	r1, r1, #32
    a9a4:	04c9      	lsls	r1, r1, #19
    a9a6:	0cc9      	lsrs	r1, r1, #19
    a9a8:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
    a9ac:	2a00      	cmp	r2, #0
    a9ae:	d0ec      	beq.n	a98a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    a9b0:	2b03      	cmp	r3, #3
    a9b2:	d8c3      	bhi.n	a93c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    a9b4:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    a9b8:	4662      	mov	r2, ip
    a9ba:	0092      	lsls	r2, r2, #2
    a9bc:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    a9c0:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    a9c4:	b923      	cbnz	r3, a9d0 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
    a9c6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    a9ca:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    a9ce:	e7dc      	b.n	a98a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    a9d0:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    a9d4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    a9d8:	f027 0703 	bic.w	r7, r7, #3
    a9dc:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    a9e0:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    a9e4:	f041 0120 	orr.w	r1, r1, #32
    a9e8:	f427 374f 	bic.w	r7, r7, #211968	; 0x33c00
    a9ec:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    a9f0:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a9f4:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    a9f8:	0227      	lsls	r7, r4, #8
    a9fa:	f407 577c 	and.w	r7, r7, #16128	; 0x3f00
    a9fe:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
    aa02:	ea47 070e 	orr.w	r7, r7, lr
    aa06:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    aa0a:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
    aa0e:	e7bc      	b.n	a98a <nrfx_gpiote_input_configure+0x6e>
    release_handler(pin);
    aa10:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    aa12:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    aa16:	f7ff ff37 	bl	a888 <release_handler>
    if (!handler)
    aa1a:	2e00      	cmp	r6, #0
    aa1c:	d0be      	beq.n	a99c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    aa1e:	4d11      	ldr	r5, [pc, #68]	; (aa64 <nrfx_gpiote_input_configure+0x148>)
    aa20:	682b      	ldr	r3, [r5, #0]
    aa22:	429e      	cmp	r6, r3
    aa24:	d104      	bne.n	aa30 <nrfx_gpiote_input_configure+0x114>
    aa26:	686b      	ldr	r3, [r5, #4]
    aa28:	429f      	cmp	r7, r3
    aa2a:	d101      	bne.n	aa30 <nrfx_gpiote_input_configure+0x114>
    aa2c:	2200      	movs	r2, #0
    aa2e:	e00a      	b.n	aa46 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    aa30:	480f      	ldr	r0, [pc, #60]	; (aa70 <nrfx_gpiote_input_configure+0x154>)
    aa32:	f10d 010f 	add.w	r1, sp, #15
    aa36:	f7ff fe41 	bl	a6bc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    aa3a:	4b0c      	ldr	r3, [pc, #48]	; (aa6c <nrfx_gpiote_input_configure+0x150>)
    aa3c:	4298      	cmp	r0, r3
    aa3e:	f47f af7e 	bne.w	a93e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    aa42:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    aa46:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    aa4a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    aa4c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    aa4e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    aa52:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    aa56:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    aa5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    aa5e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    aa62:	e79b      	b.n	a99c <nrfx_gpiote_input_configure+0x80>
    aa64:	2000013c 	.word	0x2000013c
    aa68:	0bad0004 	.word	0x0bad0004
    aa6c:	0bad0000 	.word	0x0bad0000
    aa70:	200001b0 	.word	0x200001b0

0000aa74 <nrfx_gpiote_output_configure>:
{
    aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa76:	4604      	mov	r4, r0
    aa78:	4615      	mov	r5, r2
    aa7a:	b085      	sub	sp, #20
    if (p_config)
    aa7c:	b319      	cbz	r1, aac6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    aa7e:	4e34      	ldr	r6, [pc, #208]	; (ab50 <nrfx_gpiote_output_configure+0xdc>)
    aa80:	f100 0708 	add.w	r7, r0, #8
    aa84:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    aa88:	0793      	lsls	r3, r2, #30
    aa8a:	d403      	bmi.n	aa94 <nrfx_gpiote_output_configure+0x20>
    aa8c:	f7ff fed4 	bl	a838 <pin_in_use_by_te>
    aa90:	2800      	cmp	r0, #0
    aa92:	d15a      	bne.n	ab4a <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    aa94:	f012 0f1c 	tst.w	r2, #28
    aa98:	d002      	beq.n	aaa0 <nrfx_gpiote_output_configure+0x2c>
    aa9a:	784b      	ldrb	r3, [r1, #1]
    aa9c:	2b01      	cmp	r3, #1
    aa9e:	d054      	beq.n	ab4a <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    aaa0:	2301      	movs	r3, #1
    aaa2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    aaa6:	2300      	movs	r3, #0
    aaa8:	1c4a      	adds	r2, r1, #1
    aaaa:	e9cd 1300 	strd	r1, r3, [sp]
    aaae:	4620      	mov	r0, r4
    aab0:	1c8b      	adds	r3, r1, #2
    aab2:	f10d 010f 	add.w	r1, sp, #15
    aab6:	f008 fca1 	bl	133fc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    aaba:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    aabe:	f043 0303 	orr.w	r3, r3, #3
    aac2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    aac6:	b915      	cbnz	r5, aace <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    aac8:	4822      	ldr	r0, [pc, #136]	; (ab54 <nrfx_gpiote_output_configure+0xe0>)
}
    aaca:	b005      	add	sp, #20
    aacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    aace:	4e20      	ldr	r6, [pc, #128]	; (ab50 <nrfx_gpiote_output_configure+0xdc>)
    aad0:	f104 0708 	add.w	r7, r4, #8
    aad4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    aad8:	0783      	lsls	r3, r0, #30
    aada:	d536      	bpl.n	ab4a <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    aadc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    aae0:	2300      	movs	r3, #0
    aae2:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    aae4:	f020 0020 	bic.w	r0, r0, #32
    aae8:	0089      	lsls	r1, r1, #2
    aaea:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    aaee:	04c0      	lsls	r0, r0, #19
    aaf0:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    aaf4:	0cc0      	lsrs	r0, r0, #19
    aaf6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    aafa:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    aafe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    ab02:	786a      	ldrb	r2, [r5, #1]
    ab04:	2a00      	cmp	r2, #0
    ab06:	d0df      	beq.n	aac8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    ab08:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    ab0c:	78ad      	ldrb	r5, [r5, #2]
    ab0e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    ab12:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    ab16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ab1a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    ab1e:	0223      	lsls	r3, r4, #8
    ab20:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    ab24:	0412      	lsls	r2, r2, #16
    ab26:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ab2a:	ea43 030e 	orr.w	r3, r3, lr
    ab2e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    ab30:	052a      	lsls	r2, r5, #20
    ab32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    ab36:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ab3a:	4313      	orrs	r3, r2
    ab3c:	f040 0020 	orr.w	r0, r0, #32
    ab40:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    ab44:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    ab48:	e7be      	b.n	aac8 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    ab4a:	4803      	ldr	r0, [pc, #12]	; (ab58 <nrfx_gpiote_output_configure+0xe4>)
    ab4c:	e7bd      	b.n	aaca <nrfx_gpiote_output_configure+0x56>
    ab4e:	bf00      	nop
    ab50:	2000013c 	.word	0x2000013c
    ab54:	0bad0000 	.word	0x0bad0000
    ab58:	0bad0004 	.word	0x0bad0004

0000ab5c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    ab5c:	4b01      	ldr	r3, [pc, #4]	; (ab64 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    ab5e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    ab62:	4770      	bx	lr
    ab64:	2000013c 	.word	0x2000013c

0000ab68 <nrfx_gpiote_channel_get>:
{
    ab68:	b508      	push	{r3, lr}
    ab6a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    ab6c:	f7ff fe64 	bl	a838 <pin_in_use_by_te>
    ab70:	b138      	cbz	r0, ab82 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ab72:	4b05      	ldr	r3, [pc, #20]	; (ab88 <nrfx_gpiote_channel_get+0x20>)
    ab74:	3208      	adds	r2, #8
    ab76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    ab7a:	4804      	ldr	r0, [pc, #16]	; (ab8c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ab7c:	0b5b      	lsrs	r3, r3, #13
    ab7e:	700b      	strb	r3, [r1, #0]
}
    ab80:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ab82:	4803      	ldr	r0, [pc, #12]	; (ab90 <nrfx_gpiote_channel_get+0x28>)
    ab84:	e7fc      	b.n	ab80 <nrfx_gpiote_channel_get+0x18>
    ab86:	bf00      	nop
    ab88:	2000013c 	.word	0x2000013c
    ab8c:	0bad0000 	.word	0x0bad0000
    ab90:	0bad0004 	.word	0x0bad0004

0000ab94 <nrfx_gpiote_init>:
{
    ab94:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    ab96:	4c0f      	ldr	r4, [pc, #60]	; (abd4 <nrfx_gpiote_init+0x40>)
    ab98:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    ab9c:	b9bd      	cbnz	r5, abce <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    ab9e:	2260      	movs	r2, #96	; 0x60
    aba0:	4629      	mov	r1, r5
    aba2:	f104 0010 	add.w	r0, r4, #16
    aba6:	f00a f82d 	bl	14c04 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    abaa:	200d      	movs	r0, #13
    abac:	f7fc fc16 	bl	73dc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    abb0:	4b09      	ldr	r3, [pc, #36]	; (abd8 <nrfx_gpiote_init+0x44>)
    return err_code;
    abb2:	480a      	ldr	r0, [pc, #40]	; (abdc <nrfx_gpiote_init+0x48>)
    abb4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    abb8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    abbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    abc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    abc4:	2301      	movs	r3, #1
    abc6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    abca:	6763      	str	r3, [r4, #116]	; 0x74
}
    abcc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    abce:	4804      	ldr	r0, [pc, #16]	; (abe0 <nrfx_gpiote_init+0x4c>)
    abd0:	e7fc      	b.n	abcc <nrfx_gpiote_init+0x38>
    abd2:	bf00      	nop
    abd4:	2000013c 	.word	0x2000013c
    abd8:	5000d000 	.word	0x5000d000
    abdc:	0bad0000 	.word	0x0bad0000
    abe0:	0bad0005 	.word	0x0bad0005

0000abe4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    abe4:	4b03      	ldr	r3, [pc, #12]	; (abf4 <nrfx_gpiote_is_init+0x10>)
    abe6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    abea:	3800      	subs	r0, #0
    abec:	bf18      	it	ne
    abee:	2001      	movne	r0, #1
    abf0:	4770      	bx	lr
    abf2:	bf00      	nop
    abf4:	2000013c 	.word	0x2000013c

0000abf8 <nrfx_gpiote_channel_free>:
{
    abf8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    abfa:	4801      	ldr	r0, [pc, #4]	; (ac00 <nrfx_gpiote_channel_free+0x8>)
    abfc:	f7ff bd80 	b.w	a700 <nrfx_flag32_free>
    ac00:	200001ac 	.word	0x200001ac

0000ac04 <nrfx_gpiote_channel_alloc>:
{
    ac04:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    ac06:	4801      	ldr	r0, [pc, #4]	; (ac0c <nrfx_gpiote_channel_alloc+0x8>)
    ac08:	f7ff bd58 	b.w	a6bc <nrfx_flag32_alloc>
    ac0c:	200001ac 	.word	0x200001ac

0000ac10 <nrfx_gpiote_trigger_enable>:
{
    ac10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ac12:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ac14:	f7ff fe10 	bl	a838 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ac18:	4b1e      	ldr	r3, [pc, #120]	; (ac94 <nrfx_gpiote_trigger_enable+0x84>)
    ac1a:	f104 0208 	add.w	r2, r4, #8
    ac1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ac22:	b1e8      	cbz	r0, ac60 <nrfx_gpiote_trigger_enable+0x50>
    ac24:	f013 0502 	ands.w	r5, r3, #2
    ac28:	d11a      	bne.n	ac60 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ac2a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    ac2c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    ac2e:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    ac32:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    ac36:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ac3a:	6005      	str	r5, [r0, #0]
    ac3c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    ac40:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    ac42:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    ac46:	f040 0001 	orr.w	r0, r0, #1
    ac4a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    ac4e:	b129      	cbz	r1, ac5c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    ac50:	2201      	movs	r2, #1
    ac52:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    ac56:	4a10      	ldr	r2, [pc, #64]	; (ac98 <nrfx_gpiote_trigger_enable+0x88>)
    ac58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    ac5c:	b003      	add	sp, #12
    ac5e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ac60:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    ac64:	2b04      	cmp	r3, #4
    ac66:	d011      	beq.n	ac8c <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    ac68:	2b05      	cmp	r3, #5
    ac6a:	d011      	beq.n	ac90 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ac6c:	a801      	add	r0, sp, #4
    ac6e:	9401      	str	r4, [sp, #4]
    ac70:	f7ff fdd2 	bl	a818 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ac74:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    ac76:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ac78:	40d9      	lsrs	r1, r3
    ac7a:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ac7e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    ac80:	4620      	mov	r0, r4
}
    ac82:	b003      	add	sp, #12
    ac84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    ac88:	f008 bbff 	b.w	1348a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    ac8c:	2103      	movs	r1, #3
    ac8e:	e7f7      	b.n	ac80 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    ac90:	2102      	movs	r1, #2
    ac92:	e7f5      	b.n	ac80 <nrfx_gpiote_trigger_enable+0x70>
    ac94:	2000013c 	.word	0x2000013c
    ac98:	5000d000 	.word	0x5000d000

0000ac9c <nrfx_gpiote_trigger_disable>:
{
    ac9c:	b508      	push	{r3, lr}
    ac9e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    aca0:	f7ff fdca 	bl	a838 <pin_in_use_by_te>
    aca4:	b1c0      	cbz	r0, acd8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    aca6:	4b0f      	ldr	r3, [pc, #60]	; (ace4 <nrfx_gpiote_trigger_disable+0x48>)
    aca8:	f102 0108 	add.w	r1, r2, #8
    acac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    acb0:	0799      	lsls	r1, r3, #30
    acb2:	d411      	bmi.n	acd8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    acb4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    acb6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    acb8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    acba:	490b      	ldr	r1, [pc, #44]	; (ace8 <nrfx_gpiote_trigger_disable+0x4c>)
    acbc:	009b      	lsls	r3, r3, #2
    acbe:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    acc2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    acc6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    acca:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    acce:	f022 0203 	bic.w	r2, r2, #3
    acd2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    acd6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    acd8:	2100      	movs	r1, #0
}
    acda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    acde:	4610      	mov	r0, r2
    ace0:	f008 bbd3 	b.w	1348a <nrf_gpio_cfg_sense_set>
    ace4:	2000013c 	.word	0x2000013c
    ace8:	5000d000 	.word	0x5000d000

0000acec <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    acec:	4b10      	ldr	r3, [pc, #64]	; (ad30 <nrfx_gpiote_pin_uninit+0x44>)
    acee:	f100 0208 	add.w	r2, r0, #8
    acf2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    acf6:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
    acf8:	07db      	lsls	r3, r3, #31
{
    acfa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    acfc:	d516      	bpl.n	ad2c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    acfe:	f7ff ffcd 	bl	ac9c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    ad02:	4620      	mov	r0, r4
    ad04:	f7ff fdec 	bl	a8e0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ad08:	a801      	add	r0, sp, #4
    ad0a:	9401      	str	r4, [sp, #4]
    ad0c:	f7ff fd84 	bl	a818 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    ad10:	9b01      	ldr	r3, [sp, #4]
    ad12:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    ad16:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    ad1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    ad1e:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    ad22:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    ad26:	4803      	ldr	r0, [pc, #12]	; (ad34 <nrfx_gpiote_pin_uninit+0x48>)
}
    ad28:	b002      	add	sp, #8
    ad2a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ad2c:	4802      	ldr	r0, [pc, #8]	; (ad38 <nrfx_gpiote_pin_uninit+0x4c>)
    ad2e:	e7fb      	b.n	ad28 <nrfx_gpiote_pin_uninit+0x3c>
    ad30:	2000013c 	.word	0x2000013c
    ad34:	0bad0000 	.word	0x0bad0000
    ad38:	0bad0004 	.word	0x0bad0004

0000ad3c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    ad40:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    ad42:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ad44:	4634      	mov	r4, r6
{
    ad46:	4b60      	ldr	r3, [pc, #384]	; (aec8 <nrfx_gpiote_irq_handler+0x18c>)
    return p_reg->INTENSET & mask;
    ad48:	4860      	ldr	r0, [pc, #384]	; (aecc <nrfx_gpiote_irq_handler+0x190>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ad4a:	4961      	ldr	r1, [pc, #388]	; (aed0 <nrfx_gpiote_irq_handler+0x194>)
{
    ad4c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ad4e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    ad50:	b135      	cbz	r5, ad60 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    ad52:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    ad56:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ad58:	bf1e      	ittt	ne
    ad5a:	601c      	strne	r4, [r3, #0]
    ad5c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    ad5e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ad60:	3304      	adds	r3, #4
    ad62:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    ad64:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    ad68:	d1f1      	bne.n	ad4e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ad6a:	f8df 9160 	ldr.w	r9, [pc, #352]	; aecc <nrfx_gpiote_irq_handler+0x190>
    ad6e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    ad72:	2b00      	cmp	r3, #0
    ad74:	f000 808a 	beq.w	ae8c <nrfx_gpiote_irq_handler+0x150>
        *p_masks = gpio_regs[i]->LATCH;
    ad78:	4f56      	ldr	r7, [pc, #344]	; (aed4 <nrfx_gpiote_irq_handler+0x198>)
    ad7a:	6a3b      	ldr	r3, [r7, #32]
    ad7c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    ad7e:	623b      	str	r3, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    ad80:	4b55      	ldr	r3, [pc, #340]	; (aed8 <nrfx_gpiote_irq_handler+0x19c>)
    ad82:	6a1a      	ldr	r2, [r3, #32]
    ad84:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    ad86:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    ad88:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    ad8c:	f10d 0a10 	add.w	sl, sp, #16
    ad90:	ea4f 1348 	mov.w	r3, r8, lsl #5
    ad94:	9300      	str	r3, [sp, #0]
    ad96:	e049      	b.n	ae2c <nrfx_gpiote_irq_handler+0xf0>
                uint32_t pin = NRF_CTZ(latch[i]);
    ad98:	fa94 f4a4 	rbit	r4, r4
    ad9c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    ada0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ada2:	4a4e      	ldr	r2, [pc, #312]	; (aedc <nrfx_gpiote_irq_handler+0x1a0>)
                pin += 32 * i;
    ada4:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ada6:	f104 0308 	add.w	r3, r4, #8
    adaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    adae:	08e0      	lsrs	r0, r4, #3
    adb0:	0899      	lsrs	r1, r3, #2
    adb2:	f3c3 0582 	ubfx	r5, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    adb6:	2301      	movs	r3, #1
    bit = BITMASK_RELBIT_GET(bit);
    adb8:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    adbc:	fa03 fc02 	lsl.w	ip, r3, r2
    adc0:	f81a 2000 	ldrb.w	r2, [sl, r0]
    adc4:	9403      	str	r4, [sp, #12]
    adc6:	ea22 020c 	bic.w	r2, r2, ip
    adca:	f80a 2000 	strb.w	r2, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    adce:	a803      	add	r0, sp, #12
    add0:	f7ff fd22 	bl	a818 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    add4:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    add6:	074b      	lsls	r3, r1, #29
    add8:	f102 0280 	add.w	r2, r2, #128	; 0x80
    addc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ade0:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    ade2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    ade6:	d52b      	bpl.n	ae40 <nrfx_gpiote_irq_handler+0x104>
        call_handler(pin, trigger);
    ade8:	4620      	mov	r0, r4
    adea:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    adec:	b2d5      	uxtb	r5, r2
    adee:	f7ff fd2d 	bl	a84c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    adf2:	a803      	add	r0, sp, #12
    adf4:	9403      	str	r4, [sp, #12]
    adf6:	f7ff fd0f 	bl	a818 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    adfa:	9b03      	ldr	r3, [sp, #12]
    adfc:	3380      	adds	r3, #128	; 0x80
    adfe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    ae02:	f3c3 4301 	ubfx	r3, r3, #16, #2
    ae06:	429d      	cmp	r5, r3
    ae08:	d107      	bne.n	ae1a <nrfx_gpiote_irq_handler+0xde>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    ae0a:	2100      	movs	r1, #0
    ae0c:	4620      	mov	r0, r4
    ae0e:	f008 fb3c 	bl	1348a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    ae12:	4629      	mov	r1, r5
    ae14:	4620      	mov	r0, r4
    ae16:	f008 fb38 	bl	1348a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ae1a:	a803      	add	r0, sp, #12
    ae1c:	9403      	str	r4, [sp, #12]
    ae1e:	f7ff fcfb 	bl	a818 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    ae22:	2201      	movs	r2, #1
    ae24:	9b03      	ldr	r3, [sp, #12]
    ae26:	fa02 f303 	lsl.w	r3, r2, r3
    ae2a:	6203      	str	r3, [r0, #32]
            while (latch[i])
    ae2c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    ae30:	2c00      	cmp	r4, #0
    ae32:	d1b1      	bne.n	ad98 <nrfx_gpiote_irq_handler+0x5c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    ae34:	f1b8 0f00 	cmp.w	r8, #0
    ae38:	d11a      	bne.n	ae70 <nrfx_gpiote_irq_handler+0x134>
    ae3a:	f04f 0801 	mov.w	r8, #1
    ae3e:	e7a7      	b.n	ad90 <nrfx_gpiote_irq_handler+0x54>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ae40:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ae42:	bf0c      	ite	eq
    ae44:	2103      	moveq	r1, #3
    ae46:	2102      	movne	r1, #2
    ae48:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ae4a:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ae4c:	f008 fb1d 	bl	1348a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ae50:	2d03      	cmp	r5, #3
    ae52:	d004      	beq.n	ae5e <nrfx_gpiote_irq_handler+0x122>
    ae54:	9a01      	ldr	r2, [sp, #4]
    ae56:	2a02      	cmp	r2, #2
    ae58:	d106      	bne.n	ae68 <nrfx_gpiote_irq_handler+0x12c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    ae5a:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    ae5c:	d1dd      	bne.n	ae1a <nrfx_gpiote_irq_handler+0xde>
            call_handler(pin, trigger);
    ae5e:	4659      	mov	r1, fp
    ae60:	4620      	mov	r0, r4
    ae62:	f7ff fcf3 	bl	a84c <call_handler>
    ae66:	e7d8      	b.n	ae1a <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    ae68:	2a03      	cmp	r2, #3
    ae6a:	d1d6      	bne.n	ae1a <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    ae6c:	2d02      	cmp	r5, #2
    ae6e:	e7f5      	b.n	ae5c <nrfx_gpiote_irq_handler+0x120>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ae70:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    ae74:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    ae78:	6a3a      	ldr	r2, [r7, #32]
    ae7a:	4917      	ldr	r1, [pc, #92]	; (aed8 <nrfx_gpiote_irq_handler+0x19c>)
    ae7c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    ae7e:	623a      	str	r2, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    ae80:	6a0b      	ldr	r3, [r1, #32]
    ae82:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    ae84:	620b      	str	r3, [r1, #32]
        if (latch[port_idx])
    ae86:	4313      	orrs	r3, r2
    ae88:	f47f af7e 	bne.w	ad88 <nrfx_gpiote_irq_handler+0x4c>
        mask &= ~NRFX_BIT(ch);
    ae8c:	2401      	movs	r4, #1
    while (mask)
    ae8e:	b916      	cbnz	r6, ae96 <nrfx_gpiote_irq_handler+0x15a>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    ae90:	b007      	add	sp, #28
    ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    ae96:	fa96 f3a6 	rbit	r3, r6
    ae9a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    ae9e:	fa04 f203 	lsl.w	r2, r4, r3
    aea2:	009b      	lsls	r3, r3, #2
    aea4:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    aea8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    aeac:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    aeb0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    aeb4:	f3c0 2005 	ubfx	r0, r0, #8, #6
    aeb8:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    aebc:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    aec0:	f7ff fcc4 	bl	a84c <call_handler>
    aec4:	e7e3      	b.n	ae8e <nrfx_gpiote_irq_handler+0x152>
    aec6:	bf00      	nop
    aec8:	5000d100 	.word	0x5000d100
    aecc:	5000d000 	.word	0x5000d000
    aed0:	5000d120 	.word	0x5000d120
    aed4:	50842500 	.word	0x50842500
    aed8:	50842800 	.word	0x50842800
    aedc:	2000013c 	.word	0x2000013c

0000aee0 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    aee0:	b570      	push	{r4, r5, r6, lr}
    return pin_number >> 5;
    aee2:	0945      	lsrs	r5, r0, #5
    *p_pin = pin_number & 0x1F;
    aee4:	f000 061f 	and.w	r6, r0, #31
        case 1: return NRF_P1;
    aee8:	4c0b      	ldr	r4, [pc, #44]	; (af18 <nrf_gpio_cfg.constprop.0+0x38>)
    aeea:	480c      	ldr	r0, [pc, #48]	; (af1c <nrf_gpio_cfg.constprop.0+0x3c>)
    aeec:	2d01      	cmp	r5, #1
    aeee:	bf08      	it	eq
    aef0:	4604      	moveq	r4, r0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    aef2:	f89d 0010 	ldrb.w	r0, [sp, #16]
    aef6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    aefa:	0200      	lsls	r0, r0, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    aefc:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    af00:	ea40 0383 	orr.w	r3, r0, r3, lsl #2
    af04:	4319      	orrs	r1, r3
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    af06:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    af0a:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    af0e:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
    af10:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
}
    af14:	bd70      	pop	{r4, r5, r6, pc}
    af16:	bf00      	nop
    af18:	50842500 	.word	0x50842500
    af1c:	50842800 	.word	0x50842800

0000af20 <nrf_gpio_pin_write>:
{
    af20:	b510      	push	{r4, lr}
    af22:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
    af24:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
    af28:	4a08      	ldr	r2, [pc, #32]	; (af4c <nrf_gpio_pin_write+0x2c>)
    return pin_number >> 5;
    af2a:	0940      	lsrs	r0, r0, #5
    if (value == 0)
    af2c:	b931      	cbnz	r1, af3c <nrf_gpio_pin_write+0x1c>
        case 1: return NRF_P1;
    af2e:	4908      	ldr	r1, [pc, #32]	; (af50 <nrf_gpio_pin_write+0x30>)
    af30:	4298      	cmp	r0, r3
    af32:	bf08      	it	eq
    af34:	460a      	moveq	r2, r1
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    af36:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
    af38:	60d3      	str	r3, [r2, #12]
}
    af3a:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    af3c:	4904      	ldr	r1, [pc, #16]	; (af50 <nrf_gpio_pin_write+0x30>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    af3e:	40a3      	lsls	r3, r4
        case 1: return NRF_P1;
    af40:	2801      	cmp	r0, #1
    af42:	bf08      	it	eq
    af44:	460a      	moveq	r2, r1
    p_reg->OUTSET = set_mask;
    af46:	6093      	str	r3, [r2, #8]
}
    af48:	e7f7      	b.n	af3a <nrf_gpio_pin_write+0x1a>
    af4a:	bf00      	nop
    af4c:	50842500 	.word	0x50842500
    af50:	50842800 	.word	0x50842800

0000af54 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    af54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af58:	460c      	mov	r4, r1
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    af5a:	4d68      	ldr	r5, [pc, #416]	; (b0fc <nrfx_spim_init+0x1a8>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    af5c:	7901      	ldrb	r1, [r0, #4]
{
    af5e:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    af60:	ea4f 1941 	mov.w	r9, r1, lsl #5
    af64:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    af68:	7f0e      	ldrb	r6, [r1, #28]
    af6a:	2e00      	cmp	r6, #0
    af6c:	f040 80c1 	bne.w	b0f2 <nrfx_spim_init+0x19e>

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    af70:	f894 a00f 	ldrb.w	sl, [r4, #15]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    af74:	f8d0 8000 	ldr.w	r8, [r0]
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    af78:	68a0      	ldr	r0, [r4, #8]
    af7a:	f1ba 0f00 	cmp.w	sl, #0
    af7e:	d001      	beq.n	af84 <nrfx_spim_init+0x30>
    af80:	7c21      	ldrb	r1, [r4, #16]
    af82:	b9e9      	cbnz	r1, afc0 <nrfx_spim_init+0x6c>
    af84:	495e      	ldr	r1, [pc, #376]	; (b100 <nrfx_spim_init+0x1ac>)
    af86:	4588      	cmp	r8, r1
    af88:	d11a      	bne.n	afc0 <nrfx_spim_init+0x6c>
        (p_spim == NRF_SPIM4) && (p_config->frequency == NRF_SPIM_FREQ_32M))
    af8a:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
    af8e:	d117      	bne.n	afc0 <nrfx_spim_init+0x6c>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
    af90:	7821      	ldrb	r1, [r4, #0]
    af92:	29ff      	cmp	r1, #255	; 0xff
    af94:	d002      	beq.n	af9c <nrfx_spim_init+0x48>
    af96:	2908      	cmp	r1, #8
    af98:	f040 80ad 	bne.w	b0f6 <nrfx_spim_init+0x1a2>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
    af9c:	78e1      	ldrb	r1, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
    af9e:	29ff      	cmp	r1, #255	; 0xff
    afa0:	d002      	beq.n	afa8 <nrfx_spim_init+0x54>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
    afa2:	290b      	cmp	r1, #11
    afa4:	f040 80a7 	bne.w	b0f6 <nrfx_spim_init+0x1a2>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    afa8:	7861      	ldrb	r1, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
    afaa:	29ff      	cmp	r1, #255	; 0xff
    afac:	d002      	beq.n	afb4 <nrfx_spim_init+0x60>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    afae:	2909      	cmp	r1, #9
    afb0:	f040 80a1 	bne.w	b0f6 <nrfx_spim_init+0x1a2>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
    afb4:	78a1      	ldrb	r1, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    afb6:	29ff      	cmp	r1, #255	; 0xff
    afb8:	d002      	beq.n	afc0 <nrfx_spim_init+0x6c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
    afba:	290a      	cmp	r1, #10
    afbc:	f040 809b 	bne.w	b0f6 <nrfx_spim_init+0x1a2>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    afc0:	eb05 0109 	add.w	r1, r5, r9
    afc4:	f845 2009 	str.w	r2, [r5, r9]
    p_cb->p_context = p_context;
    afc8:	460a      	mov	r2, r1
    afca:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    afcc:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    afce:	7921      	ldrb	r1, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    afd0:	f36a 0300 	bfi	r3, sl, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
    afd4:	f361 0341 	bfi	r3, r1, #1, #1
    afd8:	7793      	strb	r3, [r2, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    afda:	78e3      	ldrb	r3, [r4, #3]
    afdc:	77d3      	strb	r3, [r2, #31]

    configure_pins(p_instance, p_config);
    afde:	f8d7 b000 	ldr.w	fp, [r7]
    if (!p_config->skip_gpio_cfg)
    afe2:	f1ba 0f00 	cmp.w	sl, #0
    afe6:	d140      	bne.n	b06a <nrfx_spim_init+0x116>
                    : NRF_GPIO_PIN_S0S1;
    afe8:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
    afec:	bf08      	it	eq
    afee:	2603      	moveq	r6, #3
        nrf_gpio_pin_write(p_config->sck_pin,
    aff0:	7b21      	ldrb	r1, [r4, #12]
    aff2:	7820      	ldrb	r0, [r4, #0]
    aff4:	2901      	cmp	r1, #1
    aff6:	bf94      	ite	ls
    aff8:	2100      	movls	r1, #0
    affa:	2101      	movhi	r1, #1
    affc:	f7ff ff90 	bl	af20 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
    b000:	7820      	ldrb	r0, [r4, #0]
    b002:	4653      	mov	r3, sl
    b004:	4652      	mov	r2, sl
    b006:	2101      	movs	r1, #1
    b008:	9600      	str	r6, [sp, #0]
    b00a:	f7ff ff69 	bl	aee0 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    b00e:	7860      	ldrb	r0, [r4, #1]
    b010:	28ff      	cmp	r0, #255	; 0xff
    b012:	d012      	beq.n	b03a <nrfx_spim_init+0xe6>
        case 1: return NRF_P1;
    b014:	4a3b      	ldr	r2, [pc, #236]	; (b104 <nrfx_spim_init+0x1b0>)
    b016:	4b3c      	ldr	r3, [pc, #240]	; (b108 <nrfx_spim_init+0x1b4>)
    return pin_number >> 5;
    b018:	ea4f 1c50 	mov.w	ip, r0, lsr #5
        case 1: return NRF_P1;
    b01c:	f1bc 0f01 	cmp.w	ip, #1
    b020:	bf08      	it	eq
    b022:	4613      	moveq	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b024:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    b026:	f000 011f 	and.w	r1, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b02a:	fa02 f101 	lsl.w	r1, r2, r1
    p_reg->OUTCLR = clr_mask;
    b02e:	60d9      	str	r1, [r3, #12]
            nrf_gpio_cfg(p_config->mosi_pin,
    b030:	4653      	mov	r3, sl
    b032:	4611      	mov	r1, r2
    b034:	9600      	str	r6, [sp, #0]
    b036:	f7ff ff53 	bl	aee0 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    b03a:	78a0      	ldrb	r0, [r4, #2]
    b03c:	28ff      	cmp	r0, #255	; 0xff
    b03e:	d005      	beq.n	b04c <nrfx_spim_init+0xf8>
            nrf_gpio_cfg(p_config->miso_pin,
    b040:	2200      	movs	r2, #0
    b042:	7ba3      	ldrb	r3, [r4, #14]
    b044:	4611      	mov	r1, r2
    b046:	9600      	str	r6, [sp, #0]
    b048:	f7ff ff4a 	bl	aee0 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b04c:	78e0      	ldrb	r0, [r4, #3]
    b04e:	28ff      	cmp	r0, #255	; 0xff
    b050:	d00b      	beq.n	b06a <nrfx_spim_init+0x116>
                               p_config->ss_active_high ? 0 : 1);
    b052:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    b054:	f081 0101 	eor.w	r1, r1, #1
    b058:	f7ff ff62 	bl	af20 <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
    b05c:	2201      	movs	r2, #1
    b05e:	2300      	movs	r3, #0
    b060:	4611      	mov	r1, r2
    b062:	78e0      	ldrb	r0, [r4, #3]
    b064:	9600      	str	r6, [sp, #0]
    b066:	f7ff ff3b 	bl	aee0 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    b06a:	7c23      	ldrb	r3, [r4, #16]
    b06c:	b993      	cbnz	r3, b094 <nrfx_spim_init+0x140>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    b06e:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    b070:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    b072:	2bff      	cmp	r3, #255	; 0xff
    b074:	bf18      	it	ne
    b076:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    b078:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    b07a:	bf08      	it	eq
    b07c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    b080:	2bff      	cmp	r3, #255	; 0xff
    b082:	bf08      	it	eq
    b084:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    b088:	f8cb 1508 	str.w	r1, [fp, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    b08c:	f8cb 250c 	str.w	r2, [fp, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    b090:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    b094:	68a3      	ldr	r3, [r4, #8]
    b096:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    b09a:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    b09c:	7b22      	ldrb	r2, [r4, #12]
    b09e:	3b00      	subs	r3, #0
    b0a0:	bf18      	it	ne
    b0a2:	2301      	movne	r3, #1
    switch (spi_mode)
    b0a4:	2a02      	cmp	r2, #2
    b0a6:	d01e      	beq.n	b0e6 <nrfx_spim_init+0x192>
    b0a8:	2a03      	cmp	r2, #3
    b0aa:	d01f      	beq.n	b0ec <nrfx_spim_init+0x198>
    b0ac:	2a01      	cmp	r2, #1
    b0ae:	d101      	bne.n	b0b4 <nrfx_spim_init+0x160>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    b0b0:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    b0b4:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    b0b8:	79a3      	ldrb	r3, [r4, #6]
    b0ba:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    b0be:	2307      	movs	r3, #7
    b0c0:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    b0c4:	f855 3009 	ldr.w	r3, [r5, r9]
    b0c8:	b123      	cbz	r3, b0d4 <nrfx_spim_init+0x180>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    b0ca:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    b0cc:	f340 3007 	sbfx	r0, r0, #12, #8
    b0d0:	f7fc f984 	bl	73dc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    b0d4:	2300      	movs	r3, #0
    b0d6:	444d      	add	r5, r9
    b0d8:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b0da:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    b0dc:	480b      	ldr	r0, [pc, #44]	; (b10c <nrfx_spim_init+0x1b8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b0de:	772b      	strb	r3, [r5, #28]
}
    b0e0:	b003      	add	sp, #12
    b0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    b0e6:	f043 0304 	orr.w	r3, r3, #4
        break;
    b0ea:	e7e3      	b.n	b0b4 <nrfx_spim_init+0x160>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    b0ec:	f043 0306 	orr.w	r3, r3, #6
        break;
    b0f0:	e7e0      	b.n	b0b4 <nrfx_spim_init+0x160>
        return err_code;
    b0f2:	4807      	ldr	r0, [pc, #28]	; (b110 <nrfx_spim_init+0x1bc>)
    b0f4:	e7f4      	b.n	b0e0 <nrfx_spim_init+0x18c>
            return err_code;
    b0f6:	4807      	ldr	r0, [pc, #28]	; (b114 <nrfx_spim_init+0x1c0>)
    b0f8:	e7f2      	b.n	b0e0 <nrfx_spim_init+0x18c>
    b0fa:	bf00      	nop
    b0fc:	2000362c 	.word	0x2000362c
    b100:	5000a000 	.word	0x5000a000
    b104:	50842800 	.word	0x50842800
    b108:	50842500 	.word	0x50842500
    b10c:	0bad0000 	.word	0x0bad0000
    b110:	0bad0005 	.word	0x0bad0005
    b114:	0bad0004 	.word	0x0bad0004

0000b118 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b11a:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    b11c:	4c20      	ldr	r4, [pc, #128]	; (b1a0 <nrfx_spim_uninit+0x88>)
    b11e:	015e      	lsls	r6, r3, #5
    b120:	eb04 1743 	add.w	r7, r4, r3, lsl #5
    b124:	59a3      	ldr	r3, [r4, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    b126:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    b128:	b1b3      	cbz	r3, b158 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    b12a:	f345 3007 	sbfx	r0, r5, #12, #8
    b12e:	f7fc f965 	bl	73fc <arch_irq_disable>
    p_reg->INTENCLR = mask;
    b132:	4b1c      	ldr	r3, [pc, #112]	; (b1a4 <nrfx_spim_uninit+0x8c>)
    b134:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    b138:	7f7b      	ldrb	r3, [r7, #29]
    b13a:	b16b      	cbz	r3, b158 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b13c:	2301      	movs	r3, #1
    b13e:	2764      	movs	r7, #100	; 0x64
    b140:	616b      	str	r3, [r5, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b142:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    b146:	b923      	cbnz	r3, b152 <nrfx_spim_uninit+0x3a>
    b148:	2001      	movs	r0, #1
    b14a:	f008 f866 	bl	1321a <nrfx_busy_wait>
    b14e:	3f01      	subs	r7, #1
    b150:	d1f7      	bne.n	b142 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    b152:	2200      	movs	r2, #0
    b154:	19a3      	adds	r3, r4, r6
    b156:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    b158:	2300      	movs	r3, #0
    b15a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    b15e:	19a3      	adds	r3, r4, r6
    b160:	7f9b      	ldrb	r3, [r3, #30]
    b162:	07d8      	lsls	r0, r3, #31
    b164:	d417      	bmi.n	b196 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    b166:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    b16a:	1c41      	adds	r1, r0, #1
    b16c:	d001      	beq.n	b172 <nrfx_spim_uninit+0x5a>
    nrf_gpio_cfg_default(pin);
    b16e:	f008 f99b 	bl	134a8 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    b172:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    b176:	1c42      	adds	r2, r0, #1
    b178:	d001      	beq.n	b17e <nrfx_spim_uninit+0x66>
    nrf_gpio_cfg_default(pin);
    b17a:	f008 f995 	bl	134a8 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    b17e:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    b182:	1c43      	adds	r3, r0, #1
    b184:	d001      	beq.n	b18a <nrfx_spim_uninit+0x72>
    nrf_gpio_cfg_default(pin);
    b186:	f008 f98f 	bl	134a8 <nrf_gpio_cfg_default>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b18a:	19a3      	adds	r3, r4, r6
    b18c:	7fd8      	ldrb	r0, [r3, #31]
    b18e:	28ff      	cmp	r0, #255	; 0xff
    b190:	d001      	beq.n	b196 <nrfx_spim_uninit+0x7e>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    b192:	f008 f989 	bl	134a8 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    b196:	2300      	movs	r3, #0
    b198:	4434      	add	r4, r6
    b19a:	7723      	strb	r3, [r4, #28]
}
    b19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b19e:	bf00      	nop
    b1a0:	2000362c 	.word	0x2000362c
    b1a4:	00080152 	.word	0x00080152

0000b1a8 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    b1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b1ac:	4f36      	ldr	r7, [pc, #216]	; (b288 <nrfx_spim_xfer+0xe0>)
    b1ae:	7903      	ldrb	r3, [r0, #4]
{
    b1b0:	4614      	mov	r4, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b1b2:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    b1b6:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    b1ba:	4681      	mov	r9, r0
    b1bc:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    b1be:	015e      	lsls	r6, r3, #5
    b1c0:	2a00      	cmp	r2, #0
    b1c2:	d15e      	bne.n	b282 <nrfx_spim_xfer+0xda>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    b1c4:	59ba      	ldr	r2, [r7, r6]
    b1c6:	b12a      	cbz	r2, b1d4 <nrfx_spim_xfer+0x2c>
    b1c8:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    b1cc:	bf04      	itt	eq
    b1ce:	2201      	moveq	r2, #1
    b1d0:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    b1d4:	eb07 0c06 	add.w	ip, r7, r6
    b1d8:	f10c 0c0c 	add.w	ip, ip, #12
    b1dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b1e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    b1e4:	2101      	movs	r1, #1
    b1e6:	4640      	mov	r0, r8
    b1e8:	f008 f968 	bl	134bc <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    b1ec:	6829      	ldr	r1, [r5, #0]
    b1ee:	b121      	cbz	r1, b1fa <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    b1f0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    b1f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b1f8:	d106      	bne.n	b208 <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    b1fa:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    b1fc:	b152      	cbz	r2, b214 <nrfx_spim_xfer+0x6c>
    b1fe:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    b202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b206:	d005      	beq.n	b214 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    b208:	2300      	movs	r3, #0
    b20a:	443e      	add	r6, r7
        return err_code;
    b20c:	481f      	ldr	r0, [pc, #124]	; (b28c <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    b20e:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    b210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    b214:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    b218:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b21a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    b21e:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    b220:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b224:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b228:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    b22a:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b22e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    b232:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    b236:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    b23a:	bf18      	it	ne
    b23c:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    b23e:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    b242:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    b246:	bf18      	it	ne
    b248:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    b24a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    b24e:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b252:	bf04      	itt	eq
    b254:	2101      	moveq	r1, #1
    b256:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    b258:	59b9      	ldr	r1, [r7, r6]
    b25a:	b949      	cbnz	r1, b270 <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    b25c:	b912      	cbnz	r2, b264 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b25e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    b262:	e7fb      	b.n	b25c <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    b264:	2100      	movs	r1, #0
    b266:	4640      	mov	r0, r8
    b268:	f008 f928 	bl	134bc <set_ss_pin_state>
    return err_code;
    b26c:	4808      	ldr	r0, [pc, #32]	; (b290 <nrfx_spim_xfer+0xe8>)
}
    b26e:	e7cf      	b.n	b210 <nrfx_spim_xfer+0x68>
    if (!enable)
    b270:	2240      	movs	r2, #64	; 0x40
    b272:	f014 0f04 	tst.w	r4, #4
    p_reg->INTENCLR = mask;
    b276:	bf14      	ite	ne
    b278:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    b27c:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    b280:	e7f4      	b.n	b26c <nrfx_spim_xfer+0xc4>
        return err_code;
    b282:	4804      	ldr	r0, [pc, #16]	; (b294 <nrfx_spim_xfer+0xec>)
    b284:	e7c4      	b.n	b210 <nrfx_spim_xfer+0x68>
    b286:	bf00      	nop
    b288:	2000362c 	.word	0x2000362c
    b28c:	0bad000a 	.word	0x0bad000a
    b290:	0bad0000 	.word	0x0bad0000
    b294:	0bad000b 	.word	0x0bad000b

0000b298 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b298:	4b0c      	ldr	r3, [pc, #48]	; (b2cc <nrfx_spim_3_irq_handler+0x34>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    b29a:	b570      	push	{r4, r5, r6, lr}
    b29c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    b2a0:	b192      	cbz	r2, b2c8 <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b2a2:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
    b2a4:	4c0a      	ldr	r4, [pc, #40]	; (b2d0 <nrfx_spim_3_irq_handler+0x38>)
    b2a6:	4629      	mov	r1, r5
    b2a8:	4620      	mov	r0, r4
    b2aa:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    b2ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    b2b2:	f008 f903 	bl	134bc <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b2b6:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
    b2ba:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    b2bc:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b2be:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    b2c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b2c6:	4718      	bx	r3
}
    b2c8:	bd70      	pop	{r4, r5, r6, pc}
    b2ca:	bf00      	nop
    b2cc:	5000c000 	.word	0x5000c000
    b2d0:	2000362c 	.word	0x2000362c

0000b2d4 <nrf_gpio_cfg_default>:
        case 1: return NRF_P1;
    b2d4:	4b09      	ldr	r3, [pc, #36]	; (b2fc <nrf_gpio_cfg_default+0x28>)
    b2d6:	490a      	ldr	r1, [pc, #40]	; (b300 <nrf_gpio_cfg_default+0x2c>)
    *p_pin = pin_number & 0x1F;
    b2d8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    b2dc:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    b2de:	2801      	cmp	r0, #1
    b2e0:	bf08      	it	eq
    b2e2:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b2e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b2e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    b2ec:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b2f0:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    b2f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    b2f8:	4770      	bx	lr
    b2fa:	bf00      	nop
    b2fc:	50842500 	.word	0x50842500
    b300:	50842800 	.word	0x50842800

0000b304 <nrfx_twim_init>:
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b304:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
    b308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    b30c:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b30e:	4d3b      	ldr	r5, [pc, #236]	; (b3fc <nrfx_twim_init+0xf8>)
    b310:	fb0c fc07 	mul.w	ip, ip, r7
    b314:	eb05 040c 	add.w	r4, r5, ip
    b318:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
    b31c:	2e00      	cmp	r6, #0
    b31e:	d169      	bne.n	b3f4 <nrfx_twim_init+0xf0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    b320:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    b322:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    b324:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->handler         = event_handler;
    b326:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    b32a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    b32e:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    b330:	60a6      	str	r6, [r4, #8]
    p_cb->repeated        = false;
    b332:	f8d1 c008 	ldr.w	ip, [r1, #8]
    b336:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->busy            = false;
    b33a:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    b33e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    b342:	b113      	cbz	r3, b34a <nrfx_twim_init+0x46>
    b344:	7bcc      	ldrb	r4, [r1, #15]
    b346:	2c00      	cmp	r4, #0
    b348:	d13c      	bne.n	b3c4 <nrfx_twim_init+0xc0>
    if (p_config->frequency >= NRF_TWIM_FREQ_1000K)
    b34a:	f1bc 6f7f 	cmp.w	ip, #267386880	; 0xff00000
    b34e:	d34e      	bcc.n	b3ee <nrfx_twim_init+0xea>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
    b350:	680c      	ldr	r4, [r1, #0]
    b352:	2c22      	cmp	r4, #34	; 0x22
    b354:	d146      	bne.n	b3e4 <nrfx_twim_init+0xe0>
    b356:	684c      	ldr	r4, [r1, #4]
    b358:	2c23      	cmp	r4, #35	; 0x23
            ((p_config->scl != e0e1_pin_2) || (p_config->sda != e0e1_pin_1)))
    b35a:	d14d      	bne.n	b3f8 <nrfx_twim_init+0xf4>
        drive = NRF_GPIO_PIN_E0E1;
    b35c:	f04f 0e0b 	mov.w	lr, #11
    if (!p_config->skip_gpio_cfg)
    b360:	bb43      	cbnz	r3, b3b4 <nrfx_twim_init+0xb0>
        TWIM_PIN_INIT(p_config->scl, drive);
    b362:	680e      	ldr	r6, [r1, #0]
        case 1: return NRF_P1;
    b364:	4c26      	ldr	r4, [pc, #152]	; (b400 <nrfx_twim_init+0xfc>)
    b366:	4b27      	ldr	r3, [pc, #156]	; (b404 <nrfx_twim_init+0x100>)
    *p_pin = pin_number & 0x1F;
    b368:	f006 091f 	and.w	r9, r6, #31
    return pin_number >> 5;
    b36c:	0976      	lsrs	r6, r6, #5
        case 1: return NRF_P1;
    b36e:	2e01      	cmp	r6, #1
    b370:	bf14      	ite	ne
    b372:	46a0      	movne	r8, r4
    b374:	4698      	moveq	r8, r3
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b376:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    b37a:	f8d8 6200 	ldr.w	r6, [r8, #512]	; 0x200
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    b37e:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b382:	f04e 0e0c 	orr.w	lr, lr, #12
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b386:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b38a:	ea46 060e 	orr.w	r6, r6, lr
    reg->PIN_CNF[pin_number] = cnf;
    b38e:	f8c8 6200 	str.w	r6, [r8, #512]	; 0x200
        TWIM_PIN_INIT(p_config->sda, drive);
    b392:	684e      	ldr	r6, [r1, #4]
    *p_pin = pin_number & 0x1F;
    b394:	f006 081f 	and.w	r8, r6, #31
    return pin_number >> 5;
    b398:	0976      	lsrs	r6, r6, #5
        case 1: return NRF_P1;
    b39a:	2e01      	cmp	r6, #1
    b39c:	bf18      	it	ne
    b39e:	4623      	movne	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b3a0:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    b3a4:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    b3a8:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b3ac:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
    b3b0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    if (!p_config->skip_psel_cfg)
    b3b4:	7bcb      	ldrb	r3, [r1, #15]
    b3b6:	b92b      	cbnz	r3, b3c4 <nrfx_twim_init+0xc0>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    b3b8:	e9d1 4300 	ldrd	r4, r3, [r1]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    b3bc:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    b3c0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    b3c4:	f8c0 c524 	str.w	ip, [r0, #1316]	; 0x524
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);

    if (p_cb->handler)
    b3c8:	b11a      	cbz	r2, b3d2 <nrfx_twim_init+0xce>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    b3ca:	f340 3007 	sbfx	r0, r0, #12, #8
    b3ce:	f7fc f805 	bl	73dc <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b3d2:	2334      	movs	r3, #52	; 0x34
    b3d4:	fb03 5507 	mla	r5, r3, r7, r5
    b3d8:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    b3da:	480b      	ldr	r0, [pc, #44]	; (b408 <nrfx_twim_init+0x104>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b3dc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    b3e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
    b3e4:	2c23      	cmp	r4, #35	; 0x23
    b3e6:	d107      	bne.n	b3f8 <nrfx_twim_init+0xf4>
            ((p_config->scl != e0e1_pin_2) || (p_config->sda != e0e1_pin_1)))
    b3e8:	684c      	ldr	r4, [r1, #4]
    b3ea:	2c22      	cmp	r4, #34	; 0x22
    b3ec:	e7b5      	b.n	b35a <nrfx_twim_init+0x56>
        drive = NRF_GPIO_PIN_S0D1;
    b3ee:	f04f 0e06 	mov.w	lr, #6
    b3f2:	e7b5      	b.n	b360 <nrfx_twim_init+0x5c>
        return err_code;
    b3f4:	4805      	ldr	r0, [pc, #20]	; (b40c <nrfx_twim_init+0x108>)
    b3f6:	e7f3      	b.n	b3e0 <nrfx_twim_init+0xdc>
        return NRFX_ERROR_INVALID_PARAM;
    b3f8:	4805      	ldr	r0, [pc, #20]	; (b410 <nrfx_twim_init+0x10c>)
    b3fa:	e7f1      	b.n	b3e0 <nrfx_twim_init+0xdc>
    b3fc:	2000364c 	.word	0x2000364c
    b400:	50842500 	.word	0x50842500
    b404:	50842800 	.word	0x50842800
    b408:	0bad0000 	.word	0x0bad0000
    b40c:	0bad0005 	.word	0x0bad0005
    b410:	0bad0004 	.word	0x0bad0004

0000b414 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    b414:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    b416:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b418:	7902      	ldrb	r2, [r0, #4]
    b41a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    b41e:	2134      	movs	r1, #52	; 0x34
    b420:	4b03      	ldr	r3, [pc, #12]	; (b430 <nrfx_twim_enable+0x1c>)
    b422:	fb01 3302 	mla	r3, r1, r2, r3
    b426:	2202      	movs	r2, #2
    b428:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    b42c:	4770      	bx	lr
    b42e:	bf00      	nop
    b430:	2000364c 	.word	0x2000364c

0000b434 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b434:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    b436:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    b438:	2034      	movs	r0, #52	; 0x34
    b43a:	4b0b      	ldr	r3, [pc, #44]	; (b468 <nrfx_twim_disable+0x34>)
    b43c:	fb00 3301 	mla	r3, r0, r1, r3
    b440:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    b442:	480a      	ldr	r0, [pc, #40]	; (b46c <nrfx_twim_disable+0x38>)
    b444:	6099      	str	r1, [r3, #8]
    b446:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    b44a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    b44e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    b452:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    b456:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b45a:	2201      	movs	r2, #1
    p_cb->busy = false;
    b45c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b460:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    b464:	4770      	bx	lr
    b466:	bf00      	nop
    b468:	2000364c 	.word	0x2000364c
    b46c:	019c0202 	.word	0x019c0202

0000b470 <nrfx_twim_uninit>:
    if (p_cb->handler)
    b470:	2334      	movs	r3, #52	; 0x34
{
    b472:	b570      	push	{r4, r5, r6, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b474:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
    b476:	4d13      	ldr	r5, [pc, #76]	; (b4c4 <nrfx_twim_uninit+0x54>)
    b478:	4373      	muls	r3, r6
    b47a:	58eb      	ldr	r3, [r5, r3]
{
    b47c:	4604      	mov	r4, r0
    if (p_cb->handler)
    b47e:	b123      	cbz	r3, b48a <nrfx_twim_uninit+0x1a>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    b480:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    b482:	f340 3007 	sbfx	r0, r0, #12, #8
    b486:	f7fb ffb9 	bl	73fc <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    b48a:	4620      	mov	r0, r4
    b48c:	f7ff ffd2 	bl	b434 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    b490:	2334      	movs	r3, #52	; 0x34
    b492:	fb03 5306 	mla	r3, r3, r6, r5
    b496:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    b49a:	b962      	cbnz	r2, b4b6 <nrfx_twim_uninit+0x46>
    b49c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    b4a0:	b94b      	cbnz	r3, b4b6 <nrfx_twim_uninit+0x46>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    b4a2:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
    b4a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b4a8:	f7ff ff14 	bl	b2d4 <nrf_gpio_cfg_default>
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
    b4ac:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SDA;
    b4ae:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
    b4b2:	f7ff ff0f 	bl	b2d4 <nrf_gpio_cfg_default>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    b4b6:	2334      	movs	r3, #52	; 0x34
    b4b8:	fb03 5506 	mla	r5, r3, r6, r5
    b4bc:	2300      	movs	r3, #0
    b4be:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    b4c2:	bd70      	pop	{r4, r5, r6, pc}
    b4c4:	2000364c 	.word	0x2000364c

0000b4c8 <nrfx_twim_xfer>:
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    b4c8:	2334      	movs	r3, #52	; 0x34


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    b4ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4ce:	4617      	mov	r7, r2
    p_cb->error = false;
    b4d0:	2200      	movs	r2, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b4d2:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
    b4d6:	f8df c2e8 	ldr.w	ip, [pc, #744]	; b7c0 <nrfx_twim_xfer+0x2f8>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    b4da:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    b4dc:	fb03 c30e 	mla	r3, r3, lr, ip
    b4e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    b4e4:	684b      	ldr	r3, [r1, #4]
{
    b4e6:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    b4e8:	b14b      	cbz	r3, b4fe <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    b4ea:	68cb      	ldr	r3, [r1, #12]
    b4ec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    b4f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b4f4:	d003      	beq.n	b4fe <nrfx_twim_xfer+0x36>
        return err_code;
    b4f6:	4eaa      	ldr	r6, [pc, #680]	; (b7a0 <nrfx_twim_xfer+0x2d8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    b4f8:	4630      	mov	r0, r6
    b4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    b4fe:	2634      	movs	r6, #52	; 0x34
    b500:	fb06 c60e 	mla	r6, r6, lr, ip
    p_reg->INTENCLR = mask;
    b504:	4ba7      	ldr	r3, [pc, #668]	; (b7a4 <nrfx_twim_xfer+0x2dc>)
    b506:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    b50a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    b50e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    b512:	b123      	cbz	r3, b51e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    b514:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    b516:	4ea4      	ldr	r6, [pc, #656]	; (b7a8 <nrfx_twim_xfer+0x2e0>)
    p_reg->INTENSET = mask;
    b518:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    b51c:	e7ec      	b.n	b4f8 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    b51e:	f017 0f14 	tst.w	r7, #20
    b522:	bf0c      	ite	eq
    b524:	2301      	moveq	r3, #1
    b526:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    b528:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    b52a:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    b52e:	f106 080c 	add.w	r8, r6, #12
    b532:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    b536:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    b53a:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
    b53e:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    b540:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    b544:	f3c7 1300 	ubfx	r3, r7, #4, #1
    b548:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    b54c:	786b      	ldrb	r3, [r5, #1]
    b54e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b552:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    b556:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    b55a:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    b55e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    b562:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    b566:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    b56a:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    b56e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    b572:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    b576:	bf18      	it	ne
    b578:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    b57a:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    b57e:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    b582:	bf18      	it	ne
    b584:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    b586:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    b58a:	782a      	ldrb	r2, [r5, #0]
    b58c:	2a03      	cmp	r2, #3
    b58e:	f200 80b5 	bhi.w	b6fc <nrfx_twim_xfer+0x234>
    b592:	e8df f002 	tbb	[pc, r2]
    b596:	a084      	.short	0xa084
    b598:	0269      	.short	0x0269
    b59a:	692b      	ldr	r3, [r5, #16]
    b59c:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    b5a0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    b5a4:	d1a7      	bne.n	b4f6 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    b5a6:	f44f 7180 	mov.w	r1, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b5aa:	68e8      	ldr	r0, [r5, #12]
    p_reg->SHORTS = mask;
    b5ac:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    b5b0:	6869      	ldr	r1, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b5b2:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b5b6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b5ba:	2100      	movs	r1, #0
    b5bc:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    b5c0:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5c4:	2001      	movs	r0, #1
    b5c6:	6220      	str	r0, [r4, #32]
    b5c8:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b5ca:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    b5ce:	2800      	cmp	r0, #0
    b5d0:	d0fb      	beq.n	b5ca <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b5d2:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    b5d6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    b5da:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b5dc:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    b5e0:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
    b5e2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    b5e6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b5ea:	fb03 c30e 	mla	r3, r3, lr, ip
    b5ee:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    b5f0:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    b5f2:	4e6e      	ldr	r6, [pc, #440]	; (b7ac <nrfx_twim_xfer+0x2e4>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    b5f4:	0739      	lsls	r1, r7, #28
    b5f6:	d406      	bmi.n	b606 <nrfx_twim_xfer+0x13e>
    b5f8:	2a03      	cmp	r2, #3
    b5fa:	d004      	beq.n	b606 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5fc:	2201      	movs	r2, #1
    b5fe:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    b600:	686b      	ldr	r3, [r5, #4]
    b602:	b903      	cbnz	r3, b606 <nrfx_twim_xfer+0x13e>
    b604:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    b606:	2334      	movs	r3, #52	; 0x34
    b608:	fb03 f30e 	mul.w	r3, r3, lr
    b60c:	f85c 2003 	ldr.w	r2, [ip, r3]
    b610:	eb0c 0103 	add.w	r1, ip, r3
    b614:	2a00      	cmp	r2, #0
    b616:	d174      	bne.n	b702 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    b618:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b61a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b61e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    b622:	2800      	cmp	r0, #0
    b624:	f040 8088 	bne.w	b738 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    b628:	3b00      	subs	r3, #0
    b62a:	bf18      	it	ne
    b62c:	2301      	movne	r3, #1
    b62e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    b632:	2800      	cmp	r0, #0
    b634:	f000 8086 	beq.w	b744 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b638:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    b63c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b640:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    b644:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    b648:	b115      	cbz	r5, b650 <nrfx_twim_xfer+0x188>
    b64a:	f410 7f00 	tst.w	r0, #512	; 0x200
    b64e:	d104      	bne.n	b65a <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b650:	6221      	str	r1, [r4, #32]
    b652:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    b654:	2d00      	cmp	r5, #0
    b656:	d0e0      	beq.n	b61a <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    b658:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    b65a:	05c0      	lsls	r0, r0, #23
    b65c:	d572      	bpl.n	b744 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b65e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    b662:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    b666:	e7d8      	b.n	b61a <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    b668:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b66a:	68e9      	ldr	r1, [r5, #12]
    b66c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b670:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    b674:	692b      	ldr	r3, [r5, #16]
    b676:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    b67a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    b67e:	f47f af3a 	bne.w	b4f6 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    b682:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b684:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    b688:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    b68c:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    b690:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    b694:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    b696:	2102      	movs	r1, #2
    b698:	fb03 c30e 	mla	r3, r3, lr, ip
    b69c:	e012      	b.n	b6c4 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    b69e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b6a0:	68e9      	ldr	r1, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    b6a2:	f017 0f20 	tst.w	r7, #32
    b6a6:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b6aa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    b6ae:	f04f 0334 	mov.w	r3, #52	; 0x34
    b6b2:	d00b      	beq.n	b6cc <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    b6b4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b6b8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    b6bc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b6c0:	fb03 c30e 	mla	r3, r3, lr, ip
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    b6c4:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6c6:	2301      	movs	r3, #1
    b6c8:	6223      	str	r3, [r4, #32]
    b6ca:	e791      	b.n	b5f0 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    b6cc:	f44f 7100 	mov.w	r1, #512	; 0x200
    b6d0:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b6d4:	e7df      	b.n	b696 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    b6d6:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b6d8:	68e9      	ldr	r1, [r5, #12]
    b6da:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b6de:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    b6e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    b6e6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    b6ea:	2334      	movs	r3, #52	; 0x34
    b6ec:	2102      	movs	r1, #2
    b6ee:	fb03 c30e 	mla	r3, r3, lr, ip
    b6f2:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6f4:	2301      	movs	r3, #1
    b6f6:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    b6f8:	2300      	movs	r3, #0
    b6fa:	e77a      	b.n	b5f2 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    b6fc:	2308      	movs	r3, #8
    b6fe:	4e2c      	ldr	r6, [pc, #176]	; (b7b0 <nrfx_twim_xfer+0x2e8>)
    b700:	e778      	b.n	b5f4 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    b702:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    b704:	bf44      	itt	mi
    b706:	2300      	movmi	r3, #0
    b708:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    b70a:	067b      	lsls	r3, r7, #25
    b70c:	d406      	bmi.n	b71c <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    b70e:	2334      	movs	r3, #52	; 0x34
    b710:	fb03 c30e 	mla	r3, r3, lr, ip
    b714:	689a      	ldr	r2, [r3, #8]
    b716:	f042 0202 	orr.w	r2, r2, #2
    b71a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    b71c:	2334      	movs	r3, #52	; 0x34
    b71e:	fb03 cc0e 	mla	ip, r3, lr, ip
    b722:	f8dc 3008 	ldr.w	r3, [ip, #8]
    b726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b72a:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    b72e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    b732:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    b736:	e6df      	b.n	b4f8 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b738:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    b73c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    b740:	2301      	movs	r3, #1
    b742:	e774      	b.n	b62e <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    b744:	2b00      	cmp	r3, #0
    b746:	f43f af68 	beq.w	b61a <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    b74a:	2134      	movs	r1, #52	; 0x34
    b74c:	2000      	movs	r0, #0
    b74e:	fb01 c20e 	mla	r2, r1, lr, ip
    uint32_t error_source = p_reg->ERRORSRC;
    b752:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    b756:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    b75a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    b75e:	b18b      	cbz	r3, b784 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    b760:	4a14      	ldr	r2, [pc, #80]	; (b7b4 <nrfx_twim_xfer+0x2ec>)
    b762:	f013 0f01 	tst.w	r3, #1
    b766:	4e14      	ldr	r6, [pc, #80]	; (b7b8 <nrfx_twim_xfer+0x2f0>)
    b768:	bf18      	it	ne
    b76a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    b76c:	f013 0f02 	tst.w	r3, #2
    b770:	f102 0201 	add.w	r2, r2, #1
    b774:	bf18      	it	ne
    b776:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    b778:	f013 0f04 	tst.w	r3, #4
    b77c:	4b0f      	ldr	r3, [pc, #60]	; (b7bc <nrfx_twim_xfer+0x2f4>)
    b77e:	bf18      	it	ne
    b780:	461e      	movne	r6, r3
    b782:	e6b9      	b.n	b4f8 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    b784:	067b      	lsls	r3, r7, #25
    b786:	f53f aeb7 	bmi.w	b4f8 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    b78a:	4620      	mov	r0, r4
    b78c:	fb0e c101 	mla	r1, lr, r1, ip
    b790:	f007 fea0 	bl	134d4 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    b794:	4b08      	ldr	r3, [pc, #32]	; (b7b8 <nrfx_twim_xfer+0x2f0>)
    b796:	2800      	cmp	r0, #0
    b798:	bf08      	it	eq
    b79a:	461e      	moveq	r6, r3
    b79c:	e6ac      	b.n	b4f8 <nrfx_twim_xfer+0x30>
    b79e:	bf00      	nop
    b7a0:	0bad000a 	.word	0x0bad000a
    b7a4:	019c0202 	.word	0x019c0202
    b7a8:	0bad000b 	.word	0x0bad000b
    b7ac:	0bad0000 	.word	0x0bad0000
    b7b0:	0bad0004 	.word	0x0bad0004
    b7b4:	0bae0000 	.word	0x0bae0000
    b7b8:	0bad0001 	.word	0x0bad0001
    b7bc:	0bae0002 	.word	0x0bae0002
    b7c0:	2000364c 	.word	0x2000364c

0000b7c4 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7c6:	4d5b      	ldr	r5, [pc, #364]	; (b934 <nrfx_twim_1_irq_handler+0x170>)
    b7c8:	4c5b      	ldr	r4, [pc, #364]	; (b938 <nrfx_twim_1_irq_handler+0x174>)
    b7ca:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    b7ce:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    b7d0:	b1fb      	cbz	r3, b812 <nrfx_twim_1_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b7d2:	2300      	movs	r3, #0
    b7d4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    b7d8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7dc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    b7e0:	b9bb      	cbnz	r3, b812 <nrfx_twim_1_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    b7e2:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    b7e4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    b7e8:	2302      	movs	r3, #2
    b7ea:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    b7ec:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    b7ee:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7f2:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    b7f6:	b11b      	cbz	r3, b800 <nrfx_twim_1_irq_handler+0x3c>
    return p_reg->SHORTS;
    b7f8:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    b7fc:	059e      	lsls	r6, r3, #22
    b7fe:	d403      	bmi.n	b808 <nrfx_twim_1_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b800:	2201      	movs	r2, #1
    b802:	4b4c      	ldr	r3, [pc, #304]	; (b934 <nrfx_twim_1_irq_handler+0x170>)
    b804:	621a      	str	r2, [r3, #32]
    b806:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    b808:	2301      	movs	r3, #1
    b80a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
}
    b80e:	b007      	add	sp, #28
    b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b812:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    b816:	2b00      	cmp	r3, #0
    b818:	d054      	beq.n	b8c4 <nrfx_twim_1_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b81a:	2300      	movs	r3, #0
    b81c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    b820:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    b824:	6a23      	ldr	r3, [r4, #32]
    b826:	065d      	lsls	r5, r3, #25
    b828:	d40a      	bmi.n	b840 <nrfx_twim_1_irq_handler+0x7c>
    b82a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    b82e:	b93b      	cbnz	r3, b840 <nrfx_twim_1_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    b830:	4941      	ldr	r1, [pc, #260]	; (b938 <nrfx_twim_1_irq_handler+0x174>)
    b832:	4840      	ldr	r0, [pc, #256]	; (b934 <nrfx_twim_1_irq_handler+0x170>)
    b834:	f007 fe4e 	bl	134d4 <xfer_completeness_check>
    b838:	f080 0001 	eor.w	r0, r0, #1
    b83c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    b840:	6a23      	ldr	r3, [r4, #32]
    b842:	f013 0704 	ands.w	r7, r3, #4
    b846:	d122      	bne.n	b88e <nrfx_twim_1_irq_handler+0xca>
            event.xfer_desc = p_cb->xfer_desc;
    b848:	4e3c      	ldr	r6, [pc, #240]	; (b93c <nrfx_twim_1_irq_handler+0x178>)
    b84a:	ad01      	add	r5, sp, #4
    b84c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b84e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b850:	6833      	ldr	r3, [r6, #0]
            if (!p_cb->repeated || p_cb->error)
    b852:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    b856:	602b      	str	r3, [r5, #0]
    b858:	4b36      	ldr	r3, [pc, #216]	; (b934 <nrfx_twim_1_irq_handler+0x170>)
    b85a:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    b85e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    b862:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    b866:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    b86a:	f1bc 0f00 	cmp.w	ip, #0
    b86e:	d002      	beq.n	b876 <nrfx_twim_1_irq_handler+0xb2>
    b870:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    b874:	b15a      	cbz	r2, b88e <nrfx_twim_1_irq_handler+0xca>
    p_reg->SHORTS = mask;
    b876:	2200      	movs	r2, #0
    b878:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    b87c:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    b87e:	4a30      	ldr	r2, [pc, #192]	; (b940 <nrfx_twim_1_irq_handler+0x17c>)
    b880:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b884:	f44f 7200 	mov.w	r2, #512	; 0x200
    b888:	4b2e      	ldr	r3, [pc, #184]	; (b944 <nrfx_twim_1_irq_handler+0x180>)
    b88a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    b88e:	4a29      	ldr	r2, [pc, #164]	; (b934 <nrfx_twim_1_irq_handler+0x170>)
    b890:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    b894:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    b896:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    b89a:	d53c      	bpl.n	b916 <nrfx_twim_1_irq_handler+0x152>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    b89c:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    b89e:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    b8a2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    b8a6:	b90b      	cbnz	r3, b8ac <nrfx_twim_1_irq_handler+0xe8>
        p_cb->busy = false;
    b8a8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    b8ac:	6a23      	ldr	r3, [r4, #32]
    b8ae:	075b      	lsls	r3, r3, #29
    b8b0:	d503      	bpl.n	b8ba <nrfx_twim_1_irq_handler+0xf6>
    b8b2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d0a9      	beq.n	b80e <nrfx_twim_1_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    b8ba:	e9d4 3100 	ldrd	r3, r1, [r4]
    b8be:	4668      	mov	r0, sp
    b8c0:	4798      	blx	r3
}
    b8c2:	e7a4      	b.n	b80e <nrfx_twim_1_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b8c4:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    b8c8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    b8cc:	7b23      	ldrb	r3, [r4, #12]
    b8ce:	b983      	cbnz	r3, b8f2 <nrfx_twim_1_irq_handler+0x12e>
            event.xfer_desc = p_cb->xfer_desc;
    b8d0:	4f1a      	ldr	r7, [pc, #104]	; (b93c <nrfx_twim_1_irq_handler+0x178>)
    b8d2:	ae01      	add	r6, sp, #4
    b8d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    b8d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    b8d8:	683b      	ldr	r3, [r7, #0]
    b8da:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    b8dc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    b8e0:	2b00      	cmp	r3, #0
    b8e2:	d1d4      	bne.n	b88e <nrfx_twim_1_irq_handler+0xca>
    p_reg->SHORTS = mask;
    b8e4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    b8e8:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    b8ea:	4b15      	ldr	r3, [pc, #84]	; (b940 <nrfx_twim_1_irq_handler+0x17c>)
    b8ec:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    b8f0:	e7c8      	b.n	b884 <nrfx_twim_1_irq_handler+0xc0>
    p_reg->SHORTS = mask;
    b8f2:	f44f 7300 	mov.w	r3, #512	; 0x200
    b8f6:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    b8fa:	f240 2302 	movw	r3, #514	; 0x202
    b8fe:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    b900:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    b904:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    b908:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    b90a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b90e:	2301      	movs	r3, #1
    b910:	60ab      	str	r3, [r5, #8]
    b912:	622b      	str	r3, [r5, #32]
            return;
    b914:	e77b      	b.n	b80e <nrfx_twim_1_irq_handler+0x4a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    b916:	0759      	lsls	r1, r3, #29
    b918:	d501      	bpl.n	b91e <nrfx_twim_1_irq_handler+0x15a>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    b91a:	2302      	movs	r3, #2
    b91c:	e7bf      	b.n	b89e <nrfx_twim_1_irq_handler+0xda>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    b91e:	07da      	lsls	r2, r3, #31
    b920:	d501      	bpl.n	b926 <nrfx_twim_1_irq_handler+0x162>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    b922:	2303      	movs	r3, #3
    b924:	e7bb      	b.n	b89e <nrfx_twim_1_irq_handler+0xda>
    else if (p_cb->error)
    b926:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    b92a:	2b00      	cmp	r3, #0
    b92c:	d0b7      	beq.n	b89e <nrfx_twim_1_irq_handler+0xda>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    b92e:	2304      	movs	r3, #4
    b930:	e7b5      	b.n	b89e <nrfx_twim_1_irq_handler+0xda>
    b932:	bf00      	nop
    b934:	50009000 	.word	0x50009000
    b938:	2000364c 	.word	0x2000364c
    b93c:	20003658 	.word	0x20003658
    b940:	019c0202 	.word	0x019c0202
    b944:	e000e100 	.word	0xe000e100

0000b948 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    b948:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    b94a:	f003 021f 	and.w	r2, r3, #31
    b94e:	6002      	str	r2, [r0, #0]
}
    b950:	4a03      	ldr	r2, [pc, #12]	; (b960 <nrf_gpio_pin_port_decode+0x18>)
    b952:	4804      	ldr	r0, [pc, #16]	; (b964 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    b954:	095b      	lsrs	r3, r3, #5
}
    b956:	2b01      	cmp	r3, #1
    b958:	bf08      	it	eq
    b95a:	4610      	moveq	r0, r2
    b95c:	4770      	bx	lr
    b95e:	bf00      	nop
    b960:	50842800 	.word	0x50842800
    b964:	50842500 	.word	0x50842500

0000b968 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    b968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b96a:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    b96c:	f007 fde2 	bl	13534 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    b970:	4608      	mov	r0, r1
    b972:	f007 fddf 	bl	13534 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b976:	a801      	add	r0, sp, #4
    b978:	9601      	str	r6, [sp, #4]
    b97a:	f7ff ffe5 	bl	b948 <nrf_gpio_pin_port_decode>
{
    b97e:	460c      	mov	r4, r1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b980:	f240 610d 	movw	r1, #1549	; 0x60d
    b984:	9b01      	ldr	r3, [sp, #4]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    b986:	2509      	movs	r5, #9
    b988:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b98c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b990:	2701      	movs	r7, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b992:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b996:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    b998:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b99c:	a801      	add	r0, sp, #4
    b99e:	9401      	str	r4, [sp, #4]
    b9a0:	f7ff ffd2 	bl	b948 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b9a4:	9b01      	ldr	r3, [sp, #4]
    b9a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    b9aa:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    b9ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b9b2:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    b9b4:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    b9b8:	2004      	movs	r0, #4
    b9ba:	f007 fc2e 	bl	1321a <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b9be:	a801      	add	r0, sp, #4
    b9c0:	9401      	str	r4, [sp, #4]
    b9c2:	f7ff ffc1 	bl	b948 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b9c6:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    b9c8:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b9ca:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    b9cc:	07db      	lsls	r3, r3, #31
    b9ce:	d414      	bmi.n	b9fa <nrfx_twi_twim_bus_recover+0x92>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b9d0:	a801      	add	r0, sp, #4
    b9d2:	9601      	str	r6, [sp, #4]
    b9d4:	f7ff ffb8 	bl	b948 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b9d8:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
    b9da:	3d01      	subs	r5, #1
    b9dc:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    b9e0:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    b9e2:	2004      	movs	r0, #4
    b9e4:	f007 fc19 	bl	1321a <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    b9e8:	4630      	mov	r0, r6
    b9ea:	f007 fda3 	bl	13534 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
    b9ee:	2004      	movs	r0, #4
    b9f0:	f007 fc13 	bl	1321a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    b9f4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    b9f8:	d1e1      	bne.n	b9be <nrfx_twi_twim_bus_recover+0x56>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b9fa:	a801      	add	r0, sp, #4
    b9fc:	9401      	str	r4, [sp, #4]
    b9fe:	f7ff ffa3 	bl	b948 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ba02:	2301      	movs	r3, #1
    ba04:	9a01      	ldr	r2, [sp, #4]
    ba06:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    ba08:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    ba0a:	2004      	movs	r0, #4
    ba0c:	f007 fc05 	bl	1321a <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    ba10:	4620      	mov	r0, r4
    ba12:	f007 fd8f 	bl	13534 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    ba16:	2004      	movs	r0, #4
    ba18:	f007 fbff 	bl	1321a <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ba1c:	a801      	add	r0, sp, #4
    ba1e:	9401      	str	r4, [sp, #4]
    ba20:	f7ff ff92 	bl	b948 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ba24:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    ba26:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    ba28:	4803      	ldr	r0, [pc, #12]	; (ba38 <nrfx_twi_twim_bus_recover+0xd0>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ba2a:	40d3      	lsrs	r3, r2
    ba2c:	f003 0301 	and.w	r3, r3, #1
    ba30:	1ac0      	subs	r0, r0, r3
    ba32:	b003      	add	sp, #12
    ba34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba36:	bf00      	nop
    ba38:	0bad0001 	.word	0x0bad0001

0000ba3c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ba3c:	4b0e      	ldr	r3, [pc, #56]	; (ba78 <z_sys_init_run_level+0x3c>)
{
    ba3e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ba40:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ba44:	3001      	adds	r0, #1
    ba46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    ba4a:	42a6      	cmp	r6, r4
    ba4c:	d800      	bhi.n	ba50 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    ba4e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    ba50:	e9d4 3500 	ldrd	r3, r5, [r4]
    ba54:	4628      	mov	r0, r5
    ba56:	4798      	blx	r3
		if (dev != NULL) {
    ba58:	b165      	cbz	r5, ba74 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    ba5a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    ba5c:	b130      	cbz	r0, ba6c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    ba5e:	2800      	cmp	r0, #0
    ba60:	bfb8      	it	lt
    ba62:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    ba64:	28ff      	cmp	r0, #255	; 0xff
    ba66:	bfa8      	it	ge
    ba68:	20ff      	movge	r0, #255	; 0xff
    ba6a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    ba6c:	785a      	ldrb	r2, [r3, #1]
    ba6e:	f042 0201 	orr.w	r2, r2, #1
    ba72:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ba74:	3408      	adds	r4, #8
    ba76:	e7e8      	b.n	ba4a <z_sys_init_run_level+0xe>
    ba78:	00016b5c 	.word	0x00016b5c

0000ba7c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    ba7c:	4b01      	ldr	r3, [pc, #4]	; (ba84 <z_impl_z_errno+0x8>)
    ba7e:	6898      	ldr	r0, [r3, #8]
}
    ba80:	3060      	adds	r0, #96	; 0x60
    ba82:	4770      	bx	lr
    ba84:	20003680 	.word	0x20003680

0000ba88 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    ba88:	2201      	movs	r2, #1
{
    ba8a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    ba8c:	4b0a      	ldr	r3, [pc, #40]	; (bab8 <bg_thread_main+0x30>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ba8e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    ba90:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ba92:	f7ff ffd3 	bl	ba3c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    ba96:	f000 ff7d 	bl	c994 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    ba9a:	f006 fd22 	bl	124e2 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ba9e:	2003      	movs	r0, #3
    baa0:	f7ff ffcc 	bl	ba3c <z_sys_init_run_level>

	z_init_static_threads();
    baa4:	f000 f962 	bl	bd6c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    baa8:	f7fa ffa2 	bl	69f0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    baac:	4a03      	ldr	r2, [pc, #12]	; (babc <bg_thread_main+0x34>)
    baae:	7b13      	ldrb	r3, [r2, #12]
    bab0:	f023 0301 	bic.w	r3, r3, #1
    bab4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    bab6:	bd08      	pop	{r3, pc}
    bab8:	20003d65 	.word	0x20003d65
    babc:	200007b8 	.word	0x200007b8

0000bac0 <z_bss_zero>:
{
    bac0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    bac2:	4803      	ldr	r0, [pc, #12]	; (bad0 <z_bss_zero+0x10>)
    bac4:	4a03      	ldr	r2, [pc, #12]	; (bad4 <z_bss_zero+0x14>)
    bac6:	2100      	movs	r1, #0
    bac8:	1a12      	subs	r2, r2, r0
    baca:	f007 fd66 	bl	1359a <z_early_memset>
}
    bace:	bd08      	pop	{r3, pc}
    bad0:	200005c0 	.word	0x200005c0
    bad4:	2000416c 	.word	0x2000416c

0000bad8 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    bad8:	23c0      	movs	r3, #192	; 0xc0
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    bada:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    badc:	4e13      	ldr	r6, [pc, #76]	; (bb2c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    bade:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    bae0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    bae4:	2300      	movs	r3, #0
{
    bae6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    bae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    baec:	220f      	movs	r2, #15
    baee:	9301      	str	r3, [sp, #4]
    baf0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    baf4:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    baf6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    bafa:	4d0d      	ldr	r5, [pc, #52]	; (bb30 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    bafc:	490d      	ldr	r1, [pc, #52]	; (bb34 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    bafe:	fb03 5500 	mla	r5, r3, r0, r5
{
    bb02:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    bb04:	fb02 1100 	mla	r1, r2, r0, r1
    bb08:	4b0b      	ldr	r3, [pc, #44]	; (bb38 <z_init_cpu+0x60>)
    bb0a:	4630      	mov	r0, r6
    bb0c:	9500      	str	r5, [sp, #0]
    bb0e:	f000 f8d1 	bl	bcb4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bb12:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    bb14:	4809      	ldr	r0, [pc, #36]	; (bb3c <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    bb16:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    bb18:	3401      	adds	r4, #1
    bb1a:	f023 0304 	bic.w	r3, r3, #4
    bb1e:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    bb22:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    bb24:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    bb26:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    bb28:	b006      	add	sp, #24
    bb2a:	bd70      	pop	{r4, r5, r6, pc}
    bb2c:	200006f8 	.word	0x200006f8
    bb30:	20003680 	.word	0x20003680
    bb34:	20005570 	.word	0x20005570
    bb38:	0000be25 	.word	0x0000be25
    bb3c:	200056b0 	.word	0x200056b0

0000bb40 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    bb40:	b500      	push	{lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    bb42:	4b2d      	ldr	r3, [pc, #180]	; (bbf8 <z_cstart+0xb8>)
    bb44:	b0b9      	sub	sp, #228	; 0xe4
	uint32_t msp =
    bb46:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    bb4a:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    bb4e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb52:	2400      	movs	r4, #0
    bb54:	23e0      	movs	r3, #224	; 0xe0
    bb56:	4d29      	ldr	r5, [pc, #164]	; (bbfc <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    bb58:	4e29      	ldr	r6, [pc, #164]	; (bc00 <z_cstart+0xc0>)
    bb5a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    bb5e:	77ec      	strb	r4, [r5, #31]
    bb60:	762c      	strb	r4, [r5, #24]
    bb62:	766c      	strb	r4, [r5, #25]
    bb64:	76ac      	strb	r4, [r5, #26]
    bb66:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    bb6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bb6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    bb70:	626b      	str	r3, [r5, #36]	; 0x24
    bb72:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    bb76:	f7fb fe67 	bl	7848 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    bb7a:	f7fb fc11 	bl	73a0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    bb7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb82:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    bb84:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    bb86:	f7fc f86f 	bl	7c68 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    bb8a:	f7fb ff0d 	bl	79a8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    bb8e:	f240 1301 	movw	r3, #257	; 0x101
    bb92:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    bb96:	ab08      	add	r3, sp, #32
    bb98:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    bb9a:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	dummy_thread->resource_pool = NULL;
    bb9e:	9424      	str	r4, [sp, #144]	; 0x90
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    bba0:	f007 fcd4 	bl	1354c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    bba4:	4620      	mov	r0, r4
    bba6:	f7ff ff49 	bl	ba3c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    bbaa:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    bbac:	4d15      	ldr	r5, [pc, #84]	; (bc04 <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    bbae:	f7ff ff45 	bl	ba3c <z_sys_init_run_level>
	z_sched_init();
    bbb2:	f000 fc99 	bl	c4e8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    bbb6:	4b14      	ldr	r3, [pc, #80]	; (bc08 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
    bbb8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    bbba:	9305      	str	r3, [sp, #20]
    bbbc:	2301      	movs	r3, #1
    bbbe:	4e13      	ldr	r6, [pc, #76]	; (bc0c <z_cstart+0xcc>)
    bbc0:	4913      	ldr	r1, [pc, #76]	; (bc10 <z_cstart+0xd0>)
    bbc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bbc6:	e9cd 4303 	strd	r4, r3, [sp, #12]
    bbca:	4628      	mov	r0, r5
    bbcc:	4633      	mov	r3, r6
    bbce:	e9cd 4401 	strd	r4, r4, [sp, #4]
    bbd2:	9400      	str	r4, [sp, #0]
    bbd4:	f000 f86e 	bl	bcb4 <z_setup_new_thread>
    bbd8:	7b6a      	ldrb	r2, [r5, #13]
    bbda:	9007      	str	r0, [sp, #28]
    bbdc:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    bbe0:	4628      	mov	r0, r5
    bbe2:	736a      	strb	r2, [r5, #13]
    bbe4:	f007 fd6f 	bl	136c6 <z_ready_thread>
	z_init_cpu(0);
    bbe8:	4620      	mov	r0, r4
    bbea:	f7ff ff75 	bl	bad8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    bbee:	4632      	mov	r2, r6
    bbf0:	4628      	mov	r0, r5
    bbf2:	9907      	ldr	r1, [sp, #28]
    bbf4:	f7fb fd00 	bl	75f8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    bbf8:	200056b0 	.word	0x200056b0
    bbfc:	e000ed00 	.word	0xe000ed00
    bc00:	20003680 	.word	0x20003680
    bc04:	200007b8 	.word	0x200007b8
    bc08:	00017e5f 	.word	0x00017e5f
    bc0c:	0000ba89 	.word	0x0000ba89
    bc10:	20005170 	.word	0x20005170

0000bc14 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    bc14:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    bc16:	4b0e      	ldr	r3, [pc, #56]	; (bc50 <init_mem_slab_module+0x3c>)
    bc18:	4c0e      	ldr	r4, [pc, #56]	; (bc54 <init_mem_slab_module+0x40>)
    bc1a:	42a3      	cmp	r3, r4
    bc1c:	d301      	bcc.n	bc22 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    bc1e:	2000      	movs	r0, #0
	return rc;
}
    bc20:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bc22:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    bc26:	ea41 0200 	orr.w	r2, r1, r0
    bc2a:	f012 0203 	ands.w	r2, r2, #3
    bc2e:	d10b      	bne.n	bc48 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    bc30:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
    bc32:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bc34:	42aa      	cmp	r2, r5
    bc36:	d101      	bne.n	bc3c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    bc38:	3320      	adds	r3, #32
    bc3a:	e7ee      	b.n	bc1a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    bc3c:	699e      	ldr	r6, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bc3e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    bc40:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    bc42:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
    bc44:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    bc46:	e7f5      	b.n	bc34 <init_mem_slab_module+0x20>
	return rc;
    bc48:	f06f 0015 	mvn.w	r0, #21
    bc4c:	e7e8      	b.n	bc20 <init_mem_slab_module+0xc>
    bc4e:	bf00      	nop
    bc50:	20000520 	.word	0x20000520
    bc54:	20000520 	.word	0x20000520

0000bc58 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    bc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bc5a:	460c      	mov	r4, r1
	__asm__ volatile(
    bc5c:	f04f 0520 	mov.w	r5, #32
    bc60:	f3ef 8111 	mrs	r1, BASEPRI
    bc64:	f385 8812 	msr	BASEPRI_MAX, r5
    bc68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    bc6c:	6985      	ldr	r5, [r0, #24]
    bc6e:	b15d      	cbz	r5, bc88 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    bc70:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    bc72:	682b      	ldr	r3, [r5, #0]
    bc74:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    bc76:	69c3      	ldr	r3, [r0, #28]
    bc78:	3301      	adds	r3, #1
    bc7a:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    bc7c:	2000      	movs	r0, #0
	__asm__ volatile(
    bc7e:	f381 8811 	msr	BASEPRI, r1
    bc82:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    bc86:	e011      	b.n	bcac <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    bc88:	ea52 0c03 	orrs.w	ip, r2, r3
    bc8c:	d103      	bne.n	bc96 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    bc8e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    bc92:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    bc94:	e7f3      	b.n	bc7e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    bc96:	e9cd 2300 	strd	r2, r3, [sp]
    bc9a:	4602      	mov	r2, r0
    bc9c:	3008      	adds	r0, #8
    bc9e:	f000 fb79 	bl	c394 <z_pend_curr>
		if (result == 0) {
    bca2:	b918      	cbnz	r0, bcac <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    bca4:	4b02      	ldr	r3, [pc, #8]	; (bcb0 <k_mem_slab_alloc+0x58>)
    bca6:	689b      	ldr	r3, [r3, #8]
    bca8:	695b      	ldr	r3, [r3, #20]
    bcaa:	6023      	str	r3, [r4, #0]
}
    bcac:	b003      	add	sp, #12
    bcae:	bd30      	pop	{r4, r5, pc}
    bcb0:	20003680 	.word	0x20003680

0000bcb4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    bcb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    bcb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    bcba:	f100 0558 	add.w	r5, r0, #88	; 0x58
    bcbe:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bcc0:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    bcc2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    bcc6:	2500      	movs	r5, #0
{
    bcc8:	4604      	mov	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bcca:	3207      	adds	r2, #7
    bccc:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
    bcd0:	e9c0 1219 	strd	r1, r2, [r0, #100]	; 0x64
	thread_base->thread_state = (uint8_t)initial_state;
    bcd4:	7346      	strb	r6, [r0, #13]
	stack_ptr = (char *)stack + stack_obj_size;
    bcd6:	eb01 0802 	add.w	r8, r1, r2

	thread_base->prio = priority;
    bcda:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    bcdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    bcde:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
    bce2:	6085      	str	r5, [r0, #8]
	thread_base->prio = priority;
    bce4:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
    bce6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    bce8:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    bcea:	9202      	str	r2, [sp, #8]
    bcec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bcee:	9201      	str	r2, [sp, #4]
    bcf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bcf2:	9200      	str	r2, [sp, #0]
    bcf4:	4642      	mov	r2, r8
    bcf6:	f7fb fc5f 	bl	75b8 <arch_new_thread>
	if (!_current) {
    bcfa:	4b05      	ldr	r3, [pc, #20]	; (bd10 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    bcfc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    bcfe:	689b      	ldr	r3, [r3, #8]
    bd00:	b103      	cbz	r3, bd04 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    bd02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    bd04:	4640      	mov	r0, r8
    bd06:	6723      	str	r3, [r4, #112]	; 0x70
    bd08:	b004      	add	sp, #16
    bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd0e:	bf00      	nop
    bd10:	20003680 	.word	0x20003680

0000bd14 <z_impl_k_thread_create>:
{
    bd14:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bd16:	2700      	movs	r7, #0
{
    bd18:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bd1a:	9705      	str	r7, [sp, #20]
    bd1c:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
    bd1e:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bd22:	9704      	str	r7, [sp, #16]
    bd24:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
    bd26:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bd28:	9703      	str	r7, [sp, #12]
    bd2a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    bd2c:	9702      	str	r7, [sp, #8]
    bd2e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    bd30:	9701      	str	r7, [sp, #4]
    bd32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    bd34:	9700      	str	r7, [sp, #0]
    bd36:	f7ff ffbd 	bl	bcb4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    bd3a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    bd3e:	bf08      	it	eq
    bd40:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    bd44:	d005      	beq.n	bd52 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bd46:	ea55 0306 	orrs.w	r3, r5, r6
    bd4a:	d105      	bne.n	bd58 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    bd4c:	4620      	mov	r0, r4
    bd4e:	f000 fac5 	bl	c2dc <z_sched_start>
}
    bd52:	4620      	mov	r0, r4
    bd54:	b007      	add	sp, #28
    bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bd58:	4632      	mov	r2, r6
    bd5a:	462b      	mov	r3, r5
    bd5c:	4902      	ldr	r1, [pc, #8]	; (bd68 <z_impl_k_thread_create+0x54>)
    bd5e:	f104 0018 	add.w	r0, r4, #24
    bd62:	f000 fd2b 	bl	c7bc <z_add_timeout>
    bd66:	e7f4      	b.n	bd52 <z_impl_k_thread_create+0x3e>
    bd68:	000136e7 	.word	0x000136e7

0000bd6c <z_init_static_threads>:
{
    bd6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd70:	4c29      	ldr	r4, [pc, #164]	; (be18 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    bd72:	4d2a      	ldr	r5, [pc, #168]	; (be1c <z_init_static_threads+0xb0>)
{
    bd74:	b087      	sub	sp, #28
    bd76:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    bd78:	42ae      	cmp	r6, r5
    bd7a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    bd7e:	d30f      	bcc.n	bda0 <z_init_static_threads+0x34>
	k_sched_lock();
    bd80:	f000 f9c6 	bl	c110 <k_sched_lock>
    bd84:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    bd88:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    bd8c:	4c22      	ldr	r4, [pc, #136]	; (be18 <z_init_static_threads+0xac>)
    bd8e:	f8df 9090 	ldr.w	r9, [pc, #144]	; be20 <z_init_static_threads+0xb4>
    bd92:	42ac      	cmp	r4, r5
    bd94:	d320      	bcc.n	bdd8 <z_init_static_threads+0x6c>
}
    bd96:	b007      	add	sp, #28
    bd98:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    bd9c:	f000 bb88 	b.w	c4b0 <k_sched_unlock>
		z_setup_new_thread(
    bda0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    bda4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    bda8:	9305      	str	r3, [sp, #20]
    bdaa:	f854 3c10 	ldr.w	r3, [r4, #-16]
    bdae:	9304      	str	r3, [sp, #16]
    bdb0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    bdb4:	9303      	str	r3, [sp, #12]
    bdb6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    bdba:	9302      	str	r3, [sp, #8]
    bdbc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    bdc0:	9301      	str	r3, [sp, #4]
    bdc2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    bdc6:	9300      	str	r3, [sp, #0]
    bdc8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    bdcc:	f7ff ff72 	bl	bcb4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    bdd0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    bdd4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    bdd6:	e7ce      	b.n	bd76 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    bdd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bdda:	1c5a      	adds	r2, r3, #1
    bddc:	d00d      	beq.n	bdfa <z_init_static_threads+0x8e>
    bdde:	2100      	movs	r1, #0
    bde0:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    bde2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    bde6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bdea:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    bdee:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bdf2:	d104      	bne.n	bdfe <z_init_static_threads+0x92>
	z_sched_start(thread);
    bdf4:	4640      	mov	r0, r8
    bdf6:	f000 fa71 	bl	c2dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    bdfa:	3430      	adds	r4, #48	; 0x30
    bdfc:	e7c9      	b.n	bd92 <z_init_static_threads+0x26>
    bdfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    be02:	2300      	movs	r3, #0
    be04:	f7f4 fe9e 	bl	b44 <__aeabi_uldivmod>
    be08:	4602      	mov	r2, r0
    be0a:	460b      	mov	r3, r1
    be0c:	f108 0018 	add.w	r0, r8, #24
    be10:	4649      	mov	r1, r9
    be12:	f000 fcd3 	bl	c7bc <z_add_timeout>
    be16:	e7f0      	b.n	bdfa <z_init_static_threads+0x8e>
    be18:	20000520 	.word	0x20000520
    be1c:	20000520 	.word	0x20000520
    be20:	000136e7 	.word	0x000136e7

0000be24 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    be24:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    be26:	4c0b      	ldr	r4, [pc, #44]	; (be54 <idle+0x30>)
	return !z_sys_post_kernel;
    be28:	4d0b      	ldr	r5, [pc, #44]	; (be58 <idle+0x34>)
	__asm__ volatile(
    be2a:	f04f 0220 	mov.w	r2, #32
    be2e:	f3ef 8311 	mrs	r3, BASEPRI
    be32:	f382 8812 	msr	BASEPRI_MAX, r2
    be36:	f3bf 8f6f 	isb	sy
    be3a:	f007 fcce 	bl	137da <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    be3e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    be40:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    be42:	b913      	cbnz	r3, be4a <idle+0x26>
	arch_cpu_idle();
    be44:	f7fb fab2 	bl	73ac <arch_cpu_idle>
}
    be48:	e7ef      	b.n	be2a <idle+0x6>
    be4a:	f7fb f8fb 	bl	7044 <pm_system_suspend>
    be4e:	2800      	cmp	r0, #0
    be50:	d1eb      	bne.n	be2a <idle+0x6>
    be52:	e7f7      	b.n	be44 <idle+0x20>
    be54:	20003680 	.word	0x20003680
    be58:	20003d65 	.word	0x20003d65

0000be5c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    be5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    be60:	4604      	mov	r4, r0
    be62:	4617      	mov	r7, r2
    be64:	461e      	mov	r6, r3
    be66:	f04f 0320 	mov.w	r3, #32
    be6a:	f3ef 8811 	mrs	r8, BASEPRI
    be6e:	f383 8812 	msr	BASEPRI_MAX, r3
    be72:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    be76:	68c3      	ldr	r3, [r0, #12]
    be78:	4a32      	ldr	r2, [pc, #200]	; (bf44 <z_impl_k_mutex_lock+0xe8>)
    be7a:	b16b      	cbz	r3, be98 <z_impl_k_mutex_lock+0x3c>
    be7c:	6880      	ldr	r0, [r0, #8]
    be7e:	6891      	ldr	r1, [r2, #8]
    be80:	4288      	cmp	r0, r1
    be82:	d019      	beq.n	beb8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    be84:	ea57 0306 	orrs.w	r3, r7, r6
    be88:	d118      	bne.n	bebc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    be8a:	f388 8811 	msr	BASEPRI, r8
    be8e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    be92:	f06f 000f 	mvn.w	r0, #15
    be96:	e00c      	b.n	beb2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    be98:	6891      	ldr	r1, [r2, #8]
    be9a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    be9e:	3301      	adds	r3, #1
    bea0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    bea2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    bea4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    bea6:	60a3      	str	r3, [r4, #8]
    bea8:	f388 8811 	msr	BASEPRI, r8
    beac:	f3bf 8f6f 	isb	sy
		return 0;
    beb0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    beb2:	b002      	add	sp, #8
    beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    beb8:	6921      	ldr	r1, [r4, #16]
    beba:	e7f0      	b.n	be9e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    bebc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    bec0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    bec4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    bec8:	4299      	cmp	r1, r3
    beca:	bfa8      	it	ge
    becc:	4619      	movge	r1, r3
    bece:	4291      	cmp	r1, r2
    bed0:	bfb8      	it	lt
    bed2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    bed4:	428b      	cmp	r3, r1
    bed6:	dd2e      	ble.n	bf36 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    bed8:	f007 fbb8 	bl	1364c <adjust_owner_prio.isra.0>
    bedc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    bede:	4622      	mov	r2, r4
    bee0:	4641      	mov	r1, r8
    bee2:	e9cd 7600 	strd	r7, r6, [sp]
    bee6:	4818      	ldr	r0, [pc, #96]	; (bf48 <z_impl_k_mutex_lock+0xec>)
    bee8:	f000 fa54 	bl	c394 <z_pend_curr>
	if (got_mutex == 0) {
    beec:	2800      	cmp	r0, #0
    beee:	d0e0      	beq.n	beb2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    bef0:	f04f 0320 	mov.w	r3, #32
    bef4:	f3ef 8611 	mrs	r6, BASEPRI
    bef8:	f383 8812 	msr	BASEPRI_MAX, r3
    befc:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    bf00:	6823      	ldr	r3, [r4, #0]
    bf02:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bf04:	429c      	cmp	r4, r3
    bf06:	d00a      	beq.n	bf1e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    bf08:	b14b      	cbz	r3, bf1e <z_impl_k_mutex_lock+0xc2>
    bf0a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    bf0e:	4299      	cmp	r1, r3
    bf10:	bfa8      	it	ge
    bf12:	4619      	movge	r1, r3
    bf14:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    bf18:	4299      	cmp	r1, r3
    bf1a:	bfb8      	it	lt
    bf1c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    bf1e:	68a0      	ldr	r0, [r4, #8]
    bf20:	f007 fb94 	bl	1364c <adjust_owner_prio.isra.0>
    bf24:	b900      	cbnz	r0, bf28 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    bf26:	b145      	cbz	r5, bf3a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    bf28:	4631      	mov	r1, r6
    bf2a:	4807      	ldr	r0, [pc, #28]	; (bf48 <z_impl_k_mutex_lock+0xec>)
    bf2c:	f000 f8de 	bl	c0ec <z_reschedule>
	return -EAGAIN;
    bf30:	f06f 000a 	mvn.w	r0, #10
    bf34:	e7bd      	b.n	beb2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    bf36:	2500      	movs	r5, #0
    bf38:	e7d1      	b.n	bede <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    bf3a:	f386 8811 	msr	BASEPRI, r6
    bf3e:	f3bf 8f6f 	isb	sy
    bf42:	e7f5      	b.n	bf30 <z_impl_k_mutex_lock+0xd4>
    bf44:	20003680 	.word	0x20003680
    bf48:	20003d66 	.word	0x20003d66

0000bf4c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    bf4c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    bf4e:	6883      	ldr	r3, [r0, #8]
{
    bf50:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    bf52:	2b00      	cmp	r3, #0
    bf54:	d032      	beq.n	bfbc <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    bf56:	4a1c      	ldr	r2, [pc, #112]	; (bfc8 <z_impl_k_mutex_unlock+0x7c>)
    bf58:	6892      	ldr	r2, [r2, #8]
    bf5a:	4293      	cmp	r3, r2
    bf5c:	d131      	bne.n	bfc2 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    bf5e:	7bda      	ldrb	r2, [r3, #15]
    bf60:	3a01      	subs	r2, #1
    bf62:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    bf64:	68c3      	ldr	r3, [r0, #12]
    bf66:	2b01      	cmp	r3, #1
    bf68:	d905      	bls.n	bf76 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    bf6a:	3b01      	subs	r3, #1
    bf6c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    bf6e:	f000 fa9f 	bl	c4b0 <k_sched_unlock>

	return 0;
    bf72:	2000      	movs	r0, #0
}
    bf74:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    bf76:	f04f 0320 	mov.w	r3, #32
    bf7a:	f3ef 8511 	mrs	r5, BASEPRI
    bf7e:	f383 8812 	msr	BASEPRI_MAX, r3
    bf82:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    bf86:	6901      	ldr	r1, [r0, #16]
    bf88:	6880      	ldr	r0, [r0, #8]
    bf8a:	f007 fb5f 	bl	1364c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    bf8e:	4620      	mov	r0, r4
    bf90:	f007 fbf5 	bl	1377e <z_unpend_first_thread>
	mutex->owner = new_owner;
    bf94:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    bf96:	b158      	cbz	r0, bfb0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    bf98:	f990 200e 	ldrsb.w	r2, [r0, #14]
    bf9c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    bf9e:	2200      	movs	r2, #0
    bfa0:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    bfa2:	f007 fb90 	bl	136c6 <z_ready_thread>
		z_reschedule(&lock, key);
    bfa6:	4629      	mov	r1, r5
    bfa8:	4808      	ldr	r0, [pc, #32]	; (bfcc <z_impl_k_mutex_unlock+0x80>)
    bfaa:	f000 f89f 	bl	c0ec <z_reschedule>
    bfae:	e7de      	b.n	bf6e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    bfb0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    bfb2:	f385 8811 	msr	BASEPRI, r5
    bfb6:	f3bf 8f6f 	isb	sy
    bfba:	e7d8      	b.n	bf6e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    bfbc:	f06f 0015 	mvn.w	r0, #21
    bfc0:	e7d8      	b.n	bf74 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    bfc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bfc6:	e7d5      	b.n	bf74 <z_impl_k_mutex_unlock+0x28>
    bfc8:	20003680 	.word	0x20003680
    bfcc:	20003d66 	.word	0x20003d66

0000bfd0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    bfd0:	b538      	push	{r3, r4, r5, lr}
    bfd2:	4604      	mov	r4, r0
	__asm__ volatile(
    bfd4:	f04f 0320 	mov.w	r3, #32
    bfd8:	f3ef 8511 	mrs	r5, BASEPRI
    bfdc:	f383 8812 	msr	BASEPRI_MAX, r3
    bfe0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    bfe4:	f007 fbcb 	bl	1377e <z_unpend_first_thread>

	if (thread != NULL) {
    bfe8:	b148      	cbz	r0, bffe <z_impl_k_sem_give+0x2e>
    bfea:	2200      	movs	r2, #0
    bfec:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    bfee:	f007 fb6a 	bl	136c6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    bff2:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    bff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    bff8:	4804      	ldr	r0, [pc, #16]	; (c00c <z_impl_k_sem_give+0x3c>)
    bffa:	f000 b877 	b.w	c0ec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    bffe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    c002:	429a      	cmp	r2, r3
    c004:	bf18      	it	ne
    c006:	3301      	addne	r3, #1
    c008:	60a3      	str	r3, [r4, #8]
}
    c00a:	e7f2      	b.n	bff2 <z_impl_k_sem_give+0x22>
    c00c:	20003d67 	.word	0x20003d67

0000c010 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    c010:	b513      	push	{r0, r1, r4, lr}
    c012:	f04f 0420 	mov.w	r4, #32
    c016:	f3ef 8111 	mrs	r1, BASEPRI
    c01a:	f384 8812 	msr	BASEPRI_MAX, r4
    c01e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    c022:	6884      	ldr	r4, [r0, #8]
    c024:	b144      	cbz	r4, c038 <z_impl_k_sem_take+0x28>
		sem->count--;
    c026:	3c01      	subs	r4, #1
    c028:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    c02a:	f381 8811 	msr	BASEPRI, r1
    c02e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    c032:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    c034:	b002      	add	sp, #8
    c036:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c038:	ea52 0403 	orrs.w	r4, r2, r3
    c03c:	d106      	bne.n	c04c <z_impl_k_sem_take+0x3c>
    c03e:	f381 8811 	msr	BASEPRI, r1
    c042:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    c046:	f06f 000f 	mvn.w	r0, #15
    c04a:	e7f3      	b.n	c034 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    c04c:	e9cd 2300 	strd	r2, r3, [sp]
    c050:	4602      	mov	r2, r0
    c052:	4802      	ldr	r0, [pc, #8]	; (c05c <z_impl_k_sem_take+0x4c>)
    c054:	f000 f99e 	bl	c394 <z_pend_curr>
	return ret;
    c058:	e7ec      	b.n	c034 <z_impl_k_sem_take+0x24>
    c05a:	bf00      	nop
    c05c:	20003d67 	.word	0x20003d67

0000c060 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    c060:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    c062:	4d07      	ldr	r5, [pc, #28]	; (c080 <z_reset_time_slice+0x20>)
    c064:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    c066:	b154      	cbz	r4, c07e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    c068:	f7fd f84c 	bl	9104 <sys_clock_elapsed>
    c06c:	4b05      	ldr	r3, [pc, #20]	; (c084 <z_reset_time_slice+0x24>)
    c06e:	4420      	add	r0, r4
    c070:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    c072:	2100      	movs	r1, #0
    c074:	6828      	ldr	r0, [r5, #0]
	}
}
    c076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    c07a:	f007 bbbe 	b.w	137fa <z_set_timeout_expiry>
}
    c07e:	bd38      	pop	{r3, r4, r5, pc}
    c080:	200036b4 	.word	0x200036b4
    c084:	20003680 	.word	0x20003680

0000c088 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c08a:	4604      	mov	r4, r0
    c08c:	460d      	mov	r5, r1
	__asm__ volatile(
    c08e:	f04f 0320 	mov.w	r3, #32
    c092:	f3ef 8711 	mrs	r7, BASEPRI
    c096:	f383 8812 	msr	BASEPRI_MAX, r3
    c09a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    c09e:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    c0a0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    c0a4:	f240 30e7 	movw	r0, #999	; 0x3e7
    c0a8:	4e0d      	ldr	r6, [pc, #52]	; (c0e0 <k_sched_time_slice_set+0x58>)
    c0aa:	2300      	movs	r3, #0
    c0ac:	6131      	str	r1, [r6, #16]
    c0ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c0b2:	fbe4 010c 	umlal	r0, r1, r4, ip
    c0b6:	f7f4 fd45 	bl	b44 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    c0ba:	2c00      	cmp	r4, #0
    c0bc:	4b09      	ldr	r3, [pc, #36]	; (c0e4 <k_sched_time_slice_set+0x5c>)
    c0be:	dc0a      	bgt.n	c0d6 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    c0c0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    c0c2:	4b09      	ldr	r3, [pc, #36]	; (c0e8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    c0c4:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    c0c6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    c0c8:	f7ff ffca 	bl	c060 <z_reset_time_slice>
	__asm__ volatile(
    c0cc:	f387 8811 	msr	BASEPRI, r7
    c0d0:	f3bf 8f6f 	isb	sy
	}
}
    c0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    c0d6:	2802      	cmp	r0, #2
    c0d8:	bfb8      	it	lt
    c0da:	2002      	movlt	r0, #2
    c0dc:	e7f0      	b.n	c0c0 <k_sched_time_slice_set+0x38>
    c0de:	bf00      	nop
    c0e0:	20003680 	.word	0x20003680
    c0e4:	200036b4 	.word	0x200036b4
    c0e8:	200036b0 	.word	0x200036b0

0000c0ec <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c0ec:	b949      	cbnz	r1, c102 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c0ee:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    c0f2:	b930      	cbnz	r0, c102 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    c0f4:	4b05      	ldr	r3, [pc, #20]	; (c10c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    c0f6:	69da      	ldr	r2, [r3, #28]
    c0f8:	689b      	ldr	r3, [r3, #8]
    c0fa:	429a      	cmp	r2, r3
    c0fc:	d001      	beq.n	c102 <z_reschedule+0x16>
	ret = arch_swap(key);
    c0fe:	f7fb b9e7 	b.w	74d0 <arch_swap>
    c102:	f381 8811 	msr	BASEPRI, r1
    c106:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    c10a:	4770      	bx	lr
    c10c:	20003680 	.word	0x20003680

0000c110 <k_sched_lock>:
	__asm__ volatile(
    c110:	f04f 0320 	mov.w	r3, #32
    c114:	f3ef 8111 	mrs	r1, BASEPRI
    c118:	f383 8812 	msr	BASEPRI_MAX, r3
    c11c:	f3bf 8f6f 	isb	sy
    c120:	4b04      	ldr	r3, [pc, #16]	; (c134 <k_sched_lock+0x24>)
    c122:	689a      	ldr	r2, [r3, #8]
    c124:	7bd3      	ldrb	r3, [r2, #15]
    c126:	3b01      	subs	r3, #1
    c128:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    c12a:	f381 8811 	msr	BASEPRI, r1
    c12e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    c132:	4770      	bx	lr
    c134:	20003680 	.word	0x20003680

0000c138 <update_cache>:
{
    c138:	b538      	push	{r3, r4, r5, lr}
    c13a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    c13c:	480c      	ldr	r0, [pc, #48]	; (c170 <update_cache+0x38>)
    c13e:	f007 fabc 	bl	136ba <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    c142:	4d0c      	ldr	r5, [pc, #48]	; (c174 <update_cache+0x3c>)
    c144:	4604      	mov	r4, r0
    c146:	b900      	cbnz	r0, c14a <update_cache+0x12>
    c148:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    c14a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    c14c:	b94a      	cbnz	r2, c162 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    c14e:	7b5a      	ldrb	r2, [r3, #13]
    c150:	06d2      	lsls	r2, r2, #27
    c152:	d106      	bne.n	c162 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    c154:	69a2      	ldr	r2, [r4, #24]
    c156:	b922      	cbnz	r2, c162 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    c158:	89da      	ldrh	r2, [r3, #14]
    c15a:	2a7f      	cmp	r2, #127	; 0x7f
    c15c:	d901      	bls.n	c162 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    c15e:	61eb      	str	r3, [r5, #28]
}
    c160:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    c162:	429c      	cmp	r4, r3
    c164:	d002      	beq.n	c16c <update_cache+0x34>
			z_reset_time_slice(thread);
    c166:	4620      	mov	r0, r4
    c168:	f7ff ff7a 	bl	c060 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    c16c:	61ec      	str	r4, [r5, #28]
}
    c16e:	e7f7      	b.n	c160 <update_cache+0x28>
    c170:	200036a0 	.word	0x200036a0
    c174:	20003680 	.word	0x20003680

0000c178 <move_thread_to_end_of_prio_q>:
{
    c178:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    c17a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    c17e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    c180:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    c182:	7b43      	ldrb	r3, [r0, #13]
    c184:	da04      	bge.n	c190 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c18a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    c18c:	f007 fa6d 	bl	1366a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    c190:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    c192:	4a15      	ldr	r2, [pc, #84]	; (c1e8 <move_thread_to_end_of_prio_q+0x70>)
    c194:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c198:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c19a:	f102 0520 	add.w	r5, r2, #32
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    c19e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c1a2:	42ab      	cmp	r3, r5
    c1a4:	d01b      	beq.n	c1de <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c1a6:	b1d3      	cbz	r3, c1de <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    c1a8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    c1ac:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    c1b0:	4286      	cmp	r6, r0
    c1b2:	d00f      	beq.n	c1d4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    c1b4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    c1b6:	2800      	cmp	r0, #0
    c1b8:	dd0c      	ble.n	c1d4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    c1ba:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    c1bc:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    c1c0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    c1c2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    c1c4:	6890      	ldr	r0, [r2, #8]
}
    c1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    c1ca:	1a43      	subs	r3, r0, r1
    c1cc:	4258      	negs	r0, r3
    c1ce:	4158      	adcs	r0, r3
    c1d0:	f7ff bfb2 	b.w	c138 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    c1d4:	42a3      	cmp	r3, r4
    c1d6:	d002      	beq.n	c1de <move_thread_to_end_of_prio_q+0x66>
    c1d8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d1e6      	bne.n	c1ac <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    c1de:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    c1e2:	6021      	str	r1, [r4, #0]
	list->tail = node;
    c1e4:	6251      	str	r1, [r2, #36]	; 0x24
}
    c1e6:	e7ed      	b.n	c1c4 <move_thread_to_end_of_prio_q+0x4c>
    c1e8:	20003680 	.word	0x20003680

0000c1ec <z_time_slice>:
{
    c1ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c1ee:	f04f 0320 	mov.w	r3, #32
    c1f2:	f3ef 8511 	mrs	r5, BASEPRI
    c1f6:	f383 8812 	msr	BASEPRI_MAX, r3
    c1fa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    c1fe:	4b17      	ldr	r3, [pc, #92]	; (c25c <z_time_slice+0x70>)
    c200:	4a17      	ldr	r2, [pc, #92]	; (c260 <z_time_slice+0x74>)
    c202:	689c      	ldr	r4, [r3, #8]
    c204:	6811      	ldr	r1, [r2, #0]
    c206:	428c      	cmp	r4, r1
    c208:	d107      	bne.n	c21a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    c20a:	4620      	mov	r0, r4
    c20c:	f7ff ff28 	bl	c060 <z_reset_time_slice>
	__asm__ volatile(
    c210:	f385 8811 	msr	BASEPRI, r5
    c214:	f3bf 8f6f 	isb	sy
}
    c218:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    c21a:	2100      	movs	r1, #0
    c21c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    c21e:	4a11      	ldr	r2, [pc, #68]	; (c264 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    c220:	6812      	ldr	r2, [r2, #0]
    c222:	b1c2      	cbz	r2, c256 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    c224:	89e2      	ldrh	r2, [r4, #14]
    c226:	2a7f      	cmp	r2, #127	; 0x7f
    c228:	d815      	bhi.n	c256 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    c22a:	7b62      	ldrb	r2, [r4, #13]
    c22c:	06d2      	lsls	r2, r2, #27
    c22e:	d112      	bne.n	c256 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    c230:	4a0d      	ldr	r2, [pc, #52]	; (c268 <z_time_slice+0x7c>)
    c232:	f994 100e 	ldrsb.w	r1, [r4, #14]
    c236:	6812      	ldr	r2, [r2, #0]
    c238:	4291      	cmp	r1, r2
    c23a:	db0c      	blt.n	c256 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    c23c:	4a0b      	ldr	r2, [pc, #44]	; (c26c <z_time_slice+0x80>)
    c23e:	4294      	cmp	r4, r2
    c240:	d009      	beq.n	c256 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    c242:	691a      	ldr	r2, [r3, #16]
    c244:	4282      	cmp	r2, r0
    c246:	dc03      	bgt.n	c250 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    c248:	4620      	mov	r0, r4
    c24a:	f7ff ff95 	bl	c178 <move_thread_to_end_of_prio_q>
    c24e:	e7dc      	b.n	c20a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    c250:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    c252:	611a      	str	r2, [r3, #16]
    c254:	e7dc      	b.n	c210 <z_time_slice+0x24>
    c256:	2200      	movs	r2, #0
    c258:	e7fb      	b.n	c252 <z_time_slice+0x66>
    c25a:	bf00      	nop
    c25c:	20003680 	.word	0x20003680
    c260:	200036ac 	.word	0x200036ac
    c264:	200036b4 	.word	0x200036b4
    c268:	200036b0 	.word	0x200036b0
    c26c:	200006f8 	.word	0x200006f8

0000c270 <ready_thread>:
{
    c270:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    c272:	f990 200d 	ldrsb.w	r2, [r0, #13]
    c276:	7b43      	ldrb	r3, [r0, #13]
    c278:	2a00      	cmp	r2, #0
    c27a:	db2a      	blt.n	c2d2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    c27c:	06da      	lsls	r2, r3, #27
    c27e:	d128      	bne.n	c2d2 <ready_thread+0x62>
    c280:	6982      	ldr	r2, [r0, #24]
    c282:	bb32      	cbnz	r2, c2d2 <ready_thread+0x62>
	return list->head == list;
    c284:	4a14      	ldr	r2, [pc, #80]	; (c2d8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    c286:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c28a:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c28c:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
    c290:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c294:	42ab      	cmp	r3, r5
    c296:	d017      	beq.n	c2c8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c298:	b1b3      	cbz	r3, c2c8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    c29a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    c29e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    c2a2:	428e      	cmp	r6, r1
    c2a4:	d00b      	beq.n	c2be <ready_thread+0x4e>
		return b2 - b1;
    c2a6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    c2a8:	2900      	cmp	r1, #0
    c2aa:	dd08      	ble.n	c2be <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    c2ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c2ae:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    c2b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    c2b4:	6058      	str	r0, [r3, #4]
		update_cache(0);
    c2b6:	2000      	movs	r0, #0
}
    c2b8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    c2ba:	f7ff bf3d 	b.w	c138 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    c2be:	42a3      	cmp	r3, r4
    c2c0:	d002      	beq.n	c2c8 <ready_thread+0x58>
    c2c2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d1ea      	bne.n	c29e <ready_thread+0x2e>
	node->prev = tail;
    c2c8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    c2cc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    c2ce:	6250      	str	r0, [r2, #36]	; 0x24
}
    c2d0:	e7f1      	b.n	c2b6 <ready_thread+0x46>
}
    c2d2:	bc70      	pop	{r4, r5, r6}
    c2d4:	4770      	bx	lr
    c2d6:	bf00      	nop
    c2d8:	20003680 	.word	0x20003680

0000c2dc <z_sched_start>:
{
    c2dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    c2de:	f04f 0220 	mov.w	r2, #32
    c2e2:	f3ef 8411 	mrs	r4, BASEPRI
    c2e6:	f382 8812 	msr	BASEPRI_MAX, r2
    c2ea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    c2ee:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    c2f0:	0751      	lsls	r1, r2, #29
    c2f2:	d404      	bmi.n	c2fe <z_sched_start+0x22>
	__asm__ volatile(
    c2f4:	f384 8811 	msr	BASEPRI, r4
    c2f8:	f3bf 8f6f 	isb	sy
}
    c2fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c2fe:	f022 0204 	bic.w	r2, r2, #4
    c302:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    c304:	f7ff ffb4 	bl	c270 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    c308:	4621      	mov	r1, r4
}
    c30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    c30e:	4801      	ldr	r0, [pc, #4]	; (c314 <z_sched_start+0x38>)
    c310:	f7ff beec 	b.w	c0ec <z_reschedule>
    c314:	20003d68 	.word	0x20003d68

0000c318 <unready_thread>:
{
    c318:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    c31a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    c31e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    c320:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    c322:	7b43      	ldrb	r3, [r0, #13]
    c324:	da04      	bge.n	c330 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c32a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c32c:	f007 f99d 	bl	1366a <sys_dlist_remove>
	update_cache(thread == _current);
    c330:	4b04      	ldr	r3, [pc, #16]	; (c344 <unready_thread+0x2c>)
    c332:	6898      	ldr	r0, [r3, #8]
    c334:	1a43      	subs	r3, r0, r1
    c336:	4258      	negs	r0, r3
    c338:	4158      	adcs	r0, r3
}
    c33a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    c33e:	f7ff befb 	b.w	c138 <update_cache>
    c342:	bf00      	nop
    c344:	20003680 	.word	0x20003680

0000c348 <pend>:
{
    c348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c34c:	4606      	mov	r6, r0
    c34e:	4615      	mov	r5, r2
    c350:	461c      	mov	r4, r3
	__asm__ volatile(
    c352:	f04f 0320 	mov.w	r3, #32
    c356:	f3ef 8711 	mrs	r7, BASEPRI
    c35a:	f383 8812 	msr	BASEPRI_MAX, r3
    c35e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    c362:	f007 f9e2 	bl	1372a <add_to_waitq_locked>
	__asm__ volatile(
    c366:	f387 8811 	msr	BASEPRI, r7
    c36a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c36e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    c372:	bf08      	it	eq
    c374:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    c378:	d008      	beq.n	c38c <pend+0x44>
    c37a:	462a      	mov	r2, r5
    c37c:	4623      	mov	r3, r4
    c37e:	f106 0018 	add.w	r0, r6, #24
    c382:	4903      	ldr	r1, [pc, #12]	; (c390 <pend+0x48>)
}
    c384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c388:	f000 ba18 	b.w	c7bc <z_add_timeout>
    c38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c390:	000136e7 	.word	0x000136e7

0000c394 <z_pend_curr>:
{
    c394:	b510      	push	{r4, lr}
    c396:	460c      	mov	r4, r1
	pending_current = _current;
    c398:	4b06      	ldr	r3, [pc, #24]	; (c3b4 <z_pend_curr+0x20>)
{
    c39a:	4611      	mov	r1, r2
	pending_current = _current;
    c39c:	6898      	ldr	r0, [r3, #8]
    c39e:	4b06      	ldr	r3, [pc, #24]	; (c3b8 <z_pend_curr+0x24>)
    c3a0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    c3a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c3a6:	f7ff ffcf 	bl	c348 <pend>
    c3aa:	4620      	mov	r0, r4
}
    c3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c3b0:	f7fb b88e 	b.w	74d0 <arch_swap>
    c3b4:	20003680 	.word	0x20003680
    c3b8:	200036ac 	.word	0x200036ac

0000c3bc <z_set_prio>:
{
    c3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3be:	4604      	mov	r4, r0
	__asm__ volatile(
    c3c0:	f04f 0320 	mov.w	r3, #32
    c3c4:	f3ef 8611 	mrs	r6, BASEPRI
    c3c8:	f383 8812 	msr	BASEPRI_MAX, r3
    c3cc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    c3d0:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    c3d2:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    c3d4:	06da      	lsls	r2, r3, #27
    c3d6:	d133      	bne.n	c440 <z_set_prio+0x84>
		if (need_sched) {
    c3d8:	6982      	ldr	r2, [r0, #24]
    c3da:	bb8a      	cbnz	r2, c440 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c3e0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c3e2:	f007 f942 	bl	1366a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    c3e6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    c3e8:	4a17      	ldr	r2, [pc, #92]	; (c448 <z_set_prio+0x8c>)
    c3ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c3ee:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
    c3f0:	7381      	strb	r1, [r0, #14]
    c3f2:	4610      	mov	r0, r2
    c3f4:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c3f8:	4283      	cmp	r3, r0
    c3fa:	d01b      	beq.n	c434 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c3fc:	b1d3      	cbz	r3, c434 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    c3fe:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    c400:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    c404:	42a9      	cmp	r1, r5
    c406:	d010      	beq.n	c42a <z_set_prio+0x6e>
		return b2 - b1;
    c408:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    c40a:	2d00      	cmp	r5, #0
    c40c:	dd0d      	ble.n	c42a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    c40e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c410:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    c414:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    c416:	605c      	str	r4, [r3, #4]
			update_cache(1);
    c418:	2001      	movs	r0, #1
    c41a:	f7ff fe8d 	bl	c138 <update_cache>
    c41e:	2001      	movs	r0, #1
	__asm__ volatile(
    c420:	f386 8811 	msr	BASEPRI, r6
    c424:	f3bf 8f6f 	isb	sy
}
    c428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    c42a:	42bb      	cmp	r3, r7
    c42c:	d002      	beq.n	c434 <z_set_prio+0x78>
    c42e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c430:	2b00      	cmp	r3, #0
    c432:	d1e5      	bne.n	c400 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    c434:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    c436:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    c43a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c43c:	6254      	str	r4, [r2, #36]	; 0x24
}
    c43e:	e7eb      	b.n	c418 <z_set_prio+0x5c>
			thread->base.prio = prio;
    c440:	2000      	movs	r0, #0
    c442:	73a1      	strb	r1, [r4, #14]
    c444:	e7ec      	b.n	c420 <z_set_prio+0x64>
    c446:	bf00      	nop
    c448:	20003680 	.word	0x20003680

0000c44c <z_impl_k_thread_suspend>:
{
    c44c:	b570      	push	{r4, r5, r6, lr}
    c44e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    c450:	3018      	adds	r0, #24
    c452:	f007 f9ac 	bl	137ae <z_abort_timeout>
	__asm__ volatile(
    c456:	f04f 0320 	mov.w	r3, #32
    c45a:	f3ef 8611 	mrs	r6, BASEPRI
    c45e:	f383 8812 	msr	BASEPRI_MAX, r3
    c462:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    c466:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    c46a:	7b63      	ldrb	r3, [r4, #13]
    c46c:	2a00      	cmp	r2, #0
    c46e:	da05      	bge.n	c47c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    c474:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c476:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c478:	f007 f8f7 	bl	1366a <sys_dlist_remove>
		update_cache(thread == _current);
    c47c:	4d0b      	ldr	r5, [pc, #44]	; (c4ac <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    c47e:	7b63      	ldrb	r3, [r4, #13]
    c480:	68a8      	ldr	r0, [r5, #8]
    c482:	f043 0310 	orr.w	r3, r3, #16
    c486:	7363      	strb	r3, [r4, #13]
    c488:	1b03      	subs	r3, r0, r4
    c48a:	4258      	negs	r0, r3
    c48c:	4158      	adcs	r0, r3
    c48e:	f7ff fe53 	bl	c138 <update_cache>
	__asm__ volatile(
    c492:	f386 8811 	msr	BASEPRI, r6
    c496:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    c49a:	68ab      	ldr	r3, [r5, #8]
    c49c:	42a3      	cmp	r3, r4
    c49e:	d103      	bne.n	c4a8 <z_impl_k_thread_suspend+0x5c>
}
    c4a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    c4a4:	f007 b8ff 	b.w	136a6 <z_reschedule_unlocked>
}
    c4a8:	bd70      	pop	{r4, r5, r6, pc}
    c4aa:	bf00      	nop
    c4ac:	20003680 	.word	0x20003680

0000c4b0 <k_sched_unlock>:
{
    c4b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    c4b2:	f04f 0320 	mov.w	r3, #32
    c4b6:	f3ef 8411 	mrs	r4, BASEPRI
    c4ba:	f383 8812 	msr	BASEPRI_MAX, r3
    c4be:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    c4c2:	4b08      	ldr	r3, [pc, #32]	; (c4e4 <k_sched_unlock+0x34>)
		update_cache(0);
    c4c4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    c4c6:	689a      	ldr	r2, [r3, #8]
    c4c8:	7bd3      	ldrb	r3, [r2, #15]
    c4ca:	3301      	adds	r3, #1
    c4cc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    c4ce:	f7ff fe33 	bl	c138 <update_cache>
	__asm__ volatile(
    c4d2:	f384 8811 	msr	BASEPRI, r4
    c4d6:	f3bf 8f6f 	isb	sy
}
    c4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    c4de:	f007 b8e2 	b.w	136a6 <z_reschedule_unlocked>
    c4e2:	bf00      	nop
    c4e4:	20003680 	.word	0x20003680

0000c4e8 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    c4e8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    c4ea:	4b04      	ldr	r3, [pc, #16]	; (c4fc <z_sched_init+0x14>)
    c4ec:	4608      	mov	r0, r1
    c4ee:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    c4f2:	e9c3 2208 	strd	r2, r2, [r3, #32]
    c4f6:	f7ff bdc7 	b.w	c088 <k_sched_time_slice_set>
    c4fa:	bf00      	nop
    c4fc:	20003680 	.word	0x20003680

0000c500 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    c502:	f04f 0320 	mov.w	r3, #32
    c506:	f3ef 8511 	mrs	r5, BASEPRI
    c50a:	f383 8812 	msr	BASEPRI_MAX, r3
    c50e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    c512:	491a      	ldr	r1, [pc, #104]	; (c57c <z_impl_k_yield+0x7c>)
    c514:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c516:	7b43      	ldrb	r3, [r0, #13]
    c518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c51c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c51e:	f007 f8a4 	bl	1366a <sys_dlist_remove>
	return list->head == list;
    c522:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    c524:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    c526:	7b5a      	ldrb	r2, [r3, #13]
    c528:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c52c:	735a      	strb	r2, [r3, #13]
    c52e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c532:	4282      	cmp	r2, r0
    c534:	d01c      	beq.n	c570 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c536:	b1da      	cbz	r2, c570 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    c538:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    c53a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    c53e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    c542:	42a6      	cmp	r6, r4
    c544:	d00f      	beq.n	c566 <z_impl_k_yield+0x66>
		return b2 - b1;
    c546:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    c548:	2c00      	cmp	r4, #0
    c54a:	dd0c      	ble.n	c566 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    c54c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    c54e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    c552:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    c554:	6053      	str	r3, [r2, #4]
	update_cache(1);
    c556:	2001      	movs	r0, #1
    c558:	f7ff fdee 	bl	c138 <update_cache>
    c55c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    c55e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c562:	f7fa bfb5 	b.w	74d0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    c566:	42ba      	cmp	r2, r7
    c568:	d002      	beq.n	c570 <z_impl_k_yield+0x70>
    c56a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c56c:	2a00      	cmp	r2, #0
    c56e:	d1e6      	bne.n	c53e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    c570:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    c572:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    c576:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c578:	624b      	str	r3, [r1, #36]	; 0x24
}
    c57a:	e7ec      	b.n	c556 <z_impl_k_yield+0x56>
    c57c:	20003680 	.word	0x20003680

0000c580 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    c580:	ea50 0301 	orrs.w	r3, r0, r1
{
    c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c588:	4605      	mov	r5, r0
    c58a:	460e      	mov	r6, r1
	if (ticks == 0) {
    c58c:	d103      	bne.n	c596 <z_tick_sleep+0x16>
	z_impl_k_yield();
    c58e:	f7ff ffb7 	bl	c500 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    c592:	2000      	movs	r0, #0
    c594:	e033      	b.n	c5fe <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    c596:	f06f 0401 	mvn.w	r4, #1
    c59a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c59e:	1a24      	subs	r4, r4, r0
    c5a0:	eb63 0301 	sbc.w	r3, r3, r1
    c5a4:	2c01      	cmp	r4, #1
    c5a6:	f173 0300 	sbcs.w	r3, r3, #0
    c5aa:	da02      	bge.n	c5b2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    c5ac:	f007 f940 	bl	13830 <sys_clock_tick_get_32>
    c5b0:	1944      	adds	r4, r0, r5
    c5b2:	f04f 0320 	mov.w	r3, #32
    c5b6:	f3ef 8811 	mrs	r8, BASEPRI
    c5ba:	f383 8812 	msr	BASEPRI_MAX, r3
    c5be:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    c5c2:	4f10      	ldr	r7, [pc, #64]	; (c604 <z_tick_sleep+0x84>)
    c5c4:	4b10      	ldr	r3, [pc, #64]	; (c608 <z_tick_sleep+0x88>)
    c5c6:	68b8      	ldr	r0, [r7, #8]
    c5c8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    c5ca:	f7ff fea5 	bl	c318 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    c5ce:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c5d0:	490e      	ldr	r1, [pc, #56]	; (c60c <z_tick_sleep+0x8c>)
    c5d2:	462a      	mov	r2, r5
    c5d4:	4633      	mov	r3, r6
    c5d6:	3018      	adds	r0, #24
    c5d8:	f000 f8f0 	bl	c7bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    c5dc:	68ba      	ldr	r2, [r7, #8]
    c5de:	4640      	mov	r0, r8
    c5e0:	7b53      	ldrb	r3, [r2, #13]
    c5e2:	f043 0310 	orr.w	r3, r3, #16
    c5e6:	7353      	strb	r3, [r2, #13]
    c5e8:	f7fa ff72 	bl	74d0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    c5ec:	f007 f920 	bl	13830 <sys_clock_tick_get_32>
    c5f0:	1a20      	subs	r0, r4, r0
    c5f2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    c5f6:	2801      	cmp	r0, #1
    c5f8:	f173 0300 	sbcs.w	r3, r3, #0
    c5fc:	dbc9      	blt.n	c592 <z_tick_sleep+0x12>
}
    c5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c602:	bf00      	nop
    c604:	20003680 	.word	0x20003680
    c608:	200036ac 	.word	0x200036ac
    c60c:	000136e7 	.word	0x000136e7

0000c610 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c610:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    c614:	bf08      	it	eq
    c616:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    c61a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c61c:	d106      	bne.n	c62c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    c61e:	4b08      	ldr	r3, [pc, #32]	; (c640 <z_impl_k_sleep+0x30>)
    c620:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    c622:	f7ff ff13 	bl	c44c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    c626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    c62a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    c62c:	f7ff ffa8 	bl	c580 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    c630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c634:	fb80 0303 	smull	r0, r3, r0, r3
    c638:	0bc0      	lsrs	r0, r0, #15
    c63a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    c63e:	e7f4      	b.n	c62a <z_impl_k_sleep+0x1a>
    c640:	20003680 	.word	0x20003680

0000c644 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    c644:	4b01      	ldr	r3, [pc, #4]	; (c64c <z_impl_z_current_get+0x8>)
    c646:	6898      	ldr	r0, [r3, #8]
    c648:	4770      	bx	lr
    c64a:	bf00      	nop
    c64c:	20003680 	.word	0x20003680

0000c650 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    c650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c654:	4604      	mov	r4, r0
    c656:	f04f 0320 	mov.w	r3, #32
    c65a:	f3ef 8611 	mrs	r6, BASEPRI
    c65e:	f383 8812 	msr	BASEPRI_MAX, r3
    c662:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c666:	7b43      	ldrb	r3, [r0, #13]
    c668:	071a      	lsls	r2, r3, #28
    c66a:	d505      	bpl.n	c678 <z_thread_abort+0x28>
	__asm__ volatile(
    c66c:	f386 8811 	msr	BASEPRI, r6
    c670:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c678:	f023 0220 	bic.w	r2, r3, #32
    c67c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    c680:	09d2      	lsrs	r2, r2, #7
    c682:	d120      	bne.n	c6c6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c684:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    c686:	68a3      	ldr	r3, [r4, #8]
    c688:	b113      	cbz	r3, c690 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    c68a:	4620      	mov	r0, r4
    c68c:	f006 fff5 	bl	1367a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    c690:	f104 0018 	add.w	r0, r4, #24
    c694:	f007 f88b 	bl	137ae <z_abort_timeout>
    c698:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    c69c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    c6a0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c6a2:	42bd      	cmp	r5, r7
    c6a4:	d000      	beq.n	c6a8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c6a6:	b9b5      	cbnz	r5, c6d6 <z_thread_abort+0x86>
		update_cache(1);
    c6a8:	2001      	movs	r0, #1
    c6aa:	f7ff fd45 	bl	c138 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    c6ae:	4b10      	ldr	r3, [pc, #64]	; (c6f0 <z_thread_abort+0xa0>)
    c6b0:	689b      	ldr	r3, [r3, #8]
    c6b2:	42a3      	cmp	r3, r4
    c6b4:	d1da      	bne.n	c66c <z_thread_abort+0x1c>
    c6b6:	f3ef 8305 	mrs	r3, IPSR
    c6ba:	2b00      	cmp	r3, #0
    c6bc:	d1d6      	bne.n	c66c <z_thread_abort+0x1c>
    c6be:	4630      	mov	r0, r6
    c6c0:	f7fa ff06 	bl	74d0 <arch_swap>
	return ret;
    c6c4:	e7d2      	b.n	c66c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c6c6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    c6ca:	f043 0308 	orr.w	r3, r3, #8
    c6ce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c6d0:	f006 ffcb 	bl	1366a <sys_dlist_remove>
}
    c6d4:	e7d7      	b.n	c686 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    c6d6:	4628      	mov	r0, r5
    c6d8:	f006 ffcf 	bl	1367a <unpend_thread_no_timeout>
    c6dc:	f105 0018 	add.w	r0, r5, #24
    c6e0:	f007 f865 	bl	137ae <z_abort_timeout>
		ready_thread(thread);
    c6e4:	4628      	mov	r0, r5
    c6e6:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    c6ea:	f7ff fdc1 	bl	c270 <ready_thread>
    c6ee:	e7d7      	b.n	c6a0 <z_thread_abort+0x50>
    c6f0:	20003680 	.word	0x20003680

0000c6f4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    c6f4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    c6f6:	4806      	ldr	r0, [pc, #24]	; (c710 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    c6f8:	4a06      	ldr	r2, [pc, #24]	; (c714 <z_data_copy+0x20>)
    c6fa:	4907      	ldr	r1, [pc, #28]	; (c718 <z_data_copy+0x24>)
    c6fc:	1a12      	subs	r2, r2, r0
    c6fe:	f006 ff4e 	bl	1359e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    c706:	4a05      	ldr	r2, [pc, #20]	; (c71c <z_data_copy+0x28>)
    c708:	4905      	ldr	r1, [pc, #20]	; (c720 <z_data_copy+0x2c>)
    c70a:	4806      	ldr	r0, [pc, #24]	; (c724 <z_data_copy+0x30>)
    c70c:	f006 bf47 	b.w	1359e <z_early_memcpy>
    c710:	20000000 	.word	0x20000000
    c714:	200005bc 	.word	0x200005bc
    c718:	000189b0 	.word	0x000189b0
    c71c:	00000000 	.word	0x00000000
    c720:	000189b0 	.word	0x000189b0
    c724:	20000000 	.word	0x20000000

0000c728 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c728:	4b03      	ldr	r3, [pc, #12]	; (c738 <elapsed+0x10>)
    c72a:	681b      	ldr	r3, [r3, #0]
    c72c:	b90b      	cbnz	r3, c732 <elapsed+0xa>
    c72e:	f7fc bce9 	b.w	9104 <sys_clock_elapsed>
}
    c732:	2000      	movs	r0, #0
    c734:	4770      	bx	lr
    c736:	bf00      	nop
    c738:	200036b8 	.word	0x200036b8

0000c73c <next_timeout>:
	return list->head == list;
    c73c:	4b10      	ldr	r3, [pc, #64]	; (c780 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    c73e:	b510      	push	{r4, lr}
    c740:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c742:	429c      	cmp	r4, r3
    c744:	bf08      	it	eq
    c746:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    c748:	f7ff ffee 	bl	c728 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    c74c:	b1a4      	cbz	r4, c778 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c74e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    c752:	1a1b      	subs	r3, r3, r0
    c754:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    c758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c75c:	f170 0200 	sbcs.w	r2, r0, #0
    c760:	da0a      	bge.n	c778 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    c762:	2800      	cmp	r0, #0
    c764:	bfac      	ite	ge
    c766:	4618      	movge	r0, r3
    c768:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    c76a:	4b06      	ldr	r3, [pc, #24]	; (c784 <next_timeout+0x48>)
    c76c:	691b      	ldr	r3, [r3, #16]
    c76e:	b113      	cbz	r3, c776 <next_timeout+0x3a>
    c770:	4298      	cmp	r0, r3
    c772:	bfa8      	it	ge
    c774:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    c776:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    c778:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c77c:	e7f5      	b.n	c76a <next_timeout+0x2e>
    c77e:	bf00      	nop
    c780:	200001b8 	.word	0x200001b8
    c784:	20003680 	.word	0x20003680

0000c788 <remove_timeout>:
{
    c788:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    c78a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c78c:	b168      	cbz	r0, c7aa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    c78e:	4a0a      	ldr	r2, [pc, #40]	; (c7b8 <remove_timeout+0x30>)
    c790:	6852      	ldr	r2, [r2, #4]
    c792:	4290      	cmp	r0, r2
    c794:	d009      	beq.n	c7aa <remove_timeout+0x22>
	if (next(t) != NULL) {
    c796:	b143      	cbz	r3, c7aa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    c798:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    c79c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    c7a0:	1912      	adds	r2, r2, r4
    c7a2:	eb41 0105 	adc.w	r1, r1, r5
    c7a6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    c7aa:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    c7ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c7ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c7b0:	2300      	movs	r3, #0
	node->prev = NULL;
    c7b2:	e9c0 3300 	strd	r3, r3, [r0]
}
    c7b6:	bd30      	pop	{r4, r5, pc}
    c7b8:	200001b8 	.word	0x200001b8

0000c7bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c7bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c7c0:	bf08      	it	eq
    c7c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    c7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7c8:	4604      	mov	r4, r0
    c7ca:	461f      	mov	r7, r3
    c7cc:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c7ce:	d065      	beq.n	c89c <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    c7d0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    c7d2:	f04f 0320 	mov.w	r3, #32
    c7d6:	f3ef 8611 	mrs	r6, BASEPRI
    c7da:	f383 8812 	msr	BASEPRI_MAX, r3
    c7de:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    c7e2:	f06f 0201 	mvn.w	r2, #1
    c7e6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    c7ea:	1b53      	subs	r3, r2, r5
    c7ec:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	db1b      	blt.n	c82c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c7f4:	4b2a      	ldr	r3, [pc, #168]	; (c8a0 <z_add_timeout+0xe4>)
    c7f6:	e9d3 1300 	ldrd	r1, r3, [r3]
    c7fa:	1a52      	subs	r2, r2, r1
    c7fc:	eb6c 0303 	sbc.w	r3, ip, r3
    c800:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    c802:	eb63 0307 	sbc.w	r3, r3, r7
    c806:	2d01      	cmp	r5, #1
    c808:	f173 0200 	sbcs.w	r2, r3, #0
    c80c:	da01      	bge.n	c812 <z_add_timeout+0x56>
    c80e:	2501      	movs	r5, #1
    c810:	2300      	movs	r3, #0
	return list->head == list;
    c812:	4824      	ldr	r0, [pc, #144]	; (c8a4 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c814:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
    c818:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c81c:	4283      	cmp	r3, r0
    c81e:	d116      	bne.n	c84e <z_add_timeout+0x92>
	node->prev = tail;
    c820:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    c824:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    c828:	6044      	str	r4, [r0, #4]
}
    c82a:	e024      	b.n	c876 <z_add_timeout+0xba>
    c82c:	f7ff ff7c 	bl	c728 <elapsed>
    c830:	3501      	adds	r5, #1
    c832:	f147 0300 	adc.w	r3, r7, #0
    c836:	182d      	adds	r5, r5, r0
    c838:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    c83c:	e7e9      	b.n	c812 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    c83e:	1a52      	subs	r2, r2, r1
    c840:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    c844:	459c      	cmp	ip, r3
    c846:	e9c4 2504 	strd	r2, r5, [r4, #16]
    c84a:	d0e9      	beq.n	c820 <z_add_timeout+0x64>
    c84c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    c84e:	2b00      	cmp	r3, #0
    c850:	d0e6      	beq.n	c820 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    c852:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    c856:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    c85a:	428a      	cmp	r2, r1
    c85c:	eb75 0e07 	sbcs.w	lr, r5, r7
    c860:	daed      	bge.n	c83e <z_add_timeout+0x82>
				t->dticks -= to->dticks;
    c862:	1a8a      	subs	r2, r1, r2
    c864:	eb67 0505 	sbc.w	r5, r7, r5
    c868:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    c86c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c86e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    c872:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    c874:	605c      	str	r4, [r3, #4]
	return list->head == list;
    c876:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c878:	4283      	cmp	r3, r0
    c87a:	d00b      	beq.n	c894 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c87c:	429c      	cmp	r4, r3
    c87e:	d109      	bne.n	c894 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    c880:	f7ff ff5c 	bl	c73c <next_timeout>

			if (next_time == 0 ||
    c884:	b118      	cbz	r0, c88e <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
    c886:	4b08      	ldr	r3, [pc, #32]	; (c8a8 <z_add_timeout+0xec>)
			if (next_time == 0 ||
    c888:	691b      	ldr	r3, [r3, #16]
    c88a:	4283      	cmp	r3, r0
    c88c:	d002      	beq.n	c894 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
    c88e:	2100      	movs	r1, #0
    c890:	f7fc fc08 	bl	90a4 <sys_clock_set_timeout>
	__asm__ volatile(
    c894:	f386 8811 	msr	BASEPRI, r6
    c898:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    c89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c89e:	bf00      	nop
    c8a0:	20000878 	.word	0x20000878
    c8a4:	200001b8 	.word	0x200001b8
    c8a8:	20003680 	.word	0x20003680

0000c8ac <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    c8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c8b0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    c8b2:	f7ff fc9b 	bl	c1ec <z_time_slice>
	__asm__ volatile(
    c8b6:	f04f 0320 	mov.w	r3, #32
    c8ba:	f3ef 8411 	mrs	r4, BASEPRI
    c8be:	f383 8812 	msr	BASEPRI_MAX, r3
    c8c2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    c8c6:	4e24      	ldr	r6, [pc, #144]	; (c958 <sys_clock_announce+0xac>)
	return list->head == list;
    c8c8:	f8df 8094 	ldr.w	r8, [pc, #148]	; c960 <sys_clock_announce+0xb4>
    c8cc:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    c8ce:	4d23      	ldr	r5, [pc, #140]	; (c95c <sys_clock_announce+0xb0>)
    c8d0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    c8d4:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c8d6:	4540      	cmp	r0, r8
    c8d8:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    c8dc:	e9d5 1e00 	ldrd	r1, lr, [r5]
    c8e0:	d00b      	beq.n	c8fa <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    c8e2:	b150      	cbz	r0, c8fa <sys_clock_announce+0x4e>
    c8e4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    c8e8:	429a      	cmp	r2, r3
    c8ea:	eb77 090c 	sbcs.w	r9, r7, ip
    c8ee:	da16      	bge.n	c91e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    c8f0:	1a9b      	subs	r3, r3, r2
    c8f2:	eb6c 0c07 	sbc.w	ip, ip, r7
    c8f6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    c8fa:	1852      	adds	r2, r2, r1
    c8fc:	eb4e 0707 	adc.w	r7, lr, r7
    c900:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    c904:	2500      	movs	r5, #0
    c906:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    c908:	f7ff ff18 	bl	c73c <next_timeout>
    c90c:	4629      	mov	r1, r5
    c90e:	f7fc fbc9 	bl	90a4 <sys_clock_set_timeout>
	__asm__ volatile(
    c912:	f384 8811 	msr	BASEPRI, r4
    c916:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    c91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    c91e:	1859      	adds	r1, r3, r1
    c920:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    c924:	1ad3      	subs	r3, r2, r3
    c926:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    c928:	2200      	movs	r2, #0
    c92a:	2300      	movs	r3, #0
    c92c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    c930:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    c934:	f7ff ff28 	bl	c788 <remove_timeout>
    c938:	f384 8811 	msr	BASEPRI, r4
    c93c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    c940:	6883      	ldr	r3, [r0, #8]
    c942:	4798      	blx	r3
	__asm__ volatile(
    c944:	f04f 0320 	mov.w	r3, #32
    c948:	f3ef 8411 	mrs	r4, BASEPRI
    c94c:	f383 8812 	msr	BASEPRI_MAX, r3
    c950:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    c954:	e7bc      	b.n	c8d0 <sys_clock_announce+0x24>
    c956:	bf00      	nop
    c958:	200036b8 	.word	0x200036b8
    c95c:	20000878 	.word	0x20000878
    c960:	200001b8 	.word	0x200001b8

0000c964 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c964:	b510      	push	{r4, lr}
    c966:	f04f 0320 	mov.w	r3, #32
    c96a:	f3ef 8411 	mrs	r4, BASEPRI
    c96e:	f383 8812 	msr	BASEPRI_MAX, r3
    c972:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    c976:	f7fc fbc5 	bl	9104 <sys_clock_elapsed>
    c97a:	4a05      	ldr	r2, [pc, #20]	; (c990 <sys_clock_tick_get+0x2c>)
    c97c:	e9d2 3100 	ldrd	r3, r1, [r2]
    c980:	18c0      	adds	r0, r0, r3
    c982:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    c986:	f384 8811 	msr	BASEPRI, r4
    c98a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    c98e:	bd10      	pop	{r4, pc}
    c990:	20000878 	.word	0x20000878

0000c994 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    c994:	4a02      	ldr	r2, [pc, #8]	; (c9a0 <boot_banner+0xc>)
    c996:	4903      	ldr	r1, [pc, #12]	; (c9a4 <boot_banner+0x10>)
    c998:	4803      	ldr	r0, [pc, #12]	; (c9a8 <boot_banner+0x14>)
    c99a:	f005 bc64 	b.w	12266 <printk>
    c99e:	bf00      	nop
    c9a0:	000179b2 	.word	0x000179b2
    c9a4:	00017e64 	.word	0x00017e64
    c9a8:	00017e71 	.word	0x00017e71

0000c9ac <kiss_fftr>:
{
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
    c9ac:	6803      	ldr	r3, [r0, #0]
{
    c9ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ( st->substate->inverse) {
    c9b0:	685b      	ldr	r3, [r3, #4]
{
    c9b2:	4606      	mov	r6, r0
    c9b4:	4614      	mov	r4, r2
    if ( st->substate->inverse) {
    c9b6:	b123      	cbz	r3, c9c2 <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
    c9b8:	4833      	ldr	r0, [pc, #204]	; (ca88 <kiss_fftr+0xdc>)
    c9ba:	9101      	str	r1, [sp, #4]
    c9bc:	f000 f866 	bl	ca8c <_Z9ei_printfPKcz>
    c9c0:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
    c9c2:	6830      	ldr	r0, [r6, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
    c9c4:	6872      	ldr	r2, [r6, #4]
    ncfft = st->substate->nfft;
    c9c6:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
    c9c8:	f007 f876 	bl	13ab8 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
    c9cc:	6873      	ldr	r3, [r6, #4]
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
    c9ce:	2100      	movs	r1, #0
    tdc.r = st->tmpbuf[0].r;
    c9d0:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
    c9d4:	ed93 7a01 	vldr	s14, [r3, #4]
    freqdata[0].r = tdc.r + tdc.i;
    c9d8:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
    c9dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c9e0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
    c9e4:	edc4 6a00 	vstr	s13, [r4]

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    c9e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    freqdata[ncfft].r = tdc.r - tdc.i;
    c9ec:	edc2 7a00 	vstr	s15, [r2]
    freqdata[ncfft].i = freqdata[0].i = 0;
    c9f0:	6061      	str	r1, [r4, #4]
    c9f2:	6051      	str	r1, [r2, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    c9f4:	2101      	movs	r1, #1
    c9f6:	eb05 7cd5 	add.w	ip, r5, r5, lsr #31
    c9fa:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    c9fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    ca02:	458c      	cmp	ip, r1
    ca04:	db3e      	blt.n	ca84 <kiss_fftr+0xd8>
        fpk    = st->tmpbuf[k];
    ca06:	edd3 5a03 	vldr	s11, [r3, #12]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
    ca0a:	ed55 4a02 	vldr	s9, [r5, #-8]
        fpk    = st->tmpbuf[k];
    ca0e:	edd3 6a02 	vldr	s13, [r3, #8]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
    ca12:	ed55 7a01 	vldr	s15, [r5, #-4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    ca16:	00c8      	lsls	r0, r1, #3
    ca18:	f1a0 0708 	sub.w	r7, r0, #8
    ca1c:	68b0      	ldr	r0, [r6, #8]
        C_ADD( f1k, fpk , fpnk );
    ca1e:	ee34 7aa6 	vadd.f32	s14, s9, s13
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    ca22:	4438      	add	r0, r7
    ca24:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
    ca28:	ee76 6ae4 	vsub.f32	s13, s13, s9
    ca2c:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    ca30:	edd0 4a01 	vldr	s9, [r0, #4]
    ca34:	ed90 4a00 	vldr	s8, [r0]
    ca38:	ee64 5ae7 	vnmul.f32	s11, s9, s15
    ca3c:	ee67 7a84 	vmul.f32	s15, s15, s8
    ca40:	eee6 5a84 	vfma.f32	s11, s13, s8
    ca44:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    ca48:	ee77 6a25 	vadd.f32	s13, s14, s11
    ca4c:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    ca50:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    ca54:	edc4 6a02 	vstr	s13, [r4, #8]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    ca58:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    ca5c:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    ca60:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    ca64:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    ca68:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    ca6c:	edc4 6a03 	vstr	s13, [r4, #12]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    ca70:	3101      	adds	r1, #1
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    ca72:	ed02 7a02 	vstr	s14, [r2, #-8]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    ca76:	ed42 7a01 	vstr	s15, [r2, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    ca7a:	3308      	adds	r3, #8
    ca7c:	3d08      	subs	r5, #8
    ca7e:	3408      	adds	r4, #8
    ca80:	3a08      	subs	r2, #8
    ca82:	e7be      	b.n	ca02 <kiss_fftr+0x56>
    }
}
    ca84:	b003      	add	sp, #12
    ca86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca88:	00017eb1 	.word	0x00017eb1

0000ca8c <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
    ca8c:	b40f      	push	{r0, r1, r2, r3}
    ca8e:	b507      	push	{r0, r1, r2, lr}
    ca90:	ab04      	add	r3, sp, #16
    ca92:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
    ca96:	f44f 6180 	mov.w	r1, #1024	; 0x400
    ca9a:	4807      	ldr	r0, [pc, #28]	; (cab8 <_Z9ei_printfPKcz+0x2c>)
    va_start(args, format);
    ca9c:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
    ca9e:	f004 f81d 	bl	10adc <vsniprintf>
    va_end(args);

    if (r > 0) {
    caa2:	2800      	cmp	r0, #0
    caa4:	dd03      	ble.n	caae <_Z9ei_printfPKcz+0x22>
        printf("%s", print_buf);
    caa6:	4904      	ldr	r1, [pc, #16]	; (cab8 <_Z9ei_printfPKcz+0x2c>)
    caa8:	4804      	ldr	r0, [pc, #16]	; (cabc <_Z9ei_printfPKcz+0x30>)
    caaa:	f003 ffc9 	bl	10a40 <iprintf>
    }
}
    caae:	b003      	add	sp, #12
    cab0:	f85d eb04 	ldr.w	lr, [sp], #4
    cab4:	b004      	add	sp, #16
    cab6:	4770      	bx	lr
    cab8:	20003d69 	.word	0x20003d69
    cabc:	00017ed7 	.word	0x00017ed7

0000cac0 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
    cac0:	b510      	push	{r4, lr}
    cac2:	ee10 0a10 	vmov	r0, s0
    printf("%f", f);
    cac6:	f7f3 fcab 	bl	420 <__aeabi_f2d>
}
    caca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("%f", f);
    cace:	4602      	mov	r2, r0
    cad0:	460b      	mov	r3, r1
    cad2:	4801      	ldr	r0, [pc, #4]	; (cad8 <_Z15ei_printf_floatf+0x18>)
    cad4:	f003 bfb4 	b.w	10a40 <iprintf>
    cad8:	00017eda 	.word	0x00017eda

0000cadc <arm_mean_f32>:
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
    cadc:	460b      	mov	r3, r1
        float32_t sum = 0.0f;                          /* Temporary result storage */
    cade:	ed9f 7a0a 	vldr	s14, [pc, #40]	; cb08 <arm_mean_f32+0x2c>
{
    cae2:	b082      	sub	sp, #8
    cae4:	9101      	str	r1, [sp, #4]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
    cae6:	b94b      	cbnz	r3, cafc <arm_mean_f32+0x20>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
    cae8:	eddd 7a01 	vldr	s15, [sp, #4]
    caec:	eef8 7a67 	vcvt.f32.u32	s15, s15
    caf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    caf4:	edc2 6a00 	vstr	s13, [r2]
}
    caf8:	b002      	add	sp, #8
    cafa:	4770      	bx	lr
    sum += *pSrc++;
    cafc:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
    cb00:	3b01      	subs	r3, #1
    sum += *pSrc++;
    cb02:	ee37 7a27 	vadd.f32	s14, s14, s15
    blkCnt--;
    cb06:	e7ee      	b.n	cae6 <arm_mean_f32+0xa>
    cb08:	00000000 	.word	0x00000000

0000cb0c <arm_rms_f32>:
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
    cb0c:	ed9f 7a11 	vldr	s14, [pc, #68]	; cb54 <arm_rms_f32+0x48>
{
    cb10:	b513      	push	{r0, r1, r4, lr}
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
    cb12:	460b      	mov	r3, r1
{
    cb14:	4614      	mov	r4, r2
    cb16:	eef0 6a47 	vmov.f32	s13, s14
    cb1a:	9101      	str	r1, [sp, #4]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
    cb1c:	b983      	cbnz	r3, cb40 <arm_rms_f32+0x34>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
    cb1e:	eddd 7a01 	vldr	s15, [sp, #4]
    cb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cb26:	ee87 0a27 	vdiv.f32	s0, s14, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
    cb2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    cb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb32:	db0b      	blt.n	cb4c <arm_rms_f32+0x40>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
    cb34:	f002 ffce 	bl	fad4 <sqrtf>
    cb38:	ed84 0a00 	vstr	s0, [r4]
}
    cb3c:	b002      	add	sp, #8
    cb3e:	bd10      	pop	{r4, pc}
    in = *pSrc++;
    cb40:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
    cb44:	3b01      	subs	r3, #1
    sum += ( in * in);
    cb46:	ee07 7aa7 	vmla.f32	s14, s15, s15
    blkCnt--;
    cb4a:	e7e7      	b.n	cb1c <arm_rms_f32+0x10>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
    cb4c:	edc4 6a00 	vstr	s13, [r4]
}
    cb50:	e7f4      	b.n	cb3c <arm_rms_f32+0x30>
    cb52:	bf00      	nop
    cb54:	00000000 	.word	0x00000000

0000cb58 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cb58:	4a05      	ldr	r2, [pc, #20]	; (cb70 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
    cb5a:	e9d2 3200 	ldrd	r3, r2, [r2]
    cb5e:	1ad2      	subs	r2, r2, r3

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    cb60:	ebb1 0fe2 	cmp.w	r1, r2, asr #3
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
    cb64:	bfba      	itte	lt
    cb66:	eb03 03c1 	addlt.w	r3, r3, r1, lsl #3
    cb6a:	6858      	ldrlt	r0, [r3, #4]
    return NULL;
    cb6c:	2000      	movge	r0, #0
}
    cb6e:	4770      	bx	lr
    cb70:	20003b2c 	.word	0x20003b2c

0000cb74 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}
    cb74:	4801      	ldr	r0, [pc, #4]	; (cb7c <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x8>)
    cb76:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    cb7a:	4770      	bx	lr
    cb7c:	200036bc 	.word	0x200036bc

0000cb80 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}
    cb80:	200c      	movs	r0, #12
    cb82:	4b02      	ldr	r3, [pc, #8]	; (cb8c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xc>)
    cb84:	fb00 3001 	mla	r0, r0, r1, r3
    cb88:	4770      	bx	lr
    cb8a:	bf00      	nop
    cb8c:	200039c0 	.word	0x200039c0

0000cb90 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
    cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb94:	4603      	mov	r3, r0
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
    cb96:	f44f 7188 	mov.w	r1, #272	; 0x110
    cb9a:	2010      	movs	r0, #16
TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
    cb9c:	b089      	sub	sp, #36	; 0x24
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
    cb9e:	4798      	blx	r3
    cba0:	4b5a      	ldr	r3, [pc, #360]	; (cd0c <_Z18trained_model_initPFPvjjE+0x17c>)
    cba2:	4604      	mov	r4, r0
    cba4:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
    cba6:	b930      	cbnz	r0, cbb6 <_Z18trained_model_initPFPvjjE+0x26>
    printf("ERR: failed to allocate tensor arena\n");
    cba8:	4859      	ldr	r0, [pc, #356]	; (cd10 <_Z18trained_model_initPFPvjjE+0x180>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    cbaa:	f003 ff49 	bl	10a40 <iprintf>
    return kTfLiteError;
    cbae:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
    cbb0:	b009      	add	sp, #36	; 0x24
    cbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ctx.tensors_size = 11;
    cbb6:	270b      	movs	r7, #11
    tflTensors[i].is_variable = 0;
    cbb8:	f04f 0e00 	mov.w	lr, #0
  current_location = tensor_arena + kTensorArenaSize;
    cbbc:	4b55      	ldr	r3, [pc, #340]	; (cd14 <_Z18trained_model_initPFPvjjE+0x184>)
    cbbe:	f500 7c88 	add.w	ip, r0, #272	; 0x110
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
    cbc2:	4a55      	ldr	r2, [pc, #340]	; (cd18 <_Z18trained_model_initPFPvjjE+0x188>)
  current_location = tensor_arena + kTensorArenaSize;
    cbc4:	f8c3 c000 	str.w	ip, [r3]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
    cbc8:	4b54      	ldr	r3, [pc, #336]	; (cd1c <_Z18trained_model_initPFPvjjE+0x18c>)
  tensor_boundary = tensor_arena;
    cbca:	4e55      	ldr	r6, [pc, #340]	; (cd20 <_Z18trained_model_initPFPvjjE+0x190>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
    cbcc:	6393      	str	r3, [r2, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
    cbce:	4b55      	ldr	r3, [pc, #340]	; (cd24 <_Z18trained_model_initPFPvjjE+0x194>)
  ctx.tensors_size = 11;
    cbd0:	6017      	str	r7, [r2, #0]
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
    cbd2:	6413      	str	r3, [r2, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
    cbd4:	4b54      	ldr	r3, [pc, #336]	; (cd28 <_Z18trained_model_initPFPvjjE+0x198>)
    cbd6:	4d55      	ldr	r5, [pc, #340]	; (cd2c <_Z18trained_model_initPFPvjjE+0x19c>)
    cbd8:	6453      	str	r3, [r2, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
    cbda:	4b55      	ldr	r3, [pc, #340]	; (cd30 <_Z18trained_model_initPFPvjjE+0x1a0>)
  tensor_boundary = tensor_arena;
    cbdc:	6030      	str	r0, [r6, #0]
  ctx.GetTensor = &GetTensor;
    cbde:	6513      	str	r3, [r2, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
    cbe0:	4b54      	ldr	r3, [pc, #336]	; (cd34 <_Z18trained_model_initPFPvjjE+0x1a4>)
    cbe2:	6553      	str	r3, [r2, #84]	; 0x54
  ctx.tensors = tflTensors;
    cbe4:	4b54      	ldr	r3, [pc, #336]	; (cd38 <_Z18trained_model_initPFPvjjE+0x1a8>)
    cbe6:	6093      	str	r3, [r2, #8]
  for(size_t i = 0; i < 11; ++i) {
    cbe8:	4a54      	ldr	r2, [pc, #336]	; (cd3c <_Z18trained_model_initPFPvjjE+0x1ac>)
    tflTensors[i].type = tensorData[i].type;
    cbea:	7851      	ldrb	r1, [r2, #1]
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    cbec:	f892 9000 	ldrb.w	r9, [r2]
    tflTensors[i].type = tensorData[i].type;
    cbf0:	7019      	strb	r1, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
    cbf2:	7229      	strb	r1, [r5, #8]
    tflTensors[i].dims = tensorData[i].dims;
    cbf4:	6891      	ldr	r1, [r2, #8]
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
    cbf6:	f1b9 0f02 	cmp.w	r9, #2
    tflTensors[i].dims = tensorData[i].dims;
    cbfa:	6099      	str	r1, [r3, #8]
    tflEvalTensors[i].dims = tensorData[i].dims;
    cbfc:	6069      	str	r1, [r5, #4]
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
    cbfe:	6851      	ldr	r1, [r2, #4]
    tflTensors[i].bytes = tensorData[i].bytes;
    cc00:	f8d2 800c 	ldr.w	r8, [r2, #12]
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
    cc04:	bf08      	it	eq
    cc06:	1909      	addeq	r1, r1, r4
    tflTensors[i].quantization = tensorData[i].quantization;
    cc08:	f103 0a30 	add.w	sl, r3, #48	; 0x30
       tflTensors[i].data.data = tensorData[i].data;
    cc0c:	6059      	str	r1, [r3, #4]
    tflTensors[i].is_variable = 0;
    cc0e:	f883 e02d 	strb.w	lr, [r3, #45]	; 0x2d
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    cc12:	f883 9014 	strb.w	r9, [r3, #20]
    tflTensors[i].bytes = tensorData[i].bytes;
    cc16:	f8c3 8018 	str.w	r8, [r3, #24]
       tflEvalTensors[i].data.data = tensorData[i].data;
    cc1a:	6029      	str	r1, [r5, #0]
    tflTensors[i].quantization = tensorData[i].quantization;
    cc1c:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
    cc20:	e88a 0003 	stmia.w	sl, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
    cc24:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    cc28:	2901      	cmp	r1, #1
    cc2a:	d106      	bne.n	cc3a <_Z18trained_model_initPFPvjjE+0xaa>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    cc2c:	6951      	ldr	r1, [r2, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
    cc2e:	6808      	ldr	r0, [r1, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    cc30:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
    cc32:	6840      	ldr	r0, [r0, #4]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    cc34:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
    cc36:	60d8      	str	r0, [r3, #12]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    cc38:	6119      	str	r1, [r3, #16]
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
    cc3a:	f1b9 0f02 	cmp.w	r9, #2
    cc3e:	d105      	bne.n	cc4c <_Z18trained_model_initPFPvjjE+0xbc>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
    cc40:	6859      	ldr	r1, [r3, #4]
      if (data_end_ptr > tensor_boundary) {
    cc42:	6830      	ldr	r0, [r6, #0]
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
    cc44:	4441      	add	r1, r8
      if (data_end_ptr > tensor_boundary) {
    cc46:	4281      	cmp	r1, r0
        tensor_boundary = data_end_ptr;
    cc48:	bf88      	it	hi
    cc4a:	6031      	strhi	r1, [r6, #0]
  for(size_t i = 0; i < 11; ++i) {
    cc4c:	3f01      	subs	r7, #1
    cc4e:	f102 0218 	add.w	r2, r2, #24
    cc52:	f103 0340 	add.w	r3, r3, #64	; 0x40
    cc56:	f105 050c 	add.w	r5, r5, #12
    cc5a:	d1c6      	bne.n	cbea <_Z18trained_model_initPFPvjjE+0x5a>
  if (tensor_boundary > current_location /* end of arena size */) {
    cc5c:	6833      	ldr	r3, [r6, #0]
    cc5e:	459c      	cmp	ip, r3
    cc60:	d201      	bcs.n	cc66 <_Z18trained_model_initPFPvjjE+0xd6>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    cc62:	4837      	ldr	r0, [pc, #220]	; (cd40 <_Z18trained_model_initPFPvjjE+0x1b0>)
    cc64:	e7a1      	b.n	cbaa <_Z18trained_model_initPFPvjjE+0x1a>
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
    cc66:	466d      	mov	r5, sp
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
    cc68:	466e      	mov	r6, sp
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
    cc6a:	4c36      	ldr	r4, [pc, #216]	; (cd44 <_Z18trained_model_initPFPvjjE+0x1b4>)
    cc6c:	4668      	mov	r0, sp
    cc6e:	f001 f863 	bl	dd38 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    cc72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cc74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cc76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cc7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
    cc7e:	4668      	mov	r0, sp
    cc80:	f001 f932 	bl	dee8 <_ZN6tflite16Register_SOFTMAXEv>
    cc84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cc86:	f104 0c10 	add.w	ip, r4, #16
    cc8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    cc8e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; cd48 <_Z18trained_model_initPFPvjjE+0x1b8>
    cc92:	f8df 80b8 	ldr.w	r8, [pc, #184]	; cd4c <_Z18trained_model_initPFPvjjE+0x1bc>
    cc96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cc9a:	46ca      	mov	sl, r9
    cc9c:	4645      	mov	r5, r8
    cc9e:	2604      	movs	r6, #4
    cca0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    cca4:	f8df b070 	ldr.w	fp, [pc, #112]	; cd18 <_Z18trained_model_initPFPvjjE+0x188>
    cca8:	3c10      	subs	r4, #16
    tflNodes[i].inputs = nodeData[i].inputs;
    ccaa:	f8da 3000 	ldr.w	r3, [sl]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    ccae:	f8da 1008 	ldr.w	r1, [sl, #8]
    tflNodes[i].inputs = nodeData[i].inputs;
    ccb2:	602b      	str	r3, [r5, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
    ccb4:	f8da 3004 	ldr.w	r3, [sl, #4]
tflNodes[i].custom_initial_data = nullptr;
    ccb8:	e9c5 1705 	strd	r1, r7, [r5, #20]
    tflNodes[i].outputs = nodeData[i].outputs;
    ccbc:	606b      	str	r3, [r5, #4]
if (registrations[nodeData[i].used_op_index].init) {
    ccbe:	f89a 300c 	ldrb.w	r3, [sl, #12]
      tflNodes[i].custom_initial_data_size = 0;
    ccc2:	61ef      	str	r7, [r5, #28]
if (registrations[nodeData[i].used_op_index].init) {
    ccc4:	015b      	lsls	r3, r3, #5
    ccc6:	58e3      	ldr	r3, [r4, r3]
    ccc8:	b11b      	cbz	r3, ccd2 <_Z18trained_model_initPFPvjjE+0x142>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    ccca:	2200      	movs	r2, #0
    cccc:	4658      	mov	r0, fp
    ccce:	4798      	blx	r3
    ccd0:	6128      	str	r0, [r5, #16]
  for(size_t i = 0; i < 4; ++i) {
    ccd2:	3e01      	subs	r6, #1
    ccd4:	f10a 0a10 	add.w	sl, sl, #16
    ccd8:	f105 0524 	add.w	r5, r5, #36	; 0x24
    ccdc:	d1e5      	bne.n	ccaa <_Z18trained_model_initPFPvjjE+0x11a>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
    ccde:	4d0e      	ldr	r5, [pc, #56]	; (cd18 <_Z18trained_model_initPFPvjjE+0x188>)
    if (registrations[nodeData[i].used_op_index].prepare) {
    cce0:	f899 300c 	ldrb.w	r3, [r9, #12]
    cce4:	eb04 1343 	add.w	r3, r4, r3, lsl #5
    cce8:	689b      	ldr	r3, [r3, #8]
    ccea:	b943      	cbnz	r3, ccfe <_Z18trained_model_initPFPvjjE+0x16e>
  for(size_t i = 0; i < 4; ++i) {
    ccec:	3601      	adds	r6, #1
    ccee:	2e04      	cmp	r6, #4
    ccf0:	f109 0910 	add.w	r9, r9, #16
    ccf4:	f108 0824 	add.w	r8, r8, #36	; 0x24
    ccf8:	d1f2      	bne.n	cce0 <_Z18trained_model_initPFPvjjE+0x150>
  return kTfLiteOk;
    ccfa:	2000      	movs	r0, #0
    ccfc:	e758      	b.n	cbb0 <_Z18trained_model_initPFPvjjE+0x20>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
    ccfe:	4641      	mov	r1, r8
    cd00:	4628      	mov	r0, r5
    cd02:	4798      	blx	r3
      if (status != kTfLiteOk) {
    cd04:	2800      	cmp	r0, #0
    cd06:	d0f1      	beq.n	ccec <_Z18trained_model_initPFPvjjE+0x15c>
    cd08:	e752      	b.n	cbb0 <_Z18trained_model_initPFPvjjE+0x20>
    cd0a:	bf00      	nop
    cd0c:	2000397c 	.word	0x2000397c
    cd10:	00017edd 	.word	0x00017edd
    cd14:	20003b3c 	.word	0x20003b3c
    cd18:	20003a44 	.word	0x20003a44
    cd1c:	0000ce9d 	.word	0x0000ce9d
    cd20:	20003b38 	.word	0x20003b38
    cd24:	0000cf0d 	.word	0x0000cf0d
    cd28:	0000cb59 	.word	0x0000cb59
    cd2c:	200039c0 	.word	0x200039c0
    cd30:	0000cb75 	.word	0x0000cb75
    cd34:	0000cb81 	.word	0x0000cb81
    cd38:	200036bc 	.word	0x200036bc
    cd3c:	200001c0 	.word	0x200001c0
    cd40:	00017f03 	.word	0x00017f03
    cd44:	20003980 	.word	0x20003980
    cd48:	0001716c 	.word	0x0001716c
    cd4c:	20003a9c 	.word	0x20003a9c

0000cd50 <_Z19trained_model_inputi>:
static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}
    cd50:	4b01      	ldr	r3, [pc, #4]	; (cd58 <_Z19trained_model_inputi+0x8>)
    cd52:	6898      	ldr	r0, [r3, #8]
    cd54:	4770      	bx	lr
    cd56:	bf00      	nop
    cd58:	20003a44 	.word	0x20003a44

0000cd5c <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
    cd5c:	4b02      	ldr	r3, [pc, #8]	; (cd68 <_Z20trained_model_outputi+0xc>)
    cd5e:	6898      	ldr	r0, [r3, #8]
}
    cd60:	f500 7020 	add.w	r0, r0, #640	; 0x280
    cd64:	4770      	bx	lr
    cd66:	bf00      	nop
    cd68:	20003a44 	.word	0x20003a44

0000cd6c <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
    cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for(size_t i = 0; i < 4; ++i) {
    cd70:	2400      	movs	r4, #0
    cd72:	4e0b      	ldr	r6, [pc, #44]	; (cda0 <_Z20trained_model_invokev+0x34>)
    cd74:	4d0b      	ldr	r5, [pc, #44]	; (cda4 <_Z20trained_model_invokev+0x38>)
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    cd76:	4f0c      	ldr	r7, [pc, #48]	; (cda8 <_Z20trained_model_invokev+0x3c>)
    cd78:	f8df 8030 	ldr.w	r8, [pc, #48]	; cdac <_Z20trained_model_invokev+0x40>
    cd7c:	7b33      	ldrb	r3, [r6, #12]
    cd7e:	4629      	mov	r1, r5
    cd80:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    cd84:	4640      	mov	r0, r8
    cd86:	68db      	ldr	r3, [r3, #12]
    cd88:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
    cd8a:	b930      	cbnz	r0, cd9a <_Z20trained_model_invokev+0x2e>
  for(size_t i = 0; i < 4; ++i) {
    cd8c:	3401      	adds	r4, #1
    cd8e:	2c04      	cmp	r4, #4
    cd90:	f106 0610 	add.w	r6, r6, #16
    cd94:	f105 0524 	add.w	r5, r5, #36	; 0x24
    cd98:	d1f0      	bne.n	cd7c <_Z20trained_model_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
    cd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd9e:	bf00      	nop
    cda0:	0001716c 	.word	0x0001716c
    cda4:	20003a9c 	.word	0x20003a9c
    cda8:	20003980 	.word	0x20003980
    cdac:	20003a44 	.word	0x20003a44

0000cdb0 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
    cdb0:	b538      	push	{r3, r4, r5, lr}
    cdb2:	2400      	movs	r4, #0
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
    cdb4:	4a0e      	ldr	r2, [pc, #56]	; (cdf0 <_Z19trained_model_resetPFvPvE+0x40>)
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
    cdb6:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
    cdb8:	6810      	ldr	r0, [r2, #0]
    cdba:	4798      	blx	r3
      { _M_erase_at_end(this->_M_impl._M_start); }
    cdbc:	4b0d      	ldr	r3, [pc, #52]	; (cdf4 <_Z19trained_model_resetPFvPvE+0x44>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cdbe:	4d0e      	ldr	r5, [pc, #56]	; (cdf8 <_Z19trained_model_resetPFvPvE+0x48>)
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    cdc0:	e9d3 2100 	ldrd	r2, r1, [r3]
    cdc4:	428a      	cmp	r2, r1
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    cdc6:	bf18      	it	ne
    cdc8:	605a      	strne	r2, [r3, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cdca:	e9d5 3200 	ldrd	r3, r2, [r5]
    cdce:	1ad1      	subs	r1, r2, r3
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    cdd0:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
    cdd4:	d205      	bcs.n	cde2 <_Z19trained_model_resetPFvPvE+0x32>
    free(overflow_buffers[ix]);
    cdd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    cdda:	f003 f8f7 	bl	ffcc <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    cdde:	3401      	adds	r4, #1
    cde0:	e7f3      	b.n	cdca <_Z19trained_model_resetPFvPvE+0x1a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
    cde2:	4293      	cmp	r3, r2
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
    cde4:	f04f 0000 	mov.w	r0, #0
	    this->_M_impl._M_finish = __pos;
    cde8:	bf18      	it	ne
    cdea:	606b      	strne	r3, [r5, #4]
    cdec:	bd38      	pop	{r3, r4, r5, pc}
    cdee:	bf00      	nop
    cdf0:	2000397c 	.word	0x2000397c
    cdf4:	20003b2c 	.word	0x20003b2c
    cdf8:	20003b40 	.word	0x20003b40

0000cdfc <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
    cdfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ce00:	e9d0 9800 	ldrd	r9, r8, [r0]
	if (max_size() - size() < __n)
    ce04:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    ce08:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ce0a:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
    ce0e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    ce12:	4607      	mov	r7, r0
    ce14:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ce16:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
    ce1a:	d102      	bne.n	ce22 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
    ce1c:	481e      	ldr	r0, [pc, #120]	; (ce98 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
    ce1e:	f007 fe8b 	bl	14b38 <_ZSt20__throw_length_errorPKc>
    ce22:	2c01      	cmp	r4, #1
    ce24:	4622      	mov	r2, r4
    ce26:	bf38      	it	cc
    ce28:	2201      	movcc	r2, #1
    ce2a:	18a4      	adds	r4, r4, r2
    ce2c:	eba1 0509 	sub.w	r5, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    ce30:	d22d      	bcs.n	ce8e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x92>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ce32:	b374      	cbz	r4, ce92 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
    ce34:	429c      	cmp	r4, r3
    ce36:	bf28      	it	cs
    ce38:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    ce3a:	00a0      	lsls	r0, r4, #2
    ce3c:	f007 fe69 	bl	14b12 <_Znwj>
    ce40:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    ce42:	42ee      	cmn	r6, r5
    ce44:	bf1c      	itt	ne
    ce46:	f8db 3000 	ldrne.w	r3, [fp]
    ce4a:	5173      	strne	r3, [r6, r5]
      if (__count > 0)
    ce4c:	2d00      	cmp	r5, #0
    ce4e:	dd04      	ble.n	ce5a <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    ce50:	462a      	mov	r2, r5
    ce52:	4649      	mov	r1, r9
    ce54:	4630      	mov	r0, r6
    ce56:	f007 febb 	bl	14bd0 <memmove>
      ptrdiff_t __count = __last - __first;
    ce5a:	eba8 080a 	sub.w	r8, r8, sl
	      ++__new_finish;
    ce5e:	3504      	adds	r5, #4
      if (__count > 0)
    ce60:	f1b8 0f00 	cmp.w	r8, #0
    ce64:	4435      	add	r5, r6
    ce66:	dd04      	ble.n	ce72 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    ce68:	4642      	mov	r2, r8
    ce6a:	4651      	mov	r1, sl
    ce6c:	4628      	mov	r0, r5
    ce6e:	f007 fea2 	bl	14bb6 <memcpy>
      return __result + __count;
    ce72:	4445      	add	r5, r8
	if (__p)
    ce74:	f1b9 0f00 	cmp.w	r9, #0
    ce78:	d002      	beq.n	ce80 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	::operator delete(__p
    ce7a:	4648      	mov	r0, r9
    ce7c:	f007 fe45 	bl	14b0a <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    ce80:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
    ce84:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    ce88:	60bc      	str	r4, [r7, #8]
    }
    ce8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    ce8e:	461c      	mov	r4, r3
    ce90:	e7d3      	b.n	ce3a <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ce92:	4626      	mov	r6, r4
    ce94:	e7d5      	b.n	ce42 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
    ce96:	bf00      	nop
    ce98:	00017d8c 	.word	0x00017d8c

0000ce9c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
    ce9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (current_location - bytes < tensor_boundary) {
    ce9e:	4b17      	ldr	r3, [pc, #92]	; (cefc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
                                       size_t bytes) {
    cea0:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
    cea2:	681c      	ldr	r4, [r3, #0]
    cea4:	1a64      	subs	r4, r4, r1
    cea6:	4916      	ldr	r1, [pc, #88]	; (cf00 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
    cea8:	6809      	ldr	r1, [r1, #0]
    ceaa:	428c      	cmp	r4, r1
    ceac:	d21f      	bcs.n	ceee <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x52>
    ptr = ei_calloc(bytes, 1);
    ceae:	4610      	mov	r0, r2
    ceb0:	2101      	movs	r1, #1
    ceb2:	9201      	str	r2, [sp, #4]
    ceb4:	f006 fcdd 	bl	13872 <_Z9ei_callocjj>
    if (ptr == NULL) {
    ceb8:	9a01      	ldr	r2, [sp, #4]
    ptr = ei_calloc(bytes, 1);
    ceba:	4604      	mov	r4, r0
    cebc:	9003      	str	r0, [sp, #12]
    if (ptr == NULL) {
    cebe:	b930      	cbnz	r0, cece <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
    cec0:	4611      	mov	r1, r2
    cec2:	4810      	ldr	r0, [pc, #64]	; (cf04 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
    cec4:	f003 fdbc 	bl	10a40 <iprintf>
}
    cec8:	4620      	mov	r0, r4
    ceca:	b004      	add	sp, #16
    cecc:	bd10      	pop	{r4, pc}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    cece:	480e      	ldr	r0, [pc, #56]	; (cf08 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
    ced0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
    ced4:	4299      	cmp	r1, r3
    ced6:	d006      	beq.n	cee6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    ced8:	b101      	cbz	r1, cedc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x40>
    ceda:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
    cedc:	6843      	ldr	r3, [r0, #4]
    cede:	3304      	adds	r3, #4
    cee0:	6043      	str	r3, [r0, #4]
    return ptr;
    cee2:	9c03      	ldr	r4, [sp, #12]
    cee4:	e7f0      	b.n	cec8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
	  _M_realloc_insert(end(), __x);
    cee6:	aa03      	add	r2, sp, #12
    cee8:	f7ff ff88 	bl	cdfc <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
    ceec:	e7f9      	b.n	cee2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x46>
  memset(ptr, 0, bytes);
    ceee:	2100      	movs	r1, #0
    cef0:	4620      	mov	r0, r4
  current_location -= bytes;
    cef2:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
    cef4:	f007 fe86 	bl	14c04 <memset>
  return ptr;
    cef8:	e7e6      	b.n	cec8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
    cefa:	bf00      	nop
    cefc:	20003b3c 	.word	0x20003b3c
    cf00:	20003b38 	.word	0x20003b38
    cf04:	00017f56 	.word	0x00017f56
    cf08:	20003b40 	.word	0x20003b40

0000cf0c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
    cf0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf10:	4689      	mov	r9, r1
    cf12:	4617      	mov	r7, r2
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
    cf14:	f7ff ffc2 	bl	ce9c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
    cf18:	4683      	mov	fp, r0
    cf1a:	2800      	cmp	r0, #0
    cf1c:	d04e      	beq.n	cfbc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    cf1e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cfc8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xbc>
    cf22:	e9d8 4301 	ldrd	r4, r3, [r8, #4]
    cf26:	429c      	cmp	r4, r3
    cf28:	d00e      	beq.n	cf48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>
    cf2a:	b10c      	cbz	r4, cf30 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
    cf2c:	e9c4 9000 	strd	r9, r0, [r4]
	    ++this->_M_impl._M_finish;
    cf30:	3408      	adds	r4, #8
    cf32:	f8c8 4004 	str.w	r4, [r8, #4]
  return kTfLiteOk;
    cf36:	2000      	movs	r0, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cf38:	e9d8 2300 	ldrd	r2, r3, [r8]
    cf3c:	1a9b      	subs	r3, r3, r2
    cf3e:	10db      	asrs	r3, r3, #3
  *buffer_idx = scratch_buffers.size() - 1;
    cf40:	3b01      	subs	r3, #1
    cf42:	603b      	str	r3, [r7, #0]
}
    cf44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (max_size() - size() < __n)
    cf48:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cf4c:	f8d8 a000 	ldr.w	sl, [r8]
    cf50:	eba4 040a 	sub.w	r4, r4, sl
	if (max_size() - size() < __n)
    cf54:	ebb3 0fe4 	cmp.w	r3, r4, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    cf58:	ea4f 05e4 	mov.w	r5, r4, asr #3
	if (max_size() - size() < __n)
    cf5c:	d102      	bne.n	cf64 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x58>
	  __throw_length_error(__N(__s));
    cf5e:	4819      	ldr	r0, [pc, #100]	; (cfc4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb8>)
    cf60:	f007 fdea 	bl	14b38 <_ZSt20__throw_length_errorPKc>
    cf64:	2d01      	cmp	r5, #1
    cf66:	462a      	mov	r2, r5
    cf68:	bf38      	it	cc
    cf6a:	2201      	movcc	r2, #1
    cf6c:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    cf6e:	d227      	bcs.n	cfc0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb4>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    cf70:	b13d      	cbz	r5, cf82 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x76>
    cf72:	429d      	cmp	r5, r3
    cf74:	bf28      	it	cs
    cf76:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    cf78:	00e8      	lsls	r0, r5, #3
    cf7a:	f007 fdca 	bl	14b12 <_Znwj>
    cf7e:	4606      	mov	r6, r0
    cf80:	e000      	b.n	cf84 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x78>
    cf82:	462e      	mov	r6, r5
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    cf84:	1933      	adds	r3, r6, r4
    cf86:	bf1c      	itt	ne
    cf88:	f846 9004 	strne.w	r9, [r6, r4]
    cf8c:	f8c3 b004 	strne.w	fp, [r3, #4]
      if (__count > 0)
    cf90:	2c00      	cmp	r4, #0
    cf92:	dd04      	ble.n	cf9e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x92>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    cf94:	4622      	mov	r2, r4
    cf96:	4651      	mov	r1, sl
    cf98:	4630      	mov	r0, r6
    cf9a:	f007 fe19 	bl	14bd0 <memmove>
	      ++__new_finish;
    cf9e:	3408      	adds	r4, #8
    cfa0:	4434      	add	r4, r6
	if (__p)
    cfa2:	f1ba 0f00 	cmp.w	sl, #0
    cfa6:	d002      	beq.n	cfae <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xa2>
	::operator delete(__p
    cfa8:	4650      	mov	r0, sl
    cfaa:	f007 fdae 	bl	14b0a <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cfae:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
      this->_M_impl._M_finish = __new_finish;
    cfb2:	e9c8 6400 	strd	r6, r4, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    cfb6:	f8c8 5008 	str.w	r5, [r8, #8]
    cfba:	e7bc      	b.n	cf36 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2a>
    return kTfLiteError;
    cfbc:	2001      	movs	r0, #1
    cfbe:	e7c1      	b.n	cf44 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x38>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    cfc0:	461d      	mov	r5, r3
    cfc2:	e7d9      	b.n	cf78 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x6c>
    cfc4:	00017d8c 	.word	0x00017d8c
    cfc8:	20003b2c 	.word	0x20003b2c

0000cfcc <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
}
    cfcc:	b510      	push	{r4, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
    cfce:	2400      	movs	r4, #0
};const NodeInfo_t nodeData[] = {
    cfd0:	4b10      	ldr	r3, [pc, #64]	; (d014 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x48>)
    cfd2:	4811      	ldr	r0, [pc, #68]	; (d018 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x4c>)
    cfd4:	681a      	ldr	r2, [r3, #0]
    cfd6:	4b11      	ldr	r3, [pc, #68]	; (d01c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x50>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
    cfd8:	f102 0130 	add.w	r1, r2, #48	; 0x30
};const NodeInfo_t nodeData[] = {
    cfdc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
    cfe0:	f102 0110 	add.w	r1, r2, #16
    cfe4:	e9c0 4400 	strd	r4, r4, [r0]
};const NodeInfo_t nodeData[] = {
    cfe8:	605a      	str	r2, [r3, #4]
    cfea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    cfee:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    cff2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
static std::vector<void*> overflow_buffers;
    cff6:	490a      	ldr	r1, [pc, #40]	; (d020 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x54>)
    cff8:	4a0a      	ldr	r2, [pc, #40]	; (d024 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x58>)
    cffa:	6084      	str	r4, [r0, #8]
    cffc:	f005 fa93 	bl	12526 <__aeabi_atexit>
    d000:	4809      	ldr	r0, [pc, #36]	; (d028 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x5c>)
static std::vector<scratch_buffer_t> scratch_buffers;
    d002:	4a08      	ldr	r2, [pc, #32]	; (d024 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x58>)
    d004:	e9c0 4400 	strd	r4, r4, [r0]
    d008:	6084      	str	r4, [r0, #8]
    d00a:	4908      	ldr	r1, [pc, #32]	; (d02c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x60>)
}
    d00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::vector<scratch_buffer_t> scratch_buffers;
    d010:	f005 ba89 	b.w	12526 <__aeabi_atexit>
    d014:	2000397c 	.word	0x2000397c
    d018:	20003b40 	.word	0x20003b40
    d01c:	200001c0 	.word	0x200001c0
    d020:	00013a45 	.word	0x00013a45
    d024:	20000884 	.word	0x20000884
    d028:	20003b2c 	.word	0x20003b2c
    d02c:	00013a55 	.word	0x00013a55

0000d030 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
{
    d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d034:	ed2d 8b08 	vpush	{d8-d11}
    d038:	4616      	mov	r6, r2
    d03a:	b089      	sub	sp, #36	; 0x24
    d03c:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
    d040:	460f      	mov	r7, r1
    const int m=*factors++; /* stage's fft length/p */
    d042:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
    d046:	6811      	ldr	r1, [r2, #0]
    if (m==1) {
    d048:	f1ba 0f01 	cmp.w	sl, #1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    d04c:	fb0a f901 	mul.w	r9, sl, r1
    const int p=*factors++; /* the radix  */
    d050:	9103      	str	r1, [sp, #12]
            f += fstride*in_stride;
    d052:	fb06 f103 	mul.w	r1, r6, r3
{
    d056:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    d058:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
    d05c:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
    d060:	d116      	bne.n	d090 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
    d062:	4603      	mov	r3, r0
            *Fout = *f;
    d064:	e897 0003 	ldmia.w	r7, {r0, r1}
    d068:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
    d06c:	3308      	adds	r3, #8
    d06e:	4599      	cmp	r9, r3
            f += fstride*in_stride;
    d070:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
    d072:	d1f7      	bne.n	d064 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
    d074:	f505 7384 	add.w	r3, r5, #264	; 0x108
    d078:	9305      	str	r3, [sp, #20]
    switch (p) {
    d07a:	9b03      	ldr	r3, [sp, #12]
    d07c:	3b02      	subs	r3, #2
    d07e:	2b03      	cmp	r3, #3
    d080:	f200 8286 	bhi.w	d590 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x560>
    d084:	e8df f013 	tbh	[pc, r3, lsl #1]
    d088:	0056001b 	.word	0x0056001b
    d08c:	019800fb 	.word	0x019800fb
    const int m=*factors++; /* stage's fft length/p */
    d090:	3208      	adds	r2, #8
    d092:	9204      	str	r2, [sp, #16]
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    d094:	9a03      	ldr	r2, [sp, #12]
        }while( (Fout += m) != Fout_end );
    d096:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    d09a:	4372      	muls	r2, r6
    d09c:	9904      	ldr	r1, [sp, #16]
    d09e:	9501      	str	r5, [sp, #4]
    d0a0:	9100      	str	r1, [sp, #0]
    d0a2:	4639      	mov	r1, r7
    d0a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d0a8:	9005      	str	r0, [sp, #20]
    d0aa:	f7ff ffc1 	bl	d030 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
    d0ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d0b2:	9805      	ldr	r0, [sp, #20]
            f += fstride*in_stride;
    d0b4:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
    d0b6:	4458      	add	r0, fp
    d0b8:	4581      	cmp	r9, r0
    d0ba:	d1ef      	bne.n	d09c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
    d0bc:	e7da      	b.n	d074 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
    d0be:	f10a 0301 	add.w	r3, sl, #1
    d0c2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
    d0c6:	00f6      	lsls	r6, r6, #3
    d0c8:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
    d0ca:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    d0ce:	ed53 5a01 	vldr	s11, [r3, #-4]
    d0d2:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
    d0d6:	ed13 6a02 	vldr	s12, [r3, #-8]
    d0da:	ee26 7ae5 	vnmul.f32	s14, s13, s11
    d0de:	eea6 7a27 	vfma.f32	s14, s12, s15
    d0e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
    d0e6:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
    d0ea:	ed54 6a02 	vldr	s13, [r4, #-8]
    d0ee:	ee76 6ac7 	vsub.f32	s13, s13, s14
    d0f2:	ed43 6a02 	vstr	s13, [r3, #-8]
    d0f6:	ed54 6a01 	vldr	s13, [r4, #-4]
    d0fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
    d0fe:	ed43 6a01 	vstr	s13, [r3, #-4]
        C_ADDTO( *Fout ,  t );
    d102:	ed54 6a02 	vldr	s13, [r4, #-8]
    d106:	ee36 7a87 	vadd.f32	s14, s13, s14
    d10a:	ed04 7a02 	vstr	s14, [r4, #-8]
    d10e:	ed14 7a01 	vldr	s14, [r4, #-4]
    d112:	ee77 7a27 	vadd.f32	s15, s14, s15
    }while (--m);
    d116:	f1ba 0a01 	subs.w	sl, sl, #1
        C_ADDTO( *Fout ,  t );
    d11a:	ed44 7a01 	vstr	s15, [r4, #-4]
    }while (--m);
    d11e:	f103 0308 	add.w	r3, r3, #8
    d122:	f104 0408 	add.w	r4, r4, #8
    d126:	4435      	add	r5, r6
    d128:	d1cf      	bne.n	d0ca <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
}
    d12a:	b009      	add	sp, #36	; 0x24
    d12c:	ecbd 8b08 	vpop	{d8-d11}
    d130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
    d134:	fb06 f30a 	mul.w	r3, r6, sl
    d138:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    d13c:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
    d140:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
    d144:	0133      	lsls	r3, r6, #4
    d146:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
    d14a:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
    d14e:	f104 0608 	add.w	r6, r4, #8
    d152:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
    d154:	4657      	mov	r7, sl
         Fout[m2].i = Fout[m].i - scratch[0].r;
    d156:	eef1 9a49 	vneg.f32	s19, s18
         tw2 += fstride*2;
    d15a:	46aa      	mov	sl, r5
    d15c:	9303      	str	r3, [sp, #12]
    d15e:	3404      	adds	r4, #4
         C_MUL(scratch[1],Fout[m] , *tw1);
    d160:	edd8 7a01 	vldr	s15, [r8, #4]
    d164:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    d168:	ee66 8ae7 	vnmul.f32	s17, s13, s15
    d16c:	ed14 6a01 	vldr	s12, [r4, #-4]
    d170:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
    d174:	eeb0 7a68 	vmov.f32	s14, s17
    d178:	eea6 7a08 	vfma.f32	s14, s12, s16
    d17c:	ee28 8a27 	vmul.f32	s16, s16, s15
    d180:	eef0 7a48 	vmov.f32	s15, s16
         C_MUL(scratch[2],Fout[m2] , *tw2);
    d184:	edd9 5a01 	vldr	s11, [r9, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
    d188:	eee6 7a26 	vfma.f32	s15, s12, s13
         C_MUL(scratch[2],Fout[m2] , *tw2);
    d18c:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
    d190:	ed99 6a00 	vldr	s12, [r9]
    d194:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
    d198:	ee66 8ae5 	vnmul.f32	s17, s13, s11
    d19c:	eee6 8a08 	vfma.f32	s17, s12, s16
    d1a0:	ee28 8a25 	vmul.f32	s16, s16, s11
    d1a4:	eea6 8a26 	vfma.f32	s16, s12, s13
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
    d1a8:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_ADD(scratch[3],scratch[1],scratch[2]);
    d1ac:	ee37 aa88 	vadd.f32	s20, s15, s16
    d1b0:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_SUB(scratch[0],scratch[1],scratch[2]);
    d1b4:	ee37 8ac8 	vsub.f32	s16, s15, s16
    d1b8:	ee77 8a68 	vsub.f32	s17, s14, s17
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
    d1bc:	f7f3 f930 	bl	420 <__aeabi_f2d>
    d1c0:	ec41 0b1b 	vmov	d11, r0, r1
    d1c4:	ee1a 0a90 	vmov	r0, s21
    d1c8:	f7f3 f92a 	bl	420 <__aeabi_f2d>
    d1cc:	2200      	movs	r2, #0
    d1ce:	4bef      	ldr	r3, [pc, #956]	; (d58c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x55c>)
    d1d0:	f7f3 f97e 	bl	4d0 <__aeabi_dmul>
    d1d4:	4602      	mov	r2, r0
    d1d6:	460b      	mov	r3, r1
    d1d8:	ec51 0b1b 	vmov	r0, r1, d11
    d1dc:	f7f2 ffc0 	bl	160 <__aeabi_dsub>
    d1e0:	f7f3 fc10 	bl	a04 <__aeabi_d2f>
    d1e4:	f844 0c04 	str.w	r0, [r4, #-4]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
    d1e8:	f856 0c04 	ldr.w	r0, [r6, #-4]
    d1ec:	f7f3 f918 	bl	420 <__aeabi_f2d>
    d1f0:	ec41 0b1b 	vmov	d11, r0, r1
    d1f4:	ee1a 0a10 	vmov	r0, s20
    d1f8:	f7f3 f912 	bl	420 <__aeabi_f2d>
    d1fc:	2200      	movs	r2, #0
    d1fe:	4be3      	ldr	r3, [pc, #908]	; (d58c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x55c>)
    d200:	f7f3 f966 	bl	4d0 <__aeabi_dmul>
    d204:	460b      	mov	r3, r1
    d206:	4602      	mov	r2, r0
    d208:	ec51 0b1b 	vmov	r0, r1, d11
    d20c:	f7f2 ffa8 	bl	160 <__aeabi_dsub>
    d210:	f7f3 fbf8 	bl	a04 <__aeabi_d2f>
    d214:	f8c8 0004 	str.w	r0, [r8, #4]
         C_ADDTO(*Fout,scratch[3]);
    d218:	ed56 7a02 	vldr	s15, [r6, #-8]
    d21c:	ee77 7aaa 	vadd.f32	s15, s15, s21
    d220:	ed46 7a02 	vstr	s15, [r6, #-8]
    d224:	ed56 7a01 	vldr	s15, [r6, #-4]
    d228:	ee77 7a8a 	vadd.f32	s15, s15, s20
    d22c:	ed46 7a01 	vstr	s15, [r6, #-4]
         Fout[m2].r = Fout[m].r + scratch[0].i;
    d230:	ed54 7a01 	vldr	s15, [r4, #-4]
    d234:	eee9 7a08 	vfma.f32	s15, s18, s16
    d238:	edc9 7a00 	vstr	s15, [r9]
         Fout[m2].i = Fout[m].i - scratch[0].r;
    d23c:	edd8 7a01 	vldr	s15, [r8, #4]
    d240:	eee9 7aa8 	vfma.f32	s15, s19, s17
    d244:	edc9 7a01 	vstr	s15, [r9, #4]
         Fout[m].r -= scratch[0].i;
    d248:	ed54 7a01 	vldr	s15, [r4, #-4]
    d24c:	eee9 7a88 	vfma.f32	s15, s19, s16
    d250:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].i += scratch[0].r;
    d254:	edd8 7a01 	vldr	s15, [r8, #4]
    d258:	eee9 7a28 	vfma.f32	s15, s18, s17
    d25c:	edc8 7a01 	vstr	s15, [r8, #4]
     }while(--k);
    d260:	9b03      	ldr	r3, [sp, #12]
    d262:	3f01      	subs	r7, #1
    d264:	f106 0608 	add.w	r6, r6, #8
    d268:	f108 0808 	add.w	r8, r8, #8
    d26c:	445d      	add	r5, fp
    d26e:	f109 0908 	add.w	r9, r9, #8
    d272:	449a      	add	sl, r3
    d274:	f104 0408 	add.w	r4, r4, #8
    d278:	f47f af72 	bne.w	d160 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
    d27c:	e755      	b.n	d12a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
    d27e:	4657      	mov	r7, sl
        tw3 += fstride*3;
    d280:	2218      	movs	r2, #24
        if(st->inverse) {
    d282:	46ae      	mov	lr, r5
    d284:	46a8      	mov	r8, r5
        tw1 += fstride;
    d286:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
        tw2 += fstride*2;
    d28a:	ea4f 1906 	mov.w	r9, r6, lsl #4
    d28e:	eb04 1007 	add.w	r0, r4, r7, lsl #4
        tw3 += fstride*3;
    d292:	4356      	muls	r6, r2
        if(st->inverse) {
    d294:	686a      	ldr	r2, [r5, #4]
    d296:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
    d29a:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
    d29e:	f104 0c04 	add.w	ip, r4, #4
        C_MUL(scratch[0],Fout[m] , *tw1 );
    d2a2:	edd1 6a01 	vldr	s13, [r1, #4]
    d2a6:	edd5 7a43 	vldr	s15, [r5, #268]	; 0x10c
    d2aa:	ed91 6a00 	vldr	s12, [r1]
    d2ae:	ed95 7a42 	vldr	s14, [r5, #264]	; 0x108
    d2b2:	ee67 5ae6 	vnmul.f32	s11, s15, s13
    d2b6:	eee6 5a07 	vfma.f32	s11, s12, s14
    d2ba:	ee27 7a26 	vmul.f32	s14, s14, s13
    d2be:	eea6 7a27 	vfma.f32	s14, s12, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    d2c2:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
    d2c6:	eef0 6a47 	vmov.f32	s13, s14
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    d2ca:	ed98 7a43 	vldr	s14, [r8, #268]	; 0x10c
    d2ce:	edd8 7a42 	vldr	s15, [r8, #264]	; 0x108
        C_MUL(scratch[0],Fout[m] , *tw1 );
    d2d2:	eeb0 5a65 	vmov.f32	s10, s11
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    d2d6:	ee27 6a64 	vnmul.f32	s12, s14, s9
    d2da:	edd0 5a00 	vldr	s11, [r0]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    d2de:	edd3 3a01 	vldr	s7, [r3, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    d2e2:	eea5 6aa7 	vfma.f32	s12, s11, s15
    d2e6:	ee67 7aa4 	vmul.f32	s15, s15, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    d2ea:	edde 4a43 	vldr	s9, [lr, #268]	; 0x10c
    d2ee:	ed93 4a00 	vldr	s8, [r3]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    d2f2:	eee5 7a87 	vfma.f32	s15, s11, s14
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    d2f6:	ed9e 7a42 	vldr	s14, [lr, #264]	; 0x108
    d2fa:	ee64 5ae3 	vnmul.f32	s11, s9, s7
    d2fe:	eee4 5a07 	vfma.f32	s11, s8, s14
    d302:	ee27 7a23 	vmul.f32	s14, s14, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
    d306:	ed1c 3a01 	vldr	s6, [ip, #-4]
    d30a:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    d30e:	eea4 7a24 	vfma.f32	s14, s8, s9
        C_SUB( scratch[5] , *Fout, scratch[1] );
    d312:	ee33 4a46 	vsub.f32	s8, s6, s12
    d316:	ee73 4ae7 	vsub.f32	s9, s7, s15
        C_ADDTO(*Fout, scratch[1]);
    d31a:	ee36 6a03 	vadd.f32	s12, s12, s6
    d31e:	ee77 7aa3 	vadd.f32	s15, s15, s7
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
    d322:	ee35 3a25 	vadd.f32	s6, s10, s11
    d326:	ee76 3a87 	vadd.f32	s7, s13, s14
        C_ADDTO(*Fout, scratch[1]);
    d32a:	ed0c 6a01 	vstr	s12, [ip, #-4]
    d32e:	edc4 7a01 	vstr	s15, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
    d332:	ee36 6a43 	vsub.f32	s12, s12, s6
    d336:	ee77 7ae3 	vsub.f32	s15, s15, s7
    d33a:	ed80 6a00 	vstr	s12, [r0]
    d33e:	edc0 7a01 	vstr	s15, [r0, #4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
    d342:	ee36 7ac7 	vsub.f32	s14, s13, s14
        C_ADDTO( *Fout , scratch[3] );
    d346:	ed5c 6a01 	vldr	s13, [ip, #-4]
    d34a:	ee76 6a83 	vadd.f32	s13, s13, s6
    d34e:	ed4c 6a01 	vstr	s13, [ip, #-4]
    d352:	edd4 7a01 	vldr	s15, [r4, #4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
    d356:	ee75 5a65 	vsub.f32	s11, s10, s11
        C_ADDTO( *Fout , scratch[3] );
    d35a:	ee77 7aa3 	vadd.f32	s15, s15, s7
            Fout[m3].r = scratch[5].r + scratch[4].i;
    d35e:	ee74 6a07 	vadd.f32	s13, s8, s14
        C_ADDTO( *Fout , scratch[3] );
    d362:	edc4 7a01 	vstr	s15, [r4, #4]
            Fout[m].r = scratch[5].r - scratch[4].i;
    d366:	ee34 7a47 	vsub.f32	s14, s8, s14
            Fout[m3].i = scratch[5].i - scratch[4].r;
    d36a:	ee74 7ae5 	vsub.f32	s15, s9, s11
            Fout[m].i = scratch[5].i + scratch[4].r;
    d36e:	ee74 5aa5 	vadd.f32	s11, s9, s11
        if(st->inverse) {
    d372:	b1c2      	cbz	r2, d3a6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x376>
            Fout[m].r = scratch[5].r - scratch[4].i;
    d374:	ed81 7a00 	vstr	s14, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
    d378:	edc1 5a01 	vstr	s11, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
    d37c:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
    d380:	edc3 7a01 	vstr	s15, [r3, #4]
    }while(--k);
    d384:	3f01      	subs	r7, #1
        ++Fout;
    d386:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
    d38a:	f101 0108 	add.w	r1, r1, #8
    d38e:	4455      	add	r5, sl
    d390:	f100 0008 	add.w	r0, r0, #8
    d394:	44c8      	add	r8, r9
    d396:	f103 0308 	add.w	r3, r3, #8
    d39a:	44b6      	add	lr, r6
    d39c:	f10c 0c08 	add.w	ip, ip, #8
    d3a0:	f47f af7f 	bne.w	d2a2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x272>
    d3a4:	e6c1      	b.n	d12a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
    d3a6:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
    d3aa:	edc1 7a01 	vstr	s15, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
    d3ae:	ed83 7a00 	vstr	s14, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
    d3b2:	edc3 5a01 	vstr	s11, [r3, #4]
    d3b6:	e7e5      	b.n	d384 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x354>
    ya = twiddles[fstride*m];
    d3b8:	fb0a f306 	mul.w	r3, sl, r6
    d3bc:	9a05      	ldr	r2, [sp, #20]
    Fout4=Fout0+4*m;
    d3be:	46ac      	mov	ip, r5
    ya = twiddles[fstride*m];
    d3c0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
    d3c4:	ed97 2a01 	vldr	s4, [r7, #4]
    d3c8:	00f2      	lsls	r2, r6, #3
    d3ca:	9203      	str	r2, [sp, #12]
    d3cc:	2218      	movs	r2, #24
    Fout4=Fout0+4*m;
    d3ce:	46ae      	mov	lr, r5
    d3d0:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
    d3d2:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    d3d6:	eef1 0a42 	vneg.f32	s1, s4
    d3da:	4372      	muls	r2, r6
    ya = twiddles[fstride*m];
    d3dc:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
    d3e0:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
    d3e4:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
    d3e8:	ed97 1a00 	vldr	s2, [r7]
    d3ec:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
    d3f0:	ea4f 1b06 	mov.w	fp, r6, lsl #4
    d3f4:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
    d3f8:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
    d3fc:	eb03 100a 	add.w	r0, r3, sl, lsl #4
    d400:	9204      	str	r2, [sp, #16]
    d402:	0176      	lsls	r6, r6, #5
    for ( u=0; u<m; ++u ) {
    d404:	45ca      	cmp	sl, r9
    d406:	f104 0408 	add.w	r4, r4, #8
    d40a:	f107 0708 	add.w	r7, r7, #8
    d40e:	f103 0308 	add.w	r3, r3, #8
    d412:	f101 0108 	add.w	r1, r1, #8
    d416:	f100 0008 	add.w	r0, r0, #8
    d41a:	f77f ae86 	ble.w	d12a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    d41e:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    d422:	ed57 3a01 	vldr	s7, [r7, #-4]
    d426:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
    d42a:	ed17 6a02 	vldr	s12, [r7, #-8]
    d42e:	ee26 3ae3 	vnmul.f32	s6, s13, s7
    d432:	eea6 3a25 	vfma.f32	s6, s12, s11
    d436:	ee65 5aa3 	vmul.f32	s11, s11, s7
    d43a:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    d43e:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
    d442:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    d446:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    d44a:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
    d44e:	ed13 5a02 	vldr	s10, [r3, #-8]
    d452:	ee25 6ae6 	vnmul.f32	s12, s11, s13
    d456:	ee64 6aa6 	vmul.f32	s13, s9, s13
    d45a:	eee5 6a25 	vfma.f32	s13, s10, s11
    d45e:	eea5 6a24 	vfma.f32	s12, s10, s9
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    d462:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    d466:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    d46a:	ed51 6a01 	vldr	s13, [r1, #-4]
    d46e:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
    d472:	ed11 4a02 	vldr	s8, [r1, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    d476:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    d47a:	ee25 6ae6 	vnmul.f32	s12, s11, s13
    d47e:	eea4 6a05 	vfma.f32	s12, s8, s10
    d482:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    d486:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    d48a:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    d48e:	ed50 5a01 	vldr	s11, [r0, #-4]
    d492:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    d496:	eef0 9a43 	vmov.f32	s19, s6
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    d49a:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    d49e:	ee26 3ae5 	vnmul.f32	s6, s13, s11
    d4a2:	ed10 6a02 	vldr	s12, [r0, #-8]
    d4a6:	eea6 3a04 	vfma.f32	s6, s12, s8
    d4aa:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
    d4ae:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_SUB( scratch[10],scratch[1],scratch[4]);
    d4b2:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
    d4b6:	ee78 9a80 	vadd.f32	s19, s17, s0
        scratch[0] = *Fout0;
    d4ba:	ed14 7a02 	vldr	s14, [r4, #-8]
        C_ADD( scratch[8],scratch[2],scratch[3]);
    d4be:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    d4c2:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[9],scratch[2],scratch[3]);
    d4c6:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
    d4ca:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
    d4ce:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
    d4d2:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[0] = *Fout0;
    d4d6:	ed54 7a01 	vldr	s15, [r4, #-4]
        Fout0->r += scratch[7].r + scratch[8].r;
    d4da:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
    d4de:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    d4e2:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->i += scratch[7].i + scratch[8].i;
    d4e6:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
    d4ea:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
    d4ee:	ed04 5a01 	vstr	s10, [r4, #-4]
        C_SUB( scratch[10],scratch[1],scratch[4]);
    d4f2:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    d4f6:	eeb0 5a67 	vmov.f32	s10, s15
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    d4fa:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    d4fe:	eee1 4a8a 	vfma.f32	s9, s3, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    d502:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    d506:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    d50a:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    d50e:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    d512:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    d516:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        C_SUB(*Fout1,scratch[5],scratch[6]);
    d51a:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    d51e:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    d522:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    d526:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    d52a:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    d52e:	ee66 6a42 	vnmul.f32	s13, s12, s4
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    d532:	eee1 7a09 	vfma.f32	s15, s2, s18
        C_SUB(*Fout1,scratch[5],scratch[6]);
    d536:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
    d53a:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
    d53e:	ee35 0a44 	vsub.f32	s0, s10, s8
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    d542:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    d546:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_ADD(*Fout4,scratch[5],scratch[6]);
    d54a:	ee74 4aa3 	vadd.f32	s9, s9, s7
    d54e:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
    d552:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
    d556:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
    d55a:	ed40 4a02 	vstr	s9, [r0, #-8]
    d55e:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
    d562:	ed03 6a02 	vstr	s12, [r3, #-8]
    d566:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
    d56a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d56e:	9a03      	ldr	r2, [sp, #12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
    d570:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
    d574:	4415      	add	r5, r2
    d576:	9a04      	ldr	r2, [sp, #16]
    d578:	ed01 7a02 	vstr	s14, [r1, #-8]
    d57c:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
    d580:	f109 0901 	add.w	r9, r9, #1
    d584:	44d8      	add	r8, fp
    d586:	4496      	add	lr, r2
    d588:	44b4      	add	ip, r6
    d58a:	e73b      	b.n	d404 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3d4>
    d58c:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
    d590:	682b      	ldr	r3, [r5, #0]
    d592:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
    d594:	9b03      	ldr	r3, [sp, #12]
    d596:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    d59a:	4658      	mov	r0, fp
    d59c:	f006 f967 	bl	1386e <_Z9ei_mallocj>
    d5a0:	f04f 0c00 	mov.w	ip, #0
    d5a4:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
    d5a6:	4665      	mov	r5, ip
    d5a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    d5ac:	9207      	str	r2, [sp, #28]
    d5ae:	fb0a f206 	mul.w	r2, sl, r6
    d5b2:	4483      	add	fp, r0
    d5b4:	9206      	str	r2, [sp, #24]
    d5b6:	45aa      	cmp	sl, r5
    d5b8:	dd51      	ble.n	d65e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x62e>
    d5ba:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
    d5bc:	2200      	movs	r2, #0
    d5be:	9903      	ldr	r1, [sp, #12]
    d5c0:	4291      	cmp	r1, r2
    d5c2:	dc38      	bgt.n	d636 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x606>
    d5c4:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
    d5c6:	f04f 0800 	mov.w	r8, #0
    d5ca:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
    d5ce:	9903      	ldr	r1, [sp, #12]
    d5d0:	4541      	cmp	r1, r8
    d5d2:	dd41      	ble.n	d658 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x628>
            Fout[ k ] = scratch[0];
    d5d4:	e893 0003 	ldmia.w	r3, {r0, r1}
    d5d8:	e882 0003 	stmia.w	r2, {r0, r1}
            int twidx=0;
    d5dc:	2100      	movs	r1, #0
    d5de:	f103 0008 	add.w	r0, r3, #8
            for (q=1;q<p;++q ) {
    d5e2:	4558      	cmp	r0, fp
    d5e4:	d031      	beq.n	d64a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x61a>
                if (twidx>=Norig) twidx-=Norig;
    d5e6:	9f04      	ldr	r7, [sp, #16]
                twidx += fstride * k;
    d5e8:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
    d5ea:	428f      	cmp	r7, r1
    d5ec:	bfd8      	it	le
    d5ee:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
    d5f0:	9f05      	ldr	r7, [sp, #20]
    d5f2:	ed90 5a01 	vldr	s10, [r0, #4]
    d5f6:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    d5fa:	ed99 6a01 	vldr	s12, [r9, #4]
    d5fe:	edd0 5a00 	vldr	s11, [r0]
    d602:	edd9 7a00 	vldr	s15, [r9]
    d606:	ee26 7a45 	vnmul.f32	s14, s12, s10
    d60a:	eea5 7aa7 	vfma.f32	s14, s11, s15
    d60e:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
    d612:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
    d616:	ee67 7a85 	vmul.f32	s15, s15, s10
                C_ADDTO( Fout[ k ] ,t);
    d61a:	ee37 7a26 	vadd.f32	s14, s14, s13
                C_MUL(t,scratch[q] , twiddles[twidx] );
    d61e:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
    d622:	ed82 7a00 	vstr	s14, [r2]
    d626:	ed92 7a01 	vldr	s14, [r2, #4]
    d62a:	ee77 7a27 	vadd.f32	s15, s14, s15
    d62e:	3008      	adds	r0, #8
    d630:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
    d634:	e7d5      	b.n	d5e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5b2>
            scratch[q1] = Fout[ k  ];
    d636:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
    d63a:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    d63e:	c903      	ldmia	r1, {r0, r1}
            k += m;
    d640:	44d6      	add	lr, sl
            scratch[q1] = Fout[ k  ];
    d642:	e888 0003 	stmia.w	r8, {r0, r1}
        for ( q1=0 ; q1<p ; ++q1 ) {
    d646:	3201      	adds	r2, #1
    d648:	e7b9      	b.n	d5be <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58e>
        for ( q1=0 ; q1<p ; ++q1 ) {
    d64a:	9907      	ldr	r1, [sp, #28]
    d64c:	f108 0801 	add.w	r8, r8, #1
    d650:	440a      	add	r2, r1
    d652:	9906      	ldr	r1, [sp, #24]
    d654:	448e      	add	lr, r1
    d656:	e7ba      	b.n	d5ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x59e>
    for ( u=0; u<m; ++u ) {
    d658:	3501      	adds	r5, #1
    d65a:	44b4      	add	ip, r6
    d65c:	e7ab      	b.n	d5b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x586>
    KISS_FFT_TMP_FREE(scratch);
    d65e:	4618      	mov	r0, r3
}
    d660:	b009      	add	sp, #36	; 0x24
    d662:	ecbd 8b08 	vpop	{d8-d11}
    d666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
    d66a:	f006 b904 	b.w	13876 <_Z7ei_freePv>
    d66e:	bf00      	nop

0000d670 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
    d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d674:	b0b7      	sub	sp, #220	; 0xdc
    d676:	e9dd a640 	ldrd	sl, r6, [sp, #256]	; 0x100
    d67a:	4607      	mov	r7, r0
    d67c:	460c      	mov	r4, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    d67e:	a824      	add	r0, sp, #144	; 0x90
    d680:	4631      	mov	r1, r6
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
    d682:	4698      	mov	r8, r3
    d684:	4691      	mov	r9, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    d686:	f006 faec 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    d68a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d68c:	2b02      	cmp	r3, #2
    d68e:	d001      	beq.n	d694 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x24>
    d690:	f007 fa79 	bl	14b86 <abort>
  const int batches = output_shape.Dims(0);
    d694:	2100      	movs	r1, #0
    d696:	a824      	add	r0, sp, #144	; 0x90
    d698:	f006 fa25 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
    d69c:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
    d69e:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = output_shape.Dims(1);
    d6a0:	a824      	add	r0, sp, #144	; 0x90
    d6a2:	f006 fa20 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    d6a6:	4641      	mov	r1, r8
  const int output_depth = output_shape.Dims(1);
    d6a8:	4683      	mov	fp, r0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    d6aa:	a82a      	add	r0, sp, #168	; 0xa8
    d6ac:	f006 fad9 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    d6b0:	992a      	ldr	r1, [sp, #168]	; 0xa8
    d6b2:	a82a      	add	r0, sp, #168	; 0xa8
    d6b4:	3901      	subs	r1, #1
    d6b6:	f006 fa16 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    d6ba:	4649      	mov	r1, r9
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    d6bc:	9008      	str	r0, [sp, #32]
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    d6be:	a830      	add	r0, sp, #192	; 0xc0
    d6c0:	f006 facf 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
  quant_params.shift = data.reference_op_data.output_shift;

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
    d6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  input_dims.h = 1;
    d6c6:	2501      	movs	r5, #1
  bias_dims.h = 1;
  bias_dims.w = 1;
  bias_dims.c = output_depth;

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
    d6c8:	e9cd b31a 	strd	fp, r3, [sp, #104]	; 0x68
  input_dims.n = batches;
    d6cc:	930f      	str	r3, [sp, #60]	; 0x3c
  output_dims.h = 1;
  output_dims.w = 1;
  output_dims.c = output_depth;

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
    d6ce:	2300      	movs	r3, #0
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
    d6d0:	6961      	ldr	r1, [r4, #20]
  input_dims.c = accum_depth;
    d6d2:	9a08      	ldr	r2, [sp, #32]
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
    d6d4:	4249      	negs	r1, r1
    d6d6:	911f      	str	r1, [sp, #124]	; 0x7c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
    d6d8:	69e1      	ldr	r1, [r4, #28]
  input_dims.w = 1;
    d6da:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  fc_params.output_offset = data.reference_op_data.output_zero_point;
    d6de:	9121      	str	r1, [sp, #132]	; 0x84
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
    d6e0:	69a1      	ldr	r1, [r4, #24]
  filter_dims.n = accum_depth;
    d6e2:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
    d6e6:	4249      	negs	r1, r1
    d6e8:	9120      	str	r1, [sp, #128]	; 0x80
  fc_params.activation.min = data.reference_op_data.output_activation_min;
    d6ea:	68a1      	ldr	r1, [r4, #8]
  filter_dims.w = 1;
    d6ec:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  fc_params.activation.min = data.reference_op_data.output_activation_min;
    d6f0:	9122      	str	r1, [sp, #136]	; 0x88
  fc_params.activation.max = data.reference_op_data.output_activation_max;
    d6f2:	68e1      	ldr	r1, [r4, #12]
  bias_dims.n = 1;
    d6f4:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
  fc_params.activation.max = data.reference_op_data.output_activation_max;
    d6f8:	9123      	str	r1, [sp, #140]	; 0x8c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
    d6fa:	6821      	ldr	r1, [r4, #0]
  bias_dims.w = 1;
    d6fc:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
  quant_params.multiplier = data.reference_op_data.output_multiplier;
    d700:	910b      	str	r1, [sp, #44]	; 0x2c
  quant_params.shift = data.reference_op_data.output_shift;
    d702:	6861      	ldr	r1, [r4, #4]
  output_dims.w = 1;
    d704:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
  quant_params.shift = data.reference_op_data.output_shift;
    d708:	910c      	str	r1, [sp, #48]	; 0x30
  output_dims.c = output_depth;
    d70a:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  ctx.size = 0;
    d70e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34

  if (data.buffer_idx > -1) {
    d712:	6a21      	ldr	r1, [r4, #32]
    d714:	4299      	cmp	r1, r3
    d716:	db03      	blt.n	d720 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xb0>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    d718:	4638      	mov	r0, r7
    d71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d71c:	4798      	blx	r3
    d71e:	900d      	str	r0, [sp, #52]	; 0x34
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
    d720:	f1b9 0f00 	cmp.w	r9, #0
    d724:	d0b4      	beq.n	d690 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    d726:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
    d72a:	f1b8 0f00 	cmp.w	r8, #0
    d72e:	d0af      	beq.n	d690 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    d730:	f8d8 1000 	ldr.w	r1, [r8]
  TFLITE_DCHECK(tensor != nullptr);
    d734:	f1ba 0f00 	cmp.w	sl, #0
    d738:	d0aa      	beq.n	d690 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    d73a:	f8da 0000 	ldr.w	r0, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d73e:	2e00      	cmp	r6, #0
    d740:	d045      	beq.n	d7ce <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x15e>
    d742:	6833      	ldr	r3, [r6, #0]
  }

  TF_LITE_ENSURE_EQ(
    d744:	9306      	str	r3, [sp, #24]
    d746:	ab1b      	add	r3, sp, #108	; 0x6c
    d748:	e9cd 0304 	strd	r0, r3, [sp, #16]
    d74c:	ab17      	add	r3, sp, #92	; 0x5c
    d74e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    d752:	ab13      	add	r3, sp, #76	; 0x4c
    d754:	e9cd 2300 	strd	r2, r3, [sp]
    d758:	a91f      	add	r1, sp, #124	; 0x7c
    d75a:	ab0f      	add	r3, sp, #60	; 0x3c
    d75c:	aa0b      	add	r2, sp, #44	; 0x2c
    d75e:	a80d      	add	r0, sp, #52	; 0x34
    d760:	f006 fed2 	bl	14508 <arm_fully_connected_s8>
    d764:	4604      	mov	r4, r0
    d766:	b328      	cbz	r0, d7b4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
    d768:	697c      	ldr	r4, [r7, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
    d76a:	f8d9 3000 	ldr.w	r3, [r9]
    d76e:	f8d8 2000 	ldr.w	r2, [r8]
    d772:	f8da 1000 	ldr.w	r1, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    d776:	b106      	cbz	r6, d77a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
    d778:	6836      	ldr	r6, [r6, #0]
    d77a:	a81b      	add	r0, sp, #108	; 0x6c
    d77c:	e9cd 1004 	strd	r1, r0, [sp, #16]
    d780:	a917      	add	r1, sp, #92	; 0x5c
    d782:	e9cd 2102 	strd	r2, r1, [sp, #8]
    d786:	aa13      	add	r2, sp, #76	; 0x4c
    d788:	e9cd 3200 	strd	r3, r2, [sp]
    d78c:	a91f      	add	r1, sp, #124	; 0x7c
    d78e:	ab0f      	add	r3, sp, #60	; 0x3c
    d790:	aa0b      	add	r2, sp, #44	; 0x2c
    d792:	9606      	str	r6, [sp, #24]
    d794:	a80d      	add	r0, sp, #52	; 0x34
    d796:	f006 feb7 	bl	14508 <arm_fully_connected_s8>
    d79a:	2300      	movs	r3, #0
    d79c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    d7a0:	4b0c      	ldr	r3, [pc, #48]	; (d7d4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x164>)
    d7a2:	4638      	mov	r0, r7
    d7a4:	9301      	str	r3, [sp, #4]
    d7a6:	4b0c      	ldr	r3, [pc, #48]	; (d7d8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x168>)
    d7a8:	4a0c      	ldr	r2, [pc, #48]	; (d7dc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x16c>)
    d7aa:	9300      	str	r3, [sp, #0]
    d7ac:	490c      	ldr	r1, [pc, #48]	; (d7e0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x170>)
    d7ae:	23a6      	movs	r3, #166	; 0xa6
    d7b0:	47a0      	blx	r4
    d7b2:	2401      	movs	r4, #1
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    d7b4:	a830      	add	r0, sp, #192	; 0xc0
    d7b6:	f006 f98b 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    d7ba:	a82a      	add	r0, sp, #168	; 0xa8
    d7bc:	f006 f988 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    d7c0:	a824      	add	r0, sp, #144	; 0x90
    d7c2:	f006 f985 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
}
    d7c6:	4620      	mov	r0, r4
    d7c8:	b037      	add	sp, #220	; 0xdc
    d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7ce:	4633      	mov	r3, r6
    d7d0:	e7b8      	b.n	d744 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xd4>
    d7d2:	bf00      	nop
    d7d4:	00018033 	.word	0x00018033
    d7d8:	00018044 	.word	0x00018044
    d7dc:	00017f98 	.word	0x00017f98
    d7e0:	00018019 	.word	0x00018019

0000d7e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    d7e8:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d7ec:	4604      	mov	r4, r0
    d7ee:	460d      	mov	r5, r1
    d7f0:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK(node->user_data != nullptr);
    d7f2:	f1b9 0f00 	cmp.w	r9, #0
    d7f6:	d101      	bne.n	d7fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
    d7f8:	f007 f9c5 	bl	14b86 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d7fc:	f8d1 b014 	ldr.w	fp, [r1, #20]
    d800:	f1bb 0f00 	cmp.w	fp, #0
    d804:	d0f8      	beq.n	d7f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
      GetInput(context, node, kFullyConnectedInputTensor);
    d806:	4b50      	ldr	r3, [pc, #320]	; (d948 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    d808:	681a      	ldr	r2, [r3, #0]
    d80a:	f007 f948 	bl	14a9e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d80e:	4680      	mov	r8, r0
    d810:	b960      	cbnz	r0, d82c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    d812:	4b4e      	ldr	r3, [pc, #312]	; (d94c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    d814:	9300      	str	r3, [sp, #0]
    d816:	2340      	movs	r3, #64	; 0x40
    d818:	6965      	ldr	r5, [r4, #20]
  TF_LITE_ENSURE(context, filter != nullptr);
    d81a:	4620      	mov	r0, r4
    d81c:	4a4c      	ldr	r2, [pc, #304]	; (d950 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    d81e:	494d      	ldr	r1, [pc, #308]	; (d954 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    d820:	47a8      	blx	r5
    d822:	2501      	movs	r5, #1
}
    d824:	4628      	mov	r0, r5
    d826:	b015      	add	sp, #84	; 0x54
    d828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
    d82c:	4b4a      	ldr	r3, [pc, #296]	; (d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    d82e:	4629      	mov	r1, r5
    d830:	4620      	mov	r0, r4
    d832:	681a      	ldr	r2, [r3, #0]
    d834:	f007 f933 	bl	14a9e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    d838:	4607      	mov	r7, r0
    d83a:	b920      	cbnz	r0, d846 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    d83c:	4b47      	ldr	r3, [pc, #284]	; (d95c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    d83e:	9300      	str	r3, [sp, #0]
    d840:	6965      	ldr	r5, [r4, #20]
    d842:	2343      	movs	r3, #67	; 0x43
    d844:	e7e9      	b.n	d81a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    d846:	4b46      	ldr	r3, [pc, #280]	; (d960 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    d848:	4629      	mov	r1, r5
    d84a:	681a      	ldr	r2, [r3, #0]
    d84c:	4620      	mov	r0, r4
    d84e:	f007 f938 	bl	14ac2 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    d852:	4b44      	ldr	r3, [pc, #272]	; (d964 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    d854:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    d856:	4629      	mov	r1, r5
    d858:	4620      	mov	r0, r4
    d85a:	681a      	ldr	r2, [r3, #0]
    d85c:	f007 f922 	bl	14aa4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d860:	4606      	mov	r6, r0
    d862:	b920      	cbnz	r0, d86e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    d864:	4b40      	ldr	r3, [pc, #256]	; (d968 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    d866:	9300      	str	r3, [sp, #0]
    d868:	6965      	ldr	r5, [r4, #20]
    d86a:	2347      	movs	r3, #71	; 0x47
    d86c:	e7d5      	b.n	d81a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    d86e:	f898 0000 	ldrb.w	r0, [r8]
    d872:	7833      	ldrb	r3, [r6, #0]
    d874:	4283      	cmp	r3, r0
    d876:	d012      	beq.n	d89e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
    d878:	6967      	ldr	r7, [r4, #20]
    d87a:	f001 fe89 	bl	f590 <TfLiteTypeGetName>
    d87e:	4605      	mov	r5, r0
    d880:	7830      	ldrb	r0, [r6, #0]
    d882:	f001 fe85 	bl	f590 <TfLiteTypeGetName>
    d886:	4b39      	ldr	r3, [pc, #228]	; (d96c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    d888:	e9cd 5002 	strd	r5, r0, [sp, #8]
    d88c:	9301      	str	r3, [sp, #4]
    d88e:	4b38      	ldr	r3, [pc, #224]	; (d970 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d890:	4620      	mov	r0, r4
    d892:	9300      	str	r3, [sp, #0]
    d894:	4a2e      	ldr	r2, [pc, #184]	; (d950 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    d896:	2349      	movs	r3, #73	; 0x49
    d898:	4936      	ldr	r1, [pc, #216]	; (d974 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d89a:	47b8      	blx	r7
    d89c:	e7c1      	b.n	d822 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    d89e:	783a      	ldrb	r2, [r7, #0]
    d8a0:	429a      	cmp	r2, r3
    d8a2:	d004      	beq.n	d8ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xca>
    d8a4:	4620      	mov	r0, r4
    d8a6:	6963      	ldr	r3, [r4, #20]
    d8a8:	4933      	ldr	r1, [pc, #204]	; (d978 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    d8aa:	4798      	blx	r3
    d8ac:	e7b9      	b.n	d822 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  data->buffer_idx = -1;
    d8ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
    d8b2:	f89b 1000 	ldrb.w	r1, [fp]
  data->buffer_idx = -1;
    d8b6:	f8c9 3020 	str.w	r3, [r9, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
    d8ba:	4620      	mov	r0, r4
    d8bc:	4643      	mov	r3, r8
    d8be:	e9cd 6902 	strd	r6, r9, [sp, #8]
    d8c2:	e9cd 7a00 	strd	r7, sl, [sp]
    d8c6:	f006 f996 	bl	13bf6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
    d8ca:	4605      	mov	r5, r0
    d8cc:	2800      	cmp	r0, #0
    d8ce:	d1a9      	bne.n	d824 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (input->type == kTfLiteInt8) {
    d8d0:	f898 3000 	ldrb.w	r3, [r8]
    d8d4:	2b09      	cmp	r3, #9
    d8d6:	d1a5      	bne.n	d824 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape filter_shape = GetTensorShape(filter);
    d8d8:	4639      	mov	r1, r7
    d8da:	a808      	add	r0, sp, #32
    d8dc:	f006 f93c 	bl	13b58 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
    d8e0:	4631      	mov	r1, r6
    d8e2:	a80e      	add	r0, sp, #56	; 0x38
    d8e4:	f006 f938 	bl	13b58 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    d8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d8ea:	2b02      	cmp	r3, #2
    d8ec:	d184      	bne.n	d7f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
    d8ee:	9908      	ldr	r1, [sp, #32]
    d8f0:	a808      	add	r0, sp, #32
    d8f2:	3901      	subs	r1, #1
    d8f4:	f006 f8f7 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = 1;
    d8f8:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
    d8fa:	9004      	str	r0, [sp, #16]
    filter_dims.c = output_shape.Dims(1);
    d8fc:	a80e      	add	r0, sp, #56	; 0x38
    filter_dims.w = 1;
    d8fe:	e9cd 1105 	strd	r1, r1, [sp, #20]
    filter_dims.c = output_shape.Dims(1);
    d902:	f006 f8f0 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
    d906:	9007      	str	r0, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
    d908:	a804      	add	r0, sp, #16
    d90a:	f006 fe2e 	bl	1456a <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
    d90e:	1e01      	subs	r1, r0, #0
    d910:	dd0e      	ble.n	d930 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
    d912:	4620      	mov	r0, r4
    d914:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d916:	f109 0220 	add.w	r2, r9, #32
    d91a:	4798      	blx	r3
    d91c:	4604      	mov	r4, r0
    d91e:	b158      	cbz	r0, d938 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
    d920:	a80e      	add	r0, sp, #56	; 0x38
    d922:	f006 f8d5 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
    d926:	a808      	add	r0, sp, #32
    d928:	f006 f8d2 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
    d92c:	4625      	mov	r5, r4
    d92e:	e779      	b.n	d824 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
      data->buffer_idx = -1;
    d930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d934:	f8c9 3020 	str.w	r3, [r9, #32]
    RuntimeShape output_shape = GetTensorShape(output);
    d938:	a80e      	add	r0, sp, #56	; 0x38
    d93a:	f006 f8c9 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
    d93e:	a808      	add	r0, sp, #32
    d940:	f006 f8c6 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
    d944:	e76e      	b.n	d824 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    d946:	bf00      	nop
    d948:	000171d0 	.word	0x000171d0
    d94c:	0001817f 	.word	0x0001817f
    d950:	00017f98 	.word	0x00017f98
    d954:	00018168 	.word	0x00018168
    d958:	000171d8 	.word	0x000171d8
    d95c:	00018190 	.word	0x00018190
    d960:	000171cc 	.word	0x000171cc
    d964:	000171d4 	.word	0x000171d4
    d968:	000181a2 	.word	0x000181a2
    d96c:	000181ce 	.word	0x000181ce
    d970:	000181db 	.word	0x000181db
    d974:	000181b4 	.word	0x000181b4
    d978:	000181e7 	.word	0x000181e7

0000d97c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d980:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d984:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d988:	4607      	mov	r7, r0
    d98a:	4688      	mov	r8, r1
    d98c:	b0d1      	sub	sp, #324	; 0x144
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d98e:	f1b9 0f00 	cmp.w	r9, #0
    d992:	d101      	bne.n	d998 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    d994:	f007 f8f7 	bl	14b86 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    d998:	4ba5      	ldr	r3, [pc, #660]	; (dc30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
  return GetMutableEvalInput(context, node, index);
    d99a:	681a      	ldr	r2, [r3, #0]
    d99c:	f006 f8fe 	bl	13b9c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    d9a0:	4ba4      	ldr	r3, [pc, #656]	; (dc34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    d9a2:	4641      	mov	r1, r8
    d9a4:	681a      	ldr	r2, [r3, #0]
    d9a6:	4604      	mov	r4, r0
    d9a8:	4638      	mov	r0, r7
    d9aa:	f006 f8f7 	bl	13b9c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    d9ae:	4ba2      	ldr	r3, [pc, #648]	; (dc38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    d9b0:	4641      	mov	r1, r8
    d9b2:	681a      	ldr	r2, [r3, #0]
    d9b4:	4606      	mov	r6, r0
    d9b6:	4638      	mov	r0, r7
    d9b8:	f006 f8f0 	bl	13b9c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    d9bc:	4b9f      	ldr	r3, [pc, #636]	; (dc3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    d9be:	4641      	mov	r1, r8
    d9c0:	4605      	mov	r5, r0
    d9c2:	681a      	ldr	r2, [r3, #0]
    d9c4:	4638      	mov	r0, r7
    d9c6:	f006 f8f7 	bl	13bb8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
    d9ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    d9ce:	4683      	mov	fp, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    d9d0:	2900      	cmp	r1, #0
    d9d2:	d0df      	beq.n	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    d9d4:	7a20      	ldrb	r0, [r4, #8]
    d9d6:	2803      	cmp	r0, #3
    d9d8:	f000 80a5 	beq.w	db26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    d9dc:	2809      	cmp	r0, #9
    d9de:	f000 8096 	beq.w	db0e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x192>
    d9e2:	2801      	cmp	r0, #1
    d9e4:	f040 8193 	bne.w	dd0e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
    d9e8:	f899 1000 	ldrb.w	r1, [r9]
    d9ec:	a83c      	add	r0, sp, #240	; 0xf0
    d9ee:	f000 f9c3 	bl	dd78 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    d9f2:	4621      	mov	r1, r4
    d9f4:	a812      	add	r0, sp, #72	; 0x48
    d9f6:	f006 f934 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    d9fa:	6823      	ldr	r3, [r4, #0]
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
    d9fc:	4631      	mov	r1, r6
    d9fe:	a818      	add	r0, sp, #96	; 0x60
    da00:	9303      	str	r3, [sp, #12]
    da02:	f006 f92e 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    da06:	2e00      	cmp	r6, #0
    da08:	d0c4      	beq.n	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    da0a:	6833      	ldr	r3, [r6, #0]
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
    da0c:	4629      	mov	r1, r5
    da0e:	a81e      	add	r0, sp, #120	; 0x78
    da10:	9302      	str	r3, [sp, #8]
    da12:	f006 f926 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    da16:	2d00      	cmp	r5, #0
    da18:	d0bc      	beq.n	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
    da1a:	4659      	mov	r1, fp
    da1c:	a846      	add	r0, sp, #280	; 0x118
  return reinterpret_cast<const T*>(tensor->data.raw);
    da1e:	f8d5 8000 	ldr.w	r8, [r5]
    da22:	f006 f91e 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    da26:	f1bb 0f00 	cmp.w	fp, #0
    da2a:	d001      	beq.n	da30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    da2c:	f8db b000 	ldr.w	fp, [fp]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    da30:	9b46      	ldr	r3, [sp, #280]	; 0x118
    da32:	a846      	add	r0, sp, #280	; 0x118
    da34:	3b01      	subs	r3, #1
    da36:	4619      	mov	r1, r3
    da38:	9305      	str	r3, [sp, #20]
    da3a:	f006 f874 	bl	13b26 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
    da3e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    da40:	9b05      	ldr	r3, [sp, #20]
    da42:	aa46      	add	r2, sp, #280	; 0x118
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    da44:	9004      	str	r0, [sp, #16]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    da46:	1ea9      	subs	r1, r5, #2
    da48:	a818      	add	r0, sp, #96	; 0x60
    da4a:	f006 f85d 	bl	13b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    da4e:	1e69      	subs	r1, r5, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    da50:	4604      	mov	r4, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    da52:	a818      	add	r0, sp, #96	; 0x60
    da54:	f006 f847 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
    da58:	2300      	movs	r3, #0
    da5a:	4602      	mov	r2, r0
  const float output_activation_min = params.float_activation_min;
    da5c:	ed9d 8a43 	vldr	s16, [sp, #268]	; 0x10c
  const float output_activation_max = params.float_activation_max;
    da60:	eddd 8a44 	vldr	s17, [sp, #272]	; 0x110
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    da64:	461e      	mov	r6, r3
  for (int b = 0; b < batches; ++b) {
    da66:	4618      	mov	r0, r3
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
    da68:	eddf 6a75 	vldr	s13, [pc, #468]	; dc40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>
  for (int b = 0; b < batches; ++b) {
    da6c:	9904      	ldr	r1, [sp, #16]
    da6e:	4281      	cmp	r1, r0
    da70:	dd3f      	ble.n	daf2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
    da72:	9903      	ldr	r1, [sp, #12]
    da74:	eb0b 0e86 	add.w	lr, fp, r6, lsl #2
    da78:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    da7c:	9105      	str	r1, [sp, #20]
    da7e:	2100      	movs	r1, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    da80:	460d      	mov	r5, r1
    da82:	42ac      	cmp	r4, r5
    da84:	dd31      	ble.n	daea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16e>
      for (int d = 0; d < accum_depth; ++d) {
    da86:	f04f 0c00 	mov.w	ip, #0
      float total = 0.f;
    da8a:	eddf 7a6d 	vldr	s15, [pc, #436]	; dc40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>
    da8e:	9f02      	ldr	r7, [sp, #8]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    da90:	f8dd a014 	ldr.w	sl, [sp, #20]
    da94:	eb07 0981 	add.w	r9, r7, r1, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
    da98:	4562      	cmp	r2, ip
    da9a:	dd08      	ble.n	daae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x132>
        total += input_data[b * accum_depth + d] *
    da9c:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
    daa0:	ecb9 7a01 	vldmia	r9!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
    daa4:	f10c 0c01 	add.w	ip, ip, #1
        total += input_data[b * accum_depth + d] *
    daa8:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
    daac:	e7f4      	b.n	da98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11c>
      if (bias_data) {
    daae:	f1b8 0f00 	cmp.w	r8, #0
    dab2:	d017      	beq.n	dae4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x168>
        bias_value = bias_data[out_c];
    dab4:	eb08 0c85 	add.w	ip, r8, r5, lsl #2
    dab8:	ed9c 7a00 	vldr	s14, [ip]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    dabc:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
    dac0:	eeb4 8a67 	vcmp.f32	s16, s15
    dac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dac8:	fe78 7a27 	vselgt.f32	s15, s16, s15
	return __b;
    dacc:	eef4 8a67 	vcmp.f32	s17, s15
    dad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dad4:	bf48      	it	mi
    dad6:	eef0 7a68 	vmovmi.f32	s15, s17
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    dada:	3501      	adds	r5, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    dadc:	ecee 7a01 	vstmia	lr!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    dae0:	4411      	add	r1, r2
    dae2:	e7ce      	b.n	da82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x106>
      float bias_value = 0.0f;
    dae4:	eeb0 7a66 	vmov.f32	s14, s13
    dae8:	e7e8      	b.n	dabc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  for (int b = 0; b < batches; ++b) {
    daea:	3001      	adds	r0, #1
    daec:	4426      	add	r6, r4
    daee:	4413      	add	r3, r2
    daf0:	e7bc      	b.n	da6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    daf2:	a846      	add	r0, sp, #280	; 0x118
    daf4:	f005 ffec 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    daf8:	a81e      	add	r0, sp, #120	; 0x78
    dafa:	f005 ffe9 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    dafe:	a818      	add	r0, sp, #96	; 0x60
    db00:	f005 ffe6 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    db04:	a812      	add	r0, sp, #72	; 0x48
                               output);
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
          tflite::micro::GetTensorShape(input),
    db06:	f005 ffe3 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
    db0a:	2000      	movs	r0, #0
      break;
    db0c:	e006      	b.n	db1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
    db0e:	4633      	mov	r3, r6
    db10:	4622      	mov	r2, r4
    db12:	4638      	mov	r0, r7
    db14:	e9cd 5b00 	strd	r5, fp, [sp]
    db18:	f7ff fdaa 	bl	d670 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
}
    db1c:	b051      	add	sp, #324	; 0x144
    db1e:	ecbd 8b02 	vpop	{d8}
    db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          FullyConnectedParamsQuantized(data.reference_op_data),
    db26:	a846      	add	r0, sp, #280	; 0x118
    db28:	f006 f854 	bl	13bd4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    db2c:	4621      	mov	r1, r4
    db2e:	a824      	add	r0, sp, #144	; 0x90
    db30:	f006 f897 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    db34:	6823      	ldr	r3, [r4, #0]
          tflite::micro::GetTensorShape(filter),
    db36:	4631      	mov	r1, r6
    db38:	a82a      	add	r0, sp, #168	; 0xa8
    db3a:	930b      	str	r3, [sp, #44]	; 0x2c
    db3c:	f006 f891 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    db40:	2e00      	cmp	r6, #0
    db42:	f43f af27 	beq.w	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    db46:	6833      	ldr	r3, [r6, #0]
          tflite::micro::GetTensorShape(bias),
    db48:	4629      	mov	r1, r5
    db4a:	a830      	add	r0, sp, #192	; 0xc0
    db4c:	930a      	str	r3, [sp, #40]	; 0x28
    db4e:	f006 f888 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    db52:	2d00      	cmp	r5, #0
    db54:	f43f af1e 	beq.w	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    db58:	682b      	ldr	r3, [r5, #0]
          tflite::micro::GetTensorShape(output),
    db5a:	4659      	mov	r1, fp
    db5c:	a836      	add	r0, sp, #216	; 0xd8
    db5e:	9303      	str	r3, [sp, #12]
    db60:	f006 f87f 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    db64:	f1bb 0f00 	cmp.w	fp, #0
    db68:	d001      	beq.n	db6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    db6a:	f8db b000 	ldr.w	fp, [fp]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    db6e:	9b46      	ldr	r3, [sp, #280]	; 0x118
    db70:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    db72:	930c      	str	r3, [sp, #48]	; 0x30
  const int32_t filter_offset = params.weights_offset;
    db74:	9b47      	ldr	r3, [sp, #284]	; 0x11c
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    db76:	2d01      	cmp	r5, #1
  const int32_t filter_offset = params.weights_offset;
    db78:	930d      	str	r3, [sp, #52]	; 0x34
  const int32_t output_offset = params.output_offset;
    db7a:	9b48      	ldr	r3, [sp, #288]	; 0x120
  const int output_shift = params.output_shift;
    db7c:	e9dd a449 	ldrd	sl, r4, [sp, #292]	; 0x124
  const int32_t output_offset = params.output_offset;
    db80:	930e      	str	r3, [sp, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
    db82:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    db84:	9304      	str	r3, [sp, #16]
  const int32_t output_activation_max = params.quantized_activation_max;
    db86:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    db88:	9305      	str	r3, [sp, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    db8a:	f77f af03 	ble.w	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
    db8e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    db90:	2b00      	cmp	r3, #0
    db92:	f77f aeff 	ble.w	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    db96:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
    db9a:	428a      	cmp	r2, r1
    db9c:	f73f aefa 	bgt.w	d994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    dba0:	3b01      	subs	r3, #1
    dba2:	4619      	mov	r1, r3
    dba4:	a836      	add	r0, sp, #216	; 0xd8
    dba6:	9302      	str	r3, [sp, #8]
    dba8:	f005 ffbd 	bl	13b26 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    dbac:	9b02      	ldr	r3, [sp, #8]
    dbae:	aa36      	add	r2, sp, #216	; 0xd8
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    dbb0:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    dbb2:	1ea9      	subs	r1, r5, #2
    dbb4:	a82a      	add	r0, sp, #168	; 0xa8
    dbb6:	f005 ffa7 	bl	13b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    dbba:	1e69      	subs	r1, r5, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    dbbc:	9006      	str	r0, [sp, #24]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    dbbe:	a82a      	add	r0, sp, #168	; 0xa8
    dbc0:	f005 ff91 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
// Integer arithmetic right-shift. Not rounding.
// Relying on implementation-defined, but in-practice-consistent,
// C++ compiler behavior.
template <typename tIntegerType>
tIntegerType ShiftRight(tIntegerType a, int offset) {
  return a >> offset;
    dbc4:	2200      	movs	r2, #0
    dbc6:	2c00      	cmp	r4, #0
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
  int right_shift = shift > 0 ? 0 : -shift;
    dbc8:	f1c4 0100 	rsb	r1, r4, #0
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    dbcc:	f04f 0301 	mov.w	r3, #1
    dbd0:	bfc8      	it	gt
    dbd2:	2100      	movgt	r1, #0
  for (int b = 0; b < batches; ++b) {
    dbd4:	4694      	mov	ip, r2
    dbd6:	408b      	lsls	r3, r1
    dbd8:	3b01      	subs	r3, #1
    dbda:	9307      	str	r3, [sp, #28]
  return a >> offset;
    dbdc:	105b      	asrs	r3, r3, #1
    dbde:	9310      	str	r3, [sp, #64]	; 0x40
  int left_shift = shift > 0 ? shift : 0;
    dbe0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    dbe4:	9202      	str	r2, [sp, #8]
    dbe6:	9311      	str	r3, [sp, #68]	; 0x44
    dbe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dbea:	4563      	cmp	r3, ip
    dbec:	f340 8084 	ble.w	dcf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    dbf0:	2500      	movs	r5, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    dbf2:	462c      	mov	r4, r5
    dbf4:	9b02      	ldr	r3, [sp, #8]
    dbf6:	445b      	add	r3, fp
    dbf8:	9308      	str	r3, [sp, #32]
    dbfa:	9b06      	ldr	r3, [sp, #24]
    dbfc:	42a3      	cmp	r3, r4
    dbfe:	dd73      	ble.n	dce8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36c>
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
    dc00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc02:	4413      	add	r3, r2
    dc04:	9309      	str	r3, [sp, #36]	; 0x24
    dc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc08:	eb03 0905 	add.w	r9, r3, r5
      int32_t acc = 0;
    dc0c:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
    dc0e:	461e      	mov	r6, r3
    dc10:	42b0      	cmp	r0, r6
    dc12:	dd17      	ble.n	dc44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
        int32_t input_val = input_data[b * accum_depth + d];
    dc14:	9f09      	ldr	r7, [sp, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    dc16:	f819 eb01 	ldrb.w	lr, [r9], #1
        int32_t input_val = input_data[b * accum_depth + d];
    dc1a:	f817 8b01 	ldrb.w	r8, [r7], #1
      for (int d = 0; d < accum_depth; ++d) {
    dc1e:	3601      	adds	r6, #1
        int32_t input_val = input_data[b * accum_depth + d];
    dc20:	9709      	str	r7, [sp, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    dc22:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    dc24:	44be      	add	lr, r7
    dc26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    dc28:	44b8      	add	r8, r7
    dc2a:	fb08 330e 	mla	r3, r8, lr, r3
      for (int d = 0; d < accum_depth; ++d) {
    dc2e:	e7ef      	b.n	dc10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x294>
    dc30:	000171d0 	.word	0x000171d0
    dc34:	000171d8 	.word	0x000171d8
    dc38:	000171cc 	.word	0x000171cc
    dc3c:	000171d4 	.word	0x000171d4
    dc40:	00000000 	.word	0x00000000
      }
      if (bias_data) {
    dc44:	9e03      	ldr	r6, [sp, #12]
    dc46:	b116      	cbz	r6, dc4e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d2>
        acc += bias_data[out_c];
    dc48:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
    dc4c:	4433      	add	r3, r6
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    dc4e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    dc50:	40b3      	lsls	r3, r6
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dc52:	459a      	cmp	sl, r3
    dc54:	d128      	bne.n	dca8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32c>
    dc56:	f10a 4600 	add.w	r6, sl, #2147483648	; 0x80000000
    dc5a:	f1d6 0800 	rsbs	r8, r6, #0
    dc5e:	eb48 0806 	adc.w	r8, r8, r6
  std::int64_t ab_64 = a_64 * b_64;
    dc62:	fb83 360a 	smull	r3, r6, r3, sl
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dc66:	4f2f      	ldr	r7, [pc, #188]	; (dd24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a8>)
    dc68:	2e00      	cmp	r6, #0
    dc6a:	bfac      	ite	ge
    dc6c:	f04f 4e80 	movge.w	lr, #1073741824	; 0x40000000
    dc70:	46be      	movlt	lr, r7
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dc72:	f1b8 0f00 	cmp.w	r8, #0
    dc76:	d11a      	bne.n	dcae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x332>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dc78:	eb1e 0303 	adds.w	r3, lr, r3
    dc7c:	eb46 76ee 	adc.w	r6, r6, lr, asr #31
    dc80:	2e00      	cmp	r6, #0
    dc82:	da04      	bge.n	dc8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x312>
    dc84:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    dc88:	19db      	adds	r3, r3, r7
    dc8a:	f146 0600 	adc.w	r6, r6, #0
    dc8e:	0fdb      	lsrs	r3, r3, #31
    dc90:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  assert(exponent <= 31);
    dc94:	291f      	cmp	r1, #31
    dc96:	4405      	add	r5, r0
    dc98:	dd0c      	ble.n	dcb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x338>
    dc9a:	f240 1167 	movw	r1, #359	; 0x167
    dc9e:	4b22      	ldr	r3, [pc, #136]	; (dd28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>)
    dca0:	4a22      	ldr	r2, [pc, #136]	; (dd2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b0>)
    dca2:	4823      	ldr	r0, [pc, #140]	; (dd30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b4>)
    dca4:	f002 f952 	bl	ff4c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dca8:	f04f 0800 	mov.w	r8, #0
    dcac:	e7d9      	b.n	dc62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
    dcae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    dcb2:	e7ef      	b.n	dc94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x318>
  return a & b;
    dcb4:	9e07      	ldr	r6, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    dcb6:	3401      	adds	r4, #1
    dcb8:	ea06 0903 	and.w	r9, r6, r3
  return a + b;
    dcbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    dcbe:	eb06 78d3 	add.w	r8, r6, r3, lsr #31
  return a >> offset;
    dcc2:	410b      	asrs	r3, r1
  return a + b;
    dcc4:	45c1      	cmp	r9, r8
    dcc6:	bfc8      	it	gt
    dcc8:	3301      	addgt	r3, #1
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
    dcca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    dccc:	4433      	add	r3, r6
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
    dcce:	9e04      	ldr	r6, [sp, #16]
    dcd0:	42b3      	cmp	r3, r6
    dcd2:	bfb8      	it	lt
    dcd4:	4633      	movlt	r3, r6
    dcd6:	9e05      	ldr	r6, [sp, #20]
    dcd8:	42b3      	cmp	r3, r6
    dcda:	bfa8      	it	ge
    dcdc:	4633      	movge	r3, r6
    dcde:	9e08      	ldr	r6, [sp, #32]
    dce0:	f806 3b01 	strb.w	r3, [r6], #1
    dce4:	9608      	str	r6, [sp, #32]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    dce6:	e788      	b.n	dbfa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    dce8:	9c02      	ldr	r4, [sp, #8]
    dcea:	9b06      	ldr	r3, [sp, #24]
    dcec:	f10c 0c01 	add.w	ip, ip, #1
    dcf0:	441c      	add	r4, r3
    dcf2:	9402      	str	r4, [sp, #8]
    dcf4:	4402      	add	r2, r0
    dcf6:	e777      	b.n	dbe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26c>
    dcf8:	a836      	add	r0, sp, #216	; 0xd8
    dcfa:	f005 fee9 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    dcfe:	a830      	add	r0, sp, #192	; 0xc0
    dd00:	f005 fee6 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    dd04:	a82a      	add	r0, sp, #168	; 0xa8
    dd06:	f005 fee3 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    dd0a:	a824      	add	r0, sp, #144	; 0x90
    dd0c:	e6fb      	b.n	db06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    dd0e:	697d      	ldr	r5, [r7, #20]
    dd10:	f001 fc3e 	bl	f590 <TfLiteTypeGetName>
    dd14:	7a23      	ldrb	r3, [r4, #8]
    dd16:	4602      	mov	r2, r0
    dd18:	4906      	ldr	r1, [pc, #24]	; (dd34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>)
    dd1a:	4638      	mov	r0, r7
    dd1c:	47a8      	blx	r5
      return kTfLiteError;
    dd1e:	2001      	movs	r0, #1
    dd20:	e6fc      	b.n	db1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
    dd22:	bf00      	nop
    dd24:	c0000001 	.word	0xc0000001
    dd28:	000182b5 	.word	0x000182b5
    dd2c:	000182c4 	.word	0x000182c4
    dd30:	00018319 	.word	0x00018319
    dd34:	00018299 	.word	0x00018299

0000dd38 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    dd38:	b570      	push	{r4, r5, r6, lr}
  fully_connected_registration.init = Init;
    dd3a:	4b0b      	ldr	r3, [pc, #44]	; (dd68 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
    dd3c:	4c0b      	ldr	r4, [pc, #44]	; (dd6c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x34>)
  fully_connected_registration.invoke = Eval;
  fully_connected_registration.profiling_string = nullptr;
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
  fully_connected_registration.version = 0;
  return fully_connected_registration;
    dd3e:	4605      	mov	r5, r0
  fully_connected_registration.init = Init;
    dd40:	6023      	str	r3, [r4, #0]
  fully_connected_registration.free = nullptr;
    dd42:	2300      	movs	r3, #0
TfLiteRegistration Register_FULLY_CONNECTED() {
    dd44:	4606      	mov	r6, r0
  fully_connected_registration.prepare = Prepare;
    dd46:	4a0a      	ldr	r2, [pc, #40]	; (dd70 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
  fully_connected_registration.free = nullptr;
    dd48:	6063      	str	r3, [r4, #4]
  fully_connected_registration.prepare = Prepare;
    dd4a:	60a2      	str	r2, [r4, #8]
  fully_connected_registration.invoke = Eval;
    dd4c:	4a09      	ldr	r2, [pc, #36]	; (dd74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.custom_name = nullptr;
    dd4e:	e9c4 3305 	strd	r3, r3, [r4, #20]
  fully_connected_registration.profiling_string = nullptr;
    dd52:	e9c4 2303 	strd	r2, r3, [r4, #12]
  fully_connected_registration.version = 0;
    dd56:	61e3      	str	r3, [r4, #28]
  return fully_connected_registration;
    dd58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    dd5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    dd5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    dd60:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    dd64:	4630      	mov	r0, r6
    dd66:	bd70      	pop	{r4, r5, r6, pc}
    dd68:	00013abf 	.word	0x00013abf
    dd6c:	20003b4c 	.word	0x20003b4c
    dd70:	0000d7e5 	.word	0x0000d7e5
    dd74:	0000d97d 	.word	0x0000d97d

0000dd78 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    dd78:	2901      	cmp	r1, #1
    dd7a:	d103      	bne.n	dd84 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
    dd7c:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    dd7e:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
    dd80:	4b09      	ldr	r3, [pc, #36]	; (dda8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
    dd82:	e004      	b.n	dd8e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
    dd84:	2903      	cmp	r1, #3
    dd86:	d104      	bne.n	dd92 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
    dd88:	2300      	movs	r3, #0
    dd8a:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
    dd8c:	4b07      	ldr	r3, [pc, #28]	; (ddac <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    dd8e:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
    dd90:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    dd92:	2902      	cmp	r1, #2
    dd94:	d104      	bne.n	dda0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
    dd96:	4b06      	ldr	r3, [pc, #24]	; (ddb0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
    dd98:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
    dd9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    dd9e:	e7f6      	b.n	dd8e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    dda0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    dda4:	e7eb      	b.n	dd7e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
    dda6:	bf00      	nop
    dda8:	7f7fffff 	.word	0x7f7fffff
    ddac:	40c00000 	.word	0x40c00000
    ddb0:	bf800000 	.word	0xbf800000

0000ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ddb4:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
    ddb6:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ddb8:	d119      	bne.n	ddee <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3a>
    ddba:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    ddbe:	425c      	negs	r4, r3
    ddc0:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
    ddc2:	fb80 0301 	smull	r0, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	4a0b      	ldr	r2, [pc, #44]	; (ddf8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>)
    ddca:	bfa8      	it	ge
    ddcc:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ddd0:	b97c      	cbnz	r4, ddf2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ddd2:	1811      	adds	r1, r2, r0
    ddd4:	eb43 70e2 	adc.w	r0, r3, r2, asr #31
    ddd8:	2800      	cmp	r0, #0
    ddda:	da04      	bge.n	dde6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x32>
    dddc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    dde0:	18c9      	adds	r1, r1, r3
    dde2:	f140 0000 	adc.w	r0, r0, #0
    dde6:	0fc9      	lsrs	r1, r1, #31
    dde8:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}
    ddec:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ddee:	2400      	movs	r4, #0
    ddf0:	e7e7      	b.n	ddc2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
    ddf2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ddf6:	e7f9      	b.n	ddec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x38>
    ddf8:	c0000001 	.word	0xc0000001

0000ddfc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
    ddfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de00:	ed2d 8b04 	vpush	{d8-d9}
    de04:	460c      	mov	r4, r1
    de06:	4691      	mov	r9, r2
    de08:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    de0a:	680b      	ldr	r3, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
    de0c:	b087      	sub	sp, #28
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    de0e:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    de10:	4619      	mov	r1, r3
                    const RuntimeShape& output_shape, float* output_data) {
    de12:	9001      	str	r0, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    de14:	4620      	mov	r0, r4
    de16:	9203      	str	r2, [sp, #12]
    de18:	9302      	str	r3, [sp, #8]
    de1a:	f005 ff46 	bl	13caa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    de1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    de22:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    de24:	4619      	mov	r1, r3
    de26:	4620      	mov	r0, r4
    de28:	f005 fe6e 	bl	13b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    de2c:	2600      	movs	r6, #0
    de2e:	4604      	mov	r4, r0

  for (int i = 0; i < outer_size; ++i) {
    de30:	46b0      	mov	r8, r6
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    de32:	ed9f 9a2b 	vldr	s18, [pc, #172]	; dee0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe4>
      return __a;
    de36:	aa05      	add	r2, sp, #20
  for (int i = 0; i < outer_size; ++i) {
    de38:	45b8      	cmp	r8, r7
    de3a:	da4b      	bge.n	ded4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd8>
    float max = std::numeric_limits<float>::lowest();
    de3c:	eb09 0b86 	add.w	fp, r9, r6, lsl #2
    de40:	ed8d 9a05 	vstr	s18, [sp, #20]
    de44:	4658      	mov	r0, fp
    for (int c = 0; c < depth; ++c) {
    de46:	2100      	movs	r1, #0
    de48:	00b5      	lsls	r5, r6, #2
    de4a:	42a1      	cmp	r1, r4
    de4c:	db23      	blt.n	de96 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
    de4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      max = std::max(max, input_data[i * depth + c]);
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
    de50:	f04f 0a00 	mov.w	sl, #0
    de54:	441d      	add	r5, r3
    for (int c = 0; c < depth; ++c) {
    de56:	462b      	mov	r3, r5
    float sum = 0.f;
    de58:	ed9f 8a22 	vldr	s16, [pc, #136]	; dee4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
    for (int c = 0; c < depth; ++c) {
    de5c:	45a2      	cmp	sl, r4
    de5e:	9302      	str	r3, [sp, #8]
    de60:	da29      	bge.n	deb6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xba>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    de62:	ed9d 0a05 	vldr	s0, [sp, #20]
    de66:	ecfb 8a01 	vldmia	fp!, {s17}
                                   static_cast<float>(params.beta));
    de6a:	9b01      	ldr	r3, [sp, #4]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    de6c:	ee78 8ac0 	vsub.f32	s17, s17, s0
                                   static_cast<float>(params.beta));
    de70:	e9d3 0100 	ldrd	r0, r1, [r3]
    de74:	f7f2 fdc6 	bl	a04 <__aeabi_d2f>
  { return __builtin_expf(__x); }
    de78:	ee07 0a90 	vmov	s15, r0
    de7c:	ee28 0aa7 	vmul.f32	s0, s17, s15
    de80:	f001 fdea 	bl	fa58 <expf>
      output_data[i * depth + c] = exp_c;
    de84:	9b02      	ldr	r3, [sp, #8]
      sum += exp_c;
    de86:	ee38 8a00 	vadd.f32	s16, s16, s0
      output_data[i * depth + c] = exp_c;
    de8a:	eca3 0a01 	vstmia	r3!, {s0}
    for (int c = 0; c < depth; ++c) {
    de8e:	f10a 0a01 	add.w	sl, sl, #1
    de92:	aa05      	add	r2, sp, #20
    de94:	e7e2      	b.n	de5c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x60>
      max = std::max(max, input_data[i * depth + c]);
    de96:	4603      	mov	r3, r0
      if (__a < __b)
    de98:	eddd 7a05 	vldr	s15, [sp, #20]
    de9c:	ed93 7a00 	vldr	s14, [r3]
    dea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    dea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
    dea8:	bfd8      	it	le
    deaa:	4613      	movle	r3, r2
    deac:	681b      	ldr	r3, [r3, #0]
    deae:	3004      	adds	r0, #4
    deb0:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    deb2:	3101      	adds	r1, #1
    deb4:	e7c9      	b.n	de4a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
    deb6:	2300      	movs	r3, #0
    deb8:	42a3      	cmp	r3, r4
    deba:	da07      	bge.n	decc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd0>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    debc:	ed95 7a00 	vldr	s14, [r5]
    dec0:	eec7 7a08 	vdiv.f32	s15, s14, s16
    for (int c = 0; c < depth; ++c) {
    dec4:	3301      	adds	r3, #1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    dec6:	ece5 7a01 	vstmia	r5!, {s15}
    for (int c = 0; c < depth; ++c) {
    deca:	e7f5      	b.n	deb8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbc>
  for (int i = 0; i < outer_size; ++i) {
    decc:	f108 0801 	add.w	r8, r8, #1
    ded0:	4426      	add	r6, r4
    ded2:	e7b1      	b.n	de38 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
    ded4:	b007      	add	sp, #28
    ded6:	ecbd 8b04 	vpop	{d8-d9}
    deda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dede:	bf00      	nop
    dee0:	ff7fffff 	.word	0xff7fffff
    dee4:	00000000 	.word	0x00000000

0000dee8 <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    dee8:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    deea:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
    deec:	4606      	mov	r6, r0
          /*version=*/0};
    deee:	4d04      	ldr	r5, [pc, #16]	; (df00 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
    def0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    def2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    def4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    def8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    defc:	4630      	mov	r0, r6
    defe:	bd70      	pop	{r4, r5, r6, pc}
    df00:	00015b50 	.word	0x00015b50

0000df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
    df04:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
    df06:	b508      	push	{r3, lr}
  assert(exponent >= 0);
    df08:	da06      	bge.n	df18 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
    df0a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    df0e:	4b0c      	ldr	r3, [pc, #48]	; (df40 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
    df10:	4a0c      	ldr	r2, [pc, #48]	; (df44 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
  assert(exponent <= 31);
    df12:	480d      	ldr	r0, [pc, #52]	; (df48 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
    df14:	f002 f81a 	bl	ff4c <__assert_func>
    df18:	291f      	cmp	r1, #31
    df1a:	dd04      	ble.n	df26 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
    df1c:	f240 1167 	movw	r1, #359	; 0x167
    df20:	4b0a      	ldr	r3, [pc, #40]	; (df4c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
    df22:	4a08      	ldr	r2, [pc, #32]	; (df44 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    df24:	e7f5      	b.n	df12 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    df26:	2301      	movs	r3, #1
    df28:	408b      	lsls	r3, r1
    df2a:	3b01      	subs	r3, #1
  return a & b;
    df2c:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
    df30:	105b      	asrs	r3, r3, #1
  return a + b;
    df32:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
    df36:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
    df38:	429a      	cmp	r2, r3
    df3a:	bfc8      	it	gt
    df3c:	3001      	addgt	r0, #1
    df3e:	bd08      	pop	{r3, pc}
    df40:	00018396 	.word	0x00018396
    df44:	000182c4 	.word	0x000182c4
    df48:	00018319 	.word	0x00018319
    df4c:	000182b5 	.word	0x000182b5

0000df50 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
    df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df54:	460c      	mov	r4, r1
    df56:	b091      	sub	sp, #68	; 0x44
    df58:	9208      	str	r2, [sp, #32]
    df5a:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    df5c:	680b      	ldr	r3, [r1, #0]
                         int16_t* output_data) {
    df5e:	4683      	mov	fp, r0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    df60:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    df62:	4619      	mov	r1, r3
    df64:	4620      	mov	r0, r4
    df66:	9204      	str	r2, [sp, #16]
    df68:	9301      	str	r3, [sp, #4]
    df6a:	f005 fe9e 	bl	13caa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    df6e:	9b01      	ldr	r3, [sp, #4]
    df70:	9a04      	ldr	r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    df72:	9005      	str	r0, [sp, #20]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    df74:	4619      	mov	r1, r3
    df76:	4620      	mov	r0, r4
    df78:	f005 fdc6 	bl	13b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    df7c:	f04f 0a00 	mov.w	sl, #0
    df80:	4681      	mov	r9, r0

  for (int i = 0; i < outer_size; ++i) {
    df82:	f8cd a010 	str.w	sl, [sp, #16]
    df86:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    df8a:	4293      	cmp	r3, r2
    df8c:	f280 80cc 	bge.w	e128 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d8>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    df90:	f248 0300 	movw	r3, #32768	; 0x8000
    df94:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    for (int c = 0; c < depth; ++c) {
    df98:	9b08      	ldr	r3, [sp, #32]
    df9a:	2200      	movs	r2, #0
    df9c:	eb03 084a 	add.w	r8, r3, sl, lsl #1
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    dfa0:	4641      	mov	r1, r8
    dfa2:	ea4f 054a 	mov.w	r5, sl, lsl #1
    dfa6:	f10d 062e 	add.w	r6, sp, #46	; 0x2e
    for (int c = 0; c < depth; ++c) {
    dfaa:	454a      	cmp	r2, r9
    dfac:	da0e      	bge.n	dfcc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7c>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    dfae:	460b      	mov	r3, r1
      if (__a < __b)
    dfb0:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
    dfb4:	f9b3 4000 	ldrsh.w	r4, [r3]
    dfb8:	3102      	adds	r1, #2
    dfba:	4284      	cmp	r4, r0
      return __a;
    dfbc:	bfd8      	it	le
    dfbe:	4633      	movle	r3, r6
    dfc0:	f9b3 3000 	ldrsh.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
    dfc4:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    dfc6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    for (int c = 0; c < depth; ++c) {
    dfca:	e7ee      	b.n	dfaa <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x5a>
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    for (int c = 0; c < depth; ++c) {
    dfcc:	2700      	movs	r7, #0
  int32_t sym_scaled_diff = scaled_diff + 32767;
    dfce:	f647 76ff 	movw	r6, #32767	; 0x7fff
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    dfd2:	463c      	mov	r4, r7
    dfd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    dfd6:	442b      	add	r3, r5
    dfd8:	9301      	str	r3, [sp, #4]
    dfda:	9307      	str	r3, [sp, #28]
    for (int c = 0; c < depth; ++c) {
    dfdc:	454f      	cmp	r7, r9
    dfde:	da2e      	bge.n	e03e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xee>
      input_diff, params.input_multiplier, params.input_left_shift);
    dfe0:	e9db 1502 	ldrd	r1, r5, [fp, #8]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    dfe4:	f938 3b02 	ldrsh.w	r3, [r8], #2
    dfe8:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
  int right_shift = shift > 0 ? 0 : -shift;
    dfec:	2d00      	cmp	r5, #0
    dfee:	eba3 0300 	sub.w	r3, r3, r0
  int left_shift = shift > 0 ? shift : 0;
    dff2:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    dff6:	bfcc      	ite	gt
    dff8:	2500      	movgt	r5, #0
    dffa:	426d      	negle	r5, r5
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    dffc:	fa03 f000 	lsl.w	r0, r3, r0
    e000:	f7ff fed8 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    e004:	4629      	mov	r1, r5
    e006:	f7ff ff7d 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    e00a:	4b49      	ldr	r3, [pc, #292]	; (e130 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>)
  int32_t sym_scaled_diff = scaled_diff + 32767;
    e00c:	4430      	add	r0, r6
      if (__a < __b)
    e00e:	4298      	cmp	r0, r3
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    e010:	930f      	str	r3, [sp, #60]	; 0x3c
  int32_t sym_scaled_diff = scaled_diff + 32767;
    e012:	900d      	str	r0, [sp, #52]	; 0x34
      return __a;
    e014:	bfac      	ite	ge
    e016:	ab0d      	addge	r3, sp, #52	; 0x34
	return __b;
    e018:	ab0f      	addlt	r3, sp, #60	; 0x3c
      if (__b < __a)
    e01a:	681a      	ldr	r2, [r3, #0]
               static_cast<int32_t>(32767));
    e01c:	960e      	str	r6, [sp, #56]	; 0x38
    e01e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    e022:	bfa8      	it	ge
    e024:	ab0e      	addge	r3, sp, #56	; 0x38
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    e026:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
    e02a:	f9b3 0000 	ldrsh.w	r0, [r3]
    e02e:	f005 fe6c 	bl	13d0a <_ZN6tflite26generic_int16_table_lookupEsPKs>
      exp_results_Q015[c] =
    e032:	9b01      	ldr	r3, [sp, #4]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    e034:	4404      	add	r4, r0
      exp_results_Q015[c] =
    e036:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
    for (int c = 0; c < depth; ++c) {
    e03a:	3701      	adds	r7, #1
    e03c:	e7ce      	b.n	dfdc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x8c>
template <typename T>
int CountLeadingZeros(T integer_input) {
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
    e03e:	fab4 f284 	clz	r2, r4

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    e042:	17e3      	asrs	r3, r4, #31
    e044:	1e50      	subs	r0, r2, #1
    e046:	f1a2 0121 	sub.w	r1, r2, #33	; 0x21
    e04a:	fa04 f101 	lsl.w	r1, r4, r1
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    e04e:	4615      	mov	r5, r2
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    e050:	4083      	lsls	r3, r0
    e052:	f1c2 0221 	rsb	r2, r2, #33	; 0x21
    e056:	fa24 f202 	lsr.w	r2, r4, r2
    e05a:	430b      	orrs	r3, r1
    e05c:	4313      	orrs	r3, r2
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
                 static_cast<int32_t>(32767)));
    e05e:	f647 72ff 	movw	r2, #32767	; 0x7fff
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    e062:	4084      	lsls	r4, r0
    e064:	f514 5400 	adds.w	r4, r4, #8192	; 0x2000
    e068:	f143 0300 	adc.w	r3, r3, #0
         (1 << 13)) >>
    e06c:	0ba4      	lsrs	r4, r4, #14
    e06e:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    e072:	4b2f      	ldr	r3, [pc, #188]	; (e130 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>)
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    e074:	f5a4 34c0 	sub.w	r4, r4, #98304	; 0x18000
      if (__a < __b)
    e078:	429c      	cmp	r4, r3
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    e07a:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    e07c:	940c      	str	r4, [sp, #48]	; 0x30
      return __a;
    e07e:	bfac      	ite	ge
    e080:	ab0c      	addge	r3, sp, #48	; 0x30
	return __b;
    e082:	ab0e      	addlt	r3, sp, #56	; 0x38
                 static_cast<int32_t>(32767)));
    e084:	920f      	str	r2, [sp, #60]	; 0x3c
      if (__b < __a)
    e086:	681a      	ldr	r2, [r3, #0]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
    e088:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
    e08c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    e090:	bfa8      	it	ge
    e092:	ab0f      	addge	r3, sp, #60	; 0x3c
    e094:	f9b3 0000 	ldrsh.w	r0, [r3]
    e098:	f005 fe37 	bl	13d0a <_ZN6tflite26generic_int16_table_lookupEsPKs>
    e09c:	9006      	str	r0, [sp, #24]

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
    e09e:	2001      	movs	r0, #1
    for (int c = 0; c < depth; ++c) {
    e0a0:	2100      	movs	r1, #0
      uint8_t right_shift = 31 - headroom_plus_one;
    e0a2:	f1c5 031f 	rsb	r3, r5, #31
    e0a6:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
    e0a8:	1e5a      	subs	r2, r3, #1
    e0aa:	4090      	lsls	r0, r2
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e0ac:	17c2      	asrs	r2, r0, #31
    e0ae:	9209      	str	r2, [sp, #36]	; 0x24
      return __a;
    e0b0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
	return __b;
    e0b4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
	return __b;
    e0b8:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
    for (int c = 0; c < depth; ++c) {
    e0bc:	4549      	cmp	r1, r9
    e0be:	da2e      	bge.n	e11e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ce>
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e0c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e0c2:	9c06      	ldr	r4, [sp, #24]
    e0c4:	9203      	str	r2, [sp, #12]
    e0c6:	9a07      	ldr	r2, [sp, #28]
    e0c8:	9002      	str	r0, [sp, #8]
    e0ca:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    e0ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    e0d2:	fbc2 6784 	smlalbb	r6, r7, r2, r4
                        round) >>
    e0d6:	f1c3 0520 	rsb	r5, r3, #32
    e0da:	f1b3 0420 	subs.w	r4, r3, #32
    e0de:	fa26 f203 	lsr.w	r2, r6, r3
    e0e2:	fa07 f505 	lsl.w	r5, r7, r5
    e0e6:	ea42 0205 	orr.w	r2, r2, r5
    e0ea:	bf5c      	itt	pl
    e0ec:	fa47 f404 	asrpl.w	r4, r7, r4
    e0f0:	4322      	orrpl	r2, r4
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    e0f2:	2400      	movs	r4, #0
      if (__a < __b)
    e0f4:	42a2      	cmp	r2, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e0f6:	920d      	str	r2, [sp, #52]	; 0x34
          std::min(std::max(result, static_cast<int32_t>(0)),
    e0f8:	940e      	str	r4, [sp, #56]	; 0x38
	return __b;
    e0fa:	bfac      	ite	ge
    e0fc:	4672      	movge	r2, lr
    e0fe:	4642      	movlt	r2, r8
                   static_cast<int32_t>(32767)));
    e100:	f647 74ff 	movw	r4, #32767	; 0x7fff
    e104:	940f      	str	r4, [sp, #60]	; 0x3c
      if (__b < __a)
    e106:	6814      	ldr	r4, [r2, #0]
    for (int c = 0; c < depth; ++c) {
    e108:	3101      	adds	r1, #1
    e10a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
	return __b;
    e10e:	bfa8      	it	ge
    e110:	4662      	movge	r2, ip
      output_data[i * depth + c] = static_cast<int16_t>(
    e112:	9c01      	ldr	r4, [sp, #4]
    e114:	6812      	ldr	r2, [r2, #0]
    e116:	f824 2b02 	strh.w	r2, [r4], #2
    e11a:	9401      	str	r4, [sp, #4]
    for (int c = 0; c < depth; ++c) {
    e11c:	e7ce      	b.n	e0bc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x16c>
  for (int i = 0; i < outer_size; ++i) {
    e11e:	9b04      	ldr	r3, [sp, #16]
    e120:	44ca      	add	sl, r9
    e122:	3301      	adds	r3, #1
    e124:	9304      	str	r3, [sp, #16]
    e126:	e72e      	b.n	df86 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x36>
    }
  }
}
    e128:	b011      	add	sp, #68	; 0x44
    e12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e12e:	bf00      	nop
    e130:	ffff8000 	.word	0xffff8000

0000e134 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  std::int64_t sum = a64 + b64;
    e136:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  std::int64_t a64 = a;
    e13a:	17c5      	asrs	r5, r0, #31
  std::int64_t sum = a64 + b64;
    e13c:	18c0      	adds	r0, r0, r3
    e13e:	f145 0500 	adc.w	r5, r5, #0
  std::int64_t sign = sum >= 0 ? 1 : -1;
    e142:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    e146:	bf08      	it	eq
    e148:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    e14c:	bf0b      	itete	eq
    e14e:	4603      	moveq	r3, r0
    e150:	2301      	movne	r3, #1
    e152:	462a      	moveq	r2, r5
    e154:	2200      	movne	r2, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    e156:	18c0      	adds	r0, r0, r3
    e158:	eb45 0502 	adc.w	r5, r5, r2
    e15c:	0feb      	lsrs	r3, r5, #31
    e15e:	1818      	adds	r0, r3, r0
    e160:	f145 0500 	adc.w	r5, r5, #0
    e164:	0840      	lsrs	r0, r0, #1
    e166:	ea40 75c5 	orr.w	r5, r0, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    e16a:	4628      	mov	r0, r5
    e16c:	4935      	ldr	r1, [pc, #212]	; (e244 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x110>)
    e16e:	f7ff fe21 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    e172:	2603      	movs	r6, #3
    e174:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    e178:	4621      	mov	r1, r4
    e17a:	4628      	mov	r0, r5
    e17c:	f7ff fe1a 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    e180:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    e184:	4620      	mov	r0, r4
    e186:	f7ff fe15 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    e18a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    e18e:	da45      	bge.n	e21c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xe8>
    e190:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    e194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e198:	f04f 0700 	mov.w	r7, #0
    e19c:	bfc8      	it	gt
    e19e:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    e1a0:	17c2      	asrs	r2, r0, #31
    e1a2:	0092      	lsls	r2, r2, #2
    e1a4:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    e1a8:	0080      	lsls	r0, r0, #2
             ? min
    e1aa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    e1ae:	f172 33ff 	sbcs.w	r3, r2, #4294967295	; 0xffffffff
    e1b2:	db37      	blt.n	e224 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf0>
             : wide_shifted > max ? max
    e1b4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    e1b8:	f172 0300 	sbcs.w	r3, r2, #0
    e1bc:	da35      	bge.n	e22a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf6>
  return a & b;
    e1be:	ea20 0307 	bic.w	r3, r0, r7
    e1c2:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
  return a ^ b;
    e1c6:	407b      	eors	r3, r7
  return a & b;
    e1c8:	ea23 0301 	bic.w	r3, r3, r1
    e1cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
    e1d0:	404b      	eors	r3, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
    e1d2:	3e01      	subs	r6, #1
  return a + b;
    e1d4:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
    e1d6:	d1cf      	bne.n	e178 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x44>
  return a ? BitNot(zero) : zero;
    e1d8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    e1dc:	da28      	bge.n	e230 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xfc>
    e1de:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    e1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e1e6:	4633      	mov	r3, r6
    e1e8:	bfc8      	it	gt
    e1ea:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    e1ec:	17e2      	asrs	r2, r4, #31
    e1ee:	1924      	adds	r4, r4, r4
    e1f0:	4152      	adcs	r2, r2
             ? min
    e1f2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    e1f6:	f172 31ff 	sbcs.w	r1, r2, #4294967295	; 0xffffffff
    e1fa:	db1d      	blt.n	e238 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x104>
             : wide_shifted > max ? max
    e1fc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    e200:	f172 0200 	sbcs.w	r2, r2, #0
    e204:	da1b      	bge.n	e23e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  return a & b;
    e206:	ea24 0403 	bic.w	r4, r4, r3
    e20a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  return a ^ b;
    e20e:	405c      	eors	r4, r3
  return a & b;
    e210:	ea24 0400 	bic.w	r4, r4, r0
    e214:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    e218:	4060      	eors	r0, r4
    e21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return a ? BitNot(zero) : zero;
    e21c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e220:	2100      	movs	r1, #0
    e222:	e7bd      	b.n	e1a0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6c>
             ? min
    e224:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    e228:	e7c9      	b.n	e1be <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x8a>
             : wide_shifted > max ? max
    e22a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e22e:	e7c6      	b.n	e1be <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x8a>
  return a ? BitNot(zero) : zero;
    e230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e234:	4630      	mov	r0, r6
    e236:	e7d9      	b.n	e1ec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xb8>
             ? min
    e238:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    e23c:	e7e3      	b.n	e206 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xd2>
             : wide_shifted > max ? max
    e23e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    e242:	e7e0      	b.n	e206 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xd2>
    e244:	c3c3c3c4 	.word	0xc3c3c3c4

0000e248 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    e248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e24c:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    e24e:	4814      	ldr	r0, [pc, #80]	; (e2a0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
    e250:	f005 fd7c 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e254:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    e256:	4813      	ldr	r0, [pc, #76]	; (e2a4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    e258:	f005 fd78 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
    e25c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    e260:	4680      	mov	r8, r0
  F x2 = x * x;
    e262:	4621      	mov	r1, r4
    e264:	4620      	mov	r0, r4
    e266:	f005 fd76 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
    e26a:	4621      	mov	r1, r4
  F x2 = x * x;
    e26c:	4605      	mov	r5, r0
  F x3 = x2 * x;
    e26e:	f005 fd72 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
    e272:	4629      	mov	r1, r5
  F x3 = x2 * x;
    e274:	4607      	mov	r7, r0
  F x4 = x2 * x2;
    e276:	4628      	mov	r0, r5
    e278:	f005 fd6d 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    e27c:	2102      	movs	r1, #2
    e27e:	f7ff fe41 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
    e282:	4641      	mov	r1, r8
    e284:	4438      	add	r0, r7
    e286:	f005 fd66 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    e28a:	2101      	movs	r1, #1
    e28c:	4428      	add	r0, r5
    e28e:	f7ff fe39 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
    e292:	1821      	adds	r1, r4, r0
    e294:	4630      	mov	r0, r6
    e296:	f005 fd5e 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
    e29a:	4430      	add	r0, r6
    e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2a0:	70f5a894 	.word	0x70f5a894
    e2a4:	2aaaaaab 	.word	0x2aaaaaab

0000e2a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    e2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
    e2ac:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    e2b0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    e2b2:	0160      	lsls	r0, r4, #5
    e2b4:	f7ff ffc8 	bl	e248 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    e2b8:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    e2ba:	4842      	ldr	r0, [pc, #264]	; (e3c4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    e2bc:	f005 fd46 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e2c0:	4601      	mov	r1, r0
    e2c2:	4630      	mov	r0, r6
    e2c4:	f005 fd47 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
    e2c8:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
    e2ca:	f3c4 6b00 	ubfx	fp, r4, #24, #1
    e2ce:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
    e2d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    e2d6:	ea00 0909 	and.w	r9, r0, r9
    e2da:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
    e2de:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    e2e2:	4839      	ldr	r0, [pc, #228]	; (e3c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    e2e4:	f005 fd32 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e2e8:	4601      	mov	r1, r0
    e2ea:	4650      	mov	r0, sl
    e2ec:	f005 fd33 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e2f0:	f3c4 6940 	ubfx	r9, r4, #25, #1
    e2f4:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    e2f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e2fc:	ea00 0008 	and.w	r0, r0, r8
    e300:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
    e304:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    e308:	4830      	ldr	r0, [pc, #192]	; (e3cc <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    e30a:	f005 fd1f 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e30e:	4601      	mov	r1, r0
    e310:	4648      	mov	r0, r9
    e312:	f005 fd20 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e316:	f3c4 6780 	ubfx	r7, r4, #26, #1
    e31a:	427e      	negs	r6, r7
  return a & b;
    e31c:	3f01      	subs	r7, #1
    e31e:	4030      	ands	r0, r6
    e320:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    e324:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    e326:	482a      	ldr	r0, [pc, #168]	; (e3d0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    e328:	f005 fd10 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e32c:	4601      	mov	r1, r0
    e32e:	4638      	mov	r0, r7
    e330:	f005 fd11 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e334:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    e338:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
    e33c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    e340:	ea00 000a 	and.w	r0, r0, sl
    e344:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    e348:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    e34c:	4821      	ldr	r0, [pc, #132]	; (e3d4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    e34e:	f005 fcfd 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e352:	4601      	mov	r1, r0
    e354:	4658      	mov	r0, fp
    e356:	f005 fcfe 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e35a:	f3c4 7900 	ubfx	r9, r4, #28, #1
    e35e:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    e362:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e366:	ea00 0008 	and.w	r0, r0, r8
    e36a:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    e36e:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    e372:	4819      	ldr	r0, [pc, #100]	; (e3d8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    e374:	f005 fcea 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e378:	4601      	mov	r1, r0
    e37a:	4648      	mov	r0, r9
    e37c:	f005 fceb 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e380:	f3c4 7740 	ubfx	r7, r4, #29, #1
    e384:	427e      	negs	r6, r7
  return a & b;
    e386:	3f01      	subs	r7, #1
    e388:	4030      	ands	r0, r6
    e38a:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    e38e:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    e390:	20f2      	movs	r0, #242	; 0xf2
    e392:	f005 fcdb 	bl	13d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    e396:	4601      	mov	r1, r0
    e398:	4638      	mov	r0, r7
    e39a:	f005 fcdc 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    e39e:	f3c4 7480 	ubfx	r4, r4, #30, #1
    e3a2:	4263      	negs	r3, r4
  return a & b;
    e3a4:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
    e3a6:	fab5 f385 	clz	r3, r5
  return a & b;
    e3aa:	3c01      	subs	r4, #1
    e3ac:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
    e3ae:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    e3b0:	4044      	eors	r4, r0
  return a & b;
    e3b2:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    e3b4:	425b      	negs	r3, r3
  return a & b;
    e3b6:	4020      	ands	r0, r4
    e3b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    e3bc:	4058      	eors	r0, r3
    e3be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3c2:	bf00      	nop
    e3c4:	63afbe7b 	.word	0x63afbe7b
    e3c8:	4da2cbf2 	.word	0x4da2cbf2
    e3cc:	2f16ac6c 	.word	0x2f16ac6c
    e3d0:	1152aaa4 	.word	0x1152aaa4
    e3d4:	02582ab7 	.word	0x02582ab7
    e3d8:	000afe11 	.word	0x000afe11

0000e3dc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3e0:	460c      	mov	r4, r1
    e3e2:	b08d      	sub	sp, #52	; 0x34
    e3e4:	9203      	str	r2, [sp, #12]
    e3e6:	461a      	mov	r2, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
    e3e8:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
    e3ec:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
    e3ee:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e3f0:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
    e3f2:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e3f4:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e3f6:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e3f8:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e3fa:	4619      	mov	r1, r3
    e3fc:	9304      	str	r3, [sp, #16]
    e3fe:	f005 fc54 	bl	13caa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e402:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e406:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e408:	4619      	mov	r1, r3
    e40a:	4620      	mov	r0, r4
    e40c:	f005 fb7c 	bl	13b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    e410:	2500      	movs	r5, #0
    e412:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    e414:	46a8      	mov	r8, r5
    e416:	9b02      	ldr	r3, [sp, #8]
    e418:	4598      	cmp	r8, r3
    e41a:	da7b      	bge.n	e514 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x138>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    e41c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    e420:	f88d 301f 	strb.w	r3, [sp, #31]
    e424:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    e426:	2200      	movs	r2, #0
    e428:	195f      	adds	r7, r3, r5
    InputT max_in_row = std::numeric_limits<InputT>::min();
    e42a:	4639      	mov	r1, r7
      return __a;
    e42c:	f10d 0c1f 	add.w	ip, sp, #31
    for (int c = 0; c < depth; ++c) {
    e430:	42a2      	cmp	r2, r4
    e432:	da0e      	bge.n	e452 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e434:	460b      	mov	r3, r1
      if (__a < __b)
    e436:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    e43a:	f993 6000 	ldrsb.w	r6, [r3]
    e43e:	3101      	adds	r1, #1
    e440:	4286      	cmp	r6, r0
      return __a;
    e442:	bfd8      	it	le
    e444:	4663      	movle	r3, ip
    e446:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
    e44a:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e44c:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
    e450:	e7ee      	b.n	e430 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x54>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    e452:	2600      	movs	r6, #0
    e454:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
    e456:	46b1      	mov	r9, r6
    e458:	45a1      	cmp	r9, r4
    e45a:	da15      	bge.n	e488 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    e45c:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    e460:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32_t input_diff =
    e464:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
    e466:	9b01      	ldr	r3, [sp, #4]
    e468:	4283      	cmp	r3, r0
    e46a:	dc0a      	bgt.n	e482 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    e46c:	9b00      	ldr	r3, [sp, #0]
    e46e:	4659      	mov	r1, fp
    e470:	4098      	lsls	r0, r3
    e472:	f7ff fc9f 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    e476:	f7ff ff17 	bl	e2a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    e47a:	210c      	movs	r1, #12
    e47c:	f7ff fd42 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    e480:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
    e482:	f109 0901 	add.w	r9, r9, #1
    e486:	e7e7      	b.n	e458 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    e488:	4630      	mov	r0, r6
    e48a:	210c      	movs	r1, #12
    e48c:	aa08      	add	r2, sp, #32
    e48e:	f005 fc52 	bl	13d36 <_ZN6tflite13GetReciprocalEiiPi>
    e492:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e494:	4682      	mov	sl, r0
    e496:	eb03 0645 	add.w	r6, r3, r5, lsl #1
    for (int c = 0; c < depth; ++c) {
    e49a:	f04f 0900 	mov.w	r9, #0
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e49e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    for (int c = 0; c < depth; ++c) {
    e4a2:	45a1      	cmp	r9, r4
    e4a4:	da32      	bge.n	e50c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x130>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    e4a6:	f99d 101f 	ldrsb.w	r1, [sp, #31]
    e4aa:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32_t input_diff =
    e4ae:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    e4b0:	9901      	ldr	r1, [sp, #4]
    e4b2:	4281      	cmp	r1, r0
    e4b4:	dc28      	bgt.n	e508 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
    e4b6:	9b00      	ldr	r3, [sp, #0]
    e4b8:	4659      	mov	r1, fp
    e4ba:	4098      	lsls	r0, r3
    e4bc:	f7ff fc7a 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    e4c0:	f7ff fef2 	bl	e2a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    e4c4:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    e4c6:	4650      	mov	r0, sl
    e4c8:	f005 fc45 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
    e4cc:	9908      	ldr	r1, [sp, #32]
    e4ce:	310f      	adds	r1, #15
    e4d0:	f7ff fd18 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    e4d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
      if (__b < __a)
    e4d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
            unsat_output +
    e4dc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    e4e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        const int32_t shifted_output =
    e4e4:	9009      	str	r0, [sp, #36]	; 0x24
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    e4e6:	480d      	ldr	r0, [pc, #52]	; (e51c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>)
      return __a;
    e4e8:	bfb4      	ite	lt
    e4ea:	a909      	addlt	r1, sp, #36	; 0x24
	return __b;
    e4ec:	a90a      	addge	r1, sp, #40	; 0x28
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    e4ee:	920a      	str	r2, [sp, #40]	; 0x28
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    e4f0:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
    e4f2:	6808      	ldr	r0, [r1, #0]
    e4f4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
    e4f8:	bfb8      	it	lt
    e4fa:	a90b      	addlt	r1, sp, #44	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    e4fc:	6809      	ldr	r1, [r1, #0]
    e4fe:	8031      	strh	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
    e500:	f109 0901 	add.w	r9, r9, #1
    e504:	3602      	adds	r6, #2
    e506:	e7cc      	b.n	e4a2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc6>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e508:	8033      	strh	r3, [r6, #0]
    e50a:	e7f9      	b.n	e500 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x124>
  for (int i = 0; i < outer_size; ++i) {
    e50c:	f108 0801 	add.w	r8, r8, #1
    e510:	4425      	add	r5, r4
    e512:	e780      	b.n	e416 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
    e514:	b00d      	add	sp, #52	; 0x34
    e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e51a:	bf00      	nop
    e51c:	ffff8000 	.word	0xffff8000

0000e520 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e524:	460c      	mov	r4, r1
  TFLITE_DCHECK(context != nullptr);
    e526:	4680      	mov	r8, r0
    e528:	b0a0      	sub	sp, #128	; 0x80
    e52a:	b908      	cbnz	r0, e530 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
    e52c:	f006 fb2b 	bl	14b86 <abort>
  TFLITE_DCHECK(node != nullptr);
    e530:	2900      	cmp	r1, #0
    e532:	d0fb      	beq.n	e52c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e534:	680a      	ldr	r2, [r1, #0]
    e536:	6d43      	ldr	r3, [r0, #84]	; 0x54
    e538:	6851      	ldr	r1, [r2, #4]
    e53a:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e53c:	6862      	ldr	r2, [r4, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e53e:	4607      	mov	r7, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e540:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    e544:	4640      	mov	r0, r8
    e546:	6851      	ldr	r1, [r2, #4]
    e548:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
    e54a:	6924      	ldr	r4, [r4, #16]
    e54c:	4605      	mov	r5, r0
    e54e:	2c00      	cmp	r4, #0
    e550:	d0ec      	beq.n	e52c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const SoftmaxParams data =
    e552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e554:	ae12      	add	r6, sp, #72	; 0x48
    e556:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e55a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e55c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e55e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e560:	e894 0003 	ldmia.w	r4, {r0, r1}
    e564:	e886 0003 	stmia.w	r6, {r0, r1}
  switch (input->type) {
    e568:	7a38      	ldrb	r0, [r7, #8]
    e56a:	1e43      	subs	r3, r0, #1
    e56c:	2b08      	cmp	r3, #8
    e56e:	f200 808d 	bhi.w	e68c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    e572:	e8df f003 	tbb	[pc, r3]
    e576:	8b05      	.short	0x8b05
    e578:	8b8b8b22 	.word	0x8b8b8b22
    e57c:	8b22      	.short	0x8b22
    e57e:	22          	.byte	0x22
    e57f:	00          	.byte	0x00
          data, tflite::micro::GetTensorShape(input),
    e580:	4639      	mov	r1, r7
    e582:	a806      	add	r0, sp, #24
    e584:	f005 fb6d 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    e588:	683a      	ldr	r2, [r7, #0]
          tflite::micro::GetTensorShape(output),
    e58a:	4629      	mov	r1, r5
    e58c:	a80c      	add	r0, sp, #48	; 0x30
    e58e:	9205      	str	r2, [sp, #20]
    e590:	f005 fb67 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    e594:	9a05      	ldr	r2, [sp, #20]
    e596:	b105      	cbz	r5, e59a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    e598:	682d      	ldr	r5, [r5, #0]
      tflite::reference_ops::Softmax(
    e59a:	9500      	str	r5, [sp, #0]
    e59c:	ab0c      	add	r3, sp, #48	; 0x30
    e59e:	a906      	add	r1, sp, #24
    e5a0:	a812      	add	r0, sp, #72	; 0x48
    e5a2:	f7ff fc2b 	bl	ddfc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      const auto output_shape = tflite::micro::GetTensorShape(output);
    e5a6:	a80c      	add	r0, sp, #48	; 0x30
    e5a8:	f005 fa92 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
    e5ac:	a806      	add	r0, sp, #24
    e5ae:	f005 fa8f 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    e5b2:	2000      	movs	r0, #0
}
    e5b4:	b020      	add	sp, #128	; 0x80
    e5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (input->type == kTfLiteUInt8) {
    e5ba:	2803      	cmp	r0, #3
    e5bc:	d117      	bne.n	e5ee <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
        op_data, tflite::micro::GetTensorShape(input),
    e5be:	4639      	mov	r1, r7
    e5c0:	a80c      	add	r0, sp, #48	; 0x30
    e5c2:	f005 fb4e 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    e5c6:	683a      	ldr	r2, [r7, #0]
        tflite::micro::GetTensorShape(output),
    e5c8:	4629      	mov	r1, r5
    e5ca:	a806      	add	r0, sp, #24
    e5cc:	9205      	str	r2, [sp, #20]
    e5ce:	f005 fb48 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    e5d2:	9a05      	ldr	r2, [sp, #20]
    e5d4:	b105      	cbz	r5, e5d8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>
    e5d6:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::Softmax(
    e5d8:	9500      	str	r5, [sp, #0]
    e5da:	ab06      	add	r3, sp, #24
    e5dc:	a90c      	add	r1, sp, #48	; 0x30
    e5de:	a812      	add	r0, sp, #72	; 0x48
    e5e0:	f005 fbbd 	bl	13d5e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
    e5e4:	a806      	add	r0, sp, #24
    e5e6:	f005 fa73 	bl	13ad0 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
    e5ea:	a80c      	add	r0, sp, #48	; 0x30
    e5ec:	e7df      	b.n	e5ae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8e>
  } else if (input->type == kTfLiteInt8) {
    e5ee:	2809      	cmp	r0, #9
    e5f0:	d138      	bne.n	e664 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x144>
    if (output->type == kTfLiteInt16) {
    e5f2:	7a2b      	ldrb	r3, [r5, #8]
          op_data, tflite::micro::GetTensorShape(input),
    e5f4:	4639      	mov	r1, r7
    if (output->type == kTfLiteInt16) {
    e5f6:	2b07      	cmp	r3, #7
    e5f8:	d111      	bne.n	e61e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xfe>
          op_data, tflite::micro::GetTensorShape(input),
    e5fa:	a80c      	add	r0, sp, #48	; 0x30
    e5fc:	f005 fb31 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    e600:	683a      	ldr	r2, [r7, #0]
          tflite::micro::GetTensorShape(output),
    e602:	4629      	mov	r1, r5
    e604:	a806      	add	r0, sp, #24
    e606:	9205      	str	r2, [sp, #20]
    e608:	f005 fb2b 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e60c:	682b      	ldr	r3, [r5, #0]
    e60e:	9a05      	ldr	r2, [sp, #20]
    e610:	9300      	str	r3, [sp, #0]
    e612:	a90c      	add	r1, sp, #48	; 0x30
    e614:	ab06      	add	r3, sp, #24
    e616:	a812      	add	r0, sp, #72	; 0x48
    e618:	f7ff fee0 	bl	e3dc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    e61c:	e7e2      	b.n	e5e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
    e61e:	a806      	add	r0, sp, #24
    e620:	f005 fb1f 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
    e624:	4629      	mov	r1, r5
    e626:	a80c      	add	r0, sp, #48	; 0x30
    e628:	f005 fb1b 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
    e62c:	9b06      	ldr	r3, [sp, #24]
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e62e:	aa0c      	add	r2, sp, #48	; 0x30
      const int trailing_dim = input_shape.DimensionsCount() - 1;
    e630:	3b01      	subs	r3, #1
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e632:	4619      	mov	r1, r3
    e634:	a806      	add	r0, sp, #24
    e636:	9305      	str	r3, [sp, #20]
    e638:	f005 fb37 	bl	13caa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e63c:	9b05      	ldr	r3, [sp, #20]
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    e63e:	4604      	mov	r4, r0
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e640:	4619      	mov	r1, r3
    e642:	aa0c      	add	r2, sp, #48	; 0x30
    e644:	a806      	add	r0, sp, #24
    e646:	f005 fa5f 	bl	13b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
    e64a:	682b      	ldr	r3, [r5, #0]
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    e64c:	4602      	mov	r2, r0
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
    e64e:	9302      	str	r3, [sp, #8]
    e650:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e652:	4621      	mov	r1, r4
    e654:	9301      	str	r3, [sp, #4]
    e656:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e658:	9300      	str	r3, [sp, #0]
    e65a:	6838      	ldr	r0, [r7, #0]
    e65c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e65e:	f000 fb41 	bl	ece4 <arm_softmax_s8>
    e662:	e7a0      	b.n	e5a6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
        op_data, tflite::micro::GetTensorShape(input),
    e664:	4639      	mov	r1, r7
    e666:	a80c      	add	r0, sp, #48	; 0x30
    e668:	f005 fafb 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    e66c:	683a      	ldr	r2, [r7, #0]
        tflite::micro::GetTensorShape(output),
    e66e:	4629      	mov	r1, r5
    e670:	a806      	add	r0, sp, #24
    e672:	9205      	str	r2, [sp, #20]
    e674:	f005 faf5 	bl	13c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    e678:	9a05      	ldr	r2, [sp, #20]
    e67a:	b105      	cbz	r5, e67e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15e>
    e67c:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::SoftmaxInt16(
    e67e:	9500      	str	r5, [sp, #0]
    e680:	ab06      	add	r3, sp, #24
    e682:	a90c      	add	r1, sp, #48	; 0x30
    e684:	a812      	add	r0, sp, #72	; 0x48
    e686:	f7ff fc63 	bl	df50 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
    e68a:	e7ab      	b.n	e5e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e68c:	f8d8 4014 	ldr.w	r4, [r8, #20]
    e690:	f000 ff7e 	bl	f590 <TfLiteTypeGetName>
    e694:	7a3b      	ldrb	r3, [r7, #8]
    e696:	4602      	mov	r2, r0
    e698:	4902      	ldr	r1, [pc, #8]	; (e6a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x184>)
    e69a:	4640      	mov	r0, r8
    e69c:	47a0      	blx	r4
      return kTfLiteError;
    e69e:	2001      	movs	r0, #1
    e6a0:	e788      	b.n	e5b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x94>
    e6a2:	bf00      	nop
    e6a4:	00018299 	.word	0x00018299

0000e6a8 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
    e6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
    e6ac:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    e6b0:	ee07 9a90 	vmov	s15, r9
    e6b4:	ee30 7ac0 	vsub.f32	s14, s1, s0
    e6b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    const int num) {
    e6bc:	ed2d 8b0c 	vpush	{d8-d13}
  float step = (max - min) / (num - 1);
    e6c0:	eec7 ca27 	vdiv.f32	s25, s14, s15
  float half_step = step / 2.0f;
    e6c4:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
                    const int num) {
    e6c8:	4604      	mov	r4, r0
    e6ca:	eeb0 9a40 	vmov.f32	s18, s0
    e6ce:	eeb0 ba60 	vmov.f32	s22, s1
    e6d2:	460f      	mov	r7, r1
    e6d4:	4615      	mov	r5, r2
  float half_step = step / 2.0f;
    e6d6:	ee2c caab 	vmul.f32	s24, s25, s23
  for (int i = 0; i < num - 1; i++) {
    e6da:	2600      	movs	r6, #0
    e6dc:	eddf 8a47 	vldr	s17, [pc, #284]	; e7fc <_ZN6tflite7gen_lutEPFffEffPsi+0x154>
    e6e0:	eddf aa47 	vldr	s21, [pc, #284]	; e800 <_ZN6tflite7gen_lutEPFffEffPsi+0x158>
    e6e4:	ed9f aa47 	vldr	s20, [pc, #284]	; e804 <_ZN6tflite7gen_lutEPFffEffPsi+0x15c>
                    const int num) {
    e6e8:	b085      	sub	sp, #20
    e6ea:	f1a1 0802 	sub.w	r8, r1, #2
  for (int i = 0; i < num - 1; i++) {
    e6ee:	45b1      	cmp	r9, r6
    e6f0:	dd58      	ble.n	e7a4 <_ZN6tflite7gen_lutEPFffEffPsi+0xfc>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    e6f2:	ee07 6a90 	vmov	s15, r6
    e6f6:	eeb0 da49 	vmov.f32	s26, s18
    e6fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e6fe:	eea7 daac 	vfma.f32	s26, s15, s25
    e702:	eeb0 0a4d 	vmov.f32	s0, s26
    e706:	47a0      	blx	r4
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    e708:	3601      	adds	r6, #1
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    e70a:	ee20 0a28 	vmul.f32	s0, s0, s17
    e70e:	f005 fbce 	bl	13eae <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    e712:	ee07 6a90 	vmov	s15, r6
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    e716:	eeb0 8a40 	vmov.f32	s16, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    e71a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e71e:	eeb0 0a49 	vmov.f32	s0, s18
    e722:	eea7 0aac 	vfma.f32	s0, s15, s25
    e726:	47a0      	blx	r4
    e728:	eef0 9a40 	vmov.f32	s19, s0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    e72c:	eeb0 0a4d 	vmov.f32	s0, s26
    e730:	47a0      	blx	r4
    e732:	ee20 0a28 	vmul.f32	s0, s0, s17
    e736:	f005 fbba 	bl	13eae <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    e73a:	eea9 0aa8 	vfma.f32	s0, s19, s17
    e73e:	ee20 0a2b 	vmul.f32	s0, s0, s23
    e742:	f005 fbb4 	bl	13eae <_ZN6tflite11TfLiteRoundIfEET_S1_>
    e746:	eef0 9a40 	vmov.f32	s19, s0
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    e74a:	ee3d 0a0c 	vadd.f32	s0, s26, s24
    e74e:	47a0      	blx	r4
    e750:	ee20 0a28 	vmul.f32	s0, s0, s17
    e754:	f005 fbab 	bl	13eae <_ZN6tflite11TfLiteRoundIfEET_S1_>
    float midpoint_err = midpoint_interp_val - midpoint_val;
    e758:	ee39 0ac0 	vsub.f32	s0, s19, s0
    float bias = TfLiteRound(midpoint_err / 2.0f);
    e75c:	ee20 0a2b 	vmul.f32	s0, s0, s23
    e760:	f005 fba5 	bl	13eae <_ZN6tflite11TfLiteRoundIfEET_S1_>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    e764:	ee78 7a40 	vsub.f32	s15, s16, s0
      if (__a < __b)
    e768:	eef4 7aea 	vcmpe.f32	s15, s21
    e76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e770:	edcd 7a01 	vstr	s15, [sp, #4]
    e774:	edcd aa02 	vstr	s21, [sp, #8]
	return __b;
    e778:	bf4c      	ite	mi
    e77a:	ab02      	addmi	r3, sp, #8
      return __a;
    e77c:	ab01      	addpl	r3, sp, #4
      if (__b < __a)
    e77e:	edd3 7a00 	vldr	s15, [r3]
    e782:	eef4 7aca 	vcmpe.f32	s15, s20
    e786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                               32767.0f);
    e78a:	ed8d aa03 	vstr	s20, [sp, #12]
	return __b;
    e78e:	bfc8      	it	gt
    e790:	ab03      	addgt	r3, sp, #12
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    e792:	edd3 7a00 	vldr	s15, [r3]
    e796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    e79a:	ee17 3a90 	vmov	r3, s15
    e79e:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (int i = 0; i < num - 1; i++) {
    e7a2:	e7a4      	b.n	e6ee <_ZN6tflite7gen_lutEPFffEffPsi+0x46>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    e7a4:	eeb0 0a4b 	vmov.f32	s0, s22
    e7a8:	47a0      	blx	r4
    e7aa:	ee20 0a28 	vmul.f32	s0, s0, s17
    e7ae:	f005 fb7e 	bl	13eae <_ZN6tflite11TfLiteRoundIfEET_S1_>
      if (__a < __b)
    e7b2:	eeb4 0aea 	vcmpe.f32	s0, s21
    e7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7ba:	ed8d 0a01 	vstr	s0, [sp, #4]
    e7be:	edcd aa02 	vstr	s21, [sp, #8]
	return __b;
    e7c2:	bf4c      	ite	mi
    e7c4:	ab02      	addmi	r3, sp, #8
      return __a;
    e7c6:	ab01      	addpl	r3, sp, #4
      if (__b < __a)
    e7c8:	edd3 7a00 	vldr	s15, [r3]
    e7cc:	eef4 7aca 	vcmpe.f32	s15, s20
    e7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7d4:	ed8d aa03 	vstr	s20, [sp, #12]
	return __b;
    e7d8:	bfc8      	it	gt
    e7da:	ab03      	addgt	r3, sp, #12
  table[num - 1] = std::min<float>(
    e7dc:	edd3 7a00 	vldr	s15, [r3]
    e7e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    e7e4:	ee17 3a90 	vmov	r3, s15
    e7e8:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
    e7ec:	3a01      	subs	r2, #1
    e7ee:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
}
    e7f2:	b005      	add	sp, #20
    e7f4:	ecbd 8b0c 	vpop	{d8-d13}
    e7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e7fc:	47000000 	.word	0x47000000
    e800:	c7000000 	.word	0xc7000000
    e804:	46fffe00 	.word	0x46fffe00

0000e808 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
    e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e80c:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
    e810:	ed9f 5ab0 	vldr	s10, [pc, #704]	; ead4 <arm_radix8_butterfly_f32+0x2cc>
{
    e814:	b08f      	sub	sp, #60	; 0x3c
    e816:	9001      	str	r0, [sp, #4]
    e818:	9103      	str	r1, [sp, #12]
    e81a:	920d      	str	r2, [sp, #52]	; 0x34
    e81c:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
    e81e:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
    e820:	2018      	movs	r0, #24
    e822:	9b02      	ldr	r3, [sp, #8]
      i1 = 0;
    e824:	f04f 0900 	mov.w	r9, #0
      n2 = n2 >> 3;
    e828:	08da      	lsrs	r2, r3, #3
      i1 = 0;
    e82a:	fb00 f402 	mul.w	r4, r0, r2
    e82e:	2028      	movs	r0, #40	; 0x28
    e830:	940c      	str	r4, [sp, #48]	; 0x30
    e832:	fb00 f402 	mul.w	r4, r0, r2
    e836:	2030      	movs	r0, #48	; 0x30
    e838:	0151      	lsls	r1, r2, #5
    e83a:	9108      	str	r1, [sp, #32]
    e83c:	9901      	ldr	r1, [sp, #4]
    e83e:	fb00 fb02 	mul.w	fp, r0, r2
    e842:	eb01 1c42 	add.w	ip, r1, r2, lsl #5
    e846:	00d1      	lsls	r1, r2, #3
    e848:	9107      	str	r1, [sp, #28]
    e84a:	f06f 0117 	mvn.w	r1, #23
    e84e:	2038      	movs	r0, #56	; 0x38
    e850:	4351      	muls	r1, r2
    e852:	eb0c 0701 	add.w	r7, ip, r1
    e856:	eb07 1642 	add.w	r6, r7, r2, lsl #5
    e85a:	1875      	adds	r5, r6, r1
    e85c:	9406      	str	r4, [sp, #24]
    e85e:	0114      	lsls	r4, r2, #4
    e860:	fb00 fa02 	mul.w	sl, r0, r2
    e864:	9405      	str	r4, [sp, #20]
    e866:	9801      	ldr	r0, [sp, #4]
    e868:	eb05 1442 	add.w	r4, r5, r2, lsl #5
    e86c:	4421      	add	r1, r4
    e86e:	00db      	lsls	r3, r3, #3
    e870:	eb01 1842 	add.w	r8, r1, r2, lsl #5
    e874:	f100 0e04 	add.w	lr, r0, #4
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
    e878:	eddc 7a00 	vldr	s15, [ip]
    e87c:	ed1e 7a01 	vldr	s14, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
    e880:	ed97 6a00 	vldr	s12, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
    e884:	ee77 6a27 	vadd.f32	s13, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
    e888:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
    e88c:	edd6 7a00 	vldr	s15, [r6]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    e890:	edd8 3a00 	vldr	s7, [r8]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
    e894:	edd5 4a00 	vldr	s9, [r5]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    e898:	edd1 2a00 	vldr	s5, [r1]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
    e89c:	ee76 5a27 	vadd.f32	s11, s12, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
    e8a0:	ee36 6a67 	vsub.f32	s12, s12, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
    e8a4:	edd4 7a00 	vldr	s15, [r4]
    e8a8:	ee34 4aa7 	vadd.f32	s8, s9, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
    e8ac:	ee74 4ae7 	vsub.f32	s9, s9, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    e8b0:	ee72 7aa3 	vadd.f32	s15, s5, s7
         t1 = r1 - r3;
    e8b4:	ee36 0ac4 	vsub.f32	s0, s13, s8
         r3 = r2 - r4;
    e8b8:	ee75 0ae7 	vsub.f32	s1, s11, s15
         r1 = r1 + r3;
    e8bc:	ee76 6a84 	vadd.f32	s13, s13, s8
         r2 = r2 + r4;
    e8c0:	ee75 7aa7 	vadd.f32	s15, s11, s15
         pSrc[2 * i1] = r1 + r2;
    e8c4:	ee76 5aa7 	vadd.f32	s11, s13, s15
         pSrc[2 * i5] = r1 - r2;
    e8c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
         pSrc[2 * i1] = r1 + r2;
    e8cc:	ed4e 5a01 	vstr	s11, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
    e8d0:	edcc 6a00 	vstr	s13, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    e8d4:	eddc 7a01 	vldr	s15, [ip, #4]
    e8d8:	ed9e 4a00 	vldr	s8, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    e8dc:	edd6 6a01 	vldr	s13, [r6, #4]
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
    e8e0:	ee72 2ae3 	vsub.f32	s5, s5, s7
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    e8e4:	edd7 3a01 	vldr	s7, [r7, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    e8e8:	ed95 3a01 	vldr	s6, [r5, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    e8ec:	ee74 5a27 	vadd.f32	s11, s8, s15
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
    e8f0:	ee34 4a67 	vsub.f32	s8, s8, s15
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    e8f4:	ee73 7aa6 	vadd.f32	s15, s7, s13
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
    e8f8:	ee73 6ae6 	vsub.f32	s13, s7, s13
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    e8fc:	edd4 3a01 	vldr	s7, [r4, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    e900:	ed98 2a01 	vldr	s4, [r8, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    e904:	ee73 1a23 	vadd.f32	s3, s6, s7
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
    e908:	ee73 3a63 	vsub.f32	s7, s6, s7
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    e90c:	ed91 3a01 	vldr	s6, [r1, #4]
    e910:	ee33 1a02 	vadd.f32	s2, s6, s4
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
    e914:	ee33 3a42 	vsub.f32	s6, s6, s4
         t2 = r1 - s3;
    e918:	ee35 2ae1 	vsub.f32	s4, s11, s3
         r1 = r1 + s3;
    e91c:	ee75 5aa1 	vadd.f32	s11, s11, s3
         s3 = r2 - r4;
    e920:	ee77 1ac1 	vsub.f32	s3, s15, s2
         r2 = r2 + r4;
    e924:	ee77 7a81 	vadd.f32	s15, s15, s2
         pSrc[2 * i1 + 1] = r1 + r2;
    e928:	ee35 1aa7 	vadd.f32	s2, s11, s15
         pSrc[2 * i5 + 1] = r1 - r2;
    e92c:	ee75 5ae7 	vsub.f32	s11, s11, s15
         pSrc[2 * i3]     = t1 + s3;
    e930:	ee70 7a21 	vadd.f32	s15, s0, s3
         pSrc[2 * i1 + 1] = r1 + r2;
    e934:	ed8e 1a00 	vstr	s2, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
    e938:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
    e93c:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i7]     = t1 - s3;
    e940:	ee70 5a61 	vsub.f32	s11, s0, s3
         pSrc[2 * i3 + 1] = t2 - r3;
    e944:	ee72 7a60 	vsub.f32	s15, s4, s1
         pSrc[2 * i7]     = t1 - s3;
    e948:	edc4 5a00 	vstr	s11, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
    e94c:	edc5 7a01 	vstr	s15, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
    e950:	ee70 7a82 	vadd.f32	s15, s1, s4
    e954:	edc4 7a01 	vstr	s15, [r4, #4]
         r1 = (r6 - r8) * C81;
    e958:	ee76 7a62 	vsub.f32	s15, s12, s5
         r6 = (r6 + r8) * C81;
    e95c:	ee36 6a22 	vadd.f32	s12, s12, s5
         r2 = (s6 - s8) * C81;
    e960:	ee76 2ac3 	vsub.f32	s5, s13, s6
         s6 = (s6 + s8) * C81;
    e964:	ee76 6a83 	vadd.f32	s13, s13, s6
         r1 = (r6 - r8) * C81;
    e968:	ee67 7a85 	vmul.f32	s15, s15, s10
         r6 = (r6 + r8) * C81;
    e96c:	ee26 6a05 	vmul.f32	s12, s12, s10
         r2 = (s6 - s8) * C81;
    e970:	ee62 2a85 	vmul.f32	s5, s5, s10
         s6 = (s6 + s8) * C81;
    e974:	ee66 6a85 	vmul.f32	s13, s13, s10
         t1 = r5 - r1;
    e978:	ee37 3a67 	vsub.f32	s6, s14, s15
         r5 = r5 + r1;
         r8 = r7 - r6;
    e97c:	ee74 5ac6 	vsub.f32	s11, s9, s12
         r5 = r5 + r1;
    e980:	ee37 7a27 	vadd.f32	s14, s14, s15
         r7 = r7 + r6;
    e984:	ee74 7a86 	vadd.f32	s15, s9, s12
         t2 = s5 - r2;
    e988:	ee74 4a62 	vsub.f32	s9, s8, s5
         s5 = s5 + r2;
    e98c:	ee34 6a22 	vadd.f32	s12, s8, s5
         s8 = s7 - s6;
    e990:	ee33 4ae6 	vsub.f32	s8, s7, s13
         s7 = s7 + s6;
    e994:	ee73 6aa6 	vadd.f32	s13, s7, s13
         pSrc[2 * i2]     = r5 + s7;
    e998:	ee77 3a26 	vadd.f32	s7, s14, s13
         pSrc[2 * i8]     = r5 - s7;
    e99c:	ee37 7a66 	vsub.f32	s14, s14, s13
         pSrc[2 * i2]     = r5 + s7;
    e9a0:	edc7 3a00 	vstr	s7, [r7]
         pSrc[2 * i8]     = r5 - s7;
    e9a4:	ed88 7a00 	vstr	s14, [r8]
         pSrc[2 * i6]     = t1 + s8;
    e9a8:	ee33 7a04 	vadd.f32	s14, s6, s8
         pSrc[2 * i4]     = t1 - s8;
    e9ac:	ee33 3a44 	vsub.f32	s6, s6, s8
         pSrc[2 * i6]     = t1 + s8;
    e9b0:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
    e9b4:	ee36 7a67 	vsub.f32	s14, s12, s15
         pSrc[2 * i8 + 1] = s5 + r7;
    e9b8:	ee77 7a86 	vadd.f32	s15, s15, s12
         pSrc[2 * i4]     = t1 - s8;
    e9bc:	ed81 3a00 	vstr	s6, [r1]
         pSrc[2 * i2 + 1] = s5 - r7;
    e9c0:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
    e9c4:	edc8 7a01 	vstr	s15, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
    e9c8:	ee74 7ae5 	vsub.f32	s15, s9, s11
         pSrc[2 * i4 + 1] = t2 + r8;
    e9cc:	ee75 5aa4 	vadd.f32	s11, s11, s9
         pSrc[2 * i6 + 1] = t2 - r8;
    e9d0:	edc6 7a01 	vstr	s15, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
    e9d4:	edc1 5a01 	vstr	s11, [r1, #4]

         i1 += n1;
    e9d8:	9802      	ldr	r0, [sp, #8]
      } while (i1 < fftLen);
    e9da:	449c      	add	ip, r3
         i1 += n1;
    e9dc:	4481      	add	r9, r0
      } while (i1 < fftLen);
    e9de:	9803      	ldr	r0, [sp, #12]
    e9e0:	441f      	add	r7, r3
    e9e2:	4548      	cmp	r0, r9
    e9e4:	441e      	add	r6, r3
    e9e6:	441d      	add	r5, r3
    e9e8:	441c      	add	r4, r3
    e9ea:	4419      	add	r1, r3
    e9ec:	4498      	add	r8, r3
    e9ee:	449e      	add	lr, r3
    e9f0:	f63f af42 	bhi.w	e878 <arm_radix8_butterfly_f32+0x70>

      if (n2 < 8)
    e9f4:	2a07      	cmp	r2, #7
    e9f6:	f240 816f 	bls.w	ecd8 <arm_radix8_butterfly_f32+0x4d0>
    e9fa:	9801      	ldr	r0, [sp, #4]
    e9fc:	9908      	ldr	r1, [sp, #32]
         break;

      ia1 = 0;
      j = 1;
    e9fe:	2401      	movs	r4, #1
    ea00:	4401      	add	r1, r0
    ea02:	910b      	str	r1, [sp, #44]	; 0x2c
    ea04:	9907      	ldr	r1, [sp, #28]
    ea06:	4401      	add	r1, r0
    ea08:	910a      	str	r1, [sp, #40]	; 0x28
    ea0a:	9906      	ldr	r1, [sp, #24]
    ea0c:	4401      	add	r1, r0
    ea0e:	9109      	str	r1, [sp, #36]	; 0x24
    ea10:	9905      	ldr	r1, [sp, #20]
    ea12:	4401      	add	r1, r0
    ea14:	9108      	str	r1, [sp, #32]
    ea16:	eb0b 0100 	add.w	r1, fp, r0
    ea1a:	9107      	str	r1, [sp, #28]
    ea1c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea1e:	4401      	add	r1, r0
    ea20:	9106      	str	r1, [sp, #24]
    ea22:	eb0a 0100 	add.w	r1, sl, r0
    ea26:	9105      	str	r1, [sp, #20]
      ia1 = 0;
    ea28:	2100      	movs	r1, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
    ea2a:	9804      	ldr	r0, [sp, #16]
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
    ea2c:	46a3      	mov	fp, r4
         id  = ia1 + twidCoefModifier;
    ea2e:	4401      	add	r1, r0
         co2 = pCoef[2 * ia1];
    ea30:	980d      	ldr	r0, [sp, #52]	; 0x34
    ea32:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    ea36:	f06f 002f 	mvn.w	r0, #47	; 0x2f
    ea3a:	edd5 1a00 	vldr	s3, [r5]
         co3 = pCoef[2 * ia2];
    ea3e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    ea42:	ed95 8a00 	vldr	s16, [r5]
         co4 = pCoef[2 * ia3];
    ea46:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    ea4a:	edd5 4a00 	vldr	s9, [r5]
         co5 = pCoef[2 * ia4];
    ea4e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    ea52:	ed95 9a00 	vldr	s18, [r5]
         co6 = pCoef[2 * ia5];
    ea56:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    ea5a:	edd5 3a00 	vldr	s7, [r5]
         co7 = pCoef[2 * ia6];
    ea5e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    ea62:	edd5 0a00 	vldr	s1, [r5]
         co8 = pCoef[2 * ia7];
    ea66:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    ea6a:	fb00 5601 	mla	r6, r0, r1, r5
    ea6e:	9801      	ldr	r0, [sp, #4]
         si2 = pCoef[2 * ia1 + 1];
    ea70:	ed96 1a01 	vldr	s2, [r6, #4]
    ea74:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
    ea78:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ea7a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    ea7e:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
    ea82:	980a      	ldr	r0, [sp, #40]	; 0x28
         si3 = pCoef[2 * ia2 + 1];
    ea84:	edd6 8a01 	vldr	s17, [r6, #4]
    ea88:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
    ea8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ea8e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    ea92:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
    ea96:	9808      	ldr	r0, [sp, #32]
         si4 = pCoef[2 * ia3 + 1];
    ea98:	ed96 4a01 	vldr	s8, [r6, #4]
    ea9c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
    eaa0:	9807      	ldr	r0, [sp, #28]
    eaa2:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
         si5 = pCoef[2 * ia4 + 1];
    eaa6:	edd6 9a01 	vldr	s19, [r6, #4]
    eaaa:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
    eaae:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    eab2:	9806      	ldr	r0, [sp, #24]
         si6 = pCoef[2 * ia5 + 1];
    eab4:	ed96 3a01 	vldr	s6, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
    eab8:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    eabc:	ed96 0a01 	vldr	s0, [r6, #4]
    eac0:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
    eac4:	9805      	ldr	r0, [sp, #20]
         co8 = pCoef[2 * ia7];
    eac6:	edd5 2a00 	vldr	s5, [r5]
         si8 = pCoef[2 * ia7 + 1];
    eaca:	ed95 2a01 	vldr	s4, [r5, #4]
         i1 = j;
    eace:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
    ead2:	e001      	b.n	ead8 <arm_radix8_butterfly_f32+0x2d0>
    ead4:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    ead8:	edd9 7a00 	vldr	s15, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
    eadc:	edd8 6a00 	vldr	s13, [r8]
    eae0:	ed9e 7a00 	vldr	s14, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    eae4:	edda aa00 	vldr	s21, [sl]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
    eae8:	ee36 dac7 	vsub.f32	s26, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    eaec:	ee3a aaa7 	vadd.f32	s20, s21, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
    eaf0:	ee7a aae7 	vsub.f32	s21, s21, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
    eaf4:	ee76 7a87 	vadd.f32	s15, s13, s14
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
    eaf8:	eddc 6a00 	vldr	s13, [ip]
    eafc:	ed97 7a00 	vldr	s14, [r7]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
    eb00:	ed96 6a00 	vldr	s12, [r6]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
    eb04:	ee76 5a87 	vadd.f32	s11, s13, s14
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
    eb08:	ee36 bac7 	vsub.f32	s22, s13, s14
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
    eb0c:	edd5 6a00 	vldr	s13, [r5]
    eb10:	ee36 7a26 	vadd.f32	s14, s12, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
    eb14:	ee76 6a66 	vsub.f32	s13, s12, s13
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
    eb18:	ee77 eac7 	vsub.f32	s29, s15, s14
            t1 = r1 - r3;
    eb1c:	ee3a 6a65 	vsub.f32	s12, s20, s11
            r2 = r2 + r4;
    eb20:	ee77 7a87 	vadd.f32	s15, s15, s14
            r1 = r1 + r3;
    eb24:	ee3a aa25 	vadd.f32	s20, s20, s11
            pSrc[2 * i1] = r1 + r2;
    eb28:	ee3a 7a27 	vadd.f32	s14, s20, s15
    eb2c:	ed8a 7a00 	vstr	s14, [sl]
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    eb30:	edda 5a01 	vldr	s11, [sl, #4]
            r2 = r1 - r2;
    eb34:	ee3a aa67 	vsub.f32	s20, s20, s15
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    eb38:	edd9 7a01 	vldr	s15, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    eb3c:	ed98 7a01 	vldr	s14, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    eb40:	ee35 faa7 	vadd.f32	s30, s11, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
    eb44:	ee35 cae7 	vsub.f32	s24, s11, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    eb48:	edde 7a01 	vldr	s15, [lr, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
    eb4c:	ee77 ca67 	vsub.f32	s25, s14, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    eb50:	ee37 ea27 	vadd.f32	s28, s14, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    eb54:	ed9c 7a01 	vldr	s14, [ip, #4]
    eb58:	edd7 7a01 	vldr	s15, [r7, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
    eb5c:	ee77 ba67 	vsub.f32	s23, s14, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    eb60:	ee77 da27 	vadd.f32	s27, s14, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    eb64:	edd5 7a01 	vldr	s15, [r5, #4]
    eb68:	ed96 7a01 	vldr	s14, [r6, #4]
    eb6c:	ee77 5a27 	vadd.f32	s11, s14, s15
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
    eb70:	ee37 7a67 	vsub.f32	s14, s14, s15
            t2 = s1 - s3;
    eb74:	ee7f 7a6d 	vsub.f32	s15, s30, s27
            s1 = s1 + s3;
    eb78:	ee7f da2d 	vadd.f32	s27, s30, s27
            s3 = s2 - s4;
    eb7c:	ee3e fa65 	vsub.f32	s30, s28, s11
            s2 = s2 + s4;
    eb80:	ee3e ea25 	vadd.f32	s28, s28, s11
            r1 = t1 + s3;
    eb84:	ee76 5a0f 	vadd.f32	s11, s12, s30
            t1 = t1 - s3;
    eb88:	ee36 6a4f 	vsub.f32	s12, s12, s30
            pSrc[2 * i1 + 1] = s1 + s2;
    eb8c:	ee3d fa8e 	vadd.f32	s30, s27, s28
            s2 = s1 - s2;
    eb90:	ee7d dace 	vsub.f32	s27, s27, s28
            s1 = t2 - r3;
    eb94:	ee37 eaee 	vsub.f32	s28, s15, s29
            t2 = t2 + r3;
    eb98:	ee7e 7aa7 	vadd.f32	s15, s29, s15
            p1 = co5 * r2;
            p2 = si5 * s2;
    eb9c:	ee69 eaad 	vmul.f32	s29, s19, s27
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
    eba0:	ee49 ea0a 	vmla.f32	s29, s18, s20
            p4 = si5 * r2;
    eba4:	ee29 aa8a 	vmul.f32	s20, s19, s20
            pSrc[2 * i5 + 1] = p3 - p4;
    eba8:	ee19 aa2d 	vnmls.f32	s20, s18, s27
            pSrc[2 * i1 + 1] = s1 + s2;
    ebac:	ed8a fa01 	vstr	s30, [sl, #4]
            pSrc[2 * i5 + 1] = p3 - p4;
    ebb0:	ed89 aa01 	vstr	s20, [r9, #4]
            p1 = co3 * r1;
            p2 = si3 * s1;
    ebb4:	ee28 aa8e 	vmul.f32	s20, s17, s28
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
    ebb8:	ee08 aa25 	vmla.f32	s20, s16, s11
            p4 = si3 * r1;
    ebbc:	ee68 5aa5 	vmul.f32	s11, s17, s11
            pSrc[2 * i3 + 1] = p3 - p4;
    ebc0:	ee58 5a0e 	vnmls.f32	s11, s16, s28
            pSrc[2 * i5]     = p1 + p2;
    ebc4:	edc9 ea00 	vstr	s29, [r9]
            pSrc[2 * i3 + 1] = p3 - p4;
    ebc8:	edcc 5a01 	vstr	s11, [ip, #4]
            p1 = co7 * t1;
            p2 = si7 * t2;
    ebcc:	ee60 5a27 	vmul.f32	s11, s0, s15
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
    ebd0:	ee40 5a86 	vmla.f32	s11, s1, s12
            p4 = si7 * t1;
    ebd4:	ee20 6a06 	vmul.f32	s12, s0, s12
            pSrc[2 * i3]     = p1 + p2;
    ebd8:	ed8c aa00 	vstr	s20, [ip]
            pSrc[2 * i7 + 1] = p3 - p4;
    ebdc:	ee10 6aa7 	vnmls.f32	s12, s1, s15
            pSrc[2 * i7]     = p1 + p2;
    ebe0:	edc7 5a00 	vstr	s11, [r7]
            r1 = (r6 - r8) * C81;
    ebe4:	ee3d aa66 	vsub.f32	s20, s26, s13
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
    ebe8:	ee7c 5ac7 	vsub.f32	s11, s25, s14
            r6 = (r6 + r8) * C81;
    ebec:	ee7d 6a26 	vadd.f32	s13, s26, s13
            pSrc[2 * i7 + 1] = p3 - p4;
    ebf0:	ed87 6a01 	vstr	s12, [r7, #4]
            r6 = (r6 + r8) * C81;
    ebf4:	ee66 6a85 	vmul.f32	s13, s13, s10
            s1 = (s6 - s8) * C81;
    ebf8:	ee25 6a85 	vmul.f32	s12, s11, s10
            s6 = (s6 + s8) * C81;
    ebfc:	ee3c 7a87 	vadd.f32	s14, s25, s14
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
            s5 = s5 + s1;
    ec00:	ee7c 5a06 	vadd.f32	s11, s24, s12
            r8 = r7 - r6;
    ec04:	ee7b ca66 	vsub.f32	s25, s22, s13
            r1 = (r6 - r8) * C81;
    ec08:	ee2a aa05 	vmul.f32	s20, s20, s10
            r7 = r7 + r6;
    ec0c:	ee7b 6a26 	vadd.f32	s13, s22, s13
            s6 = (s6 + s8) * C81;
    ec10:	ee27 7a05 	vmul.f32	s14, s14, s10
            t1 = r5 - r1;
    ec14:	ee3a daca 	vsub.f32	s26, s21, s20
            t2 = s5 - s1;
    ec18:	ee3c ba46 	vsub.f32	s22, s24, s12
            r5 = r5 + r1;
    ec1c:	ee3a aa8a 	vadd.f32	s20, s21, s20
            s8 = s7 - s6;
    ec20:	ee7b aac7 	vsub.f32	s21, s23, s14
            s7 = s7 + s6;
    ec24:	ee3b 7a87 	vadd.f32	s14, s23, s14
            r1 = r5 + s7;
            r5 = r5 - s7;
            r6 = t1 + s8;
            t1 = t1 - s8;
            s1 = s5 - r7;
    ec28:	ee75 bae6 	vsub.f32	s23, s11, s13
            r5 = r5 - s7;
    ec2c:	ee7a 7a47 	vsub.f32	s15, s20, s14
            r1 = r5 + s7;
    ec30:	ee3a 6a07 	vadd.f32	s12, s20, s14
            s5 = s5 + r7;
    ec34:	ee76 6aa5 	vadd.f32	s13, s13, s11
            r6 = t1 + s8;
    ec38:	ee3d 7a2a 	vadd.f32	s14, s26, s21
            t1 = t1 - s8;
    ec3c:	ee3d aa6a 	vsub.f32	s20, s26, s21
            s6 = t2 - r8;
            t2 = t2 + r8;
    ec40:	ee7c 5a8b 	vadd.f32	s11, s25, s22
            s6 = t2 - r8;
    ec44:	ee7b aa6c 	vsub.f32	s21, s22, s25
            p1 = co2 * r1;
            p2 = si2 * s1;
    ec48:	ee21 ba2b 	vmul.f32	s22, s2, s23
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
    ec4c:	ee01 ba86 	vmla.f32	s22, s3, s12
            p4 = si2 * r1;
    ec50:	ee21 6a06 	vmul.f32	s12, s2, s12
            pSrc[2 * i2 + 1] = p3 - p4;
    ec54:	ee11 6aab 	vnmls.f32	s12, s3, s23
    ec58:	ed88 6a01 	vstr	s12, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
    ec5c:	ee22 6a26 	vmul.f32	s12, s4, s13
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
    ec60:	ee02 6aa7 	vmla.f32	s12, s5, s15
            pSrc[2 * i2]     = p1 + p2;
    ec64:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i8]     = p1 + p2;
    ec68:	ed85 6a00 	vstr	s12, [r5]
            p4 = si8 * r5;
    ec6c:	ee22 6a27 	vmul.f32	s12, s4, s15
            pSrc[2 * i8 + 1] = p3 - p4;
            p1 = co6 * r6;
            p2 = si6 * s6;
    ec70:	ee63 7a2a 	vmul.f32	s15, s6, s21
            pSrc[2 * i8 + 1] = p3 - p4;
    ec74:	ee12 6aa6 	vnmls.f32	s12, s5, s13
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
    ec78:	ee43 7a87 	vmla.f32	s15, s7, s14
            pSrc[2 * i8 + 1] = p3 - p4;
    ec7c:	ed85 6a01 	vstr	s12, [r5, #4]
            p4 = si6 * r6;
    ec80:	ee23 7a07 	vmul.f32	s14, s6, s14
            pSrc[2 * i6]     = p1 + p2;
    ec84:	edce 7a00 	vstr	s15, [lr]
            pSrc[2 * i6 + 1] = p3 - p4;
            p1 = co4 * t1;
            p2 = si4 * t2;
    ec88:	ee64 7a25 	vmul.f32	s15, s8, s11
            pSrc[2 * i6 + 1] = p3 - p4;
    ec8c:	ee13 7aaa 	vnmls.f32	s14, s7, s21
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
    ec90:	ee44 7a8a 	vmla.f32	s15, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
    ec94:	ed8e 7a01 	vstr	s14, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
    ec98:	edc6 7a00 	vstr	s15, [r6]
            p4 = si4 * t1;
    ec9c:	ee64 7a0a 	vmul.f32	s15, s8, s20
            pSrc[2 * i4 + 1] = p3 - p4;
    eca0:	ee54 7aa5 	vnmls.f32	s15, s9, s11
    eca4:	edc6 7a01 	vstr	s15, [r6, #4]

            i1 += n1;
    eca8:	9802      	ldr	r0, [sp, #8]
         } while (i1 < fftLen);
    ecaa:	449a      	add	sl, r3
            i1 += n1;
    ecac:	4483      	add	fp, r0
         } while (i1 < fftLen);
    ecae:	9803      	ldr	r0, [sp, #12]
    ecb0:	4499      	add	r9, r3
    ecb2:	4558      	cmp	r0, fp
    ecb4:	4498      	add	r8, r3
    ecb6:	449e      	add	lr, r3
    ecb8:	449c      	add	ip, r3
    ecba:	441f      	add	r7, r3
    ecbc:	441e      	add	r6, r3
    ecbe:	441d      	add	r5, r3
    ecc0:	f63f af0a 	bhi.w	ead8 <arm_radix8_butterfly_f32+0x2d0>

         j++;
    ecc4:	3401      	adds	r4, #1
      } while (j < n2);
    ecc6:	42a2      	cmp	r2, r4
    ecc8:	f47f aeaf 	bne.w	ea2a <arm_radix8_butterfly_f32+0x222>

      twidCoefModifier <<= 3;
    eccc:	9b04      	ldr	r3, [sp, #16]
    ecce:	9202      	str	r2, [sp, #8]
    ecd0:	00db      	lsls	r3, r3, #3
    ecd2:	b29b      	uxth	r3, r3
    ecd4:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
    ecd6:	e5a3      	b.n	e820 <arm_radix8_butterfly_f32+0x18>
}
    ecd8:	b00f      	add	sp, #60	; 0x3c
    ecda:	ecbd 8b10 	vpop	{d8-d15}
    ecde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ece2:	bf00      	nop

0000ece4 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
    ece4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ece8:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    ecea:	2300      	movs	r3, #0
{
    ecec:	b08f      	sub	sp, #60	; 0x3c
    ecee:	9008      	str	r0, [sp, #32]
    ecf0:	910b      	str	r1, [sp, #44]	; 0x2c
    ecf2:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    ecf4:	9300      	str	r3, [sp, #0]
    ecf6:	9303      	str	r3, [sp, #12]
    ecf8:	9a00      	ldr	r2, [sp, #0]
    ecfa:	9b08      	ldr	r3, [sp, #32]
    ecfc:	4413      	add	r3, r2
    ecfe:	9304      	str	r3, [sp, #16]
    ed00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ed02:	4413      	add	r3, r2
    ed04:	9307      	str	r3, [sp, #28]
    ed06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ed08:	9b03      	ldr	r3, [sp, #12]
    ed0a:	4293      	cmp	r3, r2
    ed0c:	db02      	blt.n	ed14 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
    ed0e:	b00f      	add	sp, #60	; 0x3c
    ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
    ed14:	9b08      	ldr	r3, [sp, #32]
    ed16:	9a00      	ldr	r2, [sp, #0]
    ed18:	569b      	ldrsb	r3, [r3, r2]
    ed1a:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
    ed1c:	2301      	movs	r3, #1
    ed1e:	9a02      	ldr	r2, [sp, #8]
    ed20:	4293      	cmp	r3, r2
    ed22:	f2c0 8134 	blt.w	ef8e <arm_softmax_s8+0x2aa>
        int32_t sum = 0;
    ed26:	2300      	movs	r3, #0
        for (col = 0; col < row_size; ++col)
    ed28:	469e      	mov	lr, r3
    // Rounding offset to add for a right shift of 31
    q63_t mult = 1 << 30;

    if ((m1 < 0) ^ (m2 < 0))
    {
        mult = 1 - mult;
    ed2a:	f8df 8278 	ldr.w	r8, [pc, #632]	; efa4 <arm_softmax_s8+0x2c0>
    ed2e:	9a02      	ldr	r2, [sp, #8]
    ed30:	4596      	cmp	lr, r2
    ed32:	f2c0 8139 	blt.w	efa8 <arm_softmax_s8+0x2c4>
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
    ed36:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
    ed3a:	4093      	lsls	r3, r2
    ed3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    ed40:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    ed42:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
    ed46:	f141 0100 	adc.w	r1, r1, #0
    ed4a:	085b      	lsrs	r3, r3, #1
    ed4c:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
    ed50:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
    mult = mult + (q63_t)m1 * m2;
    ed54:	4a92      	ldr	r2, [pc, #584]	; (efa0 <arm_softmax_s8+0x2bc>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    ed56:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
    ed58:	425c      	negs	r4, r3
    ed5a:	fb02 4401 	mla	r4, r2, r1, r4
    ed5e:	fba3 2002 	umull	r2, r0, r3, r2
    ed62:	4404      	add	r4, r0
    ed64:	488f      	ldr	r0, [pc, #572]	; (efa4 <arm_softmax_s8+0x2c0>)
    ed66:	1812      	adds	r2, r2, r0
    result = (int32_t)(mult / (1ll << 31));
    ed68:	f164 0400 	sbc.w	r4, r4, #0
    ed6c:	2c00      	cmp	r4, #0
    ed6e:	da04      	bge.n	ed7a <arm_softmax_s8+0x96>
    ed70:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ed74:	1812      	adds	r2, r2, r0
    ed76:	f144 0400 	adc.w	r4, r4, #0
    ed7a:	0fd2      	lsrs	r2, r2, #31
    ed7c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
    ed80:	f102 305a 	add.w	r0, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
    ed84:	fb00 f501 	mul.w	r5, r0, r1
    ed88:	17c2      	asrs	r2, r0, #31
    ed8a:	fb03 5502 	mla	r5, r3, r2, r5
    ed8e:	fba0 4203 	umull	r4, r2, r0, r3
    ed92:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
    ed96:	eb45 0202 	adc.w	r2, r5, r2
    result = (int32_t)(mult / (1ll << 31));
    ed9a:	0fe4      	lsrs	r4, r4, #31
    ed9c:	ea44 0442 	orr.w	r4, r4, r2, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    eda0:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
    eda4:	2c00      	cmp	r4, #0
    eda6:	bfac      	ite	ge
    eda8:	2500      	movge	r5, #0
    edaa:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    edae:	4a7d      	ldr	r2, [pc, #500]	; (efa4 <arm_softmax_s8+0x2c0>)
    edb0:	bfa8      	it	ge
    edb2:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    edb6:	fbc0 2504 	smlal	r2, r5, r0, r4
    edba:	2d00      	cmp	r5, #0
    edbc:	da04      	bge.n	edc8 <arm_softmax_s8+0xe4>
    edbe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    edc2:	1912      	adds	r2, r2, r4
    edc4:	f145 0500 	adc.w	r5, r5, #0
    edc8:	0fd2      	lsrs	r2, r2, #31
    edca:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    edce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        mult = 1 - mult;
    edd2:	2a00      	cmp	r2, #0
    edd4:	4d73      	ldr	r5, [pc, #460]	; (efa4 <arm_softmax_s8+0x2c0>)
    edd6:	bfa6      	itte	ge
    edd8:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
    eddc:	f04f 0c00 	movge.w	ip, #0
    ede0:	f04f 3cff 	movlt.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    ede4:	fb02 f401 	mul.w	r4, r2, r1
    ede8:	17d0      	asrs	r0, r2, #31
    edea:	fb03 4400 	mla	r4, r3, r0, r4
    edee:	fba2 0e03 	umull	r0, lr, r2, r3
    edf2:	1940      	adds	r0, r0, r5
    edf4:	4474      	add	r4, lr
    result = (int32_t)(mult / (1ll << 31));
    edf6:	eb44 040c 	adc.w	r4, r4, ip
    edfa:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
    edfc:	ea4f 76d2 	mov.w	r6, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
    ee00:	da04      	bge.n	ee0c <arm_softmax_s8+0x128>
    ee02:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    ee06:	1940      	adds	r0, r0, r5
    ee08:	f144 0400 	adc.w	r4, r4, #0
    ee0c:	0fc0      	lsrs	r0, r0, #31
    ee0e:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    ee12:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
    ee16:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
    ee1a:	bf0c      	ite	eq
    ee1c:	2400      	moveq	r4, #0
    ee1e:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    ee22:	4e60      	ldr	r6, [pc, #384]	; (efa4 <arm_softmax_s8+0x2c0>)
    ee24:	bf08      	it	eq
    ee26:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    ee2a:	fbc2 6400 	smlal	r6, r4, r2, r0
    ee2e:	4625      	mov	r5, r4
    ee30:	2d00      	cmp	r5, #0
    ee32:	4634      	mov	r4, r6
    ee34:	da04      	bge.n	ee40 <arm_softmax_s8+0x15c>
    ee36:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ee3a:	1834      	adds	r4, r6, r0
    ee3c:	f145 0500 	adc.w	r5, r5, #0
    ee40:	0fe4      	lsrs	r4, r4, #31
    ee42:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    ee46:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    ee4a:	bfab      	itete	ge
    ee4c:	2000      	movge	r0, #0
    ee4e:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
    ee52:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
    ee56:	2500      	movlt	r5, #0
    ee58:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    ee5c:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    ee60:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    ee64:	bfcb      	itete	gt
    ee66:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
    ee6a:	2500      	movle	r5, #0
    ee6c:	2400      	movgt	r4, #0
    ee6e:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
    ee72:	4028      	ands	r0, r5
    ee74:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    ee76:	4402      	add	r2, r0
        mult = 1 - mult;
    ee78:	2a00      	cmp	r2, #0
    ee7a:	484a      	ldr	r0, [pc, #296]	; (efa4 <arm_softmax_s8+0x2c0>)
    ee7c:	bfa6      	itte	ge
    ee7e:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
    ee82:	2500      	movge	r5, #0
    ee84:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    ee88:	4351      	muls	r1, r2
    ee8a:	17d6      	asrs	r6, r2, #31
    ee8c:	fb03 1106 	mla	r1, r3, r6, r1
    ee90:	fba2 3603 	umull	r3, r6, r2, r3
    ee94:	181b      	adds	r3, r3, r0
    ee96:	4431      	add	r1, r6
    result = (int32_t)(mult / (1ll << 31));
    ee98:	eb41 0105 	adc.w	r1, r1, r5
    ee9c:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
    ee9e:	ea4f 74d2 	mov.w	r4, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
    eea2:	da04      	bge.n	eeae <arm_softmax_s8+0x1ca>
    eea4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eea8:	181b      	adds	r3, r3, r0
    eeaa:	f141 0100 	adc.w	r1, r1, #0
    eeae:	0fdb      	lsrs	r3, r3, #31
    eeb0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    eeb4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
    eeb8:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
    eebc:	bf0c      	ite	eq
    eebe:	2000      	moveq	r0, #0
    eec0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    eec4:	4937      	ldr	r1, [pc, #220]	; (efa4 <arm_softmax_s8+0x2c0>)
    eec6:	bf08      	it	eq
    eec8:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    eecc:	fbc2 1003 	smlal	r1, r0, r2, r3
    eed0:	2800      	cmp	r0, #0
    eed2:	da04      	bge.n	eede <arm_softmax_s8+0x1fa>
    eed4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    eed8:	18c9      	adds	r1, r1, r3
    eeda:	f140 0000 	adc.w	r0, r0, #0
    eede:	0fc9      	lsrs	r1, r1, #31
    eee0:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    eee4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    eee8:	bfab      	itete	ge
    eeea:	2300      	movge	r3, #0
    eeec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    eef0:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
    eef4:	2100      	movlt	r1, #0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    eef6:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    eefa:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    eefe:	bfd4      	ite	le
    ef00:	2000      	movle	r0, #0
    ef02:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    ef06:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    ef0a:	bfd4      	ite	le
    ef0c:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
    ef10:	2100      	movgt	r1, #0
    ef12:	4018      	ands	r0, r3
    ef14:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    ef16:	4402      	add	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    ef18:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    ef1c:	bfab      	itete	ge
    ef1e:	2300      	movge	r3, #0
    ef20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    ef24:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
    ef28:	2100      	movlt	r1, #0
    ef2a:	ea03 0342 	and.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    ef2e:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    ef32:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    ef36:	bfcb      	itete	gt
    ef38:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
    ef3c:	2100      	movle	r1, #0
    ef3e:	2200      	movgt	r2, #0
    ef40:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    ef44:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
    ef46:	4053      	eors	r3, r2
    ef48:	9309      	str	r3, [sp, #36]	; 0x24
    ef4a:	bf55      	itete	pl
    ef4c:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
    ef50:	f04f 33ff 	movmi.w	r3, #4294967295	; 0xffffffff
    ef54:	2300      	movpl	r3, #0
    ef56:	4a13      	ldrmi	r2, [pc, #76]	; (efa4 <arm_softmax_s8+0x2c0>)
    ef58:	f04f 0c00 	mov.w	ip, #0
    ef5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
    ef60:	2301      	movs	r3, #1
    ef62:	fa03 f30a 	lsl.w	r3, r3, sl
    ef66:	3b01      	subs	r3, #1
    ef68:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
    ef6a:	105b      	asrs	r3, r3, #1
    ef6c:	9306      	str	r3, [sp, #24]
        mult = 1 - mult;
    ef6e:	f8df e034 	ldr.w	lr, [pc, #52]	; efa4 <arm_softmax_s8+0x2c0>
        threshold++;
    ef72:	3301      	adds	r3, #1
    ef74:	930a      	str	r3, [sp, #40]	; 0x28
    ef76:	9b02      	ldr	r3, [sp, #8]
    ef78:	459c      	cmp	ip, r3
    ef7a:	f2c0 8183 	blt.w	f284 <arm_softmax_s8+0x5a0>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    ef7e:	9b03      	ldr	r3, [sp, #12]
    ef80:	9a00      	ldr	r2, [sp, #0]
    ef82:	3301      	adds	r3, #1
    ef84:	9303      	str	r3, [sp, #12]
    ef86:	9b02      	ldr	r3, [sp, #8]
    ef88:	441a      	add	r2, r3
    ef8a:	9200      	str	r2, [sp, #0]
    ef8c:	e6b4      	b.n	ecf8 <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
    ef8e:	9a04      	ldr	r2, [sp, #16]
    ef90:	9901      	ldr	r1, [sp, #4]
    ef92:	56d2      	ldrsb	r2, [r2, r3]
        for (col = 1; col < row_size; ++col)
    ef94:	3301      	adds	r3, #1
            max = MAX(max, input[col]);
    ef96:	4291      	cmp	r1, r2
    ef98:	bfb8      	it	lt
    ef9a:	4611      	movlt	r1, r2
    ef9c:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
    ef9e:	e6be      	b.n	ed1e <arm_softmax_s8+0x3a>
    efa0:	c3c3c3c4 	.word	0xc3c3c3c4
    efa4:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
    efa8:	9a04      	ldr	r2, [sp, #16]
    efaa:	f912 000e 	ldrsb.w	r0, [r2, lr]
    efae:	9a01      	ldr	r2, [sp, #4]
    efb0:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
    efb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    efb4:	4282      	cmp	r2, r0
    efb6:	f300 8151 	bgt.w	f25c <arm_softmax_s8+0x578>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
    efba:	9a18      	ldr	r2, [sp, #96]	; 0x60
    efbc:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
    efbe:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
    efc0:	ebb2 7fdb 	cmp.w	r2, fp, lsr #31
    efc4:	bf0b      	itete	eq
    efc6:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    efca:	4641      	movne	r1, r8
    efcc:	2200      	moveq	r2, #0
    efce:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    efd2:	fbc0 120b 	smlal	r1, r2, r0, fp
    efd6:	2a00      	cmp	r2, #0
    efd8:	4614      	mov	r4, r2
    efda:	da04      	bge.n	efe6 <arm_softmax_s8+0x302>
    efdc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    efe0:	1889      	adds	r1, r1, r2
    efe2:	f144 0400 	adc.w	r4, r4, #0
    efe6:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    efe8:	4558      	cmp	r0, fp
    result = (int32_t)(mult / (1ll << 31));
    efea:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    efee:	d104      	bne.n	effa <arm_softmax_s8+0x316>
        result = Q31_MAX;
    eff0:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
    eff4:	bf08      	it	eq
    eff6:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
    effa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    effe:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    f000:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
    f004:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
    f008:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    f00c:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
    f010:	fbcc 140c 	smlal	r1, r4, ip, ip
    f014:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
    f016:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
    f01a:	da04      	bge.n	f026 <arm_softmax_s8+0x342>
    f01c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f020:	1809      	adds	r1, r1, r0
    f022:	f144 0400 	adc.w	r4, r4, #0
    f026:	0fc9      	lsrs	r1, r1, #31
    f028:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
    f02c:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
    f030:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
    f032:	fb01 fa04 	mul.w	sl, r1, r4
    f036:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    f03a:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
    f03e:	f1b9 0f00 	cmp.w	r9, #0
    f042:	da05      	bge.n	f050 <arm_softmax_s8+0x36c>
    f044:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    f048:	eb10 000a 	adds.w	r0, r0, sl
    f04c:	f149 0900 	adc.w	r9, r9, #0
    f050:	0fc0      	lsrs	r0, r0, #31
    f052:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
    f056:	f000 0903 	and.w	r9, r0, #3
        threshold++;
    f05a:	1080      	asrs	r0, r0, #2
    f05c:	bf54      	ite	pl
    f05e:	f04f 0a01 	movpl.w	sl, #1
    f062:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
    f066:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
    f068:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
    f06c:	bfc8      	it	gt
    f06e:	3001      	addgt	r0, #1
        mult = 1 - mult;
    f070:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
    f074:	bf0b      	itete	eq
    f076:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
    f07a:	46c1      	movne	r9, r8
    f07c:	f04f 0a00 	moveq.w	sl, #0
    f080:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    f084:	fb0c f404 	mul.w	r4, ip, r4
    f088:	fb01 4406 	mla	r4, r1, r6, r4
    f08c:	fbac 6701 	umull	r6, r7, ip, r1
    f090:	eb16 0609 	adds.w	r6, r6, r9
    f094:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
    f096:	eb44 040a 	adc.w	r4, r4, sl
    f09a:	2c00      	cmp	r4, #0
    f09c:	da05      	bge.n	f0aa <arm_softmax_s8+0x3c6>
    f09e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    f0a2:	eb16 0609 	adds.w	r6, r6, r9
    f0a6:	f144 0400 	adc.w	r4, r4, #0
    f0aa:	0ff6      	lsrs	r6, r6, #31
    f0ac:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    f0b0:	4430      	add	r0, r6
        mult = 1 - mult;
    f0b2:	2800      	cmp	r0, #0
    f0b4:	bfab      	itete	ge
    f0b6:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    f0ba:	4644      	movlt	r4, r8
    f0bc:	2600      	movge	r6, #0
    f0be:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    f0c2:	4f68      	ldr	r7, [pc, #416]	; (f264 <arm_softmax_s8+0x580>)
    f0c4:	fbc0 4607 	smlal	r4, r6, r0, r7
    f0c8:	2e00      	cmp	r6, #0
    f0ca:	da04      	bge.n	f0d6 <arm_softmax_s8+0x3f2>
    f0cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f0d0:	1824      	adds	r4, r4, r0
    f0d2:	f146 0600 	adc.w	r6, r6, #0
    f0d6:	0fe4      	lsrs	r4, r4, #31
    f0d8:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    f0dc:	440c      	add	r4, r1
    if (result < 0)
    f0de:	1061      	asrs	r1, r4, #1
    f0e0:	d402      	bmi.n	f0e8 <arm_softmax_s8+0x404>
    if (remainder > threshold)
    f0e2:	07e6      	lsls	r6, r4, #31
        result++;
    f0e4:	bf48      	it	mi
    f0e6:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    f0e8:	448c      	add	ip, r1
        mult = 1 - mult;
    f0ea:	f1bc 0f00 	cmp.w	ip, #0
    f0ee:	bfab      	itete	ge
    f0f0:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    f0f4:	4644      	movlt	r4, r8
    f0f6:	2100      	movge	r1, #0
    f0f8:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    f0fc:	485a      	ldr	r0, [pc, #360]	; (f268 <arm_softmax_s8+0x584>)
    f0fe:	fbcc 4100 	smlal	r4, r1, ip, r0
    f102:	2900      	cmp	r1, #0
    f104:	da04      	bge.n	f110 <arm_softmax_s8+0x42c>
    f106:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f10a:	1824      	adds	r4, r4, r0
    f10c:	f141 0100 	adc.w	r1, r1, #0
    f110:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
    f112:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
    f114:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
    f118:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f11c:	4682      	mov	sl, r0
    f11e:	468c      	mov	ip, r1
    int32_t result = 1895147668 +
    f120:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
    f124:	4f51      	ldr	r7, [pc, #324]	; (f26c <arm_softmax_s8+0x588>)
    int32_t result = 1895147668 +
    f126:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
    f12a:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
    f12e:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
    f132:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t)(mult / (1ll << 31));
    f136:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    f13a:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    f13e:	f345 6900 	sbfx	r9, r5, #24, #1
    f142:	3e01      	subs	r6, #1
    f144:	ea09 090c 	and.w	r9, r9, ip
    f148:	4034      	ands	r4, r6
    mult = mult + (q63_t)m1 * m2;
    f14a:	468c      	mov	ip, r1
    f14c:	4606      	mov	r6, r0
    f14e:	4f48      	ldr	r7, [pc, #288]	; (f270 <arm_softmax_s8+0x58c>)
    SELECT_IF_NON_ZERO(1672461947)
    f150:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
    f154:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
    f158:	f3c5 6a40 	ubfx	sl, r5, #25, #1
    result = (int32_t)(mult / (1ll << 31));
    f15c:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    SELECT_IF_NON_ZERO(1302514674)
    f160:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    f164:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    f168:	ea0a 0a04 	and.w	sl, sl, r4
    mult = mult + (q63_t)m1 * m2;
    f16c:	460e      	mov	r6, r1
    f16e:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
    f170:	f345 6940 	sbfx	r9, r5, #25, #1
    f174:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
    f178:	4f3e      	ldr	r7, [pc, #248]	; (f274 <arm_softmax_s8+0x590>)
    SELECT_IF_NON_ZERO(1302514674)
    f17a:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
    f17e:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
    f182:	f3c5 6a80 	ubfx	sl, r5, #26, #1
    result = (int32_t)(mult / (1ll << 31));
    f186:	0ff6      	lsrs	r6, r6, #31
    f188:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    f18c:	f345 6c80 	sbfx	ip, r5, #26, #1
    f190:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    f194:	ea0a 0a09 	and.w	sl, sl, r9
    f198:	ea0c 0c06 	and.w	ip, ip, r6
    f19c:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
    f1a0:	460c      	mov	r4, r1
    f1a2:	4682      	mov	sl, r0
    f1a4:	4e34      	ldr	r6, [pc, #208]	; (f278 <arm_softmax_s8+0x594>)
    SELECT_IF_NON_ZERO(290630308)
    f1a6:	f3c5 69c0 	ubfx	r9, r5, #27, #1
    mult = mult + (q63_t)m1 * m2;
    f1aa:	fbcc 4a06 	smlal	r4, sl, ip, r6
    result = (int32_t)(mult / (1ll << 31));
    f1ae:	0fe4      	lsrs	r4, r4, #31
    f1b0:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    f1b4:	f345 66c0 	sbfx	r6, r5, #27, #1
    f1b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    f1bc:	ea09 090c 	and.w	r9, r9, ip
    f1c0:	4026      	ands	r6, r4
    f1c2:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
    f1c6:	4682      	mov	sl, r0
    f1c8:	4689      	mov	r9, r1
    f1ca:	4c2c      	ldr	r4, [pc, #176]	; (f27c <arm_softmax_s8+0x598>)
    SELECT_IF_NON_ZERO(39332535)
    f1cc:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    mult = mult + (q63_t)m1 * m2;
    f1d0:	fbc6 9a04 	smlal	r9, sl, r6, r4
    result = (int32_t)(mult / (1ll << 31));
    f1d4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
    f1d8:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    f1dc:	f345 7400 	sbfx	r4, r5, #28, #1
    f1e0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    f1e4:	ea0c 0c06 	and.w	ip, ip, r6
    f1e8:	ea04 0409 	and.w	r4, r4, r9
    f1ec:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
    f1f0:	4682      	mov	sl, r0
    f1f2:	468c      	mov	ip, r1
    f1f4:	f8df 9088 	ldr.w	r9, [pc, #136]	; f280 <arm_softmax_s8+0x59c>
    SELECT_IF_NON_ZERO(720401)
    f1f8:	f3c5 7640 	ubfx	r6, r5, #29, #1
    f1fc:	3e01      	subs	r6, #1
    mult = mult + (q63_t)m1 * m2;
    f1fe:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
    f202:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
    f204:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
    f206:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
    f20a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    f20e:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
    f212:	f345 7940 	sbfx	r9, r5, #29, #1
    f216:	ea09 0c0c 	and.w	ip, r9, ip
    f21a:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
    f21e:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
    f222:	f3c5 7a80 	ubfx	sl, r5, #30, #1
    result = (int32_t)(mult / (1ll << 31));
    f226:	0fc9      	lsrs	r1, r1, #31
    f228:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
    f22c:	f345 7580 	sbfx	r5, r5, #30, #1
    f230:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    f234:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
    f238:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
    f23a:	4029      	ands	r1, r5
    f23c:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    f240:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
    f242:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    f244:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
    f248:	4001      	ands	r1, r0
    f24a:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
    f24e:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
    f252:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
    f256:	bf18      	it	ne
    f258:	3201      	addne	r2, #1
    f25a:	4413      	add	r3, r2
        for (col = 0; col < row_size; ++col)
    f25c:	f10e 0e01 	add.w	lr, lr, #1
    f260:	e565      	b.n	ed2e <arm_softmax_s8+0x4a>
    f262:	bf00      	nop
    f264:	2aaaaaab 	.word	0x2aaaaaab
    f268:	70f5a894 	.word	0x70f5a894
    f26c:	63afbe7b 	.word	0x63afbe7b
    f270:	4da2cbf2 	.word	0x4da2cbf2
    f274:	2f16ac6c 	.word	0x2f16ac6c
    f278:	1152aaa4 	.word	0x1152aaa4
    f27c:	02582ab7 	.word	0x02582ab7
    f280:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
    f284:	9b04      	ldr	r3, [sp, #16]
    f286:	f913 100c 	ldrsb.w	r1, [r3, ip]
    f28a:	9b01      	ldr	r3, [sp, #4]
    f28c:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
    f28e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f290:	4299      	cmp	r1, r3
    f292:	f2c0 816a 	blt.w	f56a <arm_softmax_s8+0x886>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
    f296:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f298:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
    f29a:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
    f29c:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
    f2a0:	bf0b      	itete	eq
    f2a2:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    f2a6:	4673      	movne	r3, lr
    f2a8:	2200      	moveq	r2, #0
    f2aa:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    f2ae:	fbc1 320b 	smlal	r3, r2, r1, fp
    f2b2:	2a00      	cmp	r2, #0
    f2b4:	4610      	mov	r0, r2
    f2b6:	da04      	bge.n	f2c2 <arm_softmax_s8+0x5de>
    f2b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f2bc:	189b      	adds	r3, r3, r2
    f2be:	f140 0000 	adc.w	r0, r0, #0
    f2c2:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    f2c4:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
    f2c6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    f2ca:	d104      	bne.n	f2d6 <arm_softmax_s8+0x5f2>
        result = Q31_MAX;
    f2cc:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
    f2d0:	bf08      	it	eq
    f2d2:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
    f2d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    f2da:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    f2dc:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
    f2e0:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
    f2e2:	0176      	lsls	r6, r6, #5
    f2e4:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
    f2e8:	fbc6 1406 	smlal	r1, r4, r6, r6
    f2ec:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
    f2ee:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
    f2f2:	da04      	bge.n	f2fe <arm_softmax_s8+0x61a>
    f2f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f2f8:	1809      	adds	r1, r1, r0
    f2fa:	f144 0400 	adc.w	r4, r4, #0
    f2fe:	0fc9      	lsrs	r1, r1, #31
    f300:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
    f304:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
    f308:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
    f30a:	fb01 f904 	mul.w	r9, r1, r4
    f30e:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    f312:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
    f316:	f1b8 0f00 	cmp.w	r8, #0
    f31a:	da05      	bge.n	f328 <arm_softmax_s8+0x644>
    f31c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    f320:	eb10 0009 	adds.w	r0, r0, r9
    f324:	f148 0800 	adc.w	r8, r8, #0
    f328:	0fc0      	lsrs	r0, r0, #31
    f32a:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
    f32e:	f000 0803 	and.w	r8, r0, #3
        threshold++;
    f332:	1080      	asrs	r0, r0, #2
    f334:	bf54      	ite	pl
    f336:	f04f 0901 	movpl.w	r9, #1
    f33a:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
    f33e:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
    f340:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
    f344:	bfc8      	it	gt
    f346:	3001      	addgt	r0, #1
        mult = 1 - mult;
    f348:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
    f34c:	bf0b      	itete	eq
    f34e:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
    f352:	46f0      	movne	r8, lr
    f354:	f04f 0900 	moveq.w	r9, #0
    f358:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    f35c:	4374      	muls	r4, r6
    f35e:	fb01 4405 	mla	r4, r1, r5, r4
    f362:	fba6 5701 	umull	r5, r7, r6, r1
    f366:	eb15 0508 	adds.w	r5, r5, r8
    f36a:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
    f36c:	eb44 0409 	adc.w	r4, r4, r9
    f370:	2c00      	cmp	r4, #0
    f372:	da05      	bge.n	f380 <arm_softmax_s8+0x69c>
    f374:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    f378:	eb15 0508 	adds.w	r5, r5, r8
    f37c:	f144 0400 	adc.w	r4, r4, #0
    f380:	0fed      	lsrs	r5, r5, #31
    f382:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    f386:	4428      	add	r0, r5
        mult = 1 - mult;
    f388:	2800      	cmp	r0, #0
    f38a:	bfab      	itete	ge
    f38c:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    f390:	4674      	movlt	r4, lr
    f392:	2500      	movge	r5, #0
    f394:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    f398:	4f75      	ldr	r7, [pc, #468]	; (f570 <arm_softmax_s8+0x88c>)
    f39a:	fbc0 4507 	smlal	r4, r5, r0, r7
    f39e:	2d00      	cmp	r5, #0
    f3a0:	da04      	bge.n	f3ac <arm_softmax_s8+0x6c8>
    f3a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f3a6:	1824      	adds	r4, r4, r0
    f3a8:	f145 0500 	adc.w	r5, r5, #0
    f3ac:	0fe4      	lsrs	r4, r4, #31
    f3ae:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    f3b2:	440c      	add	r4, r1
    if (result < 0)
    f3b4:	1061      	asrs	r1, r4, #1
    f3b6:	d402      	bmi.n	f3be <arm_softmax_s8+0x6da>
    if (remainder > threshold)
    f3b8:	07e0      	lsls	r0, r4, #31
        result++;
    f3ba:	bf48      	it	mi
    f3bc:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    f3be:	440e      	add	r6, r1
        mult = 1 - mult;
    f3c0:	2e00      	cmp	r6, #0
    f3c2:	bfab      	itete	ge
    f3c4:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    f3c8:	4674      	movlt	r4, lr
    f3ca:	2100      	movge	r1, #0
    f3cc:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    f3d0:	4868      	ldr	r0, [pc, #416]	; (f574 <arm_softmax_s8+0x890>)
    f3d2:	fbc6 4100 	smlal	r4, r1, r6, r0
    f3d6:	2900      	cmp	r1, #0
    f3d8:	da04      	bge.n	f3e4 <arm_softmax_s8+0x700>
    f3da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f3de:	1824      	adds	r4, r4, r0
    f3e0:	f141 0100 	adc.w	r1, r1, #0
    f3e4:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
    f3e6:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
    f3e8:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
    f3ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f3f0:	4681      	mov	r9, r0
    f3f2:	460e      	mov	r6, r1
    int32_t result = 1895147668 +
    f3f4:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
    f3f8:	4f5f      	ldr	r7, [pc, #380]	; (f578 <arm_softmax_s8+0x894>)
    int32_t result = 1895147668 +
    f3fa:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
    f3fe:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
    f402:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
    f406:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
    f40a:	0ff6      	lsrs	r6, r6, #31
    f40c:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    f410:	f343 6800 	sbfx	r8, r3, #24, #1
    f414:	3d01      	subs	r5, #1
    f416:	ea08 0806 	and.w	r8, r8, r6
    f41a:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
    f41c:	460e      	mov	r6, r1
    f41e:	4605      	mov	r5, r0
    f420:	4f56      	ldr	r7, [pc, #344]	; (f57c <arm_softmax_s8+0x898>)
    SELECT_IF_NON_ZERO(1672461947)
    f422:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
    f426:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
    f42a:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
    f42e:	0ff6      	lsrs	r6, r6, #31
    SELECT_IF_NON_ZERO(1302514674)
    f430:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    f434:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    f438:	ea09 0904 	and.w	r9, r9, r4
    mult = mult + (q63_t)m1 * m2;
    f43c:	460d      	mov	r5, r1
    f43e:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
    f440:	f343 6840 	sbfx	r8, r3, #25, #1
    f444:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
    f448:	4e4d      	ldr	r6, [pc, #308]	; (f580 <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1302514674)
    f44a:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
    f44e:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
    f452:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
    f456:	0fed      	lsrs	r5, r5, #31
    f458:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    f45c:	f343 6680 	sbfx	r6, r3, #26, #1
    f460:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    f464:	ea09 0908 	and.w	r9, r9, r8
    f468:	402e      	ands	r6, r5
    f46a:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
    f46e:	460c      	mov	r4, r1
    f470:	4681      	mov	r9, r0
    f472:	4d44      	ldr	r5, [pc, #272]	; (f584 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(290630308)
    f474:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    mult = mult + (q63_t)m1 * m2;
    f478:	fbc6 4905 	smlal	r4, r9, r6, r5
    result = (int32_t)(mult / (1ll << 31));
    f47c:	0fe4      	lsrs	r4, r4, #31
    f47e:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    f482:	f343 65c0 	sbfx	r5, r3, #27, #1
    f486:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    f48a:	ea08 0806 	and.w	r8, r8, r6
    f48e:	4025      	ands	r5, r4
    f490:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
    f494:	4681      	mov	r9, r0
    f496:	4688      	mov	r8, r1
    f498:	4c3b      	ldr	r4, [pc, #236]	; (f588 <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(39332535)
    f49a:	f3c3 7600 	ubfx	r6, r3, #28, #1
    mult = mult + (q63_t)m1 * m2;
    f49e:	fbc5 8904 	smlal	r8, r9, r5, r4
    result = (int32_t)(mult / (1ll << 31));
    f4a2:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    f4a6:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    f4aa:	f343 7400 	sbfx	r4, r3, #28, #1
    f4ae:	3e01      	subs	r6, #1
    f4b0:	402e      	ands	r6, r5
    f4b2:	ea04 0408 	and.w	r4, r4, r8
    f4b6:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
    f4b8:	4681      	mov	r9, r0
    f4ba:	460e      	mov	r6, r1
    f4bc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; f58c <arm_softmax_s8+0x8a8>
    SELECT_IF_NON_ZERO(720401)
    f4c0:	f3c3 7540 	ubfx	r5, r3, #29, #1
    f4c4:	3d01      	subs	r5, #1
    mult = mult + (q63_t)m1 * m2;
    f4c6:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
    f4ca:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
    f4cc:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
    f4ce:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
    f4d2:	0ff6      	lsrs	r6, r6, #31
    f4d4:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
    f4d8:	f343 7840 	sbfx	r8, r3, #29, #1
    f4dc:	ea08 0606 	and.w	r6, r8, r6
    f4e0:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
    f4e2:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
    f4e6:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
    f4ea:	0fc9      	lsrs	r1, r1, #31
    f4ec:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
    f4f0:	f343 7380 	sbfx	r3, r3, #30, #1
    f4f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    f4f8:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
    f4fa:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
    f4fc:	ea09 0906 	and.w	r9, r9, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    f500:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
    f502:	ea81 0109 	eor.w	r1, r1, r9
    mask = MASK_IF_ZERO(val);
    f506:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    f508:	4001      	ands	r1, r0
    f50a:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
    f50e:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
    f510:	9909      	ldr	r1, [sp, #36]	; 0x24
    f512:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    f516:	fbc1 3200 	smlal	r3, r2, r1, r0
    f51a:	2a00      	cmp	r2, #0
    f51c:	4614      	mov	r4, r2
    f51e:	da04      	bge.n	f52a <arm_softmax_s8+0x846>
    f520:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f524:	189b      	adds	r3, r3, r2
    f526:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
    f52a:	9a05      	ldr	r2, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
    f52c:	0fdb      	lsrs	r3, r3, #31
    f52e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    q31_t threshold = remainder_mask >> 1;
    f532:	9806      	ldr	r0, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
    f534:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
    f536:	fa53 f30a 	asrs.w	r3, r3, sl
    f53a:	990a      	ldr	r1, [sp, #40]	; 0x28
    f53c:	bf58      	it	pl
    f53e:	4601      	movpl	r1, r0
    if (remainder > threshold)
    f540:	428a      	cmp	r2, r1
        result++;
    f542:	bfc8      	it	gt
    f544:	3301      	addgt	r3, #1
                const int32_t res =
    f546:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    f548:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
    f54c:	db08      	blt.n	f560 <arm_softmax_s8+0x87c>
    f54e:	2b7e      	cmp	r3, #126	; 0x7e
    f550:	dc09      	bgt.n	f566 <arm_softmax_s8+0x882>
    f552:	b25b      	sxtb	r3, r3
                output[col] = -128;
    f554:	9a07      	ldr	r2, [sp, #28]
    f556:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
    f55a:	f10c 0c01 	add.w	ip, ip, #1
    f55e:	e50a      	b.n	ef76 <arm_softmax_s8+0x292>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    f560:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    f564:	e7f6      	b.n	f554 <arm_softmax_s8+0x870>
    f566:	237f      	movs	r3, #127	; 0x7f
    f568:	e7f4      	b.n	f554 <arm_softmax_s8+0x870>
                output[col] = -128;
    f56a:	2380      	movs	r3, #128	; 0x80
    f56c:	e7f2      	b.n	f554 <arm_softmax_s8+0x870>
    f56e:	bf00      	nop
    f570:	2aaaaaab 	.word	0x2aaaaaab
    f574:	70f5a894 	.word	0x70f5a894
    f578:	63afbe7b 	.word	0x63afbe7b
    f57c:	4da2cbf2 	.word	0x4da2cbf2
    f580:	2f16ac6c 	.word	0x2f16ac6c
    f584:	1152aaa4 	.word	0x1152aaa4
    f588:	02582ab7 	.word	0x02582ab7
    f58c:	000afe11 	.word	0x000afe11

0000f590 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    f590:	2810      	cmp	r0, #16
    f592:	bf9a      	itte	ls
    f594:	4b02      	ldrls	r3, [pc, #8]	; (f5a0 <TfLiteTypeGetName+0x10>)
    f596:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
    f59a:	4802      	ldrhi	r0, [pc, #8]	; (f5a4 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
    f59c:	4770      	bx	lr
    f59e:	bf00      	nop
    f5a0:	000171dc 	.word	0x000171dc
    f5a4:	0001859e 	.word	0x0001859e

0000f5a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    f5a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
    f5aa:	2200      	movs	r2, #0
                        int* shift) {
    f5ac:	4606      	mov	r6, r0
    f5ae:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
    f5b0:	2300      	movs	r3, #0
    f5b2:	ec51 0b10 	vmov	r0, r1, d0
    f5b6:	ed8d 0b00 	vstr	d0, [sp]
    f5ba:	f7f1 f9f1 	bl	9a0 <__aeabi_dcmpeq>
    f5be:	ed9d 0b00 	vldr	d0, [sp]
    f5c2:	4605      	mov	r5, r0
    f5c4:	b120      	cbz	r0, f5d0 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x28>
    *quantized_multiplier = 0;
    f5c6:	2300      	movs	r3, #0
    f5c8:	6033      	str	r3, [r6, #0]
    *shift = 0;
    f5ca:	6023      	str	r3, [r4, #0]
}
    f5cc:	b002      	add	sp, #8
    f5ce:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
    f5d0:	4620      	mov	r0, r4
    f5d2:	f000 f8e1 	bl	f798 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    f5d6:	2200      	movs	r2, #0
    f5d8:	4b13      	ldr	r3, [pc, #76]	; (f628 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x80>)
  const double q = std::frexp(double_multiplier, shift);
    f5da:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    f5de:	f7f0 ff77 	bl	4d0 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    f5e2:	ec41 0b10 	vmov	d0, r0, r1
    f5e6:	f000 f90f 	bl	f808 <round>
    f5ea:	ec51 0b10 	vmov	r0, r1, d0
    f5ee:	f7f1 fb3f 	bl	c70 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    f5f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f5f6:	4282      	cmp	r2, r0
    f5f8:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    f5fc:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    f5fe:	da01      	bge.n	f604 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x5c>
    f600:	f005 fac1 	bl	14b86 <abort>
  if (q_fixed == (1ll << 31)) {
    f604:	42a9      	cmp	r1, r5
    f606:	bf08      	it	eq
    f608:	4290      	cmpeq	r0, r2
    ++*shift;
    f60a:	bf02      	ittt	eq
    f60c:	6823      	ldreq	r3, [r4, #0]
    f60e:	3301      	addeq	r3, #1
    f610:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
    f612:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
    f614:	bf08      	it	eq
    f616:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
    f61a:	321f      	adds	r2, #31
    *shift = 0;
    f61c:	bfbc      	itt	lt
    f61e:	2300      	movlt	r3, #0
    f620:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    f622:	6033      	str	r3, [r6, #0]
    f624:	e7d2      	b.n	f5cc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x24>
    f626:	bf00      	nop
    f628:	41e00000 	.word	0x41e00000

0000f62c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    f62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    f62e:	4b0c      	ldr	r3, [pc, #48]	; (f660 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x34>)
                                      int* left_shift) {
    f630:	4605      	mov	r5, r0
    f632:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
    f634:	2200      	movs	r2, #0
    f636:	ec51 0b10 	vmov	r0, r1, d0
    f63a:	ed8d 0b00 	vstr	d0, [sp]
    f63e:	f7f1 f9d7 	bl	9f0 <__aeabi_dcmpgt>
    f642:	ed9d 0b00 	vldr	d0, [sp]
    f646:	b908      	cbnz	r0, f64c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x20>
    f648:	f005 fa9d 	bl	14b86 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    f64c:	4621      	mov	r1, r4
    f64e:	4628      	mov	r0, r5
    f650:	f7ff ffaa 	bl	f5a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    f654:	6823      	ldr	r3, [r4, #0]
    f656:	2b00      	cmp	r3, #0
    f658:	dbf6      	blt.n	f648 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x1c>
}
    f65a:	b003      	add	sp, #12
    f65c:	bd30      	pop	{r4, r5, pc}
    f65e:	bf00      	nop
    f660:	3ff00000 	.word	0x3ff00000

0000f664 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
    f664:	edd1 7a03 	vldr	s15, [r1, #12]
    f668:	ed92 7a03 	vldr	s14, [r2, #12]
    f66c:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    f670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    f674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
    f678:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f67a:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    f67c:	da0a      	bge.n	f694 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
    f67e:	4b0f      	ldr	r3, [pc, #60]	; (f6bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
    f680:	4a0f      	ldr	r2, [pc, #60]	; (f6c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
    f682:	9300      	str	r3, [sp, #0]
    f684:	6944      	ldr	r4, [r0, #20]
    f686:	f240 1351 	movw	r3, #337	; 0x151
    f68a:	490e      	ldr	r1, [pc, #56]	; (f6c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    f68c:	47a0      	blx	r4
    f68e:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
    f690:	b002      	add	sp, #8
    f692:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
    f694:	ee17 0a90 	vmov	r0, s15
    f698:	f7f0 fec2 	bl	420 <__aeabi_f2d>
    f69c:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    f69e:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
    f6a0:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    f6a2:	f7f0 febd 	bl	420 <__aeabi_f2d>
    f6a6:	460b      	mov	r3, r1
    f6a8:	4602      	mov	r2, r0
    f6aa:	4629      	mov	r1, r5
    f6ac:	4620      	mov	r0, r4
    f6ae:	f7f1 f839 	bl	724 <__aeabi_ddiv>
    f6b2:	9b06      	ldr	r3, [sp, #24]
    f6b4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    f6b8:	2000      	movs	r0, #0
    f6ba:	e7e9      	b.n	f690 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
    f6bc:	00018692 	.word	0x00018692
    f6c0:	00018616 	.word	0x00018616
    f6c4:	00018168 	.word	0x00018168

0000f6c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    f6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ca:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    f6cc:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
    f6ce:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
    f6d0:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
    f6d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
    f6d4:	d00e      	beq.n	f6f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    f6d6:	2b09      	cmp	r3, #9
    f6d8:	d01f      	beq.n	f71a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    f6da:	2b07      	cmp	r3, #7
    f6dc:	d021      	beq.n	f722 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    f6de:	4b26      	ldr	r3, [pc, #152]	; (f778 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
    f6e0:	4a26      	ldr	r2, [pc, #152]	; (f77c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
    f6e2:	9300      	str	r3, [sp, #0]
    f6e4:	6944      	ldr	r4, [r0, #20]
    f6e6:	f44f 73c2 	mov.w	r3, #388	; 0x184
    f6ea:	4925      	ldr	r1, [pc, #148]	; (f780 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>)
    f6ec:	47a0      	blx	r4
    f6ee:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
    f6f0:	b005      	add	sp, #20
    f6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
    f6f4:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    f6f6:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
    f6f8:	6913      	ldr	r3, [r2, #16]
  };
    f6fa:	68d2      	ldr	r2, [r2, #12]
  if (activation == kTfLiteActRelu) {
    f6fc:	2901      	cmp	r1, #1
  };
    f6fe:	9202      	str	r2, [sp, #8]
    f700:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
    f702:	d112      	bne.n	f72a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
    f704:	ed9f 0a1f 	vldr	s0, [pc, #124]	; f784 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
    f708:	a802      	add	r0, sp, #8
    f70a:	f005 f993 	bl	14a34 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    f70e:	4286      	cmp	r6, r0
    f710:	bfac      	ite	ge
    f712:	602e      	strge	r6, [r5, #0]
    f714:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
    f716:	603c      	str	r4, [r7, #0]
    f718:	e01b      	b.n	f752 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
    f71a:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    f71c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
    f720:	e7ea      	b.n	f6f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmax = std::numeric_limits<int16_t>::max();
    f722:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    f726:	4e18      	ldr	r6, [pc, #96]	; (f788 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xc0>)
    f728:	e7e6      	b.n	f6f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
    f72a:	2903      	cmp	r1, #3
    f72c:	d113      	bne.n	f756 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
    f72e:	ed9f 0a15 	vldr	s0, [pc, #84]	; f784 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
    f732:	a802      	add	r0, sp, #8
    f734:	f005 f97e 	bl	14a34 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
    f738:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
    f73c:	4286      	cmp	r6, r0
    f73e:	bfac      	ite	ge
    f740:	602e      	strge	r6, [r5, #0]
    f742:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
    f744:	a802      	add	r0, sp, #8
    f746:	f005 f975 	bl	14a34 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    f74a:	4284      	cmp	r4, r0
    f74c:	bfd4      	ite	le
    f74e:	603c      	strle	r4, [r7, #0]
    f750:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
    f752:	2000      	movs	r0, #0
    f754:	e7cc      	b.n	f6f0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
    f756:	2902      	cmp	r1, #2
    f758:	d10b      	bne.n	f772 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
    f75a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    f75e:	a802      	add	r0, sp, #8
    f760:	f005 f968 	bl	14a34 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
    f764:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
    f768:	4286      	cmp	r6, r0
    f76a:	bfac      	ite	ge
    f76c:	602e      	strge	r6, [r5, #0]
    f76e:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
    f770:	e7e8      	b.n	f744 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7c>
    *act_min = qmin;
    f772:	602e      	str	r6, [r5, #0]
    f774:	e7cf      	b.n	f716 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4e>
    f776:	bf00      	nop
    f778:	000186cd 	.word	0x000186cd
    f77c:	00018616 	.word	0x00018616
    f780:	00018168 	.word	0x00018168
    f784:	00000000 	.word	0x00000000
    f788:	ffff8000 	.word	0xffff8000

0000f78c <_ZSt15get_new_handlerv>:
    f78c:	4b01      	ldr	r3, [pc, #4]	; (f794 <_ZSt15get_new_handlerv+0x8>)
    f78e:	e8d3 0faf 	lda	r0, [r3]
    f792:	4770      	bx	lr
    f794:	20003b6c 	.word	0x20003b6c

0000f798 <frexp>:
    f798:	2100      	movs	r1, #0
    f79a:	b570      	push	{r4, r5, r6, lr}
    f79c:	ec55 4b10 	vmov	r4, r5, d0
    f7a0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    f7a4:	6001      	str	r1, [r0, #0]
    f7a6:	4915      	ldr	r1, [pc, #84]	; (f7fc <frexp+0x64>)
    f7a8:	4606      	mov	r6, r0
    f7aa:	462b      	mov	r3, r5
    f7ac:	428a      	cmp	r2, r1
    f7ae:	dc22      	bgt.n	f7f6 <frexp+0x5e>
    f7b0:	ee10 1a10 	vmov	r1, s0
    f7b4:	4311      	orrs	r1, r2
    f7b6:	d01e      	beq.n	f7f6 <frexp+0x5e>
    f7b8:	4911      	ldr	r1, [pc, #68]	; (f800 <frexp+0x68>)
    f7ba:	4029      	ands	r1, r5
    f7bc:	b969      	cbnz	r1, f7da <frexp+0x42>
    f7be:	2200      	movs	r2, #0
    f7c0:	4b10      	ldr	r3, [pc, #64]	; (f804 <frexp+0x6c>)
    f7c2:	ee10 0a10 	vmov	r0, s0
    f7c6:	4629      	mov	r1, r5
    f7c8:	f7f0 fe82 	bl	4d0 <__aeabi_dmul>
    f7cc:	460b      	mov	r3, r1
    f7ce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    f7d2:	4604      	mov	r4, r0
    f7d4:	f06f 0135 	mvn.w	r1, #53	; 0x35
    f7d8:	6031      	str	r1, [r6, #0]
    f7da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    f7de:	1512      	asrs	r2, r2, #20
    f7e0:	6831      	ldr	r1, [r6, #0]
    f7e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    f7e6:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
    f7ea:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
    f7ee:	440a      	add	r2, r1
    f7f0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    f7f4:	6032      	str	r2, [r6, #0]
    f7f6:	ec45 4b10 	vmov	d0, r4, r5
    f7fa:	bd70      	pop	{r4, r5, r6, pc}
    f7fc:	7fefffff 	.word	0x7fefffff
    f800:	7ff00000 	.word	0x7ff00000
    f804:	43500000 	.word	0x43500000

0000f808 <round>:
    f808:	ec51 0b10 	vmov	r0, r1, d0
    f80c:	b570      	push	{r4, r5, r6, lr}
    f80e:	f3c1 550a 	ubfx	r5, r1, #20, #11
    f812:	460b      	mov	r3, r1
    f814:	ee10 2a10 	vmov	r2, s0
    f818:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
    f81c:	2c13      	cmp	r4, #19
    f81e:	dc19      	bgt.n	f854 <round+0x4c>
    f820:	2c00      	cmp	r4, #0
    f822:	da09      	bge.n	f838 <round+0x30>
    f824:	3401      	adds	r4, #1
    f826:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    f82a:	d103      	bne.n	f834 <round+0x2c>
    f82c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    f830:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    f834:	2200      	movs	r2, #0
    f836:	e028      	b.n	f88a <round+0x82>
    f838:	4d15      	ldr	r5, [pc, #84]	; (f890 <round+0x88>)
    f83a:	4125      	asrs	r5, r4
    f83c:	ea01 0605 	and.w	r6, r1, r5
    f840:	4332      	orrs	r2, r6
    f842:	d00e      	beq.n	f862 <round+0x5a>
    f844:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    f848:	fa42 f404 	asr.w	r4, r2, r4
    f84c:	4423      	add	r3, r4
    f84e:	ea23 0305 	bic.w	r3, r3, r5
    f852:	e7ef      	b.n	f834 <round+0x2c>
    f854:	2c33      	cmp	r4, #51	; 0x33
    f856:	dd07      	ble.n	f868 <round+0x60>
    f858:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    f85c:	d101      	bne.n	f862 <round+0x5a>
    f85e:	f7f0 fc81 	bl	164 <__adddf3>
    f862:	ec41 0b10 	vmov	d0, r0, r1
    f866:	bd70      	pop	{r4, r5, r6, pc}
    f868:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
    f86c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    f870:	40f5      	lsrs	r5, r6
    f872:	4228      	tst	r0, r5
    f874:	d0f5      	beq.n	f862 <round+0x5a>
    f876:	2101      	movs	r1, #1
    f878:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
    f87c:	fa01 f404 	lsl.w	r4, r1, r4
    f880:	1912      	adds	r2, r2, r4
    f882:	bf28      	it	cs
    f884:	185b      	addcs	r3, r3, r1
    f886:	ea22 0205 	bic.w	r2, r2, r5
    f88a:	4619      	mov	r1, r3
    f88c:	4610      	mov	r0, r2
    f88e:	e7e8      	b.n	f862 <round+0x5a>
    f890:	000fffff 	.word	0x000fffff

0000f894 <pow>:
    f894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f898:	ec59 8b10 	vmov	r8, r9, d0
    f89c:	ec57 6b11 	vmov	r6, r7, d1
    f8a0:	f7f3 fdee 	bl	3480 <__ieee754_pow>
    f8a4:	4b4e      	ldr	r3, [pc, #312]	; (f9e0 <pow+0x14c>)
    f8a6:	f993 3000 	ldrsb.w	r3, [r3]
    f8aa:	3301      	adds	r3, #1
    f8ac:	ec55 4b10 	vmov	r4, r5, d0
    f8b0:	d015      	beq.n	f8de <pow+0x4a>
    f8b2:	4632      	mov	r2, r6
    f8b4:	463b      	mov	r3, r7
    f8b6:	4630      	mov	r0, r6
    f8b8:	4639      	mov	r1, r7
    f8ba:	f7f1 f99b 	bl	bf4 <__aeabi_dcmpun>
    f8be:	b970      	cbnz	r0, f8de <pow+0x4a>
    f8c0:	4642      	mov	r2, r8
    f8c2:	464b      	mov	r3, r9
    f8c4:	4640      	mov	r0, r8
    f8c6:	4649      	mov	r1, r9
    f8c8:	f7f1 f994 	bl	bf4 <__aeabi_dcmpun>
    f8cc:	2200      	movs	r2, #0
    f8ce:	2300      	movs	r3, #0
    f8d0:	b148      	cbz	r0, f8e6 <pow+0x52>
    f8d2:	4630      	mov	r0, r6
    f8d4:	4639      	mov	r1, r7
    f8d6:	f7f1 f863 	bl	9a0 <__aeabi_dcmpeq>
    f8da:	2800      	cmp	r0, #0
    f8dc:	d17d      	bne.n	f9da <pow+0x146>
    f8de:	ec45 4b10 	vmov	d0, r4, r5
    f8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f8e6:	4640      	mov	r0, r8
    f8e8:	4649      	mov	r1, r9
    f8ea:	f7f1 f859 	bl	9a0 <__aeabi_dcmpeq>
    f8ee:	b1e0      	cbz	r0, f92a <pow+0x96>
    f8f0:	2200      	movs	r2, #0
    f8f2:	2300      	movs	r3, #0
    f8f4:	4630      	mov	r0, r6
    f8f6:	4639      	mov	r1, r7
    f8f8:	f7f1 f852 	bl	9a0 <__aeabi_dcmpeq>
    f8fc:	2800      	cmp	r0, #0
    f8fe:	d16c      	bne.n	f9da <pow+0x146>
    f900:	ec47 6b10 	vmov	d0, r6, r7
    f904:	f005 f927 	bl	14b56 <finite>
    f908:	2800      	cmp	r0, #0
    f90a:	d0e8      	beq.n	f8de <pow+0x4a>
    f90c:	2200      	movs	r2, #0
    f90e:	2300      	movs	r3, #0
    f910:	4630      	mov	r0, r6
    f912:	4639      	mov	r1, r7
    f914:	f7f1 f84e 	bl	9b4 <__aeabi_dcmplt>
    f918:	2800      	cmp	r0, #0
    f91a:	d0e0      	beq.n	f8de <pow+0x4a>
    f91c:	f002 fe63 	bl	125e6 <__errno>
    f920:	2400      	movs	r4, #0
    f922:	2321      	movs	r3, #33	; 0x21
    f924:	6003      	str	r3, [r0, #0]
    f926:	4d2f      	ldr	r5, [pc, #188]	; (f9e4 <pow+0x150>)
    f928:	e7d9      	b.n	f8de <pow+0x4a>
    f92a:	ec45 4b10 	vmov	d0, r4, r5
    f92e:	f005 f912 	bl	14b56 <finite>
    f932:	bbb8      	cbnz	r0, f9a4 <pow+0x110>
    f934:	ec49 8b10 	vmov	d0, r8, r9
    f938:	f005 f90d 	bl	14b56 <finite>
    f93c:	b390      	cbz	r0, f9a4 <pow+0x110>
    f93e:	ec47 6b10 	vmov	d0, r6, r7
    f942:	f005 f908 	bl	14b56 <finite>
    f946:	b368      	cbz	r0, f9a4 <pow+0x110>
    f948:	4622      	mov	r2, r4
    f94a:	462b      	mov	r3, r5
    f94c:	4620      	mov	r0, r4
    f94e:	4629      	mov	r1, r5
    f950:	f7f1 f950 	bl	bf4 <__aeabi_dcmpun>
    f954:	b160      	cbz	r0, f970 <pow+0xdc>
    f956:	f002 fe46 	bl	125e6 <__errno>
    f95a:	2321      	movs	r3, #33	; 0x21
    f95c:	2200      	movs	r2, #0
    f95e:	6003      	str	r3, [r0, #0]
    f960:	2300      	movs	r3, #0
    f962:	4610      	mov	r0, r2
    f964:	4619      	mov	r1, r3
    f966:	f7f0 fedd 	bl	724 <__aeabi_ddiv>
    f96a:	4604      	mov	r4, r0
    f96c:	460d      	mov	r5, r1
    f96e:	e7b6      	b.n	f8de <pow+0x4a>
    f970:	f002 fe39 	bl	125e6 <__errno>
    f974:	2322      	movs	r3, #34	; 0x22
    f976:	2200      	movs	r2, #0
    f978:	4649      	mov	r1, r9
    f97a:	6003      	str	r3, [r0, #0]
    f97c:	2300      	movs	r3, #0
    f97e:	4640      	mov	r0, r8
    f980:	2400      	movs	r4, #0
    f982:	f7f1 f817 	bl	9b4 <__aeabi_dcmplt>
    f986:	b158      	cbz	r0, f9a0 <pow+0x10c>
    f988:	ec47 6b10 	vmov	d0, r6, r7
    f98c:	f000 fa50 	bl	fe30 <rint>
    f990:	4632      	mov	r2, r6
    f992:	463b      	mov	r3, r7
    f994:	ec51 0b10 	vmov	r0, r1, d0
    f998:	f7f1 f802 	bl	9a0 <__aeabi_dcmpeq>
    f99c:	2800      	cmp	r0, #0
    f99e:	d0c2      	beq.n	f926 <pow+0x92>
    f9a0:	4d11      	ldr	r5, [pc, #68]	; (f9e8 <pow+0x154>)
    f9a2:	e79c      	b.n	f8de <pow+0x4a>
    f9a4:	2200      	movs	r2, #0
    f9a6:	2300      	movs	r3, #0
    f9a8:	4620      	mov	r0, r4
    f9aa:	4629      	mov	r1, r5
    f9ac:	f7f0 fff8 	bl	9a0 <__aeabi_dcmpeq>
    f9b0:	2800      	cmp	r0, #0
    f9b2:	d094      	beq.n	f8de <pow+0x4a>
    f9b4:	ec49 8b10 	vmov	d0, r8, r9
    f9b8:	f005 f8cd 	bl	14b56 <finite>
    f9bc:	2800      	cmp	r0, #0
    f9be:	d08e      	beq.n	f8de <pow+0x4a>
    f9c0:	ec47 6b10 	vmov	d0, r6, r7
    f9c4:	f005 f8c7 	bl	14b56 <finite>
    f9c8:	2800      	cmp	r0, #0
    f9ca:	d088      	beq.n	f8de <pow+0x4a>
    f9cc:	f002 fe0b 	bl	125e6 <__errno>
    f9d0:	2322      	movs	r3, #34	; 0x22
    f9d2:	2400      	movs	r4, #0
    f9d4:	2500      	movs	r5, #0
    f9d6:	6003      	str	r3, [r0, #0]
    f9d8:	e781      	b.n	f8de <pow+0x4a>
    f9da:	2400      	movs	r4, #0
    f9dc:	4d03      	ldr	r5, [pc, #12]	; (f9ec <pow+0x158>)
    f9de:	e77e      	b.n	f8de <pow+0x4a>
    f9e0:	200004fc 	.word	0x200004fc
    f9e4:	fff00000 	.word	0xfff00000
    f9e8:	7ff00000 	.word	0x7ff00000
    f9ec:	3ff00000 	.word	0x3ff00000

0000f9f0 <sqrt>:
    f9f0:	b538      	push	{r3, r4, r5, lr}
    f9f2:	ed2d 8b02 	vpush	{d8}
    f9f6:	ec55 4b10 	vmov	r4, r5, d0
    f9fa:	f000 f891 	bl	fb20 <__ieee754_sqrt>
    f9fe:	4b15      	ldr	r3, [pc, #84]	; (fa54 <sqrt+0x64>)
    fa00:	eeb0 8a40 	vmov.f32	s16, s0
    fa04:	eef0 8a60 	vmov.f32	s17, s1
    fa08:	f993 3000 	ldrsb.w	r3, [r3]
    fa0c:	3301      	adds	r3, #1
    fa0e:	d019      	beq.n	fa44 <sqrt+0x54>
    fa10:	4622      	mov	r2, r4
    fa12:	462b      	mov	r3, r5
    fa14:	4620      	mov	r0, r4
    fa16:	4629      	mov	r1, r5
    fa18:	f7f1 f8ec 	bl	bf4 <__aeabi_dcmpun>
    fa1c:	b990      	cbnz	r0, fa44 <sqrt+0x54>
    fa1e:	2200      	movs	r2, #0
    fa20:	2300      	movs	r3, #0
    fa22:	4620      	mov	r0, r4
    fa24:	4629      	mov	r1, r5
    fa26:	f7f0 ffc5 	bl	9b4 <__aeabi_dcmplt>
    fa2a:	b158      	cbz	r0, fa44 <sqrt+0x54>
    fa2c:	f002 fddb 	bl	125e6 <__errno>
    fa30:	2321      	movs	r3, #33	; 0x21
    fa32:	2200      	movs	r2, #0
    fa34:	6003      	str	r3, [r0, #0]
    fa36:	2300      	movs	r3, #0
    fa38:	4610      	mov	r0, r2
    fa3a:	4619      	mov	r1, r3
    fa3c:	f7f0 fe72 	bl	724 <__aeabi_ddiv>
    fa40:	ec41 0b18 	vmov	d8, r0, r1
    fa44:	eeb0 0a48 	vmov.f32	s0, s16
    fa48:	eef0 0a68 	vmov.f32	s1, s17
    fa4c:	ecbd 8b02 	vpop	{d8}
    fa50:	bd38      	pop	{r3, r4, r5, pc}
    fa52:	bf00      	nop
    fa54:	200004fc 	.word	0x200004fc

0000fa58 <expf>:
    fa58:	b508      	push	{r3, lr}
    fa5a:	ed2d 8b02 	vpush	{d8}
    fa5e:	eef0 8a40 	vmov.f32	s17, s0
    fa62:	f000 f915 	bl	fc90 <__ieee754_expf>
    fa66:	4b16      	ldr	r3, [pc, #88]	; (fac0 <expf+0x68>)
    fa68:	eeb0 8a40 	vmov.f32	s16, s0
    fa6c:	f993 3000 	ldrsb.w	r3, [r3]
    fa70:	3301      	adds	r3, #1
    fa72:	d011      	beq.n	fa98 <expf+0x40>
    fa74:	eeb0 0a68 	vmov.f32	s0, s17
    fa78:	f005 f878 	bl	14b6c <finitef>
    fa7c:	b160      	cbz	r0, fa98 <expf+0x40>
    fa7e:	eddf 7a11 	vldr	s15, [pc, #68]	; fac4 <expf+0x6c>
    fa82:	eef4 8ae7 	vcmpe.f32	s17, s15
    fa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fa8a:	dd0a      	ble.n	faa2 <expf+0x4a>
    fa8c:	f002 fdab 	bl	125e6 <__errno>
    fa90:	ed9f 8a0d 	vldr	s16, [pc, #52]	; fac8 <expf+0x70>
    fa94:	2322      	movs	r3, #34	; 0x22
    fa96:	6003      	str	r3, [r0, #0]
    fa98:	eeb0 0a48 	vmov.f32	s0, s16
    fa9c:	ecbd 8b02 	vpop	{d8}
    faa0:	bd08      	pop	{r3, pc}
    faa2:	eddf 7a0a 	vldr	s15, [pc, #40]	; facc <expf+0x74>
    faa6:	eef4 8ae7 	vcmpe.f32	s17, s15
    faaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    faae:	d5f3      	bpl.n	fa98 <expf+0x40>
    fab0:	f002 fd99 	bl	125e6 <__errno>
    fab4:	2322      	movs	r3, #34	; 0x22
    fab6:	ed9f 8a06 	vldr	s16, [pc, #24]	; fad0 <expf+0x78>
    faba:	6003      	str	r3, [r0, #0]
    fabc:	e7ec      	b.n	fa98 <expf+0x40>
    fabe:	bf00      	nop
    fac0:	200004fc 	.word	0x200004fc
    fac4:	42b17180 	.word	0x42b17180
    fac8:	7f800000 	.word	0x7f800000
    facc:	c2cff1b5 	.word	0xc2cff1b5
    fad0:	00000000 	.word	0x00000000

0000fad4 <sqrtf>:
    fad4:	b508      	push	{r3, lr}
    fad6:	ed2d 8b02 	vpush	{d8}
    fada:	eeb0 8a40 	vmov.f32	s16, s0
    fade:	f005 f82e 	bl	14b3e <__ieee754_sqrtf>
    fae2:	4b0d      	ldr	r3, [pc, #52]	; (fb18 <sqrtf+0x44>)
    fae4:	f993 3000 	ldrsb.w	r3, [r3]
    fae8:	3301      	adds	r3, #1
    faea:	d011      	beq.n	fb10 <sqrtf+0x3c>
    faec:	eeb4 8a48 	vcmp.f32	s16, s16
    faf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    faf4:	d60c      	bvs.n	fb10 <sqrtf+0x3c>
    faf6:	eddf 8a09 	vldr	s17, [pc, #36]	; fb1c <sqrtf+0x48>
    fafa:	eeb4 8ae8 	vcmpe.f32	s16, s17
    fafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fb02:	d505      	bpl.n	fb10 <sqrtf+0x3c>
    fb04:	f002 fd6f 	bl	125e6 <__errno>
    fb08:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    fb0c:	2321      	movs	r3, #33	; 0x21
    fb0e:	6003      	str	r3, [r0, #0]
    fb10:	ecbd 8b02 	vpop	{d8}
    fb14:	bd08      	pop	{r3, pc}
    fb16:	bf00      	nop
    fb18:	200004fc 	.word	0x200004fc
    fb1c:	00000000 	.word	0x00000000

0000fb20 <__ieee754_sqrt>:
    fb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb24:	4e59      	ldr	r6, [pc, #356]	; (fc8c <__ieee754_sqrt+0x16c>)
    fb26:	ee10 0a10 	vmov	r0, s0
    fb2a:	ee10 3a10 	vmov	r3, s0
    fb2e:	ec55 4b10 	vmov	r4, r5, d0
    fb32:	43ae      	bics	r6, r5
    fb34:	462a      	mov	r2, r5
    fb36:	4629      	mov	r1, r5
    fb38:	d110      	bne.n	fb5c <__ieee754_sqrt+0x3c>
    fb3a:	ee10 2a10 	vmov	r2, s0
    fb3e:	462b      	mov	r3, r5
    fb40:	f7f0 fcc6 	bl	4d0 <__aeabi_dmul>
    fb44:	4602      	mov	r2, r0
    fb46:	460b      	mov	r3, r1
    fb48:	4620      	mov	r0, r4
    fb4a:	4629      	mov	r1, r5
    fb4c:	f7f0 fb0a 	bl	164 <__adddf3>
    fb50:	4604      	mov	r4, r0
    fb52:	460d      	mov	r5, r1
    fb54:	ec45 4b10 	vmov	d0, r4, r5
    fb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb5c:	2d00      	cmp	r5, #0
    fb5e:	dc10      	bgt.n	fb82 <__ieee754_sqrt+0x62>
    fb60:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
    fb64:	4330      	orrs	r0, r6
    fb66:	d0f5      	beq.n	fb54 <__ieee754_sqrt+0x34>
    fb68:	b15d      	cbz	r5, fb82 <__ieee754_sqrt+0x62>
    fb6a:	ee10 2a10 	vmov	r2, s0
    fb6e:	462b      	mov	r3, r5
    fb70:	ee10 0a10 	vmov	r0, s0
    fb74:	f7f0 faf4 	bl	160 <__aeabi_dsub>
    fb78:	4602      	mov	r2, r0
    fb7a:	460b      	mov	r3, r1
    fb7c:	f7f0 fdd2 	bl	724 <__aeabi_ddiv>
    fb80:	e7e6      	b.n	fb50 <__ieee754_sqrt+0x30>
    fb82:	1512      	asrs	r2, r2, #20
    fb84:	d07a      	beq.n	fc7c <__ieee754_sqrt+0x15c>
    fb86:	07d4      	lsls	r4, r2, #31
    fb88:	f3c1 0113 	ubfx	r1, r1, #0, #20
    fb8c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
    fb90:	f04f 0400 	mov.w	r4, #0
    fb94:	bf58      	it	pl
    fb96:	0fda      	lsrpl	r2, r3, #31
    fb98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fb9c:	bf58      	it	pl
    fb9e:	005b      	lslpl	r3, r3, #1
    fba0:	f04f 0516 	mov.w	r5, #22
    fba4:	bf58      	it	pl
    fba6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
    fbaa:	4620      	mov	r0, r4
    fbac:	0fda      	lsrs	r2, r3, #31
    fbae:	107f      	asrs	r7, r7, #1
    fbb0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    fbb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    fbb8:	005b      	lsls	r3, r3, #1
    fbba:	1886      	adds	r6, r0, r2
    fbbc:	428e      	cmp	r6, r1
    fbbe:	bfde      	ittt	le
    fbc0:	1b89      	suble	r1, r1, r6
    fbc2:	18b0      	addle	r0, r6, r2
    fbc4:	18a4      	addle	r4, r4, r2
    fbc6:	3d01      	subs	r5, #1
    fbc8:	ea4f 0141 	mov.w	r1, r1, lsl #1
    fbcc:	ea4f 0252 	mov.w	r2, r2, lsr #1
    fbd0:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
    fbd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    fbd8:	d1ef      	bne.n	fbba <__ieee754_sqrt+0x9a>
    fbda:	462a      	mov	r2, r5
    fbdc:	f04f 0e20 	mov.w	lr, #32
    fbe0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    fbe4:	4281      	cmp	r1, r0
    fbe6:	eb06 0c05 	add.w	ip, r6, r5
    fbea:	dc02      	bgt.n	fbf2 <__ieee754_sqrt+0xd2>
    fbec:	d113      	bne.n	fc16 <__ieee754_sqrt+0xf6>
    fbee:	459c      	cmp	ip, r3
    fbf0:	d811      	bhi.n	fc16 <__ieee754_sqrt+0xf6>
    fbf2:	f1bc 0f00 	cmp.w	ip, #0
    fbf6:	eb0c 0506 	add.w	r5, ip, r6
    fbfa:	da44      	bge.n	fc86 <__ieee754_sqrt+0x166>
    fbfc:	2d00      	cmp	r5, #0
    fbfe:	db42      	blt.n	fc86 <__ieee754_sqrt+0x166>
    fc00:	f100 0801 	add.w	r8, r0, #1
    fc04:	1a09      	subs	r1, r1, r0
    fc06:	459c      	cmp	ip, r3
    fc08:	4432      	add	r2, r6
    fc0a:	eba3 030c 	sub.w	r3, r3, ip
    fc0e:	bf88      	it	hi
    fc10:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
    fc14:	4640      	mov	r0, r8
    fc16:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    fc1a:	f1be 0e01 	subs.w	lr, lr, #1
    fc1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    fc22:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    fc26:	ea4f 0656 	mov.w	r6, r6, lsr #1
    fc2a:	d1db      	bne.n	fbe4 <__ieee754_sqrt+0xc4>
    fc2c:	430b      	orrs	r3, r1
    fc2e:	d006      	beq.n	fc3e <__ieee754_sqrt+0x11e>
    fc30:	1c50      	adds	r0, r2, #1
    fc32:	bf13      	iteet	ne
    fc34:	3201      	addne	r2, #1
    fc36:	3401      	addeq	r4, #1
    fc38:	4672      	moveq	r2, lr
    fc3a:	f022 0201 	bicne.w	r2, r2, #1
    fc3e:	1063      	asrs	r3, r4, #1
    fc40:	07e1      	lsls	r1, r4, #31
    fc42:	ea4f 0252 	mov.w	r2, r2, lsr #1
    fc46:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    fc4a:	bf48      	it	mi
    fc4c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
    fc50:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    fc54:	4614      	mov	r4, r2
    fc56:	eb03 5507 	add.w	r5, r3, r7, lsl #20
    fc5a:	e77b      	b.n	fb54 <__ieee754_sqrt+0x34>
    fc5c:	0ad9      	lsrs	r1, r3, #11
    fc5e:	3815      	subs	r0, #21
    fc60:	055b      	lsls	r3, r3, #21
    fc62:	2900      	cmp	r1, #0
    fc64:	d0fa      	beq.n	fc5c <__ieee754_sqrt+0x13c>
    fc66:	02cd      	lsls	r5, r1, #11
    fc68:	d50a      	bpl.n	fc80 <__ieee754_sqrt+0x160>
    fc6a:	f1c2 0420 	rsb	r4, r2, #32
    fc6e:	1e55      	subs	r5, r2, #1
    fc70:	fa23 f404 	lsr.w	r4, r3, r4
    fc74:	4093      	lsls	r3, r2
    fc76:	1b42      	subs	r2, r0, r5
    fc78:	4321      	orrs	r1, r4
    fc7a:	e784      	b.n	fb86 <__ieee754_sqrt+0x66>
    fc7c:	4610      	mov	r0, r2
    fc7e:	e7f0      	b.n	fc62 <__ieee754_sqrt+0x142>
    fc80:	0049      	lsls	r1, r1, #1
    fc82:	3201      	adds	r2, #1
    fc84:	e7ef      	b.n	fc66 <__ieee754_sqrt+0x146>
    fc86:	4680      	mov	r8, r0
    fc88:	e7bc      	b.n	fc04 <__ieee754_sqrt+0xe4>
    fc8a:	bf00      	nop
    fc8c:	7ff00000 	.word	0x7ff00000

0000fc90 <__ieee754_expf>:
    fc90:	ee10 2a10 	vmov	r2, s0
    fc94:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
    fc98:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fc9c:	d902      	bls.n	fca4 <__ieee754_expf+0x14>
    fc9e:	ee30 0a00 	vadd.f32	s0, s0, s0
    fca2:	4770      	bx	lr
    fca4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
    fca8:	d105      	bne.n	fcb6 <__ieee754_expf+0x26>
    fcaa:	2b00      	cmp	r3, #0
    fcac:	eddf 7a4e 	vldr	s15, [pc, #312]	; fde8 <__ieee754_expf+0x158>
    fcb0:	fe00 0a27 	vseleq.f32	s0, s0, s15
    fcb4:	4770      	bx	lr
    fcb6:	484d      	ldr	r0, [pc, #308]	; (fdec <__ieee754_expf+0x15c>)
    fcb8:	4282      	cmp	r2, r0
    fcba:	dd04      	ble.n	fcc6 <__ieee754_expf+0x36>
    fcbc:	ed9f 0a4c 	vldr	s0, [pc, #304]	; fdf0 <__ieee754_expf+0x160>
    fcc0:	ee20 0a00 	vmul.f32	s0, s0, s0
    fcc4:	4770      	bx	lr
    fcc6:	2a00      	cmp	r2, #0
    fcc8:	da03      	bge.n	fcd2 <__ieee754_expf+0x42>
    fcca:	4a4a      	ldr	r2, [pc, #296]	; (fdf4 <__ieee754_expf+0x164>)
    fccc:	4291      	cmp	r1, r2
    fcce:	f200 8088 	bhi.w	fde2 <__ieee754_expf+0x152>
    fcd2:	4a49      	ldr	r2, [pc, #292]	; (fdf8 <__ieee754_expf+0x168>)
    fcd4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fcd8:	4291      	cmp	r1, r2
    fcda:	d952      	bls.n	fd82 <__ieee754_expf+0xf2>
    fcdc:	4a47      	ldr	r2, [pc, #284]	; (fdfc <__ieee754_expf+0x16c>)
    fcde:	4291      	cmp	r1, r2
    fce0:	ea4f 0283 	mov.w	r2, r3, lsl #2
    fce4:	d834      	bhi.n	fd50 <__ieee754_expf+0xc0>
    fce6:	4946      	ldr	r1, [pc, #280]	; (fe00 <__ieee754_expf+0x170>)
    fce8:	4411      	add	r1, r2
    fcea:	ed91 7a00 	vldr	s14, [r1]
    fcee:	4945      	ldr	r1, [pc, #276]	; (fe04 <__ieee754_expf+0x174>)
    fcf0:	ee30 7a47 	vsub.f32	s14, s0, s14
    fcf4:	440a      	add	r2, r1
    fcf6:	edd2 7a00 	vldr	s15, [r2]
    fcfa:	f1c3 0201 	rsb	r2, r3, #1
    fcfe:	1ad2      	subs	r2, r2, r3
    fd00:	ee37 0a67 	vsub.f32	s0, s14, s15
    fd04:	ee20 6a00 	vmul.f32	s12, s0, s0
    fd08:	ed9f 5a3f 	vldr	s10, [pc, #252]	; fe08 <__ieee754_expf+0x178>
    fd0c:	eddf 6a3f 	vldr	s13, [pc, #252]	; fe0c <__ieee754_expf+0x17c>
    fd10:	eee6 6a05 	vfma.f32	s13, s12, s10
    fd14:	ed9f 5a3e 	vldr	s10, [pc, #248]	; fe10 <__ieee754_expf+0x180>
    fd18:	eea6 5a86 	vfma.f32	s10, s13, s12
    fd1c:	eddf 6a3d 	vldr	s13, [pc, #244]	; fe14 <__ieee754_expf+0x184>
    fd20:	eee5 6a06 	vfma.f32	s13, s10, s12
    fd24:	ed9f 5a3c 	vldr	s10, [pc, #240]	; fe18 <__ieee754_expf+0x188>
    fd28:	eea6 5a86 	vfma.f32	s10, s13, s12
    fd2c:	eef0 6a40 	vmov.f32	s13, s0
    fd30:	eee5 6a46 	vfms.f32	s13, s10, s12
    fd34:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    fd38:	ee20 5a26 	vmul.f32	s10, s0, s13
    fd3c:	bb92      	cbnz	r2, fda4 <__ieee754_expf+0x114>
    fd3e:	ee76 6ac6 	vsub.f32	s13, s13, s12
    fd42:	eec5 7a26 	vdiv.f32	s15, s10, s13
    fd46:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fd4a:	ee35 0ac0 	vsub.f32	s0, s11, s0
    fd4e:	4770      	bx	lr
    fd50:	4b32      	ldr	r3, [pc, #200]	; (fe1c <__ieee754_expf+0x18c>)
    fd52:	ed9f 7a33 	vldr	s14, [pc, #204]	; fe20 <__ieee754_expf+0x190>
    fd56:	4413      	add	r3, r2
    fd58:	eddf 6a32 	vldr	s13, [pc, #200]	; fe24 <__ieee754_expf+0x194>
    fd5c:	edd3 7a00 	vldr	s15, [r3]
    fd60:	eee0 7a07 	vfma.f32	s15, s0, s14
    fd64:	eeb0 7a40 	vmov.f32	s14, s0
    fd68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    fd6c:	ee17 2a90 	vmov	r2, s15
    fd70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fd74:	eea7 7ae6 	vfms.f32	s14, s15, s13
    fd78:	eddf 6a2b 	vldr	s13, [pc, #172]	; fe28 <__ieee754_expf+0x198>
    fd7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fd80:	e7be      	b.n	fd00 <__ieee754_expf+0x70>
    fd82:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
    fd86:	d20b      	bcs.n	fda0 <__ieee754_expf+0x110>
    fd88:	eddf 6a19 	vldr	s13, [pc, #100]	; fdf0 <__ieee754_expf+0x160>
    fd8c:	ee70 6a26 	vadd.f32	s13, s0, s13
    fd90:	eef4 6ae5 	vcmpe.f32	s13, s11
    fd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fd98:	dd02      	ble.n	fda0 <__ieee754_expf+0x110>
    fd9a:	ee30 0a25 	vadd.f32	s0, s0, s11
    fd9e:	4770      	bx	lr
    fda0:	2200      	movs	r2, #0
    fda2:	e7af      	b.n	fd04 <__ieee754_expf+0x74>
    fda4:	ee76 6a66 	vsub.f32	s13, s12, s13
    fda8:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
    fdac:	bfb8      	it	lt
    fdae:	3264      	addlt	r2, #100	; 0x64
    fdb0:	ee85 0a26 	vdiv.f32	s0, s10, s13
    fdb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    fdb8:	ee37 0ac7 	vsub.f32	s0, s15, s14
    fdbc:	ee75 7ac0 	vsub.f32	s15, s11, s0
    fdc0:	ee17 3a90 	vmov	r3, s15
    fdc4:	bfb5      	itete	lt
    fdc6:	eddf 7a19 	vldrlt	s15, [pc, #100]	; fe2c <__ieee754_expf+0x19c>
    fdca:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
    fdce:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
    fdd2:	ee00 3a10 	vmovge	s0, r3
    fdd6:	bfbc      	itt	lt
    fdd8:	ee00 3a10 	vmovlt	s0, r3
    fddc:	ee20 0a27 	vmullt.f32	s0, s0, s15
    fde0:	4770      	bx	lr
    fde2:	ed9f 0a01 	vldr	s0, [pc, #4]	; fde8 <__ieee754_expf+0x158>
    fde6:	4770      	bx	lr
    fde8:	00000000 	.word	0x00000000
    fdec:	42b17217 	.word	0x42b17217
    fdf0:	7149f2ca 	.word	0x7149f2ca
    fdf4:	42cff1b5 	.word	0x42cff1b5
    fdf8:	3eb17218 	.word	0x3eb17218
    fdfc:	3f851591 	.word	0x3f851591
    fe00:	000173b0 	.word	0x000173b0
    fe04:	000173b8 	.word	0x000173b8
    fe08:	3331bb4c 	.word	0x3331bb4c
    fe0c:	b5ddea0e 	.word	0xb5ddea0e
    fe10:	388ab355 	.word	0x388ab355
    fe14:	bb360b61 	.word	0xbb360b61
    fe18:	3e2aaaab 	.word	0x3e2aaaab
    fe1c:	000173a8 	.word	0x000173a8
    fe20:	3fb8aa3b 	.word	0x3fb8aa3b
    fe24:	3f317180 	.word	0x3f317180
    fe28:	3717f7d1 	.word	0x3717f7d1
    fe2c:	0d800000 	.word	0x0d800000

0000fe30 <rint>:
    fe30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fe32:	ec51 0b10 	vmov	r0, r1, d0
    fe36:	f3c1 520a 	ubfx	r2, r1, #20, #11
    fe3a:	460c      	mov	r4, r1
    fe3c:	ee10 3a10 	vmov	r3, s0
    fe40:	0fce      	lsrs	r6, r1, #31
    fe42:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
    fe46:	2d13      	cmp	r5, #19
    fe48:	dc5b      	bgt.n	ff02 <rint+0xd2>
    fe4a:	2d00      	cmp	r5, #0
    fe4c:	da2d      	bge.n	feaa <rint+0x7a>
    fe4e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    fe52:	4302      	orrs	r2, r0
    fe54:	d025      	beq.n	fea2 <rint+0x72>
    fe56:	f3c1 0213 	ubfx	r2, r1, #0, #20
    fe5a:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    fe5e:	4302      	orrs	r2, r0
    fe60:	4253      	negs	r3, r2
    fe62:	4313      	orrs	r3, r2
    fe64:	0c4a      	lsrs	r2, r1, #17
    fe66:	0b1b      	lsrs	r3, r3, #12
    fe68:	0452      	lsls	r2, r2, #17
    fe6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    fe6e:	ea43 0102 	orr.w	r1, r3, r2
    fe72:	4602      	mov	r2, r0
    fe74:	460b      	mov	r3, r1
    fe76:	4933      	ldr	r1, [pc, #204]	; (ff44 <rint+0x114>)
    fe78:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
    fe7c:	e9d6 6700 	ldrd	r6, r7, [r6]
    fe80:	4639      	mov	r1, r7
    fe82:	4630      	mov	r0, r6
    fe84:	f7f0 f96e 	bl	164 <__adddf3>
    fe88:	463b      	mov	r3, r7
    fe8a:	4632      	mov	r2, r6
    fe8c:	e9cd 0100 	strd	r0, r1, [sp]
    fe90:	e9dd 0100 	ldrd	r0, r1, [sp]
    fe94:	f7f0 f964 	bl	160 <__aeabi_dsub>
    fe98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    fe9c:	ea43 0704 	orr.w	r7, r3, r4
    fea0:	4639      	mov	r1, r7
    fea2:	ec41 0b10 	vmov	d0, r0, r1
    fea6:	b003      	add	sp, #12
    fea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    feaa:	4a27      	ldr	r2, [pc, #156]	; (ff48 <rint+0x118>)
    feac:	412a      	asrs	r2, r5
    feae:	ea01 0702 	and.w	r7, r1, r2
    feb2:	4307      	orrs	r7, r0
    feb4:	d0f5      	beq.n	fea2 <rint+0x72>
    feb6:	0851      	lsrs	r1, r2, #1
    feb8:	ea04 0252 	and.w	r2, r4, r2, lsr #1
    febc:	4313      	orrs	r3, r2
    febe:	d00c      	beq.n	feda <rint+0xaa>
    fec0:	ea24 0201 	bic.w	r2, r4, r1
    fec4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    fec8:	2d13      	cmp	r5, #19
    feca:	fa44 f505 	asr.w	r5, r4, r5
    fece:	bf0c      	ite	eq
    fed0:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    fed4:	2300      	movne	r3, #0
    fed6:	ea42 0405 	orr.w	r4, r2, r5
    feda:	491a      	ldr	r1, [pc, #104]	; (ff44 <rint+0x114>)
    fedc:	461a      	mov	r2, r3
    fede:	4623      	mov	r3, r4
    fee0:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
    fee4:	e9d6 4500 	ldrd	r4, r5, [r6]
    fee8:	4620      	mov	r0, r4
    feea:	4629      	mov	r1, r5
    feec:	f7f0 f93a 	bl	164 <__adddf3>
    fef0:	4622      	mov	r2, r4
    fef2:	462b      	mov	r3, r5
    fef4:	e9cd 0100 	strd	r0, r1, [sp]
    fef8:	e9dd 0100 	ldrd	r0, r1, [sp]
    fefc:	f7f0 f930 	bl	160 <__aeabi_dsub>
    ff00:	e7cf      	b.n	fea2 <rint+0x72>
    ff02:	2d33      	cmp	r5, #51	; 0x33
    ff04:	dd08      	ble.n	ff18 <rint+0xe8>
    ff06:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    ff0a:	d1ca      	bne.n	fea2 <rint+0x72>
    ff0c:	ee10 2a10 	vmov	r2, s0
    ff10:	460b      	mov	r3, r1
    ff12:	f7f0 f927 	bl	164 <__adddf3>
    ff16:	e7c4      	b.n	fea2 <rint+0x72>
    ff18:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
    ff1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    ff20:	40d5      	lsrs	r5, r2
    ff22:	4228      	tst	r0, r5
    ff24:	d0bd      	beq.n	fea2 <rint+0x72>
    ff26:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
    ff2a:	ea4f 0155 	mov.w	r1, r5, lsr #1
    ff2e:	bf1f      	itttt	ne
    ff30:	ea23 0101 	bicne.w	r1, r3, r1
    ff34:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
    ff38:	fa43 f202 	asrne.w	r2, r3, r2
    ff3c:	ea41 0302 	orrne.w	r3, r1, r2
    ff40:	e7cb      	b.n	feda <rint+0xaa>
    ff42:	bf00      	nop
    ff44:	00016020 	.word	0x00016020
    ff48:	000fffff 	.word	0x000fffff

0000ff4c <__assert_func>:
    ff4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ff4e:	4614      	mov	r4, r2
    ff50:	461a      	mov	r2, r3
    ff52:	4b09      	ldr	r3, [pc, #36]	; (ff78 <__assert_func+0x2c>)
    ff54:	4605      	mov	r5, r0
    ff56:	681b      	ldr	r3, [r3, #0]
    ff58:	68d8      	ldr	r0, [r3, #12]
    ff5a:	b14c      	cbz	r4, ff70 <__assert_func+0x24>
    ff5c:	4b07      	ldr	r3, [pc, #28]	; (ff7c <__assert_func+0x30>)
    ff5e:	9100      	str	r1, [sp, #0]
    ff60:	4907      	ldr	r1, [pc, #28]	; (ff80 <__assert_func+0x34>)
    ff62:	e9cd 3401 	strd	r3, r4, [sp, #4]
    ff66:	462b      	mov	r3, r5
    ff68:	f000 f816 	bl	ff98 <fiprintf>
    ff6c:	f004 fe0b 	bl	14b86 <abort>
    ff70:	4b04      	ldr	r3, [pc, #16]	; (ff84 <__assert_func+0x38>)
    ff72:	461c      	mov	r4, r3
    ff74:	e7f3      	b.n	ff5e <__assert_func+0x12>
    ff76:	bf00      	nop
    ff78:	200002c8 	.word	0x200002c8
    ff7c:	000186d3 	.word	0x000186d3
    ff80:	000186e0 	.word	0x000186e0
    ff84:	000179b2 	.word	0x000179b2

0000ff88 <calloc>:
    ff88:	4b02      	ldr	r3, [pc, #8]	; (ff94 <calloc+0xc>)
    ff8a:	460a      	mov	r2, r1
    ff8c:	4601      	mov	r1, r0
    ff8e:	6818      	ldr	r0, [r3, #0]
    ff90:	f004 be40 	b.w	14c14 <_calloc_r>
    ff94:	200002c8 	.word	0x200002c8

0000ff98 <fiprintf>:
    ff98:	b40e      	push	{r1, r2, r3}
    ff9a:	b503      	push	{r0, r1, lr}
    ff9c:	ab03      	add	r3, sp, #12
    ff9e:	4601      	mov	r1, r0
    ffa0:	4805      	ldr	r0, [pc, #20]	; (ffb8 <fiprintf+0x20>)
    ffa2:	f853 2b04 	ldr.w	r2, [r3], #4
    ffa6:	6800      	ldr	r0, [r0, #0]
    ffa8:	9301      	str	r3, [sp, #4]
    ffaa:	f000 f8bd 	bl	10128 <_vfiprintf_r>
    ffae:	b002      	add	sp, #8
    ffb0:	f85d eb04 	ldr.w	lr, [sp], #4
    ffb4:	b003      	add	sp, #12
    ffb6:	4770      	bx	lr
    ffb8:	200002c8 	.word	0x200002c8

0000ffbc <malloc>:
    ffbc:	4b02      	ldr	r3, [pc, #8]	; (ffc8 <malloc+0xc>)
    ffbe:	4601      	mov	r1, r0
    ffc0:	6818      	ldr	r0, [r3, #0]
    ffc2:	f000 b857 	b.w	10074 <_malloc_r>
    ffc6:	bf00      	nop
    ffc8:	200002c8 	.word	0x200002c8

0000ffcc <free>:
    ffcc:	4b02      	ldr	r3, [pc, #8]	; (ffd8 <free+0xc>)
    ffce:	4601      	mov	r1, r0
    ffd0:	6818      	ldr	r0, [r3, #0]
    ffd2:	f000 b803 	b.w	ffdc <_free_r>
    ffd6:	bf00      	nop
    ffd8:	200002c8 	.word	0x200002c8

0000ffdc <_free_r>:
    ffdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ffde:	2900      	cmp	r1, #0
    ffe0:	d043      	beq.n	1006a <_free_r+0x8e>
    ffe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    ffe6:	1f0c      	subs	r4, r1, #4
    ffe8:	9001      	str	r0, [sp, #4]
    ffea:	2b00      	cmp	r3, #0
    ffec:	bfb8      	it	lt
    ffee:	18e4      	addlt	r4, r4, r3
    fff0:	f001 fa4c 	bl	1148c <__malloc_lock>
    fff4:	4a1e      	ldr	r2, [pc, #120]	; (10070 <_free_r+0x94>)
    fff6:	9801      	ldr	r0, [sp, #4]
    fff8:	6813      	ldr	r3, [r2, #0]
    fffa:	b933      	cbnz	r3, 1000a <_free_r+0x2e>
    fffc:	6063      	str	r3, [r4, #4]
    fffe:	6014      	str	r4, [r2, #0]
   10000:	b003      	add	sp, #12
   10002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   10006:	f001 ba47 	b.w	11498 <__malloc_unlock>
   1000a:	42a3      	cmp	r3, r4
   1000c:	d908      	bls.n	10020 <_free_r+0x44>
   1000e:	6825      	ldr	r5, [r4, #0]
   10010:	1961      	adds	r1, r4, r5
   10012:	428b      	cmp	r3, r1
   10014:	bf01      	itttt	eq
   10016:	6819      	ldreq	r1, [r3, #0]
   10018:	685b      	ldreq	r3, [r3, #4]
   1001a:	1949      	addeq	r1, r1, r5
   1001c:	6021      	streq	r1, [r4, #0]
   1001e:	e7ed      	b.n	fffc <_free_r+0x20>
   10020:	461a      	mov	r2, r3
   10022:	685b      	ldr	r3, [r3, #4]
   10024:	b10b      	cbz	r3, 1002a <_free_r+0x4e>
   10026:	42a3      	cmp	r3, r4
   10028:	d9fa      	bls.n	10020 <_free_r+0x44>
   1002a:	6811      	ldr	r1, [r2, #0]
   1002c:	1855      	adds	r5, r2, r1
   1002e:	42a5      	cmp	r5, r4
   10030:	d10b      	bne.n	1004a <_free_r+0x6e>
   10032:	6824      	ldr	r4, [r4, #0]
   10034:	4421      	add	r1, r4
   10036:	1854      	adds	r4, r2, r1
   10038:	6011      	str	r1, [r2, #0]
   1003a:	42a3      	cmp	r3, r4
   1003c:	d1e0      	bne.n	10000 <_free_r+0x24>
   1003e:	681c      	ldr	r4, [r3, #0]
   10040:	685b      	ldr	r3, [r3, #4]
   10042:	4421      	add	r1, r4
   10044:	6053      	str	r3, [r2, #4]
   10046:	6011      	str	r1, [r2, #0]
   10048:	e7da      	b.n	10000 <_free_r+0x24>
   1004a:	d902      	bls.n	10052 <_free_r+0x76>
   1004c:	230c      	movs	r3, #12
   1004e:	6003      	str	r3, [r0, #0]
   10050:	e7d6      	b.n	10000 <_free_r+0x24>
   10052:	6825      	ldr	r5, [r4, #0]
   10054:	1961      	adds	r1, r4, r5
   10056:	428b      	cmp	r3, r1
   10058:	bf02      	ittt	eq
   1005a:	6819      	ldreq	r1, [r3, #0]
   1005c:	685b      	ldreq	r3, [r3, #4]
   1005e:	1949      	addeq	r1, r1, r5
   10060:	6063      	str	r3, [r4, #4]
   10062:	bf08      	it	eq
   10064:	6021      	streq	r1, [r4, #0]
   10066:	6054      	str	r4, [r2, #4]
   10068:	e7ca      	b.n	10000 <_free_r+0x24>
   1006a:	b003      	add	sp, #12
   1006c:	bd30      	pop	{r4, r5, pc}
   1006e:	bf00      	nop
   10070:	20003b70 	.word	0x20003b70

00010074 <_malloc_r>:
   10074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10076:	1ccd      	adds	r5, r1, #3
   10078:	4606      	mov	r6, r0
   1007a:	f025 0503 	bic.w	r5, r5, #3
   1007e:	3508      	adds	r5, #8
   10080:	2d0c      	cmp	r5, #12
   10082:	bf38      	it	cc
   10084:	250c      	movcc	r5, #12
   10086:	2d00      	cmp	r5, #0
   10088:	db01      	blt.n	1008e <_malloc_r+0x1a>
   1008a:	42a9      	cmp	r1, r5
   1008c:	d903      	bls.n	10096 <_malloc_r+0x22>
   1008e:	230c      	movs	r3, #12
   10090:	6033      	str	r3, [r6, #0]
   10092:	2000      	movs	r0, #0
   10094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10096:	f001 f9f9 	bl	1148c <__malloc_lock>
   1009a:	4921      	ldr	r1, [pc, #132]	; (10120 <_malloc_r+0xac>)
   1009c:	680a      	ldr	r2, [r1, #0]
   1009e:	4614      	mov	r4, r2
   100a0:	b99c      	cbnz	r4, 100ca <_malloc_r+0x56>
   100a2:	4f20      	ldr	r7, [pc, #128]	; (10124 <_malloc_r+0xb0>)
   100a4:	683b      	ldr	r3, [r7, #0]
   100a6:	b923      	cbnz	r3, 100b2 <_malloc_r+0x3e>
   100a8:	4621      	mov	r1, r4
   100aa:	4630      	mov	r0, r6
   100ac:	f000 fce0 	bl	10a70 <_sbrk_r>
   100b0:	6038      	str	r0, [r7, #0]
   100b2:	4629      	mov	r1, r5
   100b4:	4630      	mov	r0, r6
   100b6:	f000 fcdb 	bl	10a70 <_sbrk_r>
   100ba:	1c43      	adds	r3, r0, #1
   100bc:	d123      	bne.n	10106 <_malloc_r+0x92>
   100be:	230c      	movs	r3, #12
   100c0:	4630      	mov	r0, r6
   100c2:	6033      	str	r3, [r6, #0]
   100c4:	f001 f9e8 	bl	11498 <__malloc_unlock>
   100c8:	e7e3      	b.n	10092 <_malloc_r+0x1e>
   100ca:	6823      	ldr	r3, [r4, #0]
   100cc:	1b5b      	subs	r3, r3, r5
   100ce:	d417      	bmi.n	10100 <_malloc_r+0x8c>
   100d0:	2b0b      	cmp	r3, #11
   100d2:	d903      	bls.n	100dc <_malloc_r+0x68>
   100d4:	6023      	str	r3, [r4, #0]
   100d6:	441c      	add	r4, r3
   100d8:	6025      	str	r5, [r4, #0]
   100da:	e004      	b.n	100e6 <_malloc_r+0x72>
   100dc:	6863      	ldr	r3, [r4, #4]
   100de:	42a2      	cmp	r2, r4
   100e0:	bf0c      	ite	eq
   100e2:	600b      	streq	r3, [r1, #0]
   100e4:	6053      	strne	r3, [r2, #4]
   100e6:	4630      	mov	r0, r6
   100e8:	f001 f9d6 	bl	11498 <__malloc_unlock>
   100ec:	f104 000b 	add.w	r0, r4, #11
   100f0:	1d23      	adds	r3, r4, #4
   100f2:	f020 0007 	bic.w	r0, r0, #7
   100f6:	1ac2      	subs	r2, r0, r3
   100f8:	d0cc      	beq.n	10094 <_malloc_r+0x20>
   100fa:	1a1b      	subs	r3, r3, r0
   100fc:	50a3      	str	r3, [r4, r2]
   100fe:	e7c9      	b.n	10094 <_malloc_r+0x20>
   10100:	4622      	mov	r2, r4
   10102:	6864      	ldr	r4, [r4, #4]
   10104:	e7cc      	b.n	100a0 <_malloc_r+0x2c>
   10106:	1cc4      	adds	r4, r0, #3
   10108:	f024 0403 	bic.w	r4, r4, #3
   1010c:	42a0      	cmp	r0, r4
   1010e:	d0e3      	beq.n	100d8 <_malloc_r+0x64>
   10110:	1a21      	subs	r1, r4, r0
   10112:	4630      	mov	r0, r6
   10114:	f000 fcac 	bl	10a70 <_sbrk_r>
   10118:	3001      	adds	r0, #1
   1011a:	d1dd      	bne.n	100d8 <_malloc_r+0x64>
   1011c:	e7cf      	b.n	100be <_malloc_r+0x4a>
   1011e:	bf00      	nop
   10120:	20003b70 	.word	0x20003b70
   10124:	20003b74 	.word	0x20003b74

00010128 <_vfiprintf_r>:
   10128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1012c:	460d      	mov	r5, r1
   1012e:	b09d      	sub	sp, #116	; 0x74
   10130:	4614      	mov	r4, r2
   10132:	4698      	mov	r8, r3
   10134:	4606      	mov	r6, r0
   10136:	b118      	cbz	r0, 10140 <_vfiprintf_r+0x18>
   10138:	6983      	ldr	r3, [r0, #24]
   1013a:	b90b      	cbnz	r3, 10140 <_vfiprintf_r+0x18>
   1013c:	f000 fe9e 	bl	10e7c <__sinit>
   10140:	4b89      	ldr	r3, [pc, #548]	; (10368 <_vfiprintf_r+0x240>)
   10142:	429d      	cmp	r5, r3
   10144:	d11b      	bne.n	1017e <_vfiprintf_r+0x56>
   10146:	6875      	ldr	r5, [r6, #4]
   10148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1014a:	07d9      	lsls	r1, r3, #31
   1014c:	d405      	bmi.n	1015a <_vfiprintf_r+0x32>
   1014e:	89ab      	ldrh	r3, [r5, #12]
   10150:	059a      	lsls	r2, r3, #22
   10152:	d402      	bmi.n	1015a <_vfiprintf_r+0x32>
   10154:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10156:	f002 fa3e 	bl	125d6 <__retarget_lock_acquire_recursive>
   1015a:	89ab      	ldrh	r3, [r5, #12]
   1015c:	071b      	lsls	r3, r3, #28
   1015e:	d501      	bpl.n	10164 <_vfiprintf_r+0x3c>
   10160:	692b      	ldr	r3, [r5, #16]
   10162:	b9eb      	cbnz	r3, 101a0 <_vfiprintf_r+0x78>
   10164:	4629      	mov	r1, r5
   10166:	4630      	mov	r0, r6
   10168:	f000 fd18 	bl	10b9c <__swsetup_r>
   1016c:	b1c0      	cbz	r0, 101a0 <_vfiprintf_r+0x78>
   1016e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10170:	07dc      	lsls	r4, r3, #31
   10172:	d50e      	bpl.n	10192 <_vfiprintf_r+0x6a>
   10174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10178:	b01d      	add	sp, #116	; 0x74
   1017a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1017e:	4b7b      	ldr	r3, [pc, #492]	; (1036c <_vfiprintf_r+0x244>)
   10180:	429d      	cmp	r5, r3
   10182:	d101      	bne.n	10188 <_vfiprintf_r+0x60>
   10184:	68b5      	ldr	r5, [r6, #8]
   10186:	e7df      	b.n	10148 <_vfiprintf_r+0x20>
   10188:	4b79      	ldr	r3, [pc, #484]	; (10370 <_vfiprintf_r+0x248>)
   1018a:	429d      	cmp	r5, r3
   1018c:	bf08      	it	eq
   1018e:	68f5      	ldreq	r5, [r6, #12]
   10190:	e7da      	b.n	10148 <_vfiprintf_r+0x20>
   10192:	89ab      	ldrh	r3, [r5, #12]
   10194:	0598      	lsls	r0, r3, #22
   10196:	d4ed      	bmi.n	10174 <_vfiprintf_r+0x4c>
   10198:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1019a:	f002 fa22 	bl	125e2 <__retarget_lock_release_recursive>
   1019e:	e7e9      	b.n	10174 <_vfiprintf_r+0x4c>
   101a0:	2300      	movs	r3, #0
   101a2:	f8cd 800c 	str.w	r8, [sp, #12]
   101a6:	f04f 0901 	mov.w	r9, #1
   101aa:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 10374 <_vfiprintf_r+0x24c>
   101ae:	9309      	str	r3, [sp, #36]	; 0x24
   101b0:	2320      	movs	r3, #32
   101b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   101b6:	2330      	movs	r3, #48	; 0x30
   101b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   101bc:	4623      	mov	r3, r4
   101be:	469a      	mov	sl, r3
   101c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   101c4:	b10a      	cbz	r2, 101ca <_vfiprintf_r+0xa2>
   101c6:	2a25      	cmp	r2, #37	; 0x25
   101c8:	d1f9      	bne.n	101be <_vfiprintf_r+0x96>
   101ca:	ebba 0b04 	subs.w	fp, sl, r4
   101ce:	d00b      	beq.n	101e8 <_vfiprintf_r+0xc0>
   101d0:	465b      	mov	r3, fp
   101d2:	4622      	mov	r2, r4
   101d4:	4629      	mov	r1, r5
   101d6:	4630      	mov	r0, r6
   101d8:	f004 fd42 	bl	14c60 <__sfputs_r>
   101dc:	3001      	adds	r0, #1
   101de:	f000 80aa 	beq.w	10336 <_vfiprintf_r+0x20e>
   101e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   101e4:	445a      	add	r2, fp
   101e6:	9209      	str	r2, [sp, #36]	; 0x24
   101e8:	f89a 3000 	ldrb.w	r3, [sl]
   101ec:	2b00      	cmp	r3, #0
   101ee:	f000 80a2 	beq.w	10336 <_vfiprintf_r+0x20e>
   101f2:	2300      	movs	r3, #0
   101f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   101f8:	f10a 0a01 	add.w	sl, sl, #1
   101fc:	9304      	str	r3, [sp, #16]
   101fe:	9307      	str	r3, [sp, #28]
   10200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10204:	931a      	str	r3, [sp, #104]	; 0x68
   10206:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1020a:	4654      	mov	r4, sl
   1020c:	2205      	movs	r2, #5
   1020e:	4859      	ldr	r0, [pc, #356]	; (10374 <_vfiprintf_r+0x24c>)
   10210:	f814 1b01 	ldrb.w	r1, [r4], #1
   10214:	f004 fcc1 	bl	14b9a <memchr>
   10218:	9a04      	ldr	r2, [sp, #16]
   1021a:	b9d8      	cbnz	r0, 10254 <_vfiprintf_r+0x12c>
   1021c:	06d1      	lsls	r1, r2, #27
   1021e:	bf44      	itt	mi
   10220:	2320      	movmi	r3, #32
   10222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10226:	0713      	lsls	r3, r2, #28
   10228:	bf44      	itt	mi
   1022a:	232b      	movmi	r3, #43	; 0x2b
   1022c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10230:	f89a 3000 	ldrb.w	r3, [sl]
   10234:	2b2a      	cmp	r3, #42	; 0x2a
   10236:	d015      	beq.n	10264 <_vfiprintf_r+0x13c>
   10238:	9a07      	ldr	r2, [sp, #28]
   1023a:	4654      	mov	r4, sl
   1023c:	2000      	movs	r0, #0
   1023e:	f04f 0c0a 	mov.w	ip, #10
   10242:	4621      	mov	r1, r4
   10244:	f811 3b01 	ldrb.w	r3, [r1], #1
   10248:	3b30      	subs	r3, #48	; 0x30
   1024a:	2b09      	cmp	r3, #9
   1024c:	d94e      	bls.n	102ec <_vfiprintf_r+0x1c4>
   1024e:	b1b0      	cbz	r0, 1027e <_vfiprintf_r+0x156>
   10250:	9207      	str	r2, [sp, #28]
   10252:	e014      	b.n	1027e <_vfiprintf_r+0x156>
   10254:	eba0 0308 	sub.w	r3, r0, r8
   10258:	46a2      	mov	sl, r4
   1025a:	fa09 f303 	lsl.w	r3, r9, r3
   1025e:	4313      	orrs	r3, r2
   10260:	9304      	str	r3, [sp, #16]
   10262:	e7d2      	b.n	1020a <_vfiprintf_r+0xe2>
   10264:	9b03      	ldr	r3, [sp, #12]
   10266:	1d19      	adds	r1, r3, #4
   10268:	681b      	ldr	r3, [r3, #0]
   1026a:	2b00      	cmp	r3, #0
   1026c:	9103      	str	r1, [sp, #12]
   1026e:	bfbb      	ittet	lt
   10270:	425b      	neglt	r3, r3
   10272:	f042 0202 	orrlt.w	r2, r2, #2
   10276:	9307      	strge	r3, [sp, #28]
   10278:	9307      	strlt	r3, [sp, #28]
   1027a:	bfb8      	it	lt
   1027c:	9204      	strlt	r2, [sp, #16]
   1027e:	7823      	ldrb	r3, [r4, #0]
   10280:	2b2e      	cmp	r3, #46	; 0x2e
   10282:	d10c      	bne.n	1029e <_vfiprintf_r+0x176>
   10284:	7863      	ldrb	r3, [r4, #1]
   10286:	2b2a      	cmp	r3, #42	; 0x2a
   10288:	d135      	bne.n	102f6 <_vfiprintf_r+0x1ce>
   1028a:	9b03      	ldr	r3, [sp, #12]
   1028c:	3402      	adds	r4, #2
   1028e:	1d1a      	adds	r2, r3, #4
   10290:	681b      	ldr	r3, [r3, #0]
   10292:	2b00      	cmp	r3, #0
   10294:	9203      	str	r2, [sp, #12]
   10296:	bfb8      	it	lt
   10298:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1029c:	9305      	str	r3, [sp, #20]
   1029e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 10384 <_vfiprintf_r+0x25c>
   102a2:	2203      	movs	r2, #3
   102a4:	7821      	ldrb	r1, [r4, #0]
   102a6:	4650      	mov	r0, sl
   102a8:	f004 fc77 	bl	14b9a <memchr>
   102ac:	b140      	cbz	r0, 102c0 <_vfiprintf_r+0x198>
   102ae:	2340      	movs	r3, #64	; 0x40
   102b0:	eba0 000a 	sub.w	r0, r0, sl
   102b4:	3401      	adds	r4, #1
   102b6:	fa03 f000 	lsl.w	r0, r3, r0
   102ba:	9b04      	ldr	r3, [sp, #16]
   102bc:	4303      	orrs	r3, r0
   102be:	9304      	str	r3, [sp, #16]
   102c0:	f814 1b01 	ldrb.w	r1, [r4], #1
   102c4:	2206      	movs	r2, #6
   102c6:	482c      	ldr	r0, [pc, #176]	; (10378 <_vfiprintf_r+0x250>)
   102c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   102cc:	f004 fc65 	bl	14b9a <memchr>
   102d0:	2800      	cmp	r0, #0
   102d2:	d03f      	beq.n	10354 <_vfiprintf_r+0x22c>
   102d4:	4b29      	ldr	r3, [pc, #164]	; (1037c <_vfiprintf_r+0x254>)
   102d6:	bb1b      	cbnz	r3, 10320 <_vfiprintf_r+0x1f8>
   102d8:	9b03      	ldr	r3, [sp, #12]
   102da:	3307      	adds	r3, #7
   102dc:	f023 0307 	bic.w	r3, r3, #7
   102e0:	3308      	adds	r3, #8
   102e2:	9303      	str	r3, [sp, #12]
   102e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   102e6:	443b      	add	r3, r7
   102e8:	9309      	str	r3, [sp, #36]	; 0x24
   102ea:	e767      	b.n	101bc <_vfiprintf_r+0x94>
   102ec:	fb0c 3202 	mla	r2, ip, r2, r3
   102f0:	460c      	mov	r4, r1
   102f2:	2001      	movs	r0, #1
   102f4:	e7a5      	b.n	10242 <_vfiprintf_r+0x11a>
   102f6:	2300      	movs	r3, #0
   102f8:	3401      	adds	r4, #1
   102fa:	f04f 0c0a 	mov.w	ip, #10
   102fe:	4619      	mov	r1, r3
   10300:	9305      	str	r3, [sp, #20]
   10302:	4620      	mov	r0, r4
   10304:	f810 2b01 	ldrb.w	r2, [r0], #1
   10308:	3a30      	subs	r2, #48	; 0x30
   1030a:	2a09      	cmp	r2, #9
   1030c:	d903      	bls.n	10316 <_vfiprintf_r+0x1ee>
   1030e:	2b00      	cmp	r3, #0
   10310:	d0c5      	beq.n	1029e <_vfiprintf_r+0x176>
   10312:	9105      	str	r1, [sp, #20]
   10314:	e7c3      	b.n	1029e <_vfiprintf_r+0x176>
   10316:	fb0c 2101 	mla	r1, ip, r1, r2
   1031a:	4604      	mov	r4, r0
   1031c:	2301      	movs	r3, #1
   1031e:	e7f0      	b.n	10302 <_vfiprintf_r+0x1da>
   10320:	ab03      	add	r3, sp, #12
   10322:	462a      	mov	r2, r5
   10324:	a904      	add	r1, sp, #16
   10326:	4630      	mov	r0, r6
   10328:	9300      	str	r3, [sp, #0]
   1032a:	4b15      	ldr	r3, [pc, #84]	; (10380 <_vfiprintf_r+0x258>)
   1032c:	f000 f82c 	bl	10388 <_printf_float>
   10330:	4607      	mov	r7, r0
   10332:	1c78      	adds	r0, r7, #1
   10334:	d1d6      	bne.n	102e4 <_vfiprintf_r+0x1bc>
   10336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10338:	07d9      	lsls	r1, r3, #31
   1033a:	d405      	bmi.n	10348 <_vfiprintf_r+0x220>
   1033c:	89ab      	ldrh	r3, [r5, #12]
   1033e:	059a      	lsls	r2, r3, #22
   10340:	d402      	bmi.n	10348 <_vfiprintf_r+0x220>
   10342:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10344:	f002 f94d 	bl	125e2 <__retarget_lock_release_recursive>
   10348:	89ab      	ldrh	r3, [r5, #12]
   1034a:	065b      	lsls	r3, r3, #25
   1034c:	f53f af12 	bmi.w	10174 <_vfiprintf_r+0x4c>
   10350:	9809      	ldr	r0, [sp, #36]	; 0x24
   10352:	e711      	b.n	10178 <_vfiprintf_r+0x50>
   10354:	ab03      	add	r3, sp, #12
   10356:	462a      	mov	r2, r5
   10358:	a904      	add	r1, sp, #16
   1035a:	4630      	mov	r0, r6
   1035c:	9300      	str	r3, [sp, #0]
   1035e:	4b08      	ldr	r3, [pc, #32]	; (10380 <_vfiprintf_r+0x258>)
   10360:	f000 fa48 	bl	107f4 <_printf_i>
   10364:	e7e4      	b.n	10330 <_vfiprintf_r+0x208>
   10366:	bf00      	nop
   10368:	0001741c 	.word	0x0001741c
   1036c:	0001743c 	.word	0x0001743c
   10370:	000173fc 	.word	0x000173fc
   10374:	00018810 	.word	0x00018810
   10378:	0001881a 	.word	0x0001881a
   1037c:	00010389 	.word	0x00010389
   10380:	00014c61 	.word	0x00014c61
   10384:	00018816 	.word	0x00018816

00010388 <_printf_float>:
   10388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1038c:	ed2d 8b02 	vpush	{d8}
   10390:	b08d      	sub	sp, #52	; 0x34
   10392:	460c      	mov	r4, r1
   10394:	4616      	mov	r6, r2
   10396:	461f      	mov	r7, r3
   10398:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   1039c:	4605      	mov	r5, r0
   1039e:	f001 f831 	bl	11404 <_localeconv_r>
   103a2:	f8d0 a000 	ldr.w	sl, [r0]
   103a6:	4650      	mov	r0, sl
   103a8:	f7f0 fdd7 	bl	f5a <strlen>
   103ac:	2300      	movs	r3, #0
   103ae:	f894 b018 	ldrb.w	fp, [r4, #24]
   103b2:	ee08 0a10 	vmov	s16, r0
   103b6:	930a      	str	r3, [sp, #40]	; 0x28
   103b8:	6823      	ldr	r3, [r4, #0]
   103ba:	9305      	str	r3, [sp, #20]
   103bc:	f8d8 3000 	ldr.w	r3, [r8]
   103c0:	3307      	adds	r3, #7
   103c2:	f023 0307 	bic.w	r3, r3, #7
   103c6:	f103 0208 	add.w	r2, r3, #8
   103ca:	f8c8 2000 	str.w	r2, [r8]
   103ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   103d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   103d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   103da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   103de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   103e2:	f8cd 8018 	str.w	r8, [sp, #24]
   103e6:	9307      	str	r3, [sp, #28]
   103e8:	4b9e      	ldr	r3, [pc, #632]	; (10664 <_printf_float+0x2dc>)
   103ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   103ee:	f7f0 fc01 	bl	bf4 <__aeabi_dcmpun>
   103f2:	bb88      	cbnz	r0, 10458 <_printf_float+0xd0>
   103f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   103f8:	4b9a      	ldr	r3, [pc, #616]	; (10664 <_printf_float+0x2dc>)
   103fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   103fe:	f7f0 fae3 	bl	9c8 <__aeabi_dcmple>
   10402:	bb48      	cbnz	r0, 10458 <_printf_float+0xd0>
   10404:	2200      	movs	r2, #0
   10406:	2300      	movs	r3, #0
   10408:	4640      	mov	r0, r8
   1040a:	4649      	mov	r1, r9
   1040c:	f7f0 fad2 	bl	9b4 <__aeabi_dcmplt>
   10410:	b110      	cbz	r0, 10418 <_printf_float+0x90>
   10412:	232d      	movs	r3, #45	; 0x2d
   10414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10418:	4b93      	ldr	r3, [pc, #588]	; (10668 <_printf_float+0x2e0>)
   1041a:	4894      	ldr	r0, [pc, #592]	; (1066c <_printf_float+0x2e4>)
   1041c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   10420:	bf94      	ite	ls
   10422:	4698      	movls	r8, r3
   10424:	4680      	movhi	r8, r0
   10426:	2303      	movs	r3, #3
   10428:	f04f 0900 	mov.w	r9, #0
   1042c:	6123      	str	r3, [r4, #16]
   1042e:	9b05      	ldr	r3, [sp, #20]
   10430:	f023 0204 	bic.w	r2, r3, #4
   10434:	6022      	str	r2, [r4, #0]
   10436:	4633      	mov	r3, r6
   10438:	aa0b      	add	r2, sp, #44	; 0x2c
   1043a:	4621      	mov	r1, r4
   1043c:	4628      	mov	r0, r5
   1043e:	9700      	str	r7, [sp, #0]
   10440:	f004 fcc0 	bl	14dc4 <_printf_common>
   10444:	3001      	adds	r0, #1
   10446:	f040 8090 	bne.w	1056a <_printf_float+0x1e2>
   1044a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1044e:	b00d      	add	sp, #52	; 0x34
   10450:	ecbd 8b02 	vpop	{d8}
   10454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10458:	4642      	mov	r2, r8
   1045a:	464b      	mov	r3, r9
   1045c:	4640      	mov	r0, r8
   1045e:	4649      	mov	r1, r9
   10460:	f7f0 fbc8 	bl	bf4 <__aeabi_dcmpun>
   10464:	b140      	cbz	r0, 10478 <_printf_float+0xf0>
   10466:	464b      	mov	r3, r9
   10468:	4881      	ldr	r0, [pc, #516]	; (10670 <_printf_float+0x2e8>)
   1046a:	2b00      	cmp	r3, #0
   1046c:	bfbc      	itt	lt
   1046e:	232d      	movlt	r3, #45	; 0x2d
   10470:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   10474:	4b7f      	ldr	r3, [pc, #508]	; (10674 <_printf_float+0x2ec>)
   10476:	e7d1      	b.n	1041c <_printf_float+0x94>
   10478:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   1047c:	6863      	ldr	r3, [r4, #4]
   1047e:	9206      	str	r2, [sp, #24]
   10480:	1c5a      	adds	r2, r3, #1
   10482:	d13f      	bne.n	10504 <_printf_float+0x17c>
   10484:	2306      	movs	r3, #6
   10486:	6063      	str	r3, [r4, #4]
   10488:	9b05      	ldr	r3, [sp, #20]
   1048a:	4628      	mov	r0, r5
   1048c:	6861      	ldr	r1, [r4, #4]
   1048e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   10492:	2300      	movs	r3, #0
   10494:	9303      	str	r3, [sp, #12]
   10496:	ab0a      	add	r3, sp, #40	; 0x28
   10498:	6022      	str	r2, [r4, #0]
   1049a:	e9cd b301 	strd	fp, r3, [sp, #4]
   1049e:	ab09      	add	r3, sp, #36	; 0x24
   104a0:	ec49 8b10 	vmov	d0, r8, r9
   104a4:	9300      	str	r3, [sp, #0]
   104a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   104aa:	f004 fbeb 	bl	14c84 <__cvt>
   104ae:	9b06      	ldr	r3, [sp, #24]
   104b0:	4680      	mov	r8, r0
   104b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   104b4:	2b47      	cmp	r3, #71	; 0x47
   104b6:	d108      	bne.n	104ca <_printf_float+0x142>
   104b8:	1cc8      	adds	r0, r1, #3
   104ba:	db02      	blt.n	104c2 <_printf_float+0x13a>
   104bc:	6863      	ldr	r3, [r4, #4]
   104be:	4299      	cmp	r1, r3
   104c0:	dd41      	ble.n	10546 <_printf_float+0x1be>
   104c2:	f1ab 0b02 	sub.w	fp, fp, #2
   104c6:	fa5f fb8b 	uxtb.w	fp, fp
   104ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   104ce:	d820      	bhi.n	10512 <_printf_float+0x18a>
   104d0:	3901      	subs	r1, #1
   104d2:	465a      	mov	r2, fp
   104d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   104d8:	9109      	str	r1, [sp, #36]	; 0x24
   104da:	f004 fc35 	bl	14d48 <__exponent>
   104de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   104e0:	4681      	mov	r9, r0
   104e2:	1813      	adds	r3, r2, r0
   104e4:	2a01      	cmp	r2, #1
   104e6:	6123      	str	r3, [r4, #16]
   104e8:	dc02      	bgt.n	104f0 <_printf_float+0x168>
   104ea:	6822      	ldr	r2, [r4, #0]
   104ec:	07d2      	lsls	r2, r2, #31
   104ee:	d501      	bpl.n	104f4 <_printf_float+0x16c>
   104f0:	3301      	adds	r3, #1
   104f2:	6123      	str	r3, [r4, #16]
   104f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   104f8:	2b00      	cmp	r3, #0
   104fa:	d09c      	beq.n	10436 <_printf_float+0xae>
   104fc:	232d      	movs	r3, #45	; 0x2d
   104fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10502:	e798      	b.n	10436 <_printf_float+0xae>
   10504:	9a06      	ldr	r2, [sp, #24]
   10506:	2a47      	cmp	r2, #71	; 0x47
   10508:	d1be      	bne.n	10488 <_printf_float+0x100>
   1050a:	2b00      	cmp	r3, #0
   1050c:	d1bc      	bne.n	10488 <_printf_float+0x100>
   1050e:	2301      	movs	r3, #1
   10510:	e7b9      	b.n	10486 <_printf_float+0xfe>
   10512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   10516:	d118      	bne.n	1054a <_printf_float+0x1c2>
   10518:	2900      	cmp	r1, #0
   1051a:	6863      	ldr	r3, [r4, #4]
   1051c:	dd0b      	ble.n	10536 <_printf_float+0x1ae>
   1051e:	6121      	str	r1, [r4, #16]
   10520:	b913      	cbnz	r3, 10528 <_printf_float+0x1a0>
   10522:	6822      	ldr	r2, [r4, #0]
   10524:	07d0      	lsls	r0, r2, #31
   10526:	d502      	bpl.n	1052e <_printf_float+0x1a6>
   10528:	3301      	adds	r3, #1
   1052a:	440b      	add	r3, r1
   1052c:	6123      	str	r3, [r4, #16]
   1052e:	f04f 0900 	mov.w	r9, #0
   10532:	65a1      	str	r1, [r4, #88]	; 0x58
   10534:	e7de      	b.n	104f4 <_printf_float+0x16c>
   10536:	b913      	cbnz	r3, 1053e <_printf_float+0x1b6>
   10538:	6822      	ldr	r2, [r4, #0]
   1053a:	07d2      	lsls	r2, r2, #31
   1053c:	d501      	bpl.n	10542 <_printf_float+0x1ba>
   1053e:	3302      	adds	r3, #2
   10540:	e7f4      	b.n	1052c <_printf_float+0x1a4>
   10542:	2301      	movs	r3, #1
   10544:	e7f2      	b.n	1052c <_printf_float+0x1a4>
   10546:	f04f 0b67 	mov.w	fp, #103	; 0x67
   1054a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1054c:	4299      	cmp	r1, r3
   1054e:	db05      	blt.n	1055c <_printf_float+0x1d4>
   10550:	6823      	ldr	r3, [r4, #0]
   10552:	6121      	str	r1, [r4, #16]
   10554:	07d8      	lsls	r0, r3, #31
   10556:	d5ea      	bpl.n	1052e <_printf_float+0x1a6>
   10558:	1c4b      	adds	r3, r1, #1
   1055a:	e7e7      	b.n	1052c <_printf_float+0x1a4>
   1055c:	2900      	cmp	r1, #0
   1055e:	bfd4      	ite	le
   10560:	f1c1 0202 	rsble	r2, r1, #2
   10564:	2201      	movgt	r2, #1
   10566:	4413      	add	r3, r2
   10568:	e7e0      	b.n	1052c <_printf_float+0x1a4>
   1056a:	6823      	ldr	r3, [r4, #0]
   1056c:	055a      	lsls	r2, r3, #21
   1056e:	d407      	bmi.n	10580 <_printf_float+0x1f8>
   10570:	6923      	ldr	r3, [r4, #16]
   10572:	4642      	mov	r2, r8
   10574:	4631      	mov	r1, r6
   10576:	4628      	mov	r0, r5
   10578:	47b8      	blx	r7
   1057a:	3001      	adds	r0, #1
   1057c:	d12c      	bne.n	105d8 <_printf_float+0x250>
   1057e:	e764      	b.n	1044a <_printf_float+0xc2>
   10580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   10584:	f240 80e0 	bls.w	10748 <_printf_float+0x3c0>
   10588:	2200      	movs	r2, #0
   1058a:	2300      	movs	r3, #0
   1058c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   10590:	f7f0 fa06 	bl	9a0 <__aeabi_dcmpeq>
   10594:	2800      	cmp	r0, #0
   10596:	d034      	beq.n	10602 <_printf_float+0x27a>
   10598:	2301      	movs	r3, #1
   1059a:	4a37      	ldr	r2, [pc, #220]	; (10678 <_printf_float+0x2f0>)
   1059c:	4631      	mov	r1, r6
   1059e:	4628      	mov	r0, r5
   105a0:	47b8      	blx	r7
   105a2:	3001      	adds	r0, #1
   105a4:	f43f af51 	beq.w	1044a <_printf_float+0xc2>
   105a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   105ac:	429a      	cmp	r2, r3
   105ae:	db02      	blt.n	105b6 <_printf_float+0x22e>
   105b0:	6823      	ldr	r3, [r4, #0]
   105b2:	07d8      	lsls	r0, r3, #31
   105b4:	d510      	bpl.n	105d8 <_printf_float+0x250>
   105b6:	ee18 3a10 	vmov	r3, s16
   105ba:	4652      	mov	r2, sl
   105bc:	4631      	mov	r1, r6
   105be:	4628      	mov	r0, r5
   105c0:	47b8      	blx	r7
   105c2:	3001      	adds	r0, #1
   105c4:	f43f af41 	beq.w	1044a <_printf_float+0xc2>
   105c8:	f04f 0800 	mov.w	r8, #0
   105cc:	f104 091a 	add.w	r9, r4, #26
   105d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   105d2:	3b01      	subs	r3, #1
   105d4:	4543      	cmp	r3, r8
   105d6:	dc09      	bgt.n	105ec <_printf_float+0x264>
   105d8:	6823      	ldr	r3, [r4, #0]
   105da:	079b      	lsls	r3, r3, #30
   105dc:	f100 8105 	bmi.w	107ea <_printf_float+0x462>
   105e0:	68e0      	ldr	r0, [r4, #12]
   105e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   105e4:	4298      	cmp	r0, r3
   105e6:	bfb8      	it	lt
   105e8:	4618      	movlt	r0, r3
   105ea:	e730      	b.n	1044e <_printf_float+0xc6>
   105ec:	2301      	movs	r3, #1
   105ee:	464a      	mov	r2, r9
   105f0:	4631      	mov	r1, r6
   105f2:	4628      	mov	r0, r5
   105f4:	47b8      	blx	r7
   105f6:	3001      	adds	r0, #1
   105f8:	f43f af27 	beq.w	1044a <_printf_float+0xc2>
   105fc:	f108 0801 	add.w	r8, r8, #1
   10600:	e7e6      	b.n	105d0 <_printf_float+0x248>
   10602:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10604:	2b00      	cmp	r3, #0
   10606:	dc39      	bgt.n	1067c <_printf_float+0x2f4>
   10608:	2301      	movs	r3, #1
   1060a:	4a1b      	ldr	r2, [pc, #108]	; (10678 <_printf_float+0x2f0>)
   1060c:	4631      	mov	r1, r6
   1060e:	4628      	mov	r0, r5
   10610:	47b8      	blx	r7
   10612:	3001      	adds	r0, #1
   10614:	f43f af19 	beq.w	1044a <_printf_float+0xc2>
   10618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1061c:	4313      	orrs	r3, r2
   1061e:	d102      	bne.n	10626 <_printf_float+0x29e>
   10620:	6823      	ldr	r3, [r4, #0]
   10622:	07d9      	lsls	r1, r3, #31
   10624:	d5d8      	bpl.n	105d8 <_printf_float+0x250>
   10626:	ee18 3a10 	vmov	r3, s16
   1062a:	4652      	mov	r2, sl
   1062c:	4631      	mov	r1, r6
   1062e:	4628      	mov	r0, r5
   10630:	47b8      	blx	r7
   10632:	3001      	adds	r0, #1
   10634:	f43f af09 	beq.w	1044a <_printf_float+0xc2>
   10638:	f04f 0900 	mov.w	r9, #0
   1063c:	f104 0a1a 	add.w	sl, r4, #26
   10640:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10642:	425b      	negs	r3, r3
   10644:	454b      	cmp	r3, r9
   10646:	dc01      	bgt.n	1064c <_printf_float+0x2c4>
   10648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1064a:	e792      	b.n	10572 <_printf_float+0x1ea>
   1064c:	2301      	movs	r3, #1
   1064e:	4652      	mov	r2, sl
   10650:	4631      	mov	r1, r6
   10652:	4628      	mov	r0, r5
   10654:	47b8      	blx	r7
   10656:	3001      	adds	r0, #1
   10658:	f43f aef7 	beq.w	1044a <_printf_float+0xc2>
   1065c:	f109 0901 	add.w	r9, r9, #1
   10660:	e7ee      	b.n	10640 <_printf_float+0x2b8>
   10662:	bf00      	nop
   10664:	7fefffff 	.word	0x7fefffff
   10668:	00018821 	.word	0x00018821
   1066c:	00018825 	.word	0x00018825
   10670:	0001882d 	.word	0x0001882d
   10674:	00018829 	.word	0x00018829
   10678:	0001795a 	.word	0x0001795a
   1067c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1067e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   10680:	429a      	cmp	r2, r3
   10682:	bfa8      	it	ge
   10684:	461a      	movge	r2, r3
   10686:	2a00      	cmp	r2, #0
   10688:	4691      	mov	r9, r2
   1068a:	dc37      	bgt.n	106fc <_printf_float+0x374>
   1068c:	f04f 0b00 	mov.w	fp, #0
   10690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   10694:	f104 021a 	add.w	r2, r4, #26
   10698:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1069a:	9305      	str	r3, [sp, #20]
   1069c:	eba3 0309 	sub.w	r3, r3, r9
   106a0:	455b      	cmp	r3, fp
   106a2:	dc33      	bgt.n	1070c <_printf_float+0x384>
   106a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   106a8:	429a      	cmp	r2, r3
   106aa:	db3b      	blt.n	10724 <_printf_float+0x39c>
   106ac:	6823      	ldr	r3, [r4, #0]
   106ae:	07da      	lsls	r2, r3, #31
   106b0:	d438      	bmi.n	10724 <_printf_float+0x39c>
   106b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   106b4:	9a05      	ldr	r2, [sp, #20]
   106b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   106b8:	1a9a      	subs	r2, r3, r2
   106ba:	eba3 0901 	sub.w	r9, r3, r1
   106be:	4591      	cmp	r9, r2
   106c0:	bfa8      	it	ge
   106c2:	4691      	movge	r9, r2
   106c4:	f1b9 0f00 	cmp.w	r9, #0
   106c8:	dc35      	bgt.n	10736 <_printf_float+0x3ae>
   106ca:	f04f 0800 	mov.w	r8, #0
   106ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   106d2:	f104 0a1a 	add.w	sl, r4, #26
   106d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   106da:	1a9b      	subs	r3, r3, r2
   106dc:	eba3 0309 	sub.w	r3, r3, r9
   106e0:	4543      	cmp	r3, r8
   106e2:	f77f af79 	ble.w	105d8 <_printf_float+0x250>
   106e6:	2301      	movs	r3, #1
   106e8:	4652      	mov	r2, sl
   106ea:	4631      	mov	r1, r6
   106ec:	4628      	mov	r0, r5
   106ee:	47b8      	blx	r7
   106f0:	3001      	adds	r0, #1
   106f2:	f43f aeaa 	beq.w	1044a <_printf_float+0xc2>
   106f6:	f108 0801 	add.w	r8, r8, #1
   106fa:	e7ec      	b.n	106d6 <_printf_float+0x34e>
   106fc:	4613      	mov	r3, r2
   106fe:	4631      	mov	r1, r6
   10700:	4642      	mov	r2, r8
   10702:	4628      	mov	r0, r5
   10704:	47b8      	blx	r7
   10706:	3001      	adds	r0, #1
   10708:	d1c0      	bne.n	1068c <_printf_float+0x304>
   1070a:	e69e      	b.n	1044a <_printf_float+0xc2>
   1070c:	2301      	movs	r3, #1
   1070e:	4631      	mov	r1, r6
   10710:	4628      	mov	r0, r5
   10712:	9205      	str	r2, [sp, #20]
   10714:	47b8      	blx	r7
   10716:	3001      	adds	r0, #1
   10718:	f43f ae97 	beq.w	1044a <_printf_float+0xc2>
   1071c:	f10b 0b01 	add.w	fp, fp, #1
   10720:	9a05      	ldr	r2, [sp, #20]
   10722:	e7b9      	b.n	10698 <_printf_float+0x310>
   10724:	ee18 3a10 	vmov	r3, s16
   10728:	4652      	mov	r2, sl
   1072a:	4631      	mov	r1, r6
   1072c:	4628      	mov	r0, r5
   1072e:	47b8      	blx	r7
   10730:	3001      	adds	r0, #1
   10732:	d1be      	bne.n	106b2 <_printf_float+0x32a>
   10734:	e689      	b.n	1044a <_printf_float+0xc2>
   10736:	9a05      	ldr	r2, [sp, #20]
   10738:	464b      	mov	r3, r9
   1073a:	4631      	mov	r1, r6
   1073c:	4628      	mov	r0, r5
   1073e:	4442      	add	r2, r8
   10740:	47b8      	blx	r7
   10742:	3001      	adds	r0, #1
   10744:	d1c1      	bne.n	106ca <_printf_float+0x342>
   10746:	e680      	b.n	1044a <_printf_float+0xc2>
   10748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1074a:	2a01      	cmp	r2, #1
   1074c:	dc01      	bgt.n	10752 <_printf_float+0x3ca>
   1074e:	07db      	lsls	r3, r3, #31
   10750:	d538      	bpl.n	107c4 <_printf_float+0x43c>
   10752:	2301      	movs	r3, #1
   10754:	4642      	mov	r2, r8
   10756:	4631      	mov	r1, r6
   10758:	4628      	mov	r0, r5
   1075a:	47b8      	blx	r7
   1075c:	3001      	adds	r0, #1
   1075e:	f43f ae74 	beq.w	1044a <_printf_float+0xc2>
   10762:	ee18 3a10 	vmov	r3, s16
   10766:	4652      	mov	r2, sl
   10768:	4631      	mov	r1, r6
   1076a:	4628      	mov	r0, r5
   1076c:	47b8      	blx	r7
   1076e:	3001      	adds	r0, #1
   10770:	f43f ae6b 	beq.w	1044a <_printf_float+0xc2>
   10774:	2200      	movs	r2, #0
   10776:	2300      	movs	r3, #0
   10778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1077c:	f7f0 f910 	bl	9a0 <__aeabi_dcmpeq>
   10780:	b9d8      	cbnz	r0, 107ba <_printf_float+0x432>
   10782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10784:	f108 0201 	add.w	r2, r8, #1
   10788:	3b01      	subs	r3, #1
   1078a:	4631      	mov	r1, r6
   1078c:	4628      	mov	r0, r5
   1078e:	47b8      	blx	r7
   10790:	3001      	adds	r0, #1
   10792:	d10e      	bne.n	107b2 <_printf_float+0x42a>
   10794:	e659      	b.n	1044a <_printf_float+0xc2>
   10796:	2301      	movs	r3, #1
   10798:	4652      	mov	r2, sl
   1079a:	4631      	mov	r1, r6
   1079c:	4628      	mov	r0, r5
   1079e:	47b8      	blx	r7
   107a0:	3001      	adds	r0, #1
   107a2:	f43f ae52 	beq.w	1044a <_printf_float+0xc2>
   107a6:	f108 0801 	add.w	r8, r8, #1
   107aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107ac:	3b01      	subs	r3, #1
   107ae:	4543      	cmp	r3, r8
   107b0:	dcf1      	bgt.n	10796 <_printf_float+0x40e>
   107b2:	464b      	mov	r3, r9
   107b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   107b8:	e6dc      	b.n	10574 <_printf_float+0x1ec>
   107ba:	f04f 0800 	mov.w	r8, #0
   107be:	f104 0a1a 	add.w	sl, r4, #26
   107c2:	e7f2      	b.n	107aa <_printf_float+0x422>
   107c4:	2301      	movs	r3, #1
   107c6:	4642      	mov	r2, r8
   107c8:	e7df      	b.n	1078a <_printf_float+0x402>
   107ca:	2301      	movs	r3, #1
   107cc:	464a      	mov	r2, r9
   107ce:	4631      	mov	r1, r6
   107d0:	4628      	mov	r0, r5
   107d2:	47b8      	blx	r7
   107d4:	3001      	adds	r0, #1
   107d6:	f43f ae38 	beq.w	1044a <_printf_float+0xc2>
   107da:	f108 0801 	add.w	r8, r8, #1
   107de:	68e3      	ldr	r3, [r4, #12]
   107e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   107e2:	1a5b      	subs	r3, r3, r1
   107e4:	4543      	cmp	r3, r8
   107e6:	dcf0      	bgt.n	107ca <_printf_float+0x442>
   107e8:	e6fa      	b.n	105e0 <_printf_float+0x258>
   107ea:	f04f 0800 	mov.w	r8, #0
   107ee:	f104 0919 	add.w	r9, r4, #25
   107f2:	e7f4      	b.n	107de <_printf_float+0x456>

000107f4 <_printf_i>:
   107f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   107f8:	7e0f      	ldrb	r7, [r1, #24]
   107fa:	4691      	mov	r9, r2
   107fc:	4680      	mov	r8, r0
   107fe:	460c      	mov	r4, r1
   10800:	2f78      	cmp	r7, #120	; 0x78
   10802:	469a      	mov	sl, r3
   10804:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   10806:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1080a:	d807      	bhi.n	1081c <_printf_i+0x28>
   1080c:	2f62      	cmp	r7, #98	; 0x62
   1080e:	d80a      	bhi.n	10826 <_printf_i+0x32>
   10810:	2f00      	cmp	r7, #0
   10812:	f000 80d8 	beq.w	109c6 <_printf_i+0x1d2>
   10816:	2f58      	cmp	r7, #88	; 0x58
   10818:	f000 80a3 	beq.w	10962 <_printf_i+0x16e>
   1081c:	f104 0542 	add.w	r5, r4, #66	; 0x42
   10820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   10824:	e03a      	b.n	1089c <_printf_i+0xa8>
   10826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1082a:	2b15      	cmp	r3, #21
   1082c:	d8f6      	bhi.n	1081c <_printf_i+0x28>
   1082e:	a101      	add	r1, pc, #4	; (adr r1, 10834 <_printf_i+0x40>)
   10830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   10834:	0001088d 	.word	0x0001088d
   10838:	000108a1 	.word	0x000108a1
   1083c:	0001081d 	.word	0x0001081d
   10840:	0001081d 	.word	0x0001081d
   10844:	0001081d 	.word	0x0001081d
   10848:	0001081d 	.word	0x0001081d
   1084c:	000108a1 	.word	0x000108a1
   10850:	0001081d 	.word	0x0001081d
   10854:	0001081d 	.word	0x0001081d
   10858:	0001081d 	.word	0x0001081d
   1085c:	0001081d 	.word	0x0001081d
   10860:	000109ad 	.word	0x000109ad
   10864:	000108d1 	.word	0x000108d1
   10868:	0001098f 	.word	0x0001098f
   1086c:	0001081d 	.word	0x0001081d
   10870:	0001081d 	.word	0x0001081d
   10874:	000109cf 	.word	0x000109cf
   10878:	0001081d 	.word	0x0001081d
   1087c:	000108d1 	.word	0x000108d1
   10880:	0001081d 	.word	0x0001081d
   10884:	0001081d 	.word	0x0001081d
   10888:	00010997 	.word	0x00010997
   1088c:	682b      	ldr	r3, [r5, #0]
   1088e:	1d1a      	adds	r2, r3, #4
   10890:	681b      	ldr	r3, [r3, #0]
   10892:	602a      	str	r2, [r5, #0]
   10894:	f104 0542 	add.w	r5, r4, #66	; 0x42
   10898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1089c:	2301      	movs	r3, #1
   1089e:	e0a3      	b.n	109e8 <_printf_i+0x1f4>
   108a0:	6820      	ldr	r0, [r4, #0]
   108a2:	6829      	ldr	r1, [r5, #0]
   108a4:	0606      	lsls	r6, r0, #24
   108a6:	f101 0304 	add.w	r3, r1, #4
   108aa:	d50a      	bpl.n	108c2 <_printf_i+0xce>
   108ac:	680e      	ldr	r6, [r1, #0]
   108ae:	602b      	str	r3, [r5, #0]
   108b0:	2e00      	cmp	r6, #0
   108b2:	da03      	bge.n	108bc <_printf_i+0xc8>
   108b4:	232d      	movs	r3, #45	; 0x2d
   108b6:	4276      	negs	r6, r6
   108b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   108bc:	485e      	ldr	r0, [pc, #376]	; (10a38 <_printf_i+0x244>)
   108be:	230a      	movs	r3, #10
   108c0:	e019      	b.n	108f6 <_printf_i+0x102>
   108c2:	680e      	ldr	r6, [r1, #0]
   108c4:	f010 0f40 	tst.w	r0, #64	; 0x40
   108c8:	602b      	str	r3, [r5, #0]
   108ca:	bf18      	it	ne
   108cc:	b236      	sxthne	r6, r6
   108ce:	e7ef      	b.n	108b0 <_printf_i+0xbc>
   108d0:	682b      	ldr	r3, [r5, #0]
   108d2:	6820      	ldr	r0, [r4, #0]
   108d4:	1d19      	adds	r1, r3, #4
   108d6:	6029      	str	r1, [r5, #0]
   108d8:	0601      	lsls	r1, r0, #24
   108da:	d501      	bpl.n	108e0 <_printf_i+0xec>
   108dc:	681e      	ldr	r6, [r3, #0]
   108de:	e002      	b.n	108e6 <_printf_i+0xf2>
   108e0:	0646      	lsls	r6, r0, #25
   108e2:	d5fb      	bpl.n	108dc <_printf_i+0xe8>
   108e4:	881e      	ldrh	r6, [r3, #0]
   108e6:	2f6f      	cmp	r7, #111	; 0x6f
   108e8:	4853      	ldr	r0, [pc, #332]	; (10a38 <_printf_i+0x244>)
   108ea:	bf0c      	ite	eq
   108ec:	2308      	moveq	r3, #8
   108ee:	230a      	movne	r3, #10
   108f0:	2100      	movs	r1, #0
   108f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   108f6:	6865      	ldr	r5, [r4, #4]
   108f8:	2d00      	cmp	r5, #0
   108fa:	60a5      	str	r5, [r4, #8]
   108fc:	bfa2      	ittt	ge
   108fe:	6821      	ldrge	r1, [r4, #0]
   10900:	f021 0104 	bicge.w	r1, r1, #4
   10904:	6021      	strge	r1, [r4, #0]
   10906:	b90e      	cbnz	r6, 1090c <_printf_i+0x118>
   10908:	2d00      	cmp	r5, #0
   1090a:	d04d      	beq.n	109a8 <_printf_i+0x1b4>
   1090c:	4615      	mov	r5, r2
   1090e:	fbb6 f1f3 	udiv	r1, r6, r3
   10912:	fb03 6711 	mls	r7, r3, r1, r6
   10916:	5dc7      	ldrb	r7, [r0, r7]
   10918:	f805 7d01 	strb.w	r7, [r5, #-1]!
   1091c:	4637      	mov	r7, r6
   1091e:	460e      	mov	r6, r1
   10920:	42bb      	cmp	r3, r7
   10922:	d9f4      	bls.n	1090e <_printf_i+0x11a>
   10924:	2b08      	cmp	r3, #8
   10926:	d10b      	bne.n	10940 <_printf_i+0x14c>
   10928:	6823      	ldr	r3, [r4, #0]
   1092a:	07de      	lsls	r6, r3, #31
   1092c:	d508      	bpl.n	10940 <_printf_i+0x14c>
   1092e:	6923      	ldr	r3, [r4, #16]
   10930:	6861      	ldr	r1, [r4, #4]
   10932:	4299      	cmp	r1, r3
   10934:	bfde      	ittt	le
   10936:	2330      	movle	r3, #48	; 0x30
   10938:	f805 3c01 	strble.w	r3, [r5, #-1]
   1093c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   10940:	1b52      	subs	r2, r2, r5
   10942:	6122      	str	r2, [r4, #16]
   10944:	464b      	mov	r3, r9
   10946:	aa03      	add	r2, sp, #12
   10948:	4621      	mov	r1, r4
   1094a:	4640      	mov	r0, r8
   1094c:	f8cd a000 	str.w	sl, [sp]
   10950:	f004 fa38 	bl	14dc4 <_printf_common>
   10954:	3001      	adds	r0, #1
   10956:	d14c      	bne.n	109f2 <_printf_i+0x1fe>
   10958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1095c:	b004      	add	sp, #16
   1095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10962:	4835      	ldr	r0, [pc, #212]	; (10a38 <_printf_i+0x244>)
   10964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   10968:	6829      	ldr	r1, [r5, #0]
   1096a:	6823      	ldr	r3, [r4, #0]
   1096c:	f851 6b04 	ldr.w	r6, [r1], #4
   10970:	6029      	str	r1, [r5, #0]
   10972:	061d      	lsls	r5, r3, #24
   10974:	d514      	bpl.n	109a0 <_printf_i+0x1ac>
   10976:	07df      	lsls	r7, r3, #31
   10978:	bf44      	itt	mi
   1097a:	f043 0320 	orrmi.w	r3, r3, #32
   1097e:	6023      	strmi	r3, [r4, #0]
   10980:	b91e      	cbnz	r6, 1098a <_printf_i+0x196>
   10982:	6823      	ldr	r3, [r4, #0]
   10984:	f023 0320 	bic.w	r3, r3, #32
   10988:	6023      	str	r3, [r4, #0]
   1098a:	2310      	movs	r3, #16
   1098c:	e7b0      	b.n	108f0 <_printf_i+0xfc>
   1098e:	6823      	ldr	r3, [r4, #0]
   10990:	f043 0320 	orr.w	r3, r3, #32
   10994:	6023      	str	r3, [r4, #0]
   10996:	2378      	movs	r3, #120	; 0x78
   10998:	4828      	ldr	r0, [pc, #160]	; (10a3c <_printf_i+0x248>)
   1099a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1099e:	e7e3      	b.n	10968 <_printf_i+0x174>
   109a0:	0659      	lsls	r1, r3, #25
   109a2:	bf48      	it	mi
   109a4:	b2b6      	uxthmi	r6, r6
   109a6:	e7e6      	b.n	10976 <_printf_i+0x182>
   109a8:	4615      	mov	r5, r2
   109aa:	e7bb      	b.n	10924 <_printf_i+0x130>
   109ac:	682b      	ldr	r3, [r5, #0]
   109ae:	6826      	ldr	r6, [r4, #0]
   109b0:	1d18      	adds	r0, r3, #4
   109b2:	6961      	ldr	r1, [r4, #20]
   109b4:	6028      	str	r0, [r5, #0]
   109b6:	0635      	lsls	r5, r6, #24
   109b8:	681b      	ldr	r3, [r3, #0]
   109ba:	d501      	bpl.n	109c0 <_printf_i+0x1cc>
   109bc:	6019      	str	r1, [r3, #0]
   109be:	e002      	b.n	109c6 <_printf_i+0x1d2>
   109c0:	0670      	lsls	r0, r6, #25
   109c2:	d5fb      	bpl.n	109bc <_printf_i+0x1c8>
   109c4:	8019      	strh	r1, [r3, #0]
   109c6:	2300      	movs	r3, #0
   109c8:	4615      	mov	r5, r2
   109ca:	6123      	str	r3, [r4, #16]
   109cc:	e7ba      	b.n	10944 <_printf_i+0x150>
   109ce:	682b      	ldr	r3, [r5, #0]
   109d0:	2100      	movs	r1, #0
   109d2:	1d1a      	adds	r2, r3, #4
   109d4:	602a      	str	r2, [r5, #0]
   109d6:	681d      	ldr	r5, [r3, #0]
   109d8:	6862      	ldr	r2, [r4, #4]
   109da:	4628      	mov	r0, r5
   109dc:	f004 f8dd 	bl	14b9a <memchr>
   109e0:	b108      	cbz	r0, 109e6 <_printf_i+0x1f2>
   109e2:	1b40      	subs	r0, r0, r5
   109e4:	6060      	str	r0, [r4, #4]
   109e6:	6863      	ldr	r3, [r4, #4]
   109e8:	6123      	str	r3, [r4, #16]
   109ea:	2300      	movs	r3, #0
   109ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   109f0:	e7a8      	b.n	10944 <_printf_i+0x150>
   109f2:	6923      	ldr	r3, [r4, #16]
   109f4:	462a      	mov	r2, r5
   109f6:	4649      	mov	r1, r9
   109f8:	4640      	mov	r0, r8
   109fa:	47d0      	blx	sl
   109fc:	3001      	adds	r0, #1
   109fe:	d0ab      	beq.n	10958 <_printf_i+0x164>
   10a00:	6823      	ldr	r3, [r4, #0]
   10a02:	079b      	lsls	r3, r3, #30
   10a04:	d413      	bmi.n	10a2e <_printf_i+0x23a>
   10a06:	68e0      	ldr	r0, [r4, #12]
   10a08:	9b03      	ldr	r3, [sp, #12]
   10a0a:	4298      	cmp	r0, r3
   10a0c:	bfb8      	it	lt
   10a0e:	4618      	movlt	r0, r3
   10a10:	e7a4      	b.n	1095c <_printf_i+0x168>
   10a12:	2301      	movs	r3, #1
   10a14:	4632      	mov	r2, r6
   10a16:	4649      	mov	r1, r9
   10a18:	4640      	mov	r0, r8
   10a1a:	47d0      	blx	sl
   10a1c:	3001      	adds	r0, #1
   10a1e:	d09b      	beq.n	10958 <_printf_i+0x164>
   10a20:	3501      	adds	r5, #1
   10a22:	68e3      	ldr	r3, [r4, #12]
   10a24:	9903      	ldr	r1, [sp, #12]
   10a26:	1a5b      	subs	r3, r3, r1
   10a28:	42ab      	cmp	r3, r5
   10a2a:	dcf2      	bgt.n	10a12 <_printf_i+0x21e>
   10a2c:	e7eb      	b.n	10a06 <_printf_i+0x212>
   10a2e:	2500      	movs	r5, #0
   10a30:	f104 0619 	add.w	r6, r4, #25
   10a34:	e7f5      	b.n	10a22 <_printf_i+0x22e>
   10a36:	bf00      	nop
   10a38:	00018831 	.word	0x00018831
   10a3c:	00018842 	.word	0x00018842

00010a40 <iprintf>:
   10a40:	b40f      	push	{r0, r1, r2, r3}
   10a42:	4b0a      	ldr	r3, [pc, #40]	; (10a6c <iprintf+0x2c>)
   10a44:	b513      	push	{r0, r1, r4, lr}
   10a46:	681c      	ldr	r4, [r3, #0]
   10a48:	b124      	cbz	r4, 10a54 <iprintf+0x14>
   10a4a:	69a3      	ldr	r3, [r4, #24]
   10a4c:	b913      	cbnz	r3, 10a54 <iprintf+0x14>
   10a4e:	4620      	mov	r0, r4
   10a50:	f000 fa14 	bl	10e7c <__sinit>
   10a54:	ab05      	add	r3, sp, #20
   10a56:	9a04      	ldr	r2, [sp, #16]
   10a58:	68a1      	ldr	r1, [r4, #8]
   10a5a:	4620      	mov	r0, r4
   10a5c:	9301      	str	r3, [sp, #4]
   10a5e:	f7ff fb63 	bl	10128 <_vfiprintf_r>
   10a62:	b002      	add	sp, #8
   10a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a68:	b004      	add	sp, #16
   10a6a:	4770      	bx	lr
   10a6c:	200002c8 	.word	0x200002c8

00010a70 <_sbrk_r>:
   10a70:	b538      	push	{r3, r4, r5, lr}
   10a72:	2300      	movs	r3, #0
   10a74:	4d05      	ldr	r5, [pc, #20]	; (10a8c <_sbrk_r+0x1c>)
   10a76:	4604      	mov	r4, r0
   10a78:	4608      	mov	r0, r1
   10a7a:	602b      	str	r3, [r5, #0]
   10a7c:	f7f7 f954 	bl	7d28 <_sbrk>
   10a80:	1c43      	adds	r3, r0, #1
   10a82:	d102      	bne.n	10a8a <_sbrk_r+0x1a>
   10a84:	682b      	ldr	r3, [r5, #0]
   10a86:	b103      	cbz	r3, 10a8a <_sbrk_r+0x1a>
   10a88:	6023      	str	r3, [r4, #0]
   10a8a:	bd38      	pop	{r3, r4, r5, pc}
   10a8c:	20003b78 	.word	0x20003b78

00010a90 <raise>:
   10a90:	4b02      	ldr	r3, [pc, #8]	; (10a9c <raise+0xc>)
   10a92:	4601      	mov	r1, r0
   10a94:	6818      	ldr	r0, [r3, #0]
   10a96:	f004 ba05 	b.w	14ea4 <_raise_r>
   10a9a:	bf00      	nop
   10a9c:	200002c8 	.word	0x200002c8

00010aa0 <_kill_r>:
   10aa0:	b538      	push	{r3, r4, r5, lr}
   10aa2:	2300      	movs	r3, #0
   10aa4:	4d06      	ldr	r5, [pc, #24]	; (10ac0 <_kill_r+0x20>)
   10aa6:	4604      	mov	r4, r0
   10aa8:	4608      	mov	r0, r1
   10aaa:	4611      	mov	r1, r2
   10aac:	602b      	str	r3, [r5, #0]
   10aae:	f001 fd7f 	bl	125b0 <_kill>
   10ab2:	1c43      	adds	r3, r0, #1
   10ab4:	d102      	bne.n	10abc <_kill_r+0x1c>
   10ab6:	682b      	ldr	r3, [r5, #0]
   10ab8:	b103      	cbz	r3, 10abc <_kill_r+0x1c>
   10aba:	6023      	str	r3, [r4, #0]
   10abc:	bd38      	pop	{r3, r4, r5, pc}
   10abe:	bf00      	nop
   10ac0:	20003b78 	.word	0x20003b78

00010ac4 <strtod>:
   10ac4:	460a      	mov	r2, r1
   10ac6:	4601      	mov	r1, r0
   10ac8:	4802      	ldr	r0, [pc, #8]	; (10ad4 <strtod+0x10>)
   10aca:	4b03      	ldr	r3, [pc, #12]	; (10ad8 <strtod+0x14>)
   10acc:	6800      	ldr	r0, [r0, #0]
   10ace:	f7f4 bb3b 	b.w	5148 <_strtod_l>
   10ad2:	bf00      	nop
   10ad4:	200002c8 	.word	0x200002c8
   10ad8:	2000032c 	.word	0x2000032c

00010adc <vsniprintf>:
   10adc:	b507      	push	{r0, r1, r2, lr}
   10ade:	9300      	str	r3, [sp, #0]
   10ae0:	4613      	mov	r3, r2
   10ae2:	460a      	mov	r2, r1
   10ae4:	4601      	mov	r1, r0
   10ae6:	4803      	ldr	r0, [pc, #12]	; (10af4 <vsniprintf+0x18>)
   10ae8:	6800      	ldr	r0, [r0, #0]
   10aea:	f004 fa2d 	bl	14f48 <_vsniprintf_r>
   10aee:	b003      	add	sp, #12
   10af0:	f85d fb04 	ldr.w	pc, [sp], #4
   10af4:	200002c8 	.word	0x200002c8

00010af8 <__swbuf_r>:
   10af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10afa:	460e      	mov	r6, r1
   10afc:	4614      	mov	r4, r2
   10afe:	4605      	mov	r5, r0
   10b00:	b118      	cbz	r0, 10b0a <__swbuf_r+0x12>
   10b02:	6983      	ldr	r3, [r0, #24]
   10b04:	b90b      	cbnz	r3, 10b0a <__swbuf_r+0x12>
   10b06:	f000 f9b9 	bl	10e7c <__sinit>
   10b0a:	4b21      	ldr	r3, [pc, #132]	; (10b90 <__swbuf_r+0x98>)
   10b0c:	429c      	cmp	r4, r3
   10b0e:	d12b      	bne.n	10b68 <__swbuf_r+0x70>
   10b10:	686c      	ldr	r4, [r5, #4]
   10b12:	69a3      	ldr	r3, [r4, #24]
   10b14:	60a3      	str	r3, [r4, #8]
   10b16:	89a3      	ldrh	r3, [r4, #12]
   10b18:	071a      	lsls	r2, r3, #28
   10b1a:	d52f      	bpl.n	10b7c <__swbuf_r+0x84>
   10b1c:	6923      	ldr	r3, [r4, #16]
   10b1e:	b36b      	cbz	r3, 10b7c <__swbuf_r+0x84>
   10b20:	6923      	ldr	r3, [r4, #16]
   10b22:	b2f6      	uxtb	r6, r6
   10b24:	6820      	ldr	r0, [r4, #0]
   10b26:	4637      	mov	r7, r6
   10b28:	1ac0      	subs	r0, r0, r3
   10b2a:	6963      	ldr	r3, [r4, #20]
   10b2c:	4283      	cmp	r3, r0
   10b2e:	dc04      	bgt.n	10b3a <__swbuf_r+0x42>
   10b30:	4621      	mov	r1, r4
   10b32:	4628      	mov	r0, r5
   10b34:	f000 f924 	bl	10d80 <_fflush_r>
   10b38:	bb30      	cbnz	r0, 10b88 <__swbuf_r+0x90>
   10b3a:	68a3      	ldr	r3, [r4, #8]
   10b3c:	3001      	adds	r0, #1
   10b3e:	3b01      	subs	r3, #1
   10b40:	60a3      	str	r3, [r4, #8]
   10b42:	6823      	ldr	r3, [r4, #0]
   10b44:	1c5a      	adds	r2, r3, #1
   10b46:	6022      	str	r2, [r4, #0]
   10b48:	701e      	strb	r6, [r3, #0]
   10b4a:	6963      	ldr	r3, [r4, #20]
   10b4c:	4283      	cmp	r3, r0
   10b4e:	d004      	beq.n	10b5a <__swbuf_r+0x62>
   10b50:	89a3      	ldrh	r3, [r4, #12]
   10b52:	07db      	lsls	r3, r3, #31
   10b54:	d506      	bpl.n	10b64 <__swbuf_r+0x6c>
   10b56:	2e0a      	cmp	r6, #10
   10b58:	d104      	bne.n	10b64 <__swbuf_r+0x6c>
   10b5a:	4621      	mov	r1, r4
   10b5c:	4628      	mov	r0, r5
   10b5e:	f000 f90f 	bl	10d80 <_fflush_r>
   10b62:	b988      	cbnz	r0, 10b88 <__swbuf_r+0x90>
   10b64:	4638      	mov	r0, r7
   10b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b68:	4b0a      	ldr	r3, [pc, #40]	; (10b94 <__swbuf_r+0x9c>)
   10b6a:	429c      	cmp	r4, r3
   10b6c:	d101      	bne.n	10b72 <__swbuf_r+0x7a>
   10b6e:	68ac      	ldr	r4, [r5, #8]
   10b70:	e7cf      	b.n	10b12 <__swbuf_r+0x1a>
   10b72:	4b09      	ldr	r3, [pc, #36]	; (10b98 <__swbuf_r+0xa0>)
   10b74:	429c      	cmp	r4, r3
   10b76:	bf08      	it	eq
   10b78:	68ec      	ldreq	r4, [r5, #12]
   10b7a:	e7ca      	b.n	10b12 <__swbuf_r+0x1a>
   10b7c:	4621      	mov	r1, r4
   10b7e:	4628      	mov	r0, r5
   10b80:	f000 f80c 	bl	10b9c <__swsetup_r>
   10b84:	2800      	cmp	r0, #0
   10b86:	d0cb      	beq.n	10b20 <__swbuf_r+0x28>
   10b88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10b8c:	e7ea      	b.n	10b64 <__swbuf_r+0x6c>
   10b8e:	bf00      	nop
   10b90:	0001741c 	.word	0x0001741c
   10b94:	0001743c 	.word	0x0001743c
   10b98:	000173fc 	.word	0x000173fc

00010b9c <__swsetup_r>:
   10b9c:	4b32      	ldr	r3, [pc, #200]	; (10c68 <__swsetup_r+0xcc>)
   10b9e:	b570      	push	{r4, r5, r6, lr}
   10ba0:	681d      	ldr	r5, [r3, #0]
   10ba2:	4606      	mov	r6, r0
   10ba4:	460c      	mov	r4, r1
   10ba6:	b125      	cbz	r5, 10bb2 <__swsetup_r+0x16>
   10ba8:	69ab      	ldr	r3, [r5, #24]
   10baa:	b913      	cbnz	r3, 10bb2 <__swsetup_r+0x16>
   10bac:	4628      	mov	r0, r5
   10bae:	f000 f965 	bl	10e7c <__sinit>
   10bb2:	4b2e      	ldr	r3, [pc, #184]	; (10c6c <__swsetup_r+0xd0>)
   10bb4:	429c      	cmp	r4, r3
   10bb6:	d10f      	bne.n	10bd8 <__swsetup_r+0x3c>
   10bb8:	686c      	ldr	r4, [r5, #4]
   10bba:	89a3      	ldrh	r3, [r4, #12]
   10bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10bc0:	0719      	lsls	r1, r3, #28
   10bc2:	d42c      	bmi.n	10c1e <__swsetup_r+0x82>
   10bc4:	06dd      	lsls	r5, r3, #27
   10bc6:	d411      	bmi.n	10bec <__swsetup_r+0x50>
   10bc8:	2309      	movs	r3, #9
   10bca:	6033      	str	r3, [r6, #0]
   10bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   10bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10bd4:	81a3      	strh	r3, [r4, #12]
   10bd6:	e03e      	b.n	10c56 <__swsetup_r+0xba>
   10bd8:	4b25      	ldr	r3, [pc, #148]	; (10c70 <__swsetup_r+0xd4>)
   10bda:	429c      	cmp	r4, r3
   10bdc:	d101      	bne.n	10be2 <__swsetup_r+0x46>
   10bde:	68ac      	ldr	r4, [r5, #8]
   10be0:	e7eb      	b.n	10bba <__swsetup_r+0x1e>
   10be2:	4b24      	ldr	r3, [pc, #144]	; (10c74 <__swsetup_r+0xd8>)
   10be4:	429c      	cmp	r4, r3
   10be6:	bf08      	it	eq
   10be8:	68ec      	ldreq	r4, [r5, #12]
   10bea:	e7e6      	b.n	10bba <__swsetup_r+0x1e>
   10bec:	0758      	lsls	r0, r3, #29
   10bee:	d512      	bpl.n	10c16 <__swsetup_r+0x7a>
   10bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10bf2:	b141      	cbz	r1, 10c06 <__swsetup_r+0x6a>
   10bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10bf8:	4299      	cmp	r1, r3
   10bfa:	d002      	beq.n	10c02 <__swsetup_r+0x66>
   10bfc:	4630      	mov	r0, r6
   10bfe:	f7ff f9ed 	bl	ffdc <_free_r>
   10c02:	2300      	movs	r3, #0
   10c04:	6363      	str	r3, [r4, #52]	; 0x34
   10c06:	89a3      	ldrh	r3, [r4, #12]
   10c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   10c0c:	81a3      	strh	r3, [r4, #12]
   10c0e:	2300      	movs	r3, #0
   10c10:	6063      	str	r3, [r4, #4]
   10c12:	6923      	ldr	r3, [r4, #16]
   10c14:	6023      	str	r3, [r4, #0]
   10c16:	89a3      	ldrh	r3, [r4, #12]
   10c18:	f043 0308 	orr.w	r3, r3, #8
   10c1c:	81a3      	strh	r3, [r4, #12]
   10c1e:	6923      	ldr	r3, [r4, #16]
   10c20:	b94b      	cbnz	r3, 10c36 <__swsetup_r+0x9a>
   10c22:	89a3      	ldrh	r3, [r4, #12]
   10c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
   10c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10c2c:	d003      	beq.n	10c36 <__swsetup_r+0x9a>
   10c2e:	4621      	mov	r1, r4
   10c30:	4630      	mov	r0, r6
   10c32:	f000 fbeb 	bl	1140c <__smakebuf_r>
   10c36:	89a0      	ldrh	r0, [r4, #12]
   10c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10c3c:	f010 0301 	ands.w	r3, r0, #1
   10c40:	d00a      	beq.n	10c58 <__swsetup_r+0xbc>
   10c42:	2300      	movs	r3, #0
   10c44:	60a3      	str	r3, [r4, #8]
   10c46:	6963      	ldr	r3, [r4, #20]
   10c48:	425b      	negs	r3, r3
   10c4a:	61a3      	str	r3, [r4, #24]
   10c4c:	6923      	ldr	r3, [r4, #16]
   10c4e:	b943      	cbnz	r3, 10c62 <__swsetup_r+0xc6>
   10c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   10c54:	d1ba      	bne.n	10bcc <__swsetup_r+0x30>
   10c56:	bd70      	pop	{r4, r5, r6, pc}
   10c58:	0781      	lsls	r1, r0, #30
   10c5a:	bf58      	it	pl
   10c5c:	6963      	ldrpl	r3, [r4, #20]
   10c5e:	60a3      	str	r3, [r4, #8]
   10c60:	e7f4      	b.n	10c4c <__swsetup_r+0xb0>
   10c62:	2000      	movs	r0, #0
   10c64:	e7f7      	b.n	10c56 <__swsetup_r+0xba>
   10c66:	bf00      	nop
   10c68:	200002c8 	.word	0x200002c8
   10c6c:	0001741c 	.word	0x0001741c
   10c70:	0001743c 	.word	0x0001743c
   10c74:	000173fc 	.word	0x000173fc

00010c78 <__sflush_r>:
   10c78:	898a      	ldrh	r2, [r1, #12]
   10c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c7e:	4605      	mov	r5, r0
   10c80:	0710      	lsls	r0, r2, #28
   10c82:	460c      	mov	r4, r1
   10c84:	d458      	bmi.n	10d38 <__sflush_r+0xc0>
   10c86:	684b      	ldr	r3, [r1, #4]
   10c88:	2b00      	cmp	r3, #0
   10c8a:	dc05      	bgt.n	10c98 <__sflush_r+0x20>
   10c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10c8e:	2b00      	cmp	r3, #0
   10c90:	dc02      	bgt.n	10c98 <__sflush_r+0x20>
   10c92:	2000      	movs	r0, #0
   10c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   10c9a:	2e00      	cmp	r6, #0
   10c9c:	d0f9      	beq.n	10c92 <__sflush_r+0x1a>
   10c9e:	2300      	movs	r3, #0
   10ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10ca4:	682f      	ldr	r7, [r5, #0]
   10ca6:	602b      	str	r3, [r5, #0]
   10ca8:	d032      	beq.n	10d10 <__sflush_r+0x98>
   10caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10cac:	89a3      	ldrh	r3, [r4, #12]
   10cae:	075a      	lsls	r2, r3, #29
   10cb0:	d505      	bpl.n	10cbe <__sflush_r+0x46>
   10cb2:	6863      	ldr	r3, [r4, #4]
   10cb4:	1ac0      	subs	r0, r0, r3
   10cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10cb8:	b10b      	cbz	r3, 10cbe <__sflush_r+0x46>
   10cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10cbc:	1ac0      	subs	r0, r0, r3
   10cbe:	2300      	movs	r3, #0
   10cc0:	4602      	mov	r2, r0
   10cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   10cc4:	4628      	mov	r0, r5
   10cc6:	6a21      	ldr	r1, [r4, #32]
   10cc8:	47b0      	blx	r6
   10cca:	1c43      	adds	r3, r0, #1
   10ccc:	89a3      	ldrh	r3, [r4, #12]
   10cce:	d106      	bne.n	10cde <__sflush_r+0x66>
   10cd0:	6829      	ldr	r1, [r5, #0]
   10cd2:	291d      	cmp	r1, #29
   10cd4:	d82c      	bhi.n	10d30 <__sflush_r+0xb8>
   10cd6:	4a29      	ldr	r2, [pc, #164]	; (10d7c <__sflush_r+0x104>)
   10cd8:	40ca      	lsrs	r2, r1
   10cda:	07d6      	lsls	r6, r2, #31
   10cdc:	d528      	bpl.n	10d30 <__sflush_r+0xb8>
   10cde:	2200      	movs	r2, #0
   10ce0:	04d9      	lsls	r1, r3, #19
   10ce2:	6062      	str	r2, [r4, #4]
   10ce4:	6922      	ldr	r2, [r4, #16]
   10ce6:	6022      	str	r2, [r4, #0]
   10ce8:	d504      	bpl.n	10cf4 <__sflush_r+0x7c>
   10cea:	1c42      	adds	r2, r0, #1
   10cec:	d101      	bne.n	10cf2 <__sflush_r+0x7a>
   10cee:	682b      	ldr	r3, [r5, #0]
   10cf0:	b903      	cbnz	r3, 10cf4 <__sflush_r+0x7c>
   10cf2:	6560      	str	r0, [r4, #84]	; 0x54
   10cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10cf6:	602f      	str	r7, [r5, #0]
   10cf8:	2900      	cmp	r1, #0
   10cfa:	d0ca      	beq.n	10c92 <__sflush_r+0x1a>
   10cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10d00:	4299      	cmp	r1, r3
   10d02:	d002      	beq.n	10d0a <__sflush_r+0x92>
   10d04:	4628      	mov	r0, r5
   10d06:	f7ff f969 	bl	ffdc <_free_r>
   10d0a:	2000      	movs	r0, #0
   10d0c:	6360      	str	r0, [r4, #52]	; 0x34
   10d0e:	e7c1      	b.n	10c94 <__sflush_r+0x1c>
   10d10:	6a21      	ldr	r1, [r4, #32]
   10d12:	2301      	movs	r3, #1
   10d14:	4628      	mov	r0, r5
   10d16:	47b0      	blx	r6
   10d18:	1c41      	adds	r1, r0, #1
   10d1a:	d1c7      	bne.n	10cac <__sflush_r+0x34>
   10d1c:	682b      	ldr	r3, [r5, #0]
   10d1e:	2b00      	cmp	r3, #0
   10d20:	d0c4      	beq.n	10cac <__sflush_r+0x34>
   10d22:	2b1d      	cmp	r3, #29
   10d24:	d001      	beq.n	10d2a <__sflush_r+0xb2>
   10d26:	2b16      	cmp	r3, #22
   10d28:	d101      	bne.n	10d2e <__sflush_r+0xb6>
   10d2a:	602f      	str	r7, [r5, #0]
   10d2c:	e7b1      	b.n	10c92 <__sflush_r+0x1a>
   10d2e:	89a3      	ldrh	r3, [r4, #12]
   10d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d34:	81a3      	strh	r3, [r4, #12]
   10d36:	e7ad      	b.n	10c94 <__sflush_r+0x1c>
   10d38:	690f      	ldr	r7, [r1, #16]
   10d3a:	2f00      	cmp	r7, #0
   10d3c:	d0a9      	beq.n	10c92 <__sflush_r+0x1a>
   10d3e:	0793      	lsls	r3, r2, #30
   10d40:	680e      	ldr	r6, [r1, #0]
   10d42:	600f      	str	r7, [r1, #0]
   10d44:	bf0c      	ite	eq
   10d46:	694b      	ldreq	r3, [r1, #20]
   10d48:	2300      	movne	r3, #0
   10d4a:	eba6 0807 	sub.w	r8, r6, r7
   10d4e:	608b      	str	r3, [r1, #8]
   10d50:	f1b8 0f00 	cmp.w	r8, #0
   10d54:	dd9d      	ble.n	10c92 <__sflush_r+0x1a>
   10d56:	4643      	mov	r3, r8
   10d58:	463a      	mov	r2, r7
   10d5a:	6a21      	ldr	r1, [r4, #32]
   10d5c:	4628      	mov	r0, r5
   10d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10d60:	47b0      	blx	r6
   10d62:	2800      	cmp	r0, #0
   10d64:	dc06      	bgt.n	10d74 <__sflush_r+0xfc>
   10d66:	89a3      	ldrh	r3, [r4, #12]
   10d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d70:	81a3      	strh	r3, [r4, #12]
   10d72:	e78f      	b.n	10c94 <__sflush_r+0x1c>
   10d74:	4407      	add	r7, r0
   10d76:	eba8 0800 	sub.w	r8, r8, r0
   10d7a:	e7e9      	b.n	10d50 <__sflush_r+0xd8>
   10d7c:	20400001 	.word	0x20400001

00010d80 <_fflush_r>:
   10d80:	b538      	push	{r3, r4, r5, lr}
   10d82:	690b      	ldr	r3, [r1, #16]
   10d84:	4605      	mov	r5, r0
   10d86:	460c      	mov	r4, r1
   10d88:	b913      	cbnz	r3, 10d90 <_fflush_r+0x10>
   10d8a:	2500      	movs	r5, #0
   10d8c:	4628      	mov	r0, r5
   10d8e:	bd38      	pop	{r3, r4, r5, pc}
   10d90:	b118      	cbz	r0, 10d9a <_fflush_r+0x1a>
   10d92:	6983      	ldr	r3, [r0, #24]
   10d94:	b90b      	cbnz	r3, 10d9a <_fflush_r+0x1a>
   10d96:	f000 f871 	bl	10e7c <__sinit>
   10d9a:	4b14      	ldr	r3, [pc, #80]	; (10dec <_fflush_r+0x6c>)
   10d9c:	429c      	cmp	r4, r3
   10d9e:	d11b      	bne.n	10dd8 <_fflush_r+0x58>
   10da0:	686c      	ldr	r4, [r5, #4]
   10da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10da6:	2b00      	cmp	r3, #0
   10da8:	d0ef      	beq.n	10d8a <_fflush_r+0xa>
   10daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10dac:	07d0      	lsls	r0, r2, #31
   10dae:	d404      	bmi.n	10dba <_fflush_r+0x3a>
   10db0:	0599      	lsls	r1, r3, #22
   10db2:	d402      	bmi.n	10dba <_fflush_r+0x3a>
   10db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10db6:	f001 fc0e 	bl	125d6 <__retarget_lock_acquire_recursive>
   10dba:	4628      	mov	r0, r5
   10dbc:	4621      	mov	r1, r4
   10dbe:	f7ff ff5b 	bl	10c78 <__sflush_r>
   10dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10dc4:	4605      	mov	r5, r0
   10dc6:	07da      	lsls	r2, r3, #31
   10dc8:	d4e0      	bmi.n	10d8c <_fflush_r+0xc>
   10dca:	89a3      	ldrh	r3, [r4, #12]
   10dcc:	059b      	lsls	r3, r3, #22
   10dce:	d4dd      	bmi.n	10d8c <_fflush_r+0xc>
   10dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10dd2:	f001 fc06 	bl	125e2 <__retarget_lock_release_recursive>
   10dd6:	e7d9      	b.n	10d8c <_fflush_r+0xc>
   10dd8:	4b05      	ldr	r3, [pc, #20]	; (10df0 <_fflush_r+0x70>)
   10dda:	429c      	cmp	r4, r3
   10ddc:	d101      	bne.n	10de2 <_fflush_r+0x62>
   10dde:	68ac      	ldr	r4, [r5, #8]
   10de0:	e7df      	b.n	10da2 <_fflush_r+0x22>
   10de2:	4b04      	ldr	r3, [pc, #16]	; (10df4 <_fflush_r+0x74>)
   10de4:	429c      	cmp	r4, r3
   10de6:	bf08      	it	eq
   10de8:	68ec      	ldreq	r4, [r5, #12]
   10dea:	e7da      	b.n	10da2 <_fflush_r+0x22>
   10dec:	0001741c 	.word	0x0001741c
   10df0:	0001743c 	.word	0x0001743c
   10df4:	000173fc 	.word	0x000173fc

00010df8 <std>:
   10df8:	2300      	movs	r3, #0
   10dfa:	b510      	push	{r4, lr}
   10dfc:	4604      	mov	r4, r0
   10dfe:	6083      	str	r3, [r0, #8]
   10e00:	8181      	strh	r1, [r0, #12]
   10e02:	4619      	mov	r1, r3
   10e04:	6643      	str	r3, [r0, #100]	; 0x64
   10e06:	81c2      	strh	r2, [r0, #14]
   10e08:	2208      	movs	r2, #8
   10e0a:	6183      	str	r3, [r0, #24]
   10e0c:	e9c0 3300 	strd	r3, r3, [r0]
   10e10:	e9c0 3304 	strd	r3, r3, [r0, #16]
   10e14:	305c      	adds	r0, #92	; 0x5c
   10e16:	f003 fef5 	bl	14c04 <memset>
   10e1a:	4b05      	ldr	r3, [pc, #20]	; (10e30 <std+0x38>)
   10e1c:	6224      	str	r4, [r4, #32]
   10e1e:	6263      	str	r3, [r4, #36]	; 0x24
   10e20:	4b04      	ldr	r3, [pc, #16]	; (10e34 <std+0x3c>)
   10e22:	62a3      	str	r3, [r4, #40]	; 0x28
   10e24:	4b04      	ldr	r3, [pc, #16]	; (10e38 <std+0x40>)
   10e26:	62e3      	str	r3, [r4, #44]	; 0x2c
   10e28:	4b04      	ldr	r3, [pc, #16]	; (10e3c <std+0x44>)
   10e2a:	6323      	str	r3, [r4, #48]	; 0x30
   10e2c:	bd10      	pop	{r4, pc}
   10e2e:	bf00      	nop
   10e30:	000156ab 	.word	0x000156ab
   10e34:	000156cd 	.word	0x000156cd
   10e38:	00015705 	.word	0x00015705
   10e3c:	00015729 	.word	0x00015729

00010e40 <_cleanup_r>:
   10e40:	4901      	ldr	r1, [pc, #4]	; (10e48 <_cleanup_r+0x8>)
   10e42:	f004 b951 	b.w	150e8 <_fwalk_reent>
   10e46:	bf00      	nop
   10e48:	00010d81 	.word	0x00010d81

00010e4c <__sfp_lock_acquire>:
   10e4c:	4801      	ldr	r0, [pc, #4]	; (10e54 <__sfp_lock_acquire+0x8>)
   10e4e:	f001 bbc2 	b.w	125d6 <__retarget_lock_acquire_recursive>
   10e52:	bf00      	nop
   10e54:	20000534 	.word	0x20000534

00010e58 <__sfp_lock_release>:
   10e58:	4801      	ldr	r0, [pc, #4]	; (10e60 <__sfp_lock_release+0x8>)
   10e5a:	f001 bbc2 	b.w	125e2 <__retarget_lock_release_recursive>
   10e5e:	bf00      	nop
   10e60:	20000534 	.word	0x20000534

00010e64 <__sinit_lock_acquire>:
   10e64:	4801      	ldr	r0, [pc, #4]	; (10e6c <__sinit_lock_acquire+0x8>)
   10e66:	f001 bbb6 	b.w	125d6 <__retarget_lock_acquire_recursive>
   10e6a:	bf00      	nop
   10e6c:	20000548 	.word	0x20000548

00010e70 <__sinit_lock_release>:
   10e70:	4801      	ldr	r0, [pc, #4]	; (10e78 <__sinit_lock_release+0x8>)
   10e72:	f001 bbb6 	b.w	125e2 <__retarget_lock_release_recursive>
   10e76:	bf00      	nop
   10e78:	20000548 	.word	0x20000548

00010e7c <__sinit>:
   10e7c:	b510      	push	{r4, lr}
   10e7e:	4604      	mov	r4, r0
   10e80:	f7ff fff0 	bl	10e64 <__sinit_lock_acquire>
   10e84:	69a3      	ldr	r3, [r4, #24]
   10e86:	b11b      	cbz	r3, 10e90 <__sinit+0x14>
   10e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10e8c:	f7ff bff0 	b.w	10e70 <__sinit_lock_release>
   10e90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   10e94:	6523      	str	r3, [r4, #80]	; 0x50
   10e96:	4620      	mov	r0, r4
   10e98:	4b12      	ldr	r3, [pc, #72]	; (10ee4 <__sinit+0x68>)
   10e9a:	4a13      	ldr	r2, [pc, #76]	; (10ee8 <__sinit+0x6c>)
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	62a2      	str	r2, [r4, #40]	; 0x28
   10ea0:	42a3      	cmp	r3, r4
   10ea2:	bf04      	itt	eq
   10ea4:	2301      	moveq	r3, #1
   10ea6:	61a3      	streq	r3, [r4, #24]
   10ea8:	f000 f820 	bl	10eec <__sfp>
   10eac:	6060      	str	r0, [r4, #4]
   10eae:	4620      	mov	r0, r4
   10eb0:	f000 f81c 	bl	10eec <__sfp>
   10eb4:	60a0      	str	r0, [r4, #8]
   10eb6:	4620      	mov	r0, r4
   10eb8:	f000 f818 	bl	10eec <__sfp>
   10ebc:	2200      	movs	r2, #0
   10ebe:	2104      	movs	r1, #4
   10ec0:	60e0      	str	r0, [r4, #12]
   10ec2:	6860      	ldr	r0, [r4, #4]
   10ec4:	f7ff ff98 	bl	10df8 <std>
   10ec8:	2201      	movs	r2, #1
   10eca:	2109      	movs	r1, #9
   10ecc:	68a0      	ldr	r0, [r4, #8]
   10ece:	f7ff ff93 	bl	10df8 <std>
   10ed2:	2202      	movs	r2, #2
   10ed4:	2112      	movs	r1, #18
   10ed6:	68e0      	ldr	r0, [r4, #12]
   10ed8:	f7ff ff8e 	bl	10df8 <std>
   10edc:	2301      	movs	r3, #1
   10ede:	61a3      	str	r3, [r4, #24]
   10ee0:	e7d2      	b.n	10e88 <__sinit+0xc>
   10ee2:	bf00      	nop
   10ee4:	000173d0 	.word	0x000173d0
   10ee8:	00010e41 	.word	0x00010e41

00010eec <__sfp>:
   10eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10eee:	4607      	mov	r7, r0
   10ef0:	f7ff ffac 	bl	10e4c <__sfp_lock_acquire>
   10ef4:	4b1e      	ldr	r3, [pc, #120]	; (10f70 <__sfp+0x84>)
   10ef6:	681e      	ldr	r6, [r3, #0]
   10ef8:	69b3      	ldr	r3, [r6, #24]
   10efa:	b913      	cbnz	r3, 10f02 <__sfp+0x16>
   10efc:	4630      	mov	r0, r6
   10efe:	f7ff ffbd 	bl	10e7c <__sinit>
   10f02:	3648      	adds	r6, #72	; 0x48
   10f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   10f08:	3b01      	subs	r3, #1
   10f0a:	d503      	bpl.n	10f14 <__sfp+0x28>
   10f0c:	6833      	ldr	r3, [r6, #0]
   10f0e:	b30b      	cbz	r3, 10f54 <__sfp+0x68>
   10f10:	6836      	ldr	r6, [r6, #0]
   10f12:	e7f7      	b.n	10f04 <__sfp+0x18>
   10f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   10f18:	b9d5      	cbnz	r5, 10f50 <__sfp+0x64>
   10f1a:	4b16      	ldr	r3, [pc, #88]	; (10f74 <__sfp+0x88>)
   10f1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10f20:	6665      	str	r5, [r4, #100]	; 0x64
   10f22:	60e3      	str	r3, [r4, #12]
   10f24:	f001 fb4d 	bl	125c2 <__retarget_lock_init_recursive>
   10f28:	f7ff ff96 	bl	10e58 <__sfp_lock_release>
   10f2c:	2208      	movs	r2, #8
   10f2e:	4629      	mov	r1, r5
   10f30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   10f34:	6025      	str	r5, [r4, #0]
   10f36:	61a5      	str	r5, [r4, #24]
   10f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
   10f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   10f40:	f003 fe60 	bl	14c04 <memset>
   10f44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   10f48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   10f4c:	4620      	mov	r0, r4
   10f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f50:	3468      	adds	r4, #104	; 0x68
   10f52:	e7d9      	b.n	10f08 <__sfp+0x1c>
   10f54:	2104      	movs	r1, #4
   10f56:	4638      	mov	r0, r7
   10f58:	f004 f8b0 	bl	150bc <__sfmoreglue>
   10f5c:	4604      	mov	r4, r0
   10f5e:	6030      	str	r0, [r6, #0]
   10f60:	2800      	cmp	r0, #0
   10f62:	d1d5      	bne.n	10f10 <__sfp+0x24>
   10f64:	f7ff ff78 	bl	10e58 <__sfp_lock_release>
   10f68:	230c      	movs	r3, #12
   10f6a:	603b      	str	r3, [r7, #0]
   10f6c:	e7ee      	b.n	10f4c <__sfp+0x60>
   10f6e:	bf00      	nop
   10f70:	000173d0 	.word	0x000173d0
   10f74:	ffff0001 	.word	0xffff0001

00010f78 <__gethex>:
   10f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f7c:	ed2d 8b02 	vpush	{d8}
   10f80:	b089      	sub	sp, #36	; 0x24
   10f82:	ee08 0a10 	vmov	s16, r0
   10f86:	468b      	mov	fp, r1
   10f88:	4690      	mov	r8, r2
   10f8a:	9304      	str	r3, [sp, #16]
   10f8c:	4bb2      	ldr	r3, [pc, #712]	; (11258 <__gethex+0x2e0>)
   10f8e:	681b      	ldr	r3, [r3, #0]
   10f90:	4618      	mov	r0, r3
   10f92:	9301      	str	r3, [sp, #4]
   10f94:	f7ef ffe1 	bl	f5a <strlen>
   10f98:	9b01      	ldr	r3, [sp, #4]
   10f9a:	f8db 2000 	ldr.w	r2, [fp]
   10f9e:	4682      	mov	sl, r0
   10fa0:	4403      	add	r3, r0
   10fa2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   10fa6:	9305      	str	r3, [sp, #20]
   10fa8:	1c93      	adds	r3, r2, #2
   10faa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   10fae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   10fb2:	32fe      	adds	r2, #254	; 0xfe
   10fb4:	18d1      	adds	r1, r2, r3
   10fb6:	461f      	mov	r7, r3
   10fb8:	f813 0b01 	ldrb.w	r0, [r3], #1
   10fbc:	9100      	str	r1, [sp, #0]
   10fbe:	2830      	cmp	r0, #48	; 0x30
   10fc0:	d0f8      	beq.n	10fb4 <__gethex+0x3c>
   10fc2:	f004 f901 	bl	151c8 <__hexdig_fun>
   10fc6:	4604      	mov	r4, r0
   10fc8:	2800      	cmp	r0, #0
   10fca:	d139      	bne.n	11040 <__gethex+0xc8>
   10fcc:	4652      	mov	r2, sl
   10fce:	9901      	ldr	r1, [sp, #4]
   10fd0:	4638      	mov	r0, r7
   10fd2:	f004 fbad 	bl	15730 <strncmp>
   10fd6:	4605      	mov	r5, r0
   10fd8:	2800      	cmp	r0, #0
   10fda:	d167      	bne.n	110ac <__gethex+0x134>
   10fdc:	f817 000a 	ldrb.w	r0, [r7, sl]
   10fe0:	eb07 060a 	add.w	r6, r7, sl
   10fe4:	f004 f8f0 	bl	151c8 <__hexdig_fun>
   10fe8:	2800      	cmp	r0, #0
   10fea:	d061      	beq.n	110b0 <__gethex+0x138>
   10fec:	4633      	mov	r3, r6
   10fee:	7818      	ldrb	r0, [r3, #0]
   10ff0:	461f      	mov	r7, r3
   10ff2:	3301      	adds	r3, #1
   10ff4:	2830      	cmp	r0, #48	; 0x30
   10ff6:	d0fa      	beq.n	10fee <__gethex+0x76>
   10ff8:	f004 f8e6 	bl	151c8 <__hexdig_fun>
   10ffc:	fab0 f480 	clz	r4, r0
   11000:	2301      	movs	r3, #1
   11002:	4635      	mov	r5, r6
   11004:	0964      	lsrs	r4, r4, #5
   11006:	9300      	str	r3, [sp, #0]
   11008:	463a      	mov	r2, r7
   1100a:	4616      	mov	r6, r2
   1100c:	3201      	adds	r2, #1
   1100e:	7830      	ldrb	r0, [r6, #0]
   11010:	f004 f8da 	bl	151c8 <__hexdig_fun>
   11014:	2800      	cmp	r0, #0
   11016:	d1f8      	bne.n	1100a <__gethex+0x92>
   11018:	4652      	mov	r2, sl
   1101a:	9901      	ldr	r1, [sp, #4]
   1101c:	4630      	mov	r0, r6
   1101e:	f004 fb87 	bl	15730 <strncmp>
   11022:	b980      	cbnz	r0, 11046 <__gethex+0xce>
   11024:	b94d      	cbnz	r5, 1103a <__gethex+0xc2>
   11026:	eb06 050a 	add.w	r5, r6, sl
   1102a:	462a      	mov	r2, r5
   1102c:	4616      	mov	r6, r2
   1102e:	3201      	adds	r2, #1
   11030:	7830      	ldrb	r0, [r6, #0]
   11032:	f004 f8c9 	bl	151c8 <__hexdig_fun>
   11036:	2800      	cmp	r0, #0
   11038:	d1f8      	bne.n	1102c <__gethex+0xb4>
   1103a:	1bad      	subs	r5, r5, r6
   1103c:	00ad      	lsls	r5, r5, #2
   1103e:	e004      	b.n	1104a <__gethex+0xd2>
   11040:	2400      	movs	r4, #0
   11042:	4625      	mov	r5, r4
   11044:	e7e0      	b.n	11008 <__gethex+0x90>
   11046:	2d00      	cmp	r5, #0
   11048:	d1f7      	bne.n	1103a <__gethex+0xc2>
   1104a:	7833      	ldrb	r3, [r6, #0]
   1104c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11050:	2b50      	cmp	r3, #80	; 0x50
   11052:	d13b      	bne.n	110cc <__gethex+0x154>
   11054:	7873      	ldrb	r3, [r6, #1]
   11056:	2b2b      	cmp	r3, #43	; 0x2b
   11058:	d02c      	beq.n	110b4 <__gethex+0x13c>
   1105a:	2b2d      	cmp	r3, #45	; 0x2d
   1105c:	d02e      	beq.n	110bc <__gethex+0x144>
   1105e:	1c71      	adds	r1, r6, #1
   11060:	f04f 0900 	mov.w	r9, #0
   11064:	7808      	ldrb	r0, [r1, #0]
   11066:	f004 f8af 	bl	151c8 <__hexdig_fun>
   1106a:	1e43      	subs	r3, r0, #1
   1106c:	b2db      	uxtb	r3, r3
   1106e:	2b18      	cmp	r3, #24
   11070:	d82c      	bhi.n	110cc <__gethex+0x154>
   11072:	f1a0 0210 	sub.w	r2, r0, #16
   11076:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1107a:	f004 f8a5 	bl	151c8 <__hexdig_fun>
   1107e:	1e43      	subs	r3, r0, #1
   11080:	b2db      	uxtb	r3, r3
   11082:	2b18      	cmp	r3, #24
   11084:	d91d      	bls.n	110c2 <__gethex+0x14a>
   11086:	f1b9 0f00 	cmp.w	r9, #0
   1108a:	d000      	beq.n	1108e <__gethex+0x116>
   1108c:	4252      	negs	r2, r2
   1108e:	4415      	add	r5, r2
   11090:	f8cb 1000 	str.w	r1, [fp]
   11094:	b1e4      	cbz	r4, 110d0 <__gethex+0x158>
   11096:	9b00      	ldr	r3, [sp, #0]
   11098:	2b00      	cmp	r3, #0
   1109a:	bf14      	ite	ne
   1109c:	2700      	movne	r7, #0
   1109e:	2706      	moveq	r7, #6
   110a0:	4638      	mov	r0, r7
   110a2:	b009      	add	sp, #36	; 0x24
   110a4:	ecbd 8b02 	vpop	{d8}
   110a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110ac:	463e      	mov	r6, r7
   110ae:	4625      	mov	r5, r4
   110b0:	2401      	movs	r4, #1
   110b2:	e7ca      	b.n	1104a <__gethex+0xd2>
   110b4:	f04f 0900 	mov.w	r9, #0
   110b8:	1cb1      	adds	r1, r6, #2
   110ba:	e7d3      	b.n	11064 <__gethex+0xec>
   110bc:	f04f 0901 	mov.w	r9, #1
   110c0:	e7fa      	b.n	110b8 <__gethex+0x140>
   110c2:	230a      	movs	r3, #10
   110c4:	fb03 0202 	mla	r2, r3, r2, r0
   110c8:	3a10      	subs	r2, #16
   110ca:	e7d4      	b.n	11076 <__gethex+0xfe>
   110cc:	4631      	mov	r1, r6
   110ce:	e7df      	b.n	11090 <__gethex+0x118>
   110d0:	1bf3      	subs	r3, r6, r7
   110d2:	4621      	mov	r1, r4
   110d4:	3b01      	subs	r3, #1
   110d6:	2b07      	cmp	r3, #7
   110d8:	dc0b      	bgt.n	110f2 <__gethex+0x17a>
   110da:	ee18 0a10 	vmov	r0, s16
   110de:	f000 f9e1 	bl	114a4 <_Balloc>
   110e2:	4604      	mov	r4, r0
   110e4:	b940      	cbnz	r0, 110f8 <__gethex+0x180>
   110e6:	4b5d      	ldr	r3, [pc, #372]	; (1125c <__gethex+0x2e4>)
   110e8:	4602      	mov	r2, r0
   110ea:	21de      	movs	r1, #222	; 0xde
   110ec:	485c      	ldr	r0, [pc, #368]	; (11260 <__gethex+0x2e8>)
   110ee:	f7fe ff2d 	bl	ff4c <__assert_func>
   110f2:	3101      	adds	r1, #1
   110f4:	105b      	asrs	r3, r3, #1
   110f6:	e7ee      	b.n	110d6 <__gethex+0x15e>
   110f8:	f100 0914 	add.w	r9, r0, #20
   110fc:	f04f 0b00 	mov.w	fp, #0
   11100:	f1ca 0301 	rsb	r3, sl, #1
   11104:	f8cd 9008 	str.w	r9, [sp, #8]
   11108:	f8cd b000 	str.w	fp, [sp]
   1110c:	9306      	str	r3, [sp, #24]
   1110e:	42b7      	cmp	r7, r6
   11110:	d340      	bcc.n	11194 <__gethex+0x21c>
   11112:	9802      	ldr	r0, [sp, #8]
   11114:	9b00      	ldr	r3, [sp, #0]
   11116:	f840 3b04 	str.w	r3, [r0], #4
   1111a:	eba0 0009 	sub.w	r0, r0, r9
   1111e:	1080      	asrs	r0, r0, #2
   11120:	0146      	lsls	r6, r0, #5
   11122:	6120      	str	r0, [r4, #16]
   11124:	4618      	mov	r0, r3
   11126:	f004 f95d 	bl	153e4 <__hi0bits>
   1112a:	1a30      	subs	r0, r6, r0
   1112c:	f8d8 6000 	ldr.w	r6, [r8]
   11130:	42b0      	cmp	r0, r6
   11132:	dd63      	ble.n	111fc <__gethex+0x284>
   11134:	1b87      	subs	r7, r0, r6
   11136:	4620      	mov	r0, r4
   11138:	4639      	mov	r1, r7
   1113a:	f004 fa14 	bl	15566 <__any_on>
   1113e:	4682      	mov	sl, r0
   11140:	b1a8      	cbz	r0, 1116e <__gethex+0x1f6>
   11142:	1e7b      	subs	r3, r7, #1
   11144:	f04f 0a01 	mov.w	sl, #1
   11148:	1159      	asrs	r1, r3, #5
   1114a:	f003 021f 	and.w	r2, r3, #31
   1114e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   11152:	fa0a f202 	lsl.w	r2, sl, r2
   11156:	420a      	tst	r2, r1
   11158:	d009      	beq.n	1116e <__gethex+0x1f6>
   1115a:	4553      	cmp	r3, sl
   1115c:	dd05      	ble.n	1116a <__gethex+0x1f2>
   1115e:	1eb9      	subs	r1, r7, #2
   11160:	4620      	mov	r0, r4
   11162:	f004 fa00 	bl	15566 <__any_on>
   11166:	2800      	cmp	r0, #0
   11168:	d145      	bne.n	111f6 <__gethex+0x27e>
   1116a:	f04f 0a02 	mov.w	sl, #2
   1116e:	443d      	add	r5, r7
   11170:	4639      	mov	r1, r7
   11172:	4620      	mov	r0, r4
   11174:	f003 ffd7 	bl	15126 <rshift>
   11178:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1117c:	42ab      	cmp	r3, r5
   1117e:	da4c      	bge.n	1121a <__gethex+0x2a2>
   11180:	4621      	mov	r1, r4
   11182:	ee18 0a10 	vmov	r0, s16
   11186:	f000 f9cd 	bl	11524 <_Bfree>
   1118a:	2300      	movs	r3, #0
   1118c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1118e:	27a3      	movs	r7, #163	; 0xa3
   11190:	6013      	str	r3, [r2, #0]
   11192:	e785      	b.n	110a0 <__gethex+0x128>
   11194:	1e73      	subs	r3, r6, #1
   11196:	9a05      	ldr	r2, [sp, #20]
   11198:	9303      	str	r3, [sp, #12]
   1119a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1119e:	4293      	cmp	r3, r2
   111a0:	d019      	beq.n	111d6 <__gethex+0x25e>
   111a2:	f1bb 0f20 	cmp.w	fp, #32
   111a6:	d107      	bne.n	111b8 <__gethex+0x240>
   111a8:	9b02      	ldr	r3, [sp, #8]
   111aa:	9a00      	ldr	r2, [sp, #0]
   111ac:	f843 2b04 	str.w	r2, [r3], #4
   111b0:	9302      	str	r3, [sp, #8]
   111b2:	2300      	movs	r3, #0
   111b4:	469b      	mov	fp, r3
   111b6:	9300      	str	r3, [sp, #0]
   111b8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   111bc:	f004 f804 	bl	151c8 <__hexdig_fun>
   111c0:	f000 000f 	and.w	r0, r0, #15
   111c4:	9b00      	ldr	r3, [sp, #0]
   111c6:	fa00 f00b 	lsl.w	r0, r0, fp
   111ca:	f10b 0b04 	add.w	fp, fp, #4
   111ce:	4303      	orrs	r3, r0
   111d0:	9300      	str	r3, [sp, #0]
   111d2:	9b03      	ldr	r3, [sp, #12]
   111d4:	e00d      	b.n	111f2 <__gethex+0x27a>
   111d6:	9b03      	ldr	r3, [sp, #12]
   111d8:	9a06      	ldr	r2, [sp, #24]
   111da:	4413      	add	r3, r2
   111dc:	42bb      	cmp	r3, r7
   111de:	d3e0      	bcc.n	111a2 <__gethex+0x22a>
   111e0:	4618      	mov	r0, r3
   111e2:	4652      	mov	r2, sl
   111e4:	9901      	ldr	r1, [sp, #4]
   111e6:	9307      	str	r3, [sp, #28]
   111e8:	f004 faa2 	bl	15730 <strncmp>
   111ec:	9b07      	ldr	r3, [sp, #28]
   111ee:	2800      	cmp	r0, #0
   111f0:	d1d7      	bne.n	111a2 <__gethex+0x22a>
   111f2:	461e      	mov	r6, r3
   111f4:	e78b      	b.n	1110e <__gethex+0x196>
   111f6:	f04f 0a03 	mov.w	sl, #3
   111fa:	e7b8      	b.n	1116e <__gethex+0x1f6>
   111fc:	da0a      	bge.n	11214 <__gethex+0x29c>
   111fe:	1a37      	subs	r7, r6, r0
   11200:	4621      	mov	r1, r4
   11202:	ee18 0a10 	vmov	r0, s16
   11206:	463a      	mov	r2, r7
   11208:	1bed      	subs	r5, r5, r7
   1120a:	f000 fb57 	bl	118bc <__lshift>
   1120e:	4604      	mov	r4, r0
   11210:	f100 0914 	add.w	r9, r0, #20
   11214:	f04f 0a00 	mov.w	sl, #0
   11218:	e7ae      	b.n	11178 <__gethex+0x200>
   1121a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1121e:	42a8      	cmp	r0, r5
   11220:	dd72      	ble.n	11308 <__gethex+0x390>
   11222:	1b45      	subs	r5, r0, r5
   11224:	42ae      	cmp	r6, r5
   11226:	dc35      	bgt.n	11294 <__gethex+0x31c>
   11228:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1122c:	2b02      	cmp	r3, #2
   1122e:	d029      	beq.n	11284 <__gethex+0x30c>
   11230:	2b03      	cmp	r3, #3
   11232:	d02b      	beq.n	1128c <__gethex+0x314>
   11234:	2b01      	cmp	r3, #1
   11236:	d11b      	bne.n	11270 <__gethex+0x2f8>
   11238:	42ae      	cmp	r6, r5
   1123a:	d119      	bne.n	11270 <__gethex+0x2f8>
   1123c:	2e01      	cmp	r6, #1
   1123e:	d111      	bne.n	11264 <__gethex+0x2ec>
   11240:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11244:	2762      	movs	r7, #98	; 0x62
   11246:	9a04      	ldr	r2, [sp, #16]
   11248:	6013      	str	r3, [r2, #0]
   1124a:	2301      	movs	r3, #1
   1124c:	6123      	str	r3, [r4, #16]
   1124e:	f8c9 3000 	str.w	r3, [r9]
   11252:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11254:	601c      	str	r4, [r3, #0]
   11256:	e723      	b.n	110a0 <__gethex+0x128>
   11258:	0001745c 	.word	0x0001745c
   1125c:	000188d3 	.word	0x000188d3
   11260:	000188e4 	.word	0x000188e4
   11264:	1e71      	subs	r1, r6, #1
   11266:	4620      	mov	r0, r4
   11268:	f004 f97d 	bl	15566 <__any_on>
   1126c:	2800      	cmp	r0, #0
   1126e:	d1e7      	bne.n	11240 <__gethex+0x2c8>
   11270:	4621      	mov	r1, r4
   11272:	ee18 0a10 	vmov	r0, s16
   11276:	f000 f955 	bl	11524 <_Bfree>
   1127a:	2300      	movs	r3, #0
   1127c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1127e:	2750      	movs	r7, #80	; 0x50
   11280:	6013      	str	r3, [r2, #0]
   11282:	e70d      	b.n	110a0 <__gethex+0x128>
   11284:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11286:	2b00      	cmp	r3, #0
   11288:	d1f2      	bne.n	11270 <__gethex+0x2f8>
   1128a:	e7d9      	b.n	11240 <__gethex+0x2c8>
   1128c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1128e:	2b00      	cmp	r3, #0
   11290:	d1d6      	bne.n	11240 <__gethex+0x2c8>
   11292:	e7ed      	b.n	11270 <__gethex+0x2f8>
   11294:	1e6f      	subs	r7, r5, #1
   11296:	f1ba 0f00 	cmp.w	sl, #0
   1129a:	d132      	bne.n	11302 <__gethex+0x38a>
   1129c:	b127      	cbz	r7, 112a8 <__gethex+0x330>
   1129e:	4639      	mov	r1, r7
   112a0:	4620      	mov	r0, r4
   112a2:	f004 f960 	bl	15566 <__any_on>
   112a6:	4682      	mov	sl, r0
   112a8:	117b      	asrs	r3, r7, #5
   112aa:	2101      	movs	r1, #1
   112ac:	f007 071f 	and.w	r7, r7, #31
   112b0:	4620      	mov	r0, r4
   112b2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   112b6:	1b76      	subs	r6, r6, r5
   112b8:	fa01 f707 	lsl.w	r7, r1, r7
   112bc:	4629      	mov	r1, r5
   112be:	421f      	tst	r7, r3
   112c0:	f04f 0702 	mov.w	r7, #2
   112c4:	bf18      	it	ne
   112c6:	f04a 0a02 	orrne.w	sl, sl, #2
   112ca:	f003 ff2c 	bl	15126 <rshift>
   112ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
   112d2:	f1ba 0f00 	cmp.w	sl, #0
   112d6:	d048      	beq.n	1136a <__gethex+0x3f2>
   112d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   112dc:	2b02      	cmp	r3, #2
   112de:	d015      	beq.n	1130c <__gethex+0x394>
   112e0:	2b03      	cmp	r3, #3
   112e2:	d017      	beq.n	11314 <__gethex+0x39c>
   112e4:	2b01      	cmp	r3, #1
   112e6:	d109      	bne.n	112fc <__gethex+0x384>
   112e8:	f01a 0f02 	tst.w	sl, #2
   112ec:	d006      	beq.n	112fc <__gethex+0x384>
   112ee:	f8d9 0000 	ldr.w	r0, [r9]
   112f2:	ea4a 0a00 	orr.w	sl, sl, r0
   112f6:	f01a 0f01 	tst.w	sl, #1
   112fa:	d10e      	bne.n	1131a <__gethex+0x3a2>
   112fc:	f047 0710 	orr.w	r7, r7, #16
   11300:	e033      	b.n	1136a <__gethex+0x3f2>
   11302:	f04f 0a01 	mov.w	sl, #1
   11306:	e7cf      	b.n	112a8 <__gethex+0x330>
   11308:	2701      	movs	r7, #1
   1130a:	e7e2      	b.n	112d2 <__gethex+0x35a>
   1130c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1130e:	f1c3 0301 	rsb	r3, r3, #1
   11312:	9315      	str	r3, [sp, #84]	; 0x54
   11314:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11316:	2b00      	cmp	r3, #0
   11318:	d0f0      	beq.n	112fc <__gethex+0x384>
   1131a:	f8d4 b010 	ldr.w	fp, [r4, #16]
   1131e:	f104 0314 	add.w	r3, r4, #20
   11322:	f04f 0c00 	mov.w	ip, #0
   11326:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   1132a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   1132e:	4618      	mov	r0, r3
   11330:	f853 2b04 	ldr.w	r2, [r3], #4
   11334:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   11338:	d01c      	beq.n	11374 <__gethex+0x3fc>
   1133a:	3201      	adds	r2, #1
   1133c:	6002      	str	r2, [r0, #0]
   1133e:	2f02      	cmp	r7, #2
   11340:	f104 0314 	add.w	r3, r4, #20
   11344:	d13f      	bne.n	113c6 <__gethex+0x44e>
   11346:	f8d8 2000 	ldr.w	r2, [r8]
   1134a:	3a01      	subs	r2, #1
   1134c:	42b2      	cmp	r2, r6
   1134e:	d10a      	bne.n	11366 <__gethex+0x3ee>
   11350:	1171      	asrs	r1, r6, #5
   11352:	2201      	movs	r2, #1
   11354:	f006 061f 	and.w	r6, r6, #31
   11358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1135c:	fa02 f606 	lsl.w	r6, r2, r6
   11360:	421e      	tst	r6, r3
   11362:	bf18      	it	ne
   11364:	4617      	movne	r7, r2
   11366:	f047 0720 	orr.w	r7, r7, #32
   1136a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1136c:	601c      	str	r4, [r3, #0]
   1136e:	9b04      	ldr	r3, [sp, #16]
   11370:	601d      	str	r5, [r3, #0]
   11372:	e695      	b.n	110a0 <__gethex+0x128>
   11374:	4299      	cmp	r1, r3
   11376:	f843 cc04 	str.w	ip, [r3, #-4]
   1137a:	d8d8      	bhi.n	1132e <__gethex+0x3b6>
   1137c:	68a3      	ldr	r3, [r4, #8]
   1137e:	459b      	cmp	fp, r3
   11380:	db19      	blt.n	113b6 <__gethex+0x43e>
   11382:	6861      	ldr	r1, [r4, #4]
   11384:	ee18 0a10 	vmov	r0, s16
   11388:	3101      	adds	r1, #1
   1138a:	f000 f88b 	bl	114a4 <_Balloc>
   1138e:	4681      	mov	r9, r0
   11390:	b918      	cbnz	r0, 1139a <__gethex+0x422>
   11392:	4b1b      	ldr	r3, [pc, #108]	; (11400 <__gethex+0x488>)
   11394:	4602      	mov	r2, r0
   11396:	2184      	movs	r1, #132	; 0x84
   11398:	e6a8      	b.n	110ec <__gethex+0x174>
   1139a:	6922      	ldr	r2, [r4, #16]
   1139c:	f104 010c 	add.w	r1, r4, #12
   113a0:	300c      	adds	r0, #12
   113a2:	3202      	adds	r2, #2
   113a4:	0092      	lsls	r2, r2, #2
   113a6:	f003 fc06 	bl	14bb6 <memcpy>
   113aa:	4621      	mov	r1, r4
   113ac:	464c      	mov	r4, r9
   113ae:	ee18 0a10 	vmov	r0, s16
   113b2:	f000 f8b7 	bl	11524 <_Bfree>
   113b6:	6923      	ldr	r3, [r4, #16]
   113b8:	1c5a      	adds	r2, r3, #1
   113ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   113be:	6122      	str	r2, [r4, #16]
   113c0:	2201      	movs	r2, #1
   113c2:	615a      	str	r2, [r3, #20]
   113c4:	e7bb      	b.n	1133e <__gethex+0x3c6>
   113c6:	6922      	ldr	r2, [r4, #16]
   113c8:	455a      	cmp	r2, fp
   113ca:	dd0b      	ble.n	113e4 <__gethex+0x46c>
   113cc:	2101      	movs	r1, #1
   113ce:	4620      	mov	r0, r4
   113d0:	f003 fea9 	bl	15126 <rshift>
   113d4:	3501      	adds	r5, #1
   113d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   113da:	42ab      	cmp	r3, r5
   113dc:	f6ff aed0 	blt.w	11180 <__gethex+0x208>
   113e0:	2701      	movs	r7, #1
   113e2:	e7c0      	b.n	11366 <__gethex+0x3ee>
   113e4:	f016 061f 	ands.w	r6, r6, #31
   113e8:	d0fa      	beq.n	113e0 <__gethex+0x468>
   113ea:	4453      	add	r3, sl
   113ec:	f1c6 0620 	rsb	r6, r6, #32
   113f0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   113f4:	f003 fff6 	bl	153e4 <__hi0bits>
   113f8:	42b0      	cmp	r0, r6
   113fa:	dbe7      	blt.n	113cc <__gethex+0x454>
   113fc:	e7f0      	b.n	113e0 <__gethex+0x468>
   113fe:	bf00      	nop
   11400:	000188d3 	.word	0x000188d3

00011404 <_localeconv_r>:
   11404:	4800      	ldr	r0, [pc, #0]	; (11408 <_localeconv_r+0x4>)
   11406:	4770      	bx	lr
   11408:	2000041c 	.word	0x2000041c

0001140c <__smakebuf_r>:
   1140c:	898b      	ldrh	r3, [r1, #12]
   1140e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11410:	079d      	lsls	r5, r3, #30
   11412:	4606      	mov	r6, r0
   11414:	460c      	mov	r4, r1
   11416:	d507      	bpl.n	11428 <__smakebuf_r+0x1c>
   11418:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1141c:	6023      	str	r3, [r4, #0]
   1141e:	6123      	str	r3, [r4, #16]
   11420:	2301      	movs	r3, #1
   11422:	6163      	str	r3, [r4, #20]
   11424:	b002      	add	sp, #8
   11426:	bd70      	pop	{r4, r5, r6, pc}
   11428:	ab01      	add	r3, sp, #4
   1142a:	466a      	mov	r2, sp
   1142c:	f003 ffa3 	bl	15376 <__swhatbuf_r>
   11430:	9900      	ldr	r1, [sp, #0]
   11432:	4605      	mov	r5, r0
   11434:	4630      	mov	r0, r6
   11436:	f7fe fe1d 	bl	10074 <_malloc_r>
   1143a:	b948      	cbnz	r0, 11450 <__smakebuf_r+0x44>
   1143c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11440:	059a      	lsls	r2, r3, #22
   11442:	d4ef      	bmi.n	11424 <__smakebuf_r+0x18>
   11444:	f023 0303 	bic.w	r3, r3, #3
   11448:	f043 0302 	orr.w	r3, r3, #2
   1144c:	81a3      	strh	r3, [r4, #12]
   1144e:	e7e3      	b.n	11418 <__smakebuf_r+0xc>
   11450:	4b0d      	ldr	r3, [pc, #52]	; (11488 <__smakebuf_r+0x7c>)
   11452:	62b3      	str	r3, [r6, #40]	; 0x28
   11454:	89a3      	ldrh	r3, [r4, #12]
   11456:	6020      	str	r0, [r4, #0]
   11458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1145c:	6120      	str	r0, [r4, #16]
   1145e:	81a3      	strh	r3, [r4, #12]
   11460:	9b00      	ldr	r3, [sp, #0]
   11462:	6163      	str	r3, [r4, #20]
   11464:	9b01      	ldr	r3, [sp, #4]
   11466:	b15b      	cbz	r3, 11480 <__smakebuf_r+0x74>
   11468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1146c:	4630      	mov	r0, r6
   1146e:	f000 fd2f 	bl	11ed0 <_isatty_r>
   11472:	b128      	cbz	r0, 11480 <__smakebuf_r+0x74>
   11474:	89a3      	ldrh	r3, [r4, #12]
   11476:	f023 0303 	bic.w	r3, r3, #3
   1147a:	f043 0301 	orr.w	r3, r3, #1
   1147e:	81a3      	strh	r3, [r4, #12]
   11480:	89a0      	ldrh	r0, [r4, #12]
   11482:	4305      	orrs	r5, r0
   11484:	81a5      	strh	r5, [r4, #12]
   11486:	e7cd      	b.n	11424 <__smakebuf_r+0x18>
   11488:	00010e41 	.word	0x00010e41

0001148c <__malloc_lock>:
   1148c:	4801      	ldr	r0, [pc, #4]	; (11494 <__malloc_lock+0x8>)
   1148e:	f001 b8a2 	b.w	125d6 <__retarget_lock_acquire_recursive>
   11492:	bf00      	nop
   11494:	20000520 	.word	0x20000520

00011498 <__malloc_unlock>:
   11498:	4801      	ldr	r0, [pc, #4]	; (114a0 <__malloc_unlock+0x8>)
   1149a:	f001 b8a2 	b.w	125e2 <__retarget_lock_release_recursive>
   1149e:	bf00      	nop
   114a0:	20000520 	.word	0x20000520

000114a4 <_Balloc>:
   114a4:	b570      	push	{r4, r5, r6, lr}
   114a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   114a8:	4604      	mov	r4, r0
   114aa:	460d      	mov	r5, r1
   114ac:	b976      	cbnz	r6, 114cc <_Balloc+0x28>
   114ae:	2010      	movs	r0, #16
   114b0:	f7fe fd84 	bl	ffbc <malloc>
   114b4:	4602      	mov	r2, r0
   114b6:	6260      	str	r0, [r4, #36]	; 0x24
   114b8:	b920      	cbnz	r0, 114c4 <_Balloc+0x20>
   114ba:	4b18      	ldr	r3, [pc, #96]	; (1151c <_Balloc+0x78>)
   114bc:	2166      	movs	r1, #102	; 0x66
   114be:	4818      	ldr	r0, [pc, #96]	; (11520 <_Balloc+0x7c>)
   114c0:	f7fe fd44 	bl	ff4c <__assert_func>
   114c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   114c8:	6006      	str	r6, [r0, #0]
   114ca:	60c6      	str	r6, [r0, #12]
   114cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   114ce:	68f3      	ldr	r3, [r6, #12]
   114d0:	b183      	cbz	r3, 114f4 <_Balloc+0x50>
   114d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   114d4:	68db      	ldr	r3, [r3, #12]
   114d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   114da:	b9b8      	cbnz	r0, 1150c <_Balloc+0x68>
   114dc:	2101      	movs	r1, #1
   114de:	4620      	mov	r0, r4
   114e0:	fa01 f605 	lsl.w	r6, r1, r5
   114e4:	1d72      	adds	r2, r6, #5
   114e6:	0092      	lsls	r2, r2, #2
   114e8:	f003 fb94 	bl	14c14 <_calloc_r>
   114ec:	b160      	cbz	r0, 11508 <_Balloc+0x64>
   114ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
   114f2:	e00e      	b.n	11512 <_Balloc+0x6e>
   114f4:	2221      	movs	r2, #33	; 0x21
   114f6:	2104      	movs	r1, #4
   114f8:	4620      	mov	r0, r4
   114fa:	f003 fb8b 	bl	14c14 <_calloc_r>
   114fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11500:	60f0      	str	r0, [r6, #12]
   11502:	68db      	ldr	r3, [r3, #12]
   11504:	2b00      	cmp	r3, #0
   11506:	d1e4      	bne.n	114d2 <_Balloc+0x2e>
   11508:	2000      	movs	r0, #0
   1150a:	bd70      	pop	{r4, r5, r6, pc}
   1150c:	6802      	ldr	r2, [r0, #0]
   1150e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   11512:	2300      	movs	r3, #0
   11514:	e9c0 3303 	strd	r3, r3, [r0, #12]
   11518:	e7f7      	b.n	1150a <_Balloc+0x66>
   1151a:	bf00      	nop
   1151c:	00018860 	.word	0x00018860
   11520:	00018950 	.word	0x00018950

00011524 <_Bfree>:
   11524:	b570      	push	{r4, r5, r6, lr}
   11526:	6a46      	ldr	r6, [r0, #36]	; 0x24
   11528:	4605      	mov	r5, r0
   1152a:	460c      	mov	r4, r1
   1152c:	b976      	cbnz	r6, 1154c <_Bfree+0x28>
   1152e:	2010      	movs	r0, #16
   11530:	f7fe fd44 	bl	ffbc <malloc>
   11534:	4602      	mov	r2, r0
   11536:	6268      	str	r0, [r5, #36]	; 0x24
   11538:	b920      	cbnz	r0, 11544 <_Bfree+0x20>
   1153a:	4b09      	ldr	r3, [pc, #36]	; (11560 <_Bfree+0x3c>)
   1153c:	218a      	movs	r1, #138	; 0x8a
   1153e:	4809      	ldr	r0, [pc, #36]	; (11564 <_Bfree+0x40>)
   11540:	f7fe fd04 	bl	ff4c <__assert_func>
   11544:	e9c0 6601 	strd	r6, r6, [r0, #4]
   11548:	6006      	str	r6, [r0, #0]
   1154a:	60c6      	str	r6, [r0, #12]
   1154c:	b13c      	cbz	r4, 1155e <_Bfree+0x3a>
   1154e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11550:	6862      	ldr	r2, [r4, #4]
   11552:	68db      	ldr	r3, [r3, #12]
   11554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11558:	6021      	str	r1, [r4, #0]
   1155a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1155e:	bd70      	pop	{r4, r5, r6, pc}
   11560:	00018860 	.word	0x00018860
   11564:	00018950 	.word	0x00018950

00011568 <__multadd>:
   11568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1156c:	f101 0c14 	add.w	ip, r1, #20
   11570:	4607      	mov	r7, r0
   11572:	460c      	mov	r4, r1
   11574:	461e      	mov	r6, r3
   11576:	690d      	ldr	r5, [r1, #16]
   11578:	2000      	movs	r0, #0
   1157a:	f8dc 3000 	ldr.w	r3, [ip]
   1157e:	3001      	adds	r0, #1
   11580:	b299      	uxth	r1, r3
   11582:	4285      	cmp	r5, r0
   11584:	fb02 6101 	mla	r1, r2, r1, r6
   11588:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1158c:	ea4f 4311 	mov.w	r3, r1, lsr #16
   11590:	b289      	uxth	r1, r1
   11592:	fb02 3306 	mla	r3, r2, r6, r3
   11596:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   1159a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1159e:	f84c 1b04 	str.w	r1, [ip], #4
   115a2:	dcea      	bgt.n	1157a <__multadd+0x12>
   115a4:	b30e      	cbz	r6, 115ea <__multadd+0x82>
   115a6:	68a3      	ldr	r3, [r4, #8]
   115a8:	42ab      	cmp	r3, r5
   115aa:	dc19      	bgt.n	115e0 <__multadd+0x78>
   115ac:	6861      	ldr	r1, [r4, #4]
   115ae:	4638      	mov	r0, r7
   115b0:	3101      	adds	r1, #1
   115b2:	f7ff ff77 	bl	114a4 <_Balloc>
   115b6:	4680      	mov	r8, r0
   115b8:	b928      	cbnz	r0, 115c6 <__multadd+0x5e>
   115ba:	4602      	mov	r2, r0
   115bc:	4b0c      	ldr	r3, [pc, #48]	; (115f0 <__multadd+0x88>)
   115be:	21b5      	movs	r1, #181	; 0xb5
   115c0:	480c      	ldr	r0, [pc, #48]	; (115f4 <__multadd+0x8c>)
   115c2:	f7fe fcc3 	bl	ff4c <__assert_func>
   115c6:	6922      	ldr	r2, [r4, #16]
   115c8:	f104 010c 	add.w	r1, r4, #12
   115cc:	300c      	adds	r0, #12
   115ce:	3202      	adds	r2, #2
   115d0:	0092      	lsls	r2, r2, #2
   115d2:	f003 faf0 	bl	14bb6 <memcpy>
   115d6:	4621      	mov	r1, r4
   115d8:	4644      	mov	r4, r8
   115da:	4638      	mov	r0, r7
   115dc:	f7ff ffa2 	bl	11524 <_Bfree>
   115e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   115e4:	3501      	adds	r5, #1
   115e6:	615e      	str	r6, [r3, #20]
   115e8:	6125      	str	r5, [r4, #16]
   115ea:	4620      	mov	r0, r4
   115ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115f0:	000188d3 	.word	0x000188d3
   115f4:	00018950 	.word	0x00018950

000115f8 <__s2b>:
   115f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   115fc:	4615      	mov	r5, r2
   115fe:	461f      	mov	r7, r3
   11600:	2209      	movs	r2, #9
   11602:	3308      	adds	r3, #8
   11604:	460c      	mov	r4, r1
   11606:	4606      	mov	r6, r0
   11608:	2100      	movs	r1, #0
   1160a:	fb93 f3f2 	sdiv	r3, r3, r2
   1160e:	2201      	movs	r2, #1
   11610:	429a      	cmp	r2, r3
   11612:	db09      	blt.n	11628 <__s2b+0x30>
   11614:	4630      	mov	r0, r6
   11616:	f7ff ff45 	bl	114a4 <_Balloc>
   1161a:	b940      	cbnz	r0, 1162e <__s2b+0x36>
   1161c:	4602      	mov	r2, r0
   1161e:	4b19      	ldr	r3, [pc, #100]	; (11684 <__s2b+0x8c>)
   11620:	21ce      	movs	r1, #206	; 0xce
   11622:	4819      	ldr	r0, [pc, #100]	; (11688 <__s2b+0x90>)
   11624:	f7fe fc92 	bl	ff4c <__assert_func>
   11628:	0052      	lsls	r2, r2, #1
   1162a:	3101      	adds	r1, #1
   1162c:	e7f0      	b.n	11610 <__s2b+0x18>
   1162e:	9b08      	ldr	r3, [sp, #32]
   11630:	2d09      	cmp	r5, #9
   11632:	6143      	str	r3, [r0, #20]
   11634:	f04f 0301 	mov.w	r3, #1
   11638:	6103      	str	r3, [r0, #16]
   1163a:	dd16      	ble.n	1166a <__s2b+0x72>
   1163c:	f104 0909 	add.w	r9, r4, #9
   11640:	442c      	add	r4, r5
   11642:	46c8      	mov	r8, r9
   11644:	f818 3b01 	ldrb.w	r3, [r8], #1
   11648:	4601      	mov	r1, r0
   1164a:	220a      	movs	r2, #10
   1164c:	4630      	mov	r0, r6
   1164e:	3b30      	subs	r3, #48	; 0x30
   11650:	f7ff ff8a 	bl	11568 <__multadd>
   11654:	45a0      	cmp	r8, r4
   11656:	d1f5      	bne.n	11644 <__s2b+0x4c>
   11658:	f1a5 0408 	sub.w	r4, r5, #8
   1165c:	444c      	add	r4, r9
   1165e:	1b2d      	subs	r5, r5, r4
   11660:	1963      	adds	r3, r4, r5
   11662:	42bb      	cmp	r3, r7
   11664:	db04      	blt.n	11670 <__s2b+0x78>
   11666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1166a:	340a      	adds	r4, #10
   1166c:	2509      	movs	r5, #9
   1166e:	e7f6      	b.n	1165e <__s2b+0x66>
   11670:	f814 3b01 	ldrb.w	r3, [r4], #1
   11674:	4601      	mov	r1, r0
   11676:	220a      	movs	r2, #10
   11678:	4630      	mov	r0, r6
   1167a:	3b30      	subs	r3, #48	; 0x30
   1167c:	f7ff ff74 	bl	11568 <__multadd>
   11680:	e7ee      	b.n	11660 <__s2b+0x68>
   11682:	bf00      	nop
   11684:	000188d3 	.word	0x000188d3
   11688:	00018950 	.word	0x00018950

0001168c <__i2b>:
   1168c:	b510      	push	{r4, lr}
   1168e:	460c      	mov	r4, r1
   11690:	2101      	movs	r1, #1
   11692:	f7ff ff07 	bl	114a4 <_Balloc>
   11696:	4602      	mov	r2, r0
   11698:	b928      	cbnz	r0, 116a6 <__i2b+0x1a>
   1169a:	4b05      	ldr	r3, [pc, #20]	; (116b0 <__i2b+0x24>)
   1169c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   116a0:	4804      	ldr	r0, [pc, #16]	; (116b4 <__i2b+0x28>)
   116a2:	f7fe fc53 	bl	ff4c <__assert_func>
   116a6:	2301      	movs	r3, #1
   116a8:	6144      	str	r4, [r0, #20]
   116aa:	6103      	str	r3, [r0, #16]
   116ac:	bd10      	pop	{r4, pc}
   116ae:	bf00      	nop
   116b0:	000188d3 	.word	0x000188d3
   116b4:	00018950 	.word	0x00018950

000116b8 <__multiply>:
   116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116bc:	4691      	mov	r9, r2
   116be:	690a      	ldr	r2, [r1, #16]
   116c0:	460c      	mov	r4, r1
   116c2:	b085      	sub	sp, #20
   116c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   116c8:	429a      	cmp	r2, r3
   116ca:	bfbe      	ittt	lt
   116cc:	460b      	movlt	r3, r1
   116ce:	464c      	movlt	r4, r9
   116d0:	4699      	movlt	r9, r3
   116d2:	6927      	ldr	r7, [r4, #16]
   116d4:	68a3      	ldr	r3, [r4, #8]
   116d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
   116da:	6861      	ldr	r1, [r4, #4]
   116dc:	eb07 060a 	add.w	r6, r7, sl
   116e0:	42b3      	cmp	r3, r6
   116e2:	bfb8      	it	lt
   116e4:	3101      	addlt	r1, #1
   116e6:	f7ff fedd 	bl	114a4 <_Balloc>
   116ea:	b930      	cbnz	r0, 116fa <__multiply+0x42>
   116ec:	4602      	mov	r2, r0
   116ee:	4b44      	ldr	r3, [pc, #272]	; (11800 <__multiply+0x148>)
   116f0:	f240 115d 	movw	r1, #349	; 0x15d
   116f4:	4843      	ldr	r0, [pc, #268]	; (11804 <__multiply+0x14c>)
   116f6:	f7fe fc29 	bl	ff4c <__assert_func>
   116fa:	f100 0514 	add.w	r5, r0, #20
   116fe:	2200      	movs	r2, #0
   11700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   11704:	462b      	mov	r3, r5
   11706:	4543      	cmp	r3, r8
   11708:	d321      	bcc.n	1174e <__multiply+0x96>
   1170a:	f104 0314 	add.w	r3, r4, #20
   1170e:	f104 0115 	add.w	r1, r4, #21
   11712:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   11716:	f109 0314 	add.w	r3, r9, #20
   1171a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   1171e:	9202      	str	r2, [sp, #8]
   11720:	1b3a      	subs	r2, r7, r4
   11722:	3a15      	subs	r2, #21
   11724:	f022 0203 	bic.w	r2, r2, #3
   11728:	3204      	adds	r2, #4
   1172a:	428f      	cmp	r7, r1
   1172c:	bf38      	it	cc
   1172e:	2204      	movcc	r2, #4
   11730:	9201      	str	r2, [sp, #4]
   11732:	9a02      	ldr	r2, [sp, #8]
   11734:	9303      	str	r3, [sp, #12]
   11736:	429a      	cmp	r2, r3
   11738:	d80c      	bhi.n	11754 <__multiply+0x9c>
   1173a:	2e00      	cmp	r6, #0
   1173c:	dd03      	ble.n	11746 <__multiply+0x8e>
   1173e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   11742:	2b00      	cmp	r3, #0
   11744:	d05a      	beq.n	117fc <__multiply+0x144>
   11746:	6106      	str	r6, [r0, #16]
   11748:	b005      	add	sp, #20
   1174a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1174e:	f843 2b04 	str.w	r2, [r3], #4
   11752:	e7d8      	b.n	11706 <__multiply+0x4e>
   11754:	f8b3 a000 	ldrh.w	sl, [r3]
   11758:	f1ba 0f00 	cmp.w	sl, #0
   1175c:	d024      	beq.n	117a8 <__multiply+0xf0>
   1175e:	f104 0e14 	add.w	lr, r4, #20
   11762:	46a9      	mov	r9, r5
   11764:	f04f 0c00 	mov.w	ip, #0
   11768:	f85e 2b04 	ldr.w	r2, [lr], #4
   1176c:	f8d9 1000 	ldr.w	r1, [r9]
   11770:	fa1f fb82 	uxth.w	fp, r2
   11774:	4577      	cmp	r7, lr
   11776:	b289      	uxth	r1, r1
   11778:	fb0a 110b 	mla	r1, sl, fp, r1
   1177c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   11780:	f8d9 2000 	ldr.w	r2, [r9]
   11784:	4461      	add	r1, ip
   11786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   1178a:	fb0a c20b 	mla	r2, sl, fp, ip
   1178e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   11792:	b289      	uxth	r1, r1
   11794:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   11798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1179c:	f849 1b04 	str.w	r1, [r9], #4
   117a0:	d8e2      	bhi.n	11768 <__multiply+0xb0>
   117a2:	9a01      	ldr	r2, [sp, #4]
   117a4:	f845 c002 	str.w	ip, [r5, r2]
   117a8:	9a03      	ldr	r2, [sp, #12]
   117aa:	3304      	adds	r3, #4
   117ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   117b0:	f1b9 0f00 	cmp.w	r9, #0
   117b4:	d020      	beq.n	117f8 <__multiply+0x140>
   117b6:	6829      	ldr	r1, [r5, #0]
   117b8:	f104 0c14 	add.w	ip, r4, #20
   117bc:	46ae      	mov	lr, r5
   117be:	f04f 0a00 	mov.w	sl, #0
   117c2:	f8bc b000 	ldrh.w	fp, [ip]
   117c6:	b289      	uxth	r1, r1
   117c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
   117cc:	fb09 220b 	mla	r2, r9, fp, r2
   117d0:	4492      	add	sl, r2
   117d2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   117d6:	f84e 1b04 	str.w	r1, [lr], #4
   117da:	f85c 2b04 	ldr.w	r2, [ip], #4
   117de:	f8be 1000 	ldrh.w	r1, [lr]
   117e2:	0c12      	lsrs	r2, r2, #16
   117e4:	4567      	cmp	r7, ip
   117e6:	fb09 1102 	mla	r1, r9, r2, r1
   117ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   117ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   117f2:	d8e6      	bhi.n	117c2 <__multiply+0x10a>
   117f4:	9a01      	ldr	r2, [sp, #4]
   117f6:	50a9      	str	r1, [r5, r2]
   117f8:	3504      	adds	r5, #4
   117fa:	e79a      	b.n	11732 <__multiply+0x7a>
   117fc:	3e01      	subs	r6, #1
   117fe:	e79c      	b.n	1173a <__multiply+0x82>
   11800:	000188d3 	.word	0x000188d3
   11804:	00018950 	.word	0x00018950

00011808 <__pow5mult>:
   11808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1180c:	4615      	mov	r5, r2
   1180e:	f012 0203 	ands.w	r2, r2, #3
   11812:	4606      	mov	r6, r0
   11814:	460f      	mov	r7, r1
   11816:	d007      	beq.n	11828 <__pow5mult+0x20>
   11818:	3a01      	subs	r2, #1
   1181a:	4c25      	ldr	r4, [pc, #148]	; (118b0 <__pow5mult+0xa8>)
   1181c:	2300      	movs	r3, #0
   1181e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   11822:	f7ff fea1 	bl	11568 <__multadd>
   11826:	4607      	mov	r7, r0
   11828:	10ad      	asrs	r5, r5, #2
   1182a:	d03d      	beq.n	118a8 <__pow5mult+0xa0>
   1182c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   1182e:	b97c      	cbnz	r4, 11850 <__pow5mult+0x48>
   11830:	2010      	movs	r0, #16
   11832:	f7fe fbc3 	bl	ffbc <malloc>
   11836:	4602      	mov	r2, r0
   11838:	6270      	str	r0, [r6, #36]	; 0x24
   1183a:	b928      	cbnz	r0, 11848 <__pow5mult+0x40>
   1183c:	4b1d      	ldr	r3, [pc, #116]	; (118b4 <__pow5mult+0xac>)
   1183e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   11842:	481d      	ldr	r0, [pc, #116]	; (118b8 <__pow5mult+0xb0>)
   11844:	f7fe fb82 	bl	ff4c <__assert_func>
   11848:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1184c:	6004      	str	r4, [r0, #0]
   1184e:	60c4      	str	r4, [r0, #12]
   11850:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   11854:	f8d8 4008 	ldr.w	r4, [r8, #8]
   11858:	b94c      	cbnz	r4, 1186e <__pow5mult+0x66>
   1185a:	f240 2171 	movw	r1, #625	; 0x271
   1185e:	4630      	mov	r0, r6
   11860:	f7ff ff14 	bl	1168c <__i2b>
   11864:	2300      	movs	r3, #0
   11866:	4604      	mov	r4, r0
   11868:	f8c8 0008 	str.w	r0, [r8, #8]
   1186c:	6003      	str	r3, [r0, #0]
   1186e:	f04f 0900 	mov.w	r9, #0
   11872:	07eb      	lsls	r3, r5, #31
   11874:	d50a      	bpl.n	1188c <__pow5mult+0x84>
   11876:	4639      	mov	r1, r7
   11878:	4622      	mov	r2, r4
   1187a:	4630      	mov	r0, r6
   1187c:	f7ff ff1c 	bl	116b8 <__multiply>
   11880:	4680      	mov	r8, r0
   11882:	4639      	mov	r1, r7
   11884:	4630      	mov	r0, r6
   11886:	4647      	mov	r7, r8
   11888:	f7ff fe4c 	bl	11524 <_Bfree>
   1188c:	106d      	asrs	r5, r5, #1
   1188e:	d00b      	beq.n	118a8 <__pow5mult+0xa0>
   11890:	6820      	ldr	r0, [r4, #0]
   11892:	b938      	cbnz	r0, 118a4 <__pow5mult+0x9c>
   11894:	4622      	mov	r2, r4
   11896:	4621      	mov	r1, r4
   11898:	4630      	mov	r0, r6
   1189a:	f7ff ff0d 	bl	116b8 <__multiply>
   1189e:	6020      	str	r0, [r4, #0]
   118a0:	f8c0 9000 	str.w	r9, [r0]
   118a4:	4604      	mov	r4, r0
   118a6:	e7e4      	b.n	11872 <__pow5mult+0x6a>
   118a8:	4638      	mov	r0, r7
   118aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   118ae:	bf00      	nop
   118b0:	00017468 	.word	0x00017468
   118b4:	00018860 	.word	0x00018860
   118b8:	00018950 	.word	0x00018950

000118bc <__lshift>:
   118bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   118c0:	460c      	mov	r4, r1
   118c2:	4607      	mov	r7, r0
   118c4:	4691      	mov	r9, r2
   118c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   118ca:	6923      	ldr	r3, [r4, #16]
   118cc:	6849      	ldr	r1, [r1, #4]
   118ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
   118d2:	68a3      	ldr	r3, [r4, #8]
   118d4:	f108 0601 	add.w	r6, r8, #1
   118d8:	42b3      	cmp	r3, r6
   118da:	db0b      	blt.n	118f4 <__lshift+0x38>
   118dc:	4638      	mov	r0, r7
   118de:	f7ff fde1 	bl	114a4 <_Balloc>
   118e2:	4605      	mov	r5, r0
   118e4:	b948      	cbnz	r0, 118fa <__lshift+0x3e>
   118e6:	4602      	mov	r2, r0
   118e8:	4b2a      	ldr	r3, [pc, #168]	; (11994 <__lshift+0xd8>)
   118ea:	f240 11d9 	movw	r1, #473	; 0x1d9
   118ee:	482a      	ldr	r0, [pc, #168]	; (11998 <__lshift+0xdc>)
   118f0:	f7fe fb2c 	bl	ff4c <__assert_func>
   118f4:	3101      	adds	r1, #1
   118f6:	005b      	lsls	r3, r3, #1
   118f8:	e7ee      	b.n	118d8 <__lshift+0x1c>
   118fa:	2300      	movs	r3, #0
   118fc:	f100 0114 	add.w	r1, r0, #20
   11900:	f100 0210 	add.w	r2, r0, #16
   11904:	4618      	mov	r0, r3
   11906:	4553      	cmp	r3, sl
   11908:	db37      	blt.n	1197a <__lshift+0xbe>
   1190a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1190e:	f104 0314 	add.w	r3, r4, #20
   11912:	6920      	ldr	r0, [r4, #16]
   11914:	f019 091f 	ands.w	r9, r9, #31
   11918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1191c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11920:	d02f      	beq.n	11982 <__lshift+0xc6>
   11922:	f1c9 0e20 	rsb	lr, r9, #32
   11926:	468a      	mov	sl, r1
   11928:	f04f 0c00 	mov.w	ip, #0
   1192c:	681a      	ldr	r2, [r3, #0]
   1192e:	fa02 f209 	lsl.w	r2, r2, r9
   11932:	ea42 020c 	orr.w	r2, r2, ip
   11936:	f84a 2b04 	str.w	r2, [sl], #4
   1193a:	f853 2b04 	ldr.w	r2, [r3], #4
   1193e:	4298      	cmp	r0, r3
   11940:	fa22 fc0e 	lsr.w	ip, r2, lr
   11944:	d8f2      	bhi.n	1192c <__lshift+0x70>
   11946:	1b03      	subs	r3, r0, r4
   11948:	f104 0215 	add.w	r2, r4, #21
   1194c:	3b15      	subs	r3, #21
   1194e:	f023 0303 	bic.w	r3, r3, #3
   11952:	3304      	adds	r3, #4
   11954:	4290      	cmp	r0, r2
   11956:	bf38      	it	cc
   11958:	2304      	movcc	r3, #4
   1195a:	f841 c003 	str.w	ip, [r1, r3]
   1195e:	f1bc 0f00 	cmp.w	ip, #0
   11962:	d001      	beq.n	11968 <__lshift+0xac>
   11964:	f108 0602 	add.w	r6, r8, #2
   11968:	3e01      	subs	r6, #1
   1196a:	4638      	mov	r0, r7
   1196c:	4621      	mov	r1, r4
   1196e:	612e      	str	r6, [r5, #16]
   11970:	f7ff fdd8 	bl	11524 <_Bfree>
   11974:	4628      	mov	r0, r5
   11976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1197a:	3301      	adds	r3, #1
   1197c:	f842 0f04 	str.w	r0, [r2, #4]!
   11980:	e7c1      	b.n	11906 <__lshift+0x4a>
   11982:	3904      	subs	r1, #4
   11984:	f853 2b04 	ldr.w	r2, [r3], #4
   11988:	4298      	cmp	r0, r3
   1198a:	f841 2f04 	str.w	r2, [r1, #4]!
   1198e:	d8f9      	bhi.n	11984 <__lshift+0xc8>
   11990:	e7ea      	b.n	11968 <__lshift+0xac>
   11992:	bf00      	nop
   11994:	000188d3 	.word	0x000188d3
   11998:	00018950 	.word	0x00018950

0001199c <__mdiff>:
   1199c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119a0:	460c      	mov	r4, r1
   119a2:	4606      	mov	r6, r0
   119a4:	4611      	mov	r1, r2
   119a6:	4692      	mov	sl, r2
   119a8:	4620      	mov	r0, r4
   119aa:	f003 fd6a 	bl	15482 <__mcmp>
   119ae:	1e05      	subs	r5, r0, #0
   119b0:	d110      	bne.n	119d4 <__mdiff+0x38>
   119b2:	4629      	mov	r1, r5
   119b4:	4630      	mov	r0, r6
   119b6:	f7ff fd75 	bl	114a4 <_Balloc>
   119ba:	b930      	cbnz	r0, 119ca <__mdiff+0x2e>
   119bc:	4b3d      	ldr	r3, [pc, #244]	; (11ab4 <__mdiff+0x118>)
   119be:	4602      	mov	r2, r0
   119c0:	f240 2132 	movw	r1, #562	; 0x232
   119c4:	483c      	ldr	r0, [pc, #240]	; (11ab8 <__mdiff+0x11c>)
   119c6:	f7fe fac1 	bl	ff4c <__assert_func>
   119ca:	2301      	movs	r3, #1
   119cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   119d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119d4:	bfa4      	itt	ge
   119d6:	4653      	movge	r3, sl
   119d8:	46a2      	movge	sl, r4
   119da:	4630      	mov	r0, r6
   119dc:	bfa8      	it	ge
   119de:	2500      	movge	r5, #0
   119e0:	f8da 1004 	ldr.w	r1, [sl, #4]
   119e4:	bfac      	ite	ge
   119e6:	461c      	movge	r4, r3
   119e8:	2501      	movlt	r5, #1
   119ea:	f7ff fd5b 	bl	114a4 <_Balloc>
   119ee:	b920      	cbnz	r0, 119fa <__mdiff+0x5e>
   119f0:	4b30      	ldr	r3, [pc, #192]	; (11ab4 <__mdiff+0x118>)
   119f2:	4602      	mov	r2, r0
   119f4:	f44f 7110 	mov.w	r1, #576	; 0x240
   119f8:	e7e4      	b.n	119c4 <__mdiff+0x28>
   119fa:	f8da 7010 	ldr.w	r7, [sl, #16]
   119fe:	f104 0914 	add.w	r9, r4, #20
   11a02:	6926      	ldr	r6, [r4, #16]
   11a04:	f100 0814 	add.w	r8, r0, #20
   11a08:	60c5      	str	r5, [r0, #12]
   11a0a:	f10a 0514 	add.w	r5, sl, #20
   11a0e:	f10a 0210 	add.w	r2, sl, #16
   11a12:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   11a16:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   11a1a:	46c2      	mov	sl, r8
   11a1c:	f04f 0c00 	mov.w	ip, #0
   11a20:	f852 bf04 	ldr.w	fp, [r2, #4]!
   11a24:	f859 3b04 	ldr.w	r3, [r9], #4
   11a28:	fa1f f18b 	uxth.w	r1, fp
   11a2c:	454e      	cmp	r6, r9
   11a2e:	448c      	add	ip, r1
   11a30:	b299      	uxth	r1, r3
   11a32:	ea4f 4313 	mov.w	r3, r3, lsr #16
   11a36:	ebac 0101 	sub.w	r1, ip, r1
   11a3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   11a3e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   11a42:	b289      	uxth	r1, r1
   11a44:	ea4f 4c23 	mov.w	ip, r3, asr #16
   11a48:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   11a4c:	f84a 3b04 	str.w	r3, [sl], #4
   11a50:	d8e6      	bhi.n	11a20 <__mdiff+0x84>
   11a52:	1b33      	subs	r3, r6, r4
   11a54:	3415      	adds	r4, #21
   11a56:	3b15      	subs	r3, #21
   11a58:	f023 0303 	bic.w	r3, r3, #3
   11a5c:	3304      	adds	r3, #4
   11a5e:	42a6      	cmp	r6, r4
   11a60:	bf38      	it	cc
   11a62:	2304      	movcc	r3, #4
   11a64:	441d      	add	r5, r3
   11a66:	4443      	add	r3, r8
   11a68:	462c      	mov	r4, r5
   11a6a:	461e      	mov	r6, r3
   11a6c:	4574      	cmp	r4, lr
   11a6e:	d30e      	bcc.n	11a8e <__mdiff+0xf2>
   11a70:	f10e 0203 	add.w	r2, lr, #3
   11a74:	1b52      	subs	r2, r2, r5
   11a76:	3d03      	subs	r5, #3
   11a78:	f022 0203 	bic.w	r2, r2, #3
   11a7c:	45ae      	cmp	lr, r5
   11a7e:	bf38      	it	cc
   11a80:	2200      	movcc	r2, #0
   11a82:	441a      	add	r2, r3
   11a84:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   11a88:	b18b      	cbz	r3, 11aae <__mdiff+0x112>
   11a8a:	6107      	str	r7, [r0, #16]
   11a8c:	e7a0      	b.n	119d0 <__mdiff+0x34>
   11a8e:	f854 8b04 	ldr.w	r8, [r4], #4
   11a92:	fa1f f288 	uxth.w	r2, r8
   11a96:	4462      	add	r2, ip
   11a98:	1411      	asrs	r1, r2, #16
   11a9a:	b292      	uxth	r2, r2
   11a9c:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   11aa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   11aa4:	ea4f 4c21 	mov.w	ip, r1, asr #16
   11aa8:	f846 2b04 	str.w	r2, [r6], #4
   11aac:	e7de      	b.n	11a6c <__mdiff+0xd0>
   11aae:	3f01      	subs	r7, #1
   11ab0:	e7e8      	b.n	11a84 <__mdiff+0xe8>
   11ab2:	bf00      	nop
   11ab4:	000188d3 	.word	0x000188d3
   11ab8:	00018950 	.word	0x00018950

00011abc <__ulp>:
   11abc:	b082      	sub	sp, #8
   11abe:	4913      	ldr	r1, [pc, #76]	; (11b0c <__ulp+0x50>)
   11ac0:	ed8d 0b00 	vstr	d0, [sp]
   11ac4:	9b01      	ldr	r3, [sp, #4]
   11ac6:	4019      	ands	r1, r3
   11ac8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   11acc:	2900      	cmp	r1, #0
   11ace:	dd05      	ble.n	11adc <__ulp+0x20>
   11ad0:	2200      	movs	r2, #0
   11ad2:	460b      	mov	r3, r1
   11ad4:	ec43 2b10 	vmov	d0, r2, r3
   11ad8:	b002      	add	sp, #8
   11ada:	4770      	bx	lr
   11adc:	4249      	negs	r1, r1
   11ade:	2200      	movs	r2, #0
   11ae0:	2300      	movs	r3, #0
   11ae2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   11ae6:	ea4f 5021 	mov.w	r0, r1, asr #20
   11aea:	da04      	bge.n	11af6 <__ulp+0x3a>
   11aec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   11af0:	fa41 f300 	asr.w	r3, r1, r0
   11af4:	e7ee      	b.n	11ad4 <__ulp+0x18>
   11af6:	f1a0 0114 	sub.w	r1, r0, #20
   11afa:	291e      	cmp	r1, #30
   11afc:	bfd6      	itet	le
   11afe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   11b02:	2101      	movgt	r1, #1
   11b04:	fa20 f101 	lsrle.w	r1, r0, r1
   11b08:	460a      	mov	r2, r1
   11b0a:	e7e3      	b.n	11ad4 <__ulp+0x18>
   11b0c:	7ff00000 	.word	0x7ff00000

00011b10 <__b2d>:
   11b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b12:	6905      	ldr	r5, [r0, #16]
   11b14:	f100 0714 	add.w	r7, r0, #20
   11b18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   11b1c:	f855 4c04 	ldr.w	r4, [r5, #-4]
   11b20:	1f2e      	subs	r6, r5, #4
   11b22:	4620      	mov	r0, r4
   11b24:	f003 fc5e 	bl	153e4 <__hi0bits>
   11b28:	f1c0 0320 	rsb	r3, r0, #32
   11b2c:	280a      	cmp	r0, #10
   11b2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 11bac <__b2d+0x9c>
   11b32:	600b      	str	r3, [r1, #0]
   11b34:	dc15      	bgt.n	11b62 <__b2d+0x52>
   11b36:	f1c0 0e0b 	rsb	lr, r0, #11
   11b3a:	42b7      	cmp	r7, r6
   11b3c:	f100 0015 	add.w	r0, r0, #21
   11b40:	fa24 f10e 	lsr.w	r1, r4, lr
   11b44:	fa04 f000 	lsl.w	r0, r4, r0
   11b48:	ea41 030c 	orr.w	r3, r1, ip
   11b4c:	bf34      	ite	cc
   11b4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   11b52:	2100      	movcs	r1, #0
   11b54:	fa21 f10e 	lsr.w	r1, r1, lr
   11b58:	ea40 0201 	orr.w	r2, r0, r1
   11b5c:	ec43 2b10 	vmov	d0, r2, r3
   11b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b62:	42b7      	cmp	r7, r6
   11b64:	bf3a      	itte	cc
   11b66:	f1a5 0608 	subcc.w	r6, r5, #8
   11b6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   11b6e:	2100      	movcs	r1, #0
   11b70:	380b      	subs	r0, #11
   11b72:	d017      	beq.n	11ba4 <__b2d+0x94>
   11b74:	f1c0 0c20 	rsb	ip, r0, #32
   11b78:	fa04 f500 	lsl.w	r5, r4, r0
   11b7c:	42be      	cmp	r6, r7
   11b7e:	fa01 f000 	lsl.w	r0, r1, r0
   11b82:	fa21 f40c 	lsr.w	r4, r1, ip
   11b86:	ea45 0504 	orr.w	r5, r5, r4
   11b8a:	bf8c      	ite	hi
   11b8c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   11b90:	2400      	movls	r4, #0
   11b92:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   11b96:	fa24 f40c 	lsr.w	r4, r4, ip
   11b9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   11b9e:	ea40 0204 	orr.w	r2, r0, r4
   11ba2:	e7db      	b.n	11b5c <__b2d+0x4c>
   11ba4:	ea44 030c 	orr.w	r3, r4, ip
   11ba8:	460a      	mov	r2, r1
   11baa:	e7d7      	b.n	11b5c <__b2d+0x4c>
   11bac:	3ff00000 	.word	0x3ff00000

00011bb0 <__d2b>:
   11bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11bb4:	4689      	mov	r9, r1
   11bb6:	2101      	movs	r1, #1
   11bb8:	4690      	mov	r8, r2
   11bba:	ec57 6b10 	vmov	r6, r7, d0
   11bbe:	f7ff fc71 	bl	114a4 <_Balloc>
   11bc2:	4604      	mov	r4, r0
   11bc4:	b930      	cbnz	r0, 11bd4 <__d2b+0x24>
   11bc6:	4602      	mov	r2, r0
   11bc8:	4b25      	ldr	r3, [pc, #148]	; (11c60 <__d2b+0xb0>)
   11bca:	f240 310a 	movw	r1, #778	; 0x30a
   11bce:	4825      	ldr	r0, [pc, #148]	; (11c64 <__d2b+0xb4>)
   11bd0:	f7fe f9bc 	bl	ff4c <__assert_func>
   11bd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   11bd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   11bdc:	bb35      	cbnz	r5, 11c2c <__d2b+0x7c>
   11bde:	2e00      	cmp	r6, #0
   11be0:	9301      	str	r3, [sp, #4]
   11be2:	d028      	beq.n	11c36 <__d2b+0x86>
   11be4:	4668      	mov	r0, sp
   11be6:	9600      	str	r6, [sp, #0]
   11be8:	f003 fc1c 	bl	15424 <__lo0bits>
   11bec:	9900      	ldr	r1, [sp, #0]
   11bee:	b300      	cbz	r0, 11c32 <__d2b+0x82>
   11bf0:	9a01      	ldr	r2, [sp, #4]
   11bf2:	f1c0 0320 	rsb	r3, r0, #32
   11bf6:	fa02 f303 	lsl.w	r3, r2, r3
   11bfa:	40c2      	lsrs	r2, r0
   11bfc:	430b      	orrs	r3, r1
   11bfe:	9201      	str	r2, [sp, #4]
   11c00:	6163      	str	r3, [r4, #20]
   11c02:	9b01      	ldr	r3, [sp, #4]
   11c04:	2b00      	cmp	r3, #0
   11c06:	61a3      	str	r3, [r4, #24]
   11c08:	bf14      	ite	ne
   11c0a:	2202      	movne	r2, #2
   11c0c:	2201      	moveq	r2, #1
   11c0e:	6122      	str	r2, [r4, #16]
   11c10:	b1d5      	cbz	r5, 11c48 <__d2b+0x98>
   11c12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   11c16:	4405      	add	r5, r0
   11c18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   11c1c:	f8c9 5000 	str.w	r5, [r9]
   11c20:	f8c8 0000 	str.w	r0, [r8]
   11c24:	4620      	mov	r0, r4
   11c26:	b003      	add	sp, #12
   11c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11c30:	e7d5      	b.n	11bde <__d2b+0x2e>
   11c32:	6161      	str	r1, [r4, #20]
   11c34:	e7e5      	b.n	11c02 <__d2b+0x52>
   11c36:	a801      	add	r0, sp, #4
   11c38:	f003 fbf4 	bl	15424 <__lo0bits>
   11c3c:	9b01      	ldr	r3, [sp, #4]
   11c3e:	2201      	movs	r2, #1
   11c40:	3020      	adds	r0, #32
   11c42:	6163      	str	r3, [r4, #20]
   11c44:	6122      	str	r2, [r4, #16]
   11c46:	e7e3      	b.n	11c10 <__d2b+0x60>
   11c48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   11c4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   11c50:	f8c9 0000 	str.w	r0, [r9]
   11c54:	6918      	ldr	r0, [r3, #16]
   11c56:	f003 fbc5 	bl	153e4 <__hi0bits>
   11c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   11c5e:	e7df      	b.n	11c20 <__d2b+0x70>
   11c60:	000188d3 	.word	0x000188d3
   11c64:	00018950 	.word	0x00018950

00011c68 <_svfiprintf_r>:
   11c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c6c:	4698      	mov	r8, r3
   11c6e:	898b      	ldrh	r3, [r1, #12]
   11c70:	b09d      	sub	sp, #116	; 0x74
   11c72:	4607      	mov	r7, r0
   11c74:	061b      	lsls	r3, r3, #24
   11c76:	460d      	mov	r5, r1
   11c78:	4614      	mov	r4, r2
   11c7a:	d50e      	bpl.n	11c9a <_svfiprintf_r+0x32>
   11c7c:	690b      	ldr	r3, [r1, #16]
   11c7e:	b963      	cbnz	r3, 11c9a <_svfiprintf_r+0x32>
   11c80:	2140      	movs	r1, #64	; 0x40
   11c82:	f7fe f9f7 	bl	10074 <_malloc_r>
   11c86:	6028      	str	r0, [r5, #0]
   11c88:	6128      	str	r0, [r5, #16]
   11c8a:	b920      	cbnz	r0, 11c96 <_svfiprintf_r+0x2e>
   11c8c:	230c      	movs	r3, #12
   11c8e:	603b      	str	r3, [r7, #0]
   11c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11c94:	e0d1      	b.n	11e3a <_svfiprintf_r+0x1d2>
   11c96:	2340      	movs	r3, #64	; 0x40
   11c98:	616b      	str	r3, [r5, #20]
   11c9a:	2300      	movs	r3, #0
   11c9c:	f8cd 800c 	str.w	r8, [sp, #12]
   11ca0:	f04f 0901 	mov.w	r9, #1
   11ca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 11e54 <_svfiprintf_r+0x1ec>
   11ca8:	9309      	str	r3, [sp, #36]	; 0x24
   11caa:	2320      	movs	r3, #32
   11cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   11cb0:	2330      	movs	r3, #48	; 0x30
   11cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   11cb6:	4623      	mov	r3, r4
   11cb8:	469a      	mov	sl, r3
   11cba:	f813 2b01 	ldrb.w	r2, [r3], #1
   11cbe:	b10a      	cbz	r2, 11cc4 <_svfiprintf_r+0x5c>
   11cc0:	2a25      	cmp	r2, #37	; 0x25
   11cc2:	d1f9      	bne.n	11cb8 <_svfiprintf_r+0x50>
   11cc4:	ebba 0b04 	subs.w	fp, sl, r4
   11cc8:	d00b      	beq.n	11ce2 <_svfiprintf_r+0x7a>
   11cca:	465b      	mov	r3, fp
   11ccc:	4622      	mov	r2, r4
   11cce:	4629      	mov	r1, r5
   11cd0:	4638      	mov	r0, r7
   11cd2:	f003 fc8f 	bl	155f4 <__ssputs_r>
   11cd6:	3001      	adds	r0, #1
   11cd8:	f000 80aa 	beq.w	11e30 <_svfiprintf_r+0x1c8>
   11cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11cde:	445a      	add	r2, fp
   11ce0:	9209      	str	r2, [sp, #36]	; 0x24
   11ce2:	f89a 3000 	ldrb.w	r3, [sl]
   11ce6:	2b00      	cmp	r3, #0
   11ce8:	f000 80a2 	beq.w	11e30 <_svfiprintf_r+0x1c8>
   11cec:	2300      	movs	r3, #0
   11cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11cf2:	f10a 0a01 	add.w	sl, sl, #1
   11cf6:	9304      	str	r3, [sp, #16]
   11cf8:	9307      	str	r3, [sp, #28]
   11cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   11cfe:	931a      	str	r3, [sp, #104]	; 0x68
   11d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
   11d04:	4654      	mov	r4, sl
   11d06:	2205      	movs	r2, #5
   11d08:	4852      	ldr	r0, [pc, #328]	; (11e54 <_svfiprintf_r+0x1ec>)
   11d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   11d0e:	f002 ff44 	bl	14b9a <memchr>
   11d12:	9a04      	ldr	r2, [sp, #16]
   11d14:	b9d8      	cbnz	r0, 11d4e <_svfiprintf_r+0xe6>
   11d16:	06d0      	lsls	r0, r2, #27
   11d18:	bf44      	itt	mi
   11d1a:	2320      	movmi	r3, #32
   11d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   11d20:	0711      	lsls	r1, r2, #28
   11d22:	bf44      	itt	mi
   11d24:	232b      	movmi	r3, #43	; 0x2b
   11d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   11d2a:	f89a 3000 	ldrb.w	r3, [sl]
   11d2e:	2b2a      	cmp	r3, #42	; 0x2a
   11d30:	d015      	beq.n	11d5e <_svfiprintf_r+0xf6>
   11d32:	9a07      	ldr	r2, [sp, #28]
   11d34:	4654      	mov	r4, sl
   11d36:	2000      	movs	r0, #0
   11d38:	f04f 0c0a 	mov.w	ip, #10
   11d3c:	4621      	mov	r1, r4
   11d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   11d42:	3b30      	subs	r3, #48	; 0x30
   11d44:	2b09      	cmp	r3, #9
   11d46:	d94e      	bls.n	11de6 <_svfiprintf_r+0x17e>
   11d48:	b1b0      	cbz	r0, 11d78 <_svfiprintf_r+0x110>
   11d4a:	9207      	str	r2, [sp, #28]
   11d4c:	e014      	b.n	11d78 <_svfiprintf_r+0x110>
   11d4e:	eba0 0308 	sub.w	r3, r0, r8
   11d52:	46a2      	mov	sl, r4
   11d54:	fa09 f303 	lsl.w	r3, r9, r3
   11d58:	4313      	orrs	r3, r2
   11d5a:	9304      	str	r3, [sp, #16]
   11d5c:	e7d2      	b.n	11d04 <_svfiprintf_r+0x9c>
   11d5e:	9b03      	ldr	r3, [sp, #12]
   11d60:	1d19      	adds	r1, r3, #4
   11d62:	681b      	ldr	r3, [r3, #0]
   11d64:	2b00      	cmp	r3, #0
   11d66:	9103      	str	r1, [sp, #12]
   11d68:	bfbb      	ittet	lt
   11d6a:	425b      	neglt	r3, r3
   11d6c:	f042 0202 	orrlt.w	r2, r2, #2
   11d70:	9307      	strge	r3, [sp, #28]
   11d72:	9307      	strlt	r3, [sp, #28]
   11d74:	bfb8      	it	lt
   11d76:	9204      	strlt	r2, [sp, #16]
   11d78:	7823      	ldrb	r3, [r4, #0]
   11d7a:	2b2e      	cmp	r3, #46	; 0x2e
   11d7c:	d10c      	bne.n	11d98 <_svfiprintf_r+0x130>
   11d7e:	7863      	ldrb	r3, [r4, #1]
   11d80:	2b2a      	cmp	r3, #42	; 0x2a
   11d82:	d135      	bne.n	11df0 <_svfiprintf_r+0x188>
   11d84:	9b03      	ldr	r3, [sp, #12]
   11d86:	3402      	adds	r4, #2
   11d88:	1d1a      	adds	r2, r3, #4
   11d8a:	681b      	ldr	r3, [r3, #0]
   11d8c:	2b00      	cmp	r3, #0
   11d8e:	9203      	str	r2, [sp, #12]
   11d90:	bfb8      	it	lt
   11d92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   11d96:	9305      	str	r3, [sp, #20]
   11d98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11e64 <_svfiprintf_r+0x1fc>
   11d9c:	2203      	movs	r2, #3
   11d9e:	7821      	ldrb	r1, [r4, #0]
   11da0:	4650      	mov	r0, sl
   11da2:	f002 fefa 	bl	14b9a <memchr>
   11da6:	b140      	cbz	r0, 11dba <_svfiprintf_r+0x152>
   11da8:	2340      	movs	r3, #64	; 0x40
   11daa:	eba0 000a 	sub.w	r0, r0, sl
   11dae:	3401      	adds	r4, #1
   11db0:	fa03 f000 	lsl.w	r0, r3, r0
   11db4:	9b04      	ldr	r3, [sp, #16]
   11db6:	4303      	orrs	r3, r0
   11db8:	9304      	str	r3, [sp, #16]
   11dba:	f814 1b01 	ldrb.w	r1, [r4], #1
   11dbe:	2206      	movs	r2, #6
   11dc0:	4825      	ldr	r0, [pc, #148]	; (11e58 <_svfiprintf_r+0x1f0>)
   11dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   11dc6:	f002 fee8 	bl	14b9a <memchr>
   11dca:	2800      	cmp	r0, #0
   11dcc:	d038      	beq.n	11e40 <_svfiprintf_r+0x1d8>
   11dce:	4b23      	ldr	r3, [pc, #140]	; (11e5c <_svfiprintf_r+0x1f4>)
   11dd0:	bb1b      	cbnz	r3, 11e1a <_svfiprintf_r+0x1b2>
   11dd2:	9b03      	ldr	r3, [sp, #12]
   11dd4:	3307      	adds	r3, #7
   11dd6:	f023 0307 	bic.w	r3, r3, #7
   11dda:	3308      	adds	r3, #8
   11ddc:	9303      	str	r3, [sp, #12]
   11dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11de0:	4433      	add	r3, r6
   11de2:	9309      	str	r3, [sp, #36]	; 0x24
   11de4:	e767      	b.n	11cb6 <_svfiprintf_r+0x4e>
   11de6:	fb0c 3202 	mla	r2, ip, r2, r3
   11dea:	460c      	mov	r4, r1
   11dec:	2001      	movs	r0, #1
   11dee:	e7a5      	b.n	11d3c <_svfiprintf_r+0xd4>
   11df0:	2300      	movs	r3, #0
   11df2:	3401      	adds	r4, #1
   11df4:	f04f 0c0a 	mov.w	ip, #10
   11df8:	4619      	mov	r1, r3
   11dfa:	9305      	str	r3, [sp, #20]
   11dfc:	4620      	mov	r0, r4
   11dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
   11e02:	3a30      	subs	r2, #48	; 0x30
   11e04:	2a09      	cmp	r2, #9
   11e06:	d903      	bls.n	11e10 <_svfiprintf_r+0x1a8>
   11e08:	2b00      	cmp	r3, #0
   11e0a:	d0c5      	beq.n	11d98 <_svfiprintf_r+0x130>
   11e0c:	9105      	str	r1, [sp, #20]
   11e0e:	e7c3      	b.n	11d98 <_svfiprintf_r+0x130>
   11e10:	fb0c 2101 	mla	r1, ip, r1, r2
   11e14:	4604      	mov	r4, r0
   11e16:	2301      	movs	r3, #1
   11e18:	e7f0      	b.n	11dfc <_svfiprintf_r+0x194>
   11e1a:	ab03      	add	r3, sp, #12
   11e1c:	462a      	mov	r2, r5
   11e1e:	a904      	add	r1, sp, #16
   11e20:	4638      	mov	r0, r7
   11e22:	9300      	str	r3, [sp, #0]
   11e24:	4b0e      	ldr	r3, [pc, #56]	; (11e60 <_svfiprintf_r+0x1f8>)
   11e26:	f7fe faaf 	bl	10388 <_printf_float>
   11e2a:	1c42      	adds	r2, r0, #1
   11e2c:	4606      	mov	r6, r0
   11e2e:	d1d6      	bne.n	11dde <_svfiprintf_r+0x176>
   11e30:	89ab      	ldrh	r3, [r5, #12]
   11e32:	065b      	lsls	r3, r3, #25
   11e34:	f53f af2c 	bmi.w	11c90 <_svfiprintf_r+0x28>
   11e38:	9809      	ldr	r0, [sp, #36]	; 0x24
   11e3a:	b01d      	add	sp, #116	; 0x74
   11e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e40:	ab03      	add	r3, sp, #12
   11e42:	462a      	mov	r2, r5
   11e44:	a904      	add	r1, sp, #16
   11e46:	4638      	mov	r0, r7
   11e48:	9300      	str	r3, [sp, #0]
   11e4a:	4b05      	ldr	r3, [pc, #20]	; (11e60 <_svfiprintf_r+0x1f8>)
   11e4c:	f7fe fcd2 	bl	107f4 <_printf_i>
   11e50:	e7eb      	b.n	11e2a <_svfiprintf_r+0x1c2>
   11e52:	bf00      	nop
   11e54:	00018810 	.word	0x00018810
   11e58:	0001881a 	.word	0x0001881a
   11e5c:	00010389 	.word	0x00010389
   11e60:	000155f5 	.word	0x000155f5
   11e64:	00018816 	.word	0x00018816

00011e68 <_write_r>:
   11e68:	b538      	push	{r3, r4, r5, lr}
   11e6a:	4604      	mov	r4, r0
   11e6c:	4d06      	ldr	r5, [pc, #24]	; (11e88 <_write_r+0x20>)
   11e6e:	4608      	mov	r0, r1
   11e70:	4611      	mov	r1, r2
   11e72:	2200      	movs	r2, #0
   11e74:	602a      	str	r2, [r5, #0]
   11e76:	461a      	mov	r2, r3
   11e78:	f000 fb8c 	bl	12594 <_write>
   11e7c:	1c43      	adds	r3, r0, #1
   11e7e:	d102      	bne.n	11e86 <_write_r+0x1e>
   11e80:	682b      	ldr	r3, [r5, #0]
   11e82:	b103      	cbz	r3, 11e86 <_write_r+0x1e>
   11e84:	6023      	str	r3, [r4, #0]
   11e86:	bd38      	pop	{r3, r4, r5, pc}
   11e88:	20003b78 	.word	0x20003b78

00011e8c <_close_r>:
   11e8c:	b538      	push	{r3, r4, r5, lr}
   11e8e:	2300      	movs	r3, #0
   11e90:	4d05      	ldr	r5, [pc, #20]	; (11ea8 <_close_r+0x1c>)
   11e92:	4604      	mov	r4, r0
   11e94:	4608      	mov	r0, r1
   11e96:	602b      	str	r3, [r5, #0]
   11e98:	f000 fb80 	bl	1259c <_close>
   11e9c:	1c43      	adds	r3, r0, #1
   11e9e:	d102      	bne.n	11ea6 <_close_r+0x1a>
   11ea0:	682b      	ldr	r3, [r5, #0]
   11ea2:	b103      	cbz	r3, 11ea6 <_close_r+0x1a>
   11ea4:	6023      	str	r3, [r4, #0]
   11ea6:	bd38      	pop	{r3, r4, r5, pc}
   11ea8:	20003b78 	.word	0x20003b78

00011eac <_fstat_r>:
   11eac:	b538      	push	{r3, r4, r5, lr}
   11eae:	2300      	movs	r3, #0
   11eb0:	4d06      	ldr	r5, [pc, #24]	; (11ecc <_fstat_r+0x20>)
   11eb2:	4604      	mov	r4, r0
   11eb4:	4608      	mov	r0, r1
   11eb6:	4611      	mov	r1, r2
   11eb8:	602b      	str	r3, [r5, #0]
   11eba:	f000 fb7d 	bl	125b8 <_fstat>
   11ebe:	1c43      	adds	r3, r0, #1
   11ec0:	d102      	bne.n	11ec8 <_fstat_r+0x1c>
   11ec2:	682b      	ldr	r3, [r5, #0]
   11ec4:	b103      	cbz	r3, 11ec8 <_fstat_r+0x1c>
   11ec6:	6023      	str	r3, [r4, #0]
   11ec8:	bd38      	pop	{r3, r4, r5, pc}
   11eca:	bf00      	nop
   11ecc:	20003b78 	.word	0x20003b78

00011ed0 <_isatty_r>:
   11ed0:	b538      	push	{r3, r4, r5, lr}
   11ed2:	2300      	movs	r3, #0
   11ed4:	4d05      	ldr	r5, [pc, #20]	; (11eec <_isatty_r+0x1c>)
   11ed6:	4604      	mov	r4, r0
   11ed8:	4608      	mov	r0, r1
   11eda:	602b      	str	r3, [r5, #0]
   11edc:	f000 fb63 	bl	125a6 <_isatty>
   11ee0:	1c43      	adds	r3, r0, #1
   11ee2:	d102      	bne.n	11eea <_isatty_r+0x1a>
   11ee4:	682b      	ldr	r3, [r5, #0]
   11ee6:	b103      	cbz	r3, 11eea <_isatty_r+0x1a>
   11ee8:	6023      	str	r3, [r4, #0]
   11eea:	bd38      	pop	{r3, r4, r5, pc}
   11eec:	20003b78 	.word	0x20003b78

00011ef0 <_lseek_r>:
   11ef0:	b538      	push	{r3, r4, r5, lr}
   11ef2:	4604      	mov	r4, r0
   11ef4:	4d06      	ldr	r5, [pc, #24]	; (11f10 <_lseek_r+0x20>)
   11ef6:	4608      	mov	r0, r1
   11ef8:	4611      	mov	r1, r2
   11efa:	2200      	movs	r2, #0
   11efc:	602a      	str	r2, [r5, #0]
   11efe:	461a      	mov	r2, r3
   11f00:	f000 fb4f 	bl	125a2 <_lseek>
   11f04:	1c43      	adds	r3, r0, #1
   11f06:	d102      	bne.n	11f0e <_lseek_r+0x1e>
   11f08:	682b      	ldr	r3, [r5, #0]
   11f0a:	b103      	cbz	r3, 11f0e <_lseek_r+0x1e>
   11f0c:	6023      	str	r3, [r4, #0]
   11f0e:	bd38      	pop	{r3, r4, r5, pc}
   11f10:	20003b78 	.word	0x20003b78

00011f14 <_read_r>:
   11f14:	b538      	push	{r3, r4, r5, lr}
   11f16:	4604      	mov	r4, r0
   11f18:	4d06      	ldr	r5, [pc, #24]	; (11f34 <_read_r+0x20>)
   11f1a:	4608      	mov	r0, r1
   11f1c:	4611      	mov	r1, r2
   11f1e:	2200      	movs	r2, #0
   11f20:	602a      	str	r2, [r5, #0]
   11f22:	461a      	mov	r2, r3
   11f24:	f000 fb32 	bl	1258c <_read>
   11f28:	1c43      	adds	r3, r0, #1
   11f2a:	d102      	bne.n	11f32 <_read_r+0x1e>
   11f2c:	682b      	ldr	r3, [r5, #0]
   11f2e:	b103      	cbz	r3, 11f32 <_read_r+0x1e>
   11f30:	6023      	str	r3, [r4, #0]
   11f32:	bd38      	pop	{r3, r4, r5, pc}
   11f34:	20003b78 	.word	0x20003b78

00011f38 <nrf_cc3xx_platform_init_no_rng>:
   11f38:	b510      	push	{r4, lr}
   11f3a:	4c0a      	ldr	r4, [pc, #40]	; (11f64 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   11f3c:	6823      	ldr	r3, [r4, #0]
   11f3e:	b11b      	cbz	r3, 11f48 <nrf_cc3xx_platform_init_no_rng+0x10>
   11f40:	2301      	movs	r3, #1
   11f42:	2000      	movs	r0, #0
   11f44:	6023      	str	r3, [r4, #0]
   11f46:	bd10      	pop	{r4, pc}
   11f48:	f000 f8da 	bl	12100 <CC_LibInitNoRng>
   11f4c:	2800      	cmp	r0, #0
   11f4e:	d0f7      	beq.n	11f40 <nrf_cc3xx_platform_init_no_rng+0x8>
   11f50:	3801      	subs	r0, #1
   11f52:	2807      	cmp	r0, #7
   11f54:	d803      	bhi.n	11f5e <nrf_cc3xx_platform_init_no_rng+0x26>
   11f56:	4b04      	ldr	r3, [pc, #16]	; (11f68 <nrf_cc3xx_platform_init_no_rng+0x30>)
   11f58:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11f5c:	bd10      	pop	{r4, pc}
   11f5e:	4803      	ldr	r0, [pc, #12]	; (11f6c <nrf_cc3xx_platform_init_no_rng+0x34>)
   11f60:	bd10      	pop	{r4, pc}
   11f62:	bf00      	nop
   11f64:	20003b7c 	.word	0x20003b7c
   11f68:	00017474 	.word	0x00017474
   11f6c:	ffff8ffe 	.word	0xffff8ffe

00011f70 <nrf_cc3xx_platform_abort>:
   11f70:	f3bf 8f4f 	dsb	sy
   11f74:	4905      	ldr	r1, [pc, #20]	; (11f8c <nrf_cc3xx_platform_abort+0x1c>)
   11f76:	4b06      	ldr	r3, [pc, #24]	; (11f90 <nrf_cc3xx_platform_abort+0x20>)
   11f78:	68ca      	ldr	r2, [r1, #12]
   11f7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11f7e:	4313      	orrs	r3, r2
   11f80:	60cb      	str	r3, [r1, #12]
   11f82:	f3bf 8f4f 	dsb	sy
   11f86:	bf00      	nop
   11f88:	e7fd      	b.n	11f86 <nrf_cc3xx_platform_abort+0x16>
   11f8a:	bf00      	nop
   11f8c:	e000ed00 	.word	0xe000ed00
   11f90:	05fa0004 	.word	0x05fa0004

00011f94 <CC_PalAbort>:
   11f94:	b430      	push	{r4, r5}
   11f96:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   11f9a:	2500      	movs	r5, #0
   11f9c:	4b0b      	ldr	r3, [pc, #44]	; (11fcc <CC_PalAbort+0x38>)
   11f9e:	4c0c      	ldr	r4, [pc, #48]	; (11fd0 <CC_PalAbort+0x3c>)
   11fa0:	490c      	ldr	r1, [pc, #48]	; (11fd4 <CC_PalAbort+0x40>)
   11fa2:	6849      	ldr	r1, [r1, #4]
   11fa4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   11fa8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   11fac:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   11fb0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   11fb4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   11fb8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
   11fbc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
   11fc0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   11fc4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
   11fc8:	bc30      	pop	{r4, r5}
   11fca:	4708      	bx	r1
   11fcc:	50845000 	.word	0x50845000
   11fd0:	50844000 	.word	0x50844000
   11fd4:	20000498 	.word	0x20000498

00011fd8 <nrf_cc3xx_platform_set_abort>:
   11fd8:	4b02      	ldr	r3, [pc, #8]	; (11fe4 <nrf_cc3xx_platform_set_abort+0xc>)
   11fda:	e9d0 1200 	ldrd	r1, r2, [r0]
   11fde:	e9c3 1200 	strd	r1, r2, [r3]
   11fe2:	4770      	bx	lr
   11fe4:	20000498 	.word	0x20000498

00011fe8 <mutex_free>:
   11fe8:	b510      	push	{r4, lr}
   11fea:	4604      	mov	r4, r0
   11fec:	b130      	cbz	r0, 11ffc <mutex_free+0x14>
   11fee:	6863      	ldr	r3, [r4, #4]
   11ff0:	06db      	lsls	r3, r3, #27
   11ff2:	d502      	bpl.n	11ffa <mutex_free+0x12>
   11ff4:	2300      	movs	r3, #0
   11ff6:	6023      	str	r3, [r4, #0]
   11ff8:	6063      	str	r3, [r4, #4]
   11ffa:	bd10      	pop	{r4, pc}
   11ffc:	4b02      	ldr	r3, [pc, #8]	; (12008 <mutex_free+0x20>)
   11ffe:	4803      	ldr	r0, [pc, #12]	; (1200c <mutex_free+0x24>)
   12000:	685b      	ldr	r3, [r3, #4]
   12002:	4798      	blx	r3
   12004:	e7f3      	b.n	11fee <mutex_free+0x6>
   12006:	bf00      	nop
   12008:	20000498 	.word	0x20000498
   1200c:	00017494 	.word	0x00017494

00012010 <mutex_lock>:
   12010:	b1b0      	cbz	r0, 12040 <mutex_lock+0x30>
   12012:	6843      	ldr	r3, [r0, #4]
   12014:	b193      	cbz	r3, 1203c <mutex_lock+0x2c>
   12016:	06db      	lsls	r3, r3, #27
   12018:	d50e      	bpl.n	12038 <mutex_lock+0x28>
   1201a:	2301      	movs	r3, #1
   1201c:	e850 2f00 	ldrex	r2, [r0]
   12020:	4619      	mov	r1, r3
   12022:	e840 1c00 	strex	ip, r1, [r0]
   12026:	f09c 0f00 	teq	ip, #0
   1202a:	d1f7      	bne.n	1201c <mutex_lock+0xc>
   1202c:	2a01      	cmp	r2, #1
   1202e:	d0f5      	beq.n	1201c <mutex_lock+0xc>
   12030:	f3bf 8f5f 	dmb	sy
   12034:	2000      	movs	r0, #0
   12036:	4770      	bx	lr
   12038:	4803      	ldr	r0, [pc, #12]	; (12048 <mutex_lock+0x38>)
   1203a:	4770      	bx	lr
   1203c:	4803      	ldr	r0, [pc, #12]	; (1204c <mutex_lock+0x3c>)
   1203e:	4770      	bx	lr
   12040:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12044:	4770      	bx	lr
   12046:	bf00      	nop
   12048:	ffff8fe9 	.word	0xffff8fe9
   1204c:	ffff8fea 	.word	0xffff8fea

00012050 <mutex_unlock>:
   12050:	4603      	mov	r3, r0
   12052:	b168      	cbz	r0, 12070 <mutex_unlock+0x20>
   12054:	6842      	ldr	r2, [r0, #4]
   12056:	b13a      	cbz	r2, 12068 <mutex_unlock+0x18>
   12058:	06d2      	lsls	r2, r2, #27
   1205a:	d507      	bpl.n	1206c <mutex_unlock+0x1c>
   1205c:	f3bf 8f5f 	dmb	sy
   12060:	2200      	movs	r2, #0
   12062:	4610      	mov	r0, r2
   12064:	601a      	str	r2, [r3, #0]
   12066:	4770      	bx	lr
   12068:	4803      	ldr	r0, [pc, #12]	; (12078 <mutex_unlock+0x28>)
   1206a:	4770      	bx	lr
   1206c:	4803      	ldr	r0, [pc, #12]	; (1207c <mutex_unlock+0x2c>)
   1206e:	4770      	bx	lr
   12070:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12074:	4770      	bx	lr
   12076:	bf00      	nop
   12078:	ffff8fea 	.word	0xffff8fea
   1207c:	ffff8fe9 	.word	0xffff8fe9

00012080 <mutex_init>:
   12080:	b510      	push	{r4, lr}
   12082:	4604      	mov	r4, r0
   12084:	b120      	cbz	r0, 12090 <mutex_init+0x10>
   12086:	2200      	movs	r2, #0
   12088:	2311      	movs	r3, #17
   1208a:	6022      	str	r2, [r4, #0]
   1208c:	6063      	str	r3, [r4, #4]
   1208e:	bd10      	pop	{r4, pc}
   12090:	4801      	ldr	r0, [pc, #4]	; (12098 <mutex_init+0x18>)
   12092:	f7ff ff7f 	bl	11f94 <CC_PalAbort>
   12096:	e7f6      	b.n	12086 <mutex_init+0x6>
   12098:	000174bc 	.word	0x000174bc

0001209c <nrf_cc3xx_platform_set_mutexes>:
   1209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120a0:	4c14      	ldr	r4, [pc, #80]	; (120f4 <nrf_cc3xx_platform_set_mutexes+0x58>)
   120a2:	6847      	ldr	r7, [r0, #4]
   120a4:	6806      	ldr	r6, [r0, #0]
   120a6:	6067      	str	r7, [r4, #4]
   120a8:	6887      	ldr	r7, [r0, #8]
   120aa:	68c0      	ldr	r0, [r0, #12]
   120ac:	60a7      	str	r7, [r4, #8]
   120ae:	60e0      	str	r0, [r4, #12]
   120b0:	6026      	str	r6, [r4, #0]
   120b2:	6808      	ldr	r0, [r1, #0]
   120b4:	4b10      	ldr	r3, [pc, #64]	; (120f8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   120b6:	4d11      	ldr	r5, [pc, #68]	; (120fc <nrf_cc3xx_platform_set_mutexes+0x60>)
   120b8:	6018      	str	r0, [r3, #0]
   120ba:	6848      	ldr	r0, [r1, #4]
   120bc:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   120c0:	6058      	str	r0, [r3, #4]
   120c2:	6888      	ldr	r0, [r1, #8]
   120c4:	6098      	str	r0, [r3, #8]
   120c6:	68c8      	ldr	r0, [r1, #12]
   120c8:	6909      	ldr	r1, [r1, #16]
   120ca:	60d8      	str	r0, [r3, #12]
   120cc:	6119      	str	r1, [r3, #16]
   120ce:	06d3      	lsls	r3, r2, #27
   120d0:	d50d      	bpl.n	120ee <nrf_cc3xx_platform_set_mutexes+0x52>
   120d2:	2300      	movs	r3, #0
   120d4:	f505 708a 	add.w	r0, r5, #276	; 0x114
   120d8:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   120dc:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   120e0:	47b0      	blx	r6
   120e2:	6823      	ldr	r3, [r4, #0]
   120e4:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   120e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   120ec:	4718      	bx	r3
   120ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120f2:	bf00      	nop
   120f4:	200004a8 	.word	0x200004a8
   120f8:	200004b8 	.word	0x200004b8
   120fc:	20003b94 	.word	0x20003b94

00012100 <CC_LibInitNoRng>:
   12100:	b508      	push	{r3, lr}
   12102:	f000 f811 	bl	12128 <CC_HalInit>
   12106:	b930      	cbnz	r0, 12116 <CC_LibInitNoRng+0x16>
   12108:	f000 f810 	bl	1212c <CC_PalInit>
   1210c:	b938      	cbnz	r0, 1211e <CC_LibInitNoRng+0x1e>
   1210e:	4a05      	ldr	r2, [pc, #20]	; (12124 <CC_LibInitNoRng+0x24>)
   12110:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
   12114:	bd08      	pop	{r3, pc}
   12116:	f000 f837 	bl	12188 <CC_PalTerminate>
   1211a:	2003      	movs	r0, #3
   1211c:	bd08      	pop	{r3, pc}
   1211e:	2004      	movs	r0, #4
   12120:	bd08      	pop	{r3, pc}
   12122:	bf00      	nop
   12124:	50845000 	.word	0x50845000

00012128 <CC_HalInit>:
   12128:	2000      	movs	r0, #0
   1212a:	4770      	bx	lr

0001212c <CC_PalInit>:
   1212c:	b510      	push	{r4, lr}
   1212e:	4811      	ldr	r0, [pc, #68]	; (12174 <CC_PalInit+0x48>)
   12130:	f000 f848 	bl	121c4 <CC_PalMutexCreate>
   12134:	b100      	cbz	r0, 12138 <CC_PalInit+0xc>
   12136:	bd10      	pop	{r4, pc}
   12138:	480f      	ldr	r0, [pc, #60]	; (12178 <CC_PalInit+0x4c>)
   1213a:	f000 f843 	bl	121c4 <CC_PalMutexCreate>
   1213e:	2800      	cmp	r0, #0
   12140:	d1f9      	bne.n	12136 <CC_PalInit+0xa>
   12142:	4c0e      	ldr	r4, [pc, #56]	; (1217c <CC_PalInit+0x50>)
   12144:	4620      	mov	r0, r4
   12146:	f000 f83d 	bl	121c4 <CC_PalMutexCreate>
   1214a:	2800      	cmp	r0, #0
   1214c:	d1f3      	bne.n	12136 <CC_PalInit+0xa>
   1214e:	4b0c      	ldr	r3, [pc, #48]	; (12180 <CC_PalInit+0x54>)
   12150:	480c      	ldr	r0, [pc, #48]	; (12184 <CC_PalInit+0x58>)
   12152:	601c      	str	r4, [r3, #0]
   12154:	f000 f836 	bl	121c4 <CC_PalMutexCreate>
   12158:	4601      	mov	r1, r0
   1215a:	2800      	cmp	r0, #0
   1215c:	d1eb      	bne.n	12136 <CC_PalInit+0xa>
   1215e:	f000 f82d 	bl	121bc <CC_PalDmaInit>
   12162:	4604      	mov	r4, r0
   12164:	b108      	cbz	r0, 1216a <CC_PalInit+0x3e>
   12166:	4620      	mov	r0, r4
   12168:	bd10      	pop	{r4, pc}
   1216a:	f000 f83f 	bl	121ec <CC_PalPowerSaveModeInit>
   1216e:	4620      	mov	r0, r4
   12170:	e7fa      	b.n	12168 <CC_PalInit+0x3c>
   12172:	bf00      	nop
   12174:	200004f0 	.word	0x200004f0
   12178:	200004e4 	.word	0x200004e4
   1217c:	200004ec 	.word	0x200004ec
   12180:	200004f4 	.word	0x200004f4
   12184:	200004e8 	.word	0x200004e8

00012188 <CC_PalTerminate>:
   12188:	b508      	push	{r3, lr}
   1218a:	4808      	ldr	r0, [pc, #32]	; (121ac <CC_PalTerminate+0x24>)
   1218c:	f000 f824 	bl	121d8 <CC_PalMutexDestroy>
   12190:	4807      	ldr	r0, [pc, #28]	; (121b0 <CC_PalTerminate+0x28>)
   12192:	f000 f821 	bl	121d8 <CC_PalMutexDestroy>
   12196:	4807      	ldr	r0, [pc, #28]	; (121b4 <CC_PalTerminate+0x2c>)
   12198:	f000 f81e 	bl	121d8 <CC_PalMutexDestroy>
   1219c:	4806      	ldr	r0, [pc, #24]	; (121b8 <CC_PalTerminate+0x30>)
   1219e:	f000 f81b 	bl	121d8 <CC_PalMutexDestroy>
   121a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   121a6:	f000 b80b 	b.w	121c0 <CC_PalDmaTerminate>
   121aa:	bf00      	nop
   121ac:	200004f0 	.word	0x200004f0
   121b0:	200004e4 	.word	0x200004e4
   121b4:	200004ec 	.word	0x200004ec
   121b8:	200004e8 	.word	0x200004e8

000121bc <CC_PalDmaInit>:
   121bc:	2000      	movs	r0, #0
   121be:	4770      	bx	lr

000121c0 <CC_PalDmaTerminate>:
   121c0:	4770      	bx	lr
   121c2:	bf00      	nop

000121c4 <CC_PalMutexCreate>:
   121c4:	b508      	push	{r3, lr}
   121c6:	4b03      	ldr	r3, [pc, #12]	; (121d4 <CC_PalMutexCreate+0x10>)
   121c8:	6802      	ldr	r2, [r0, #0]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	6810      	ldr	r0, [r2, #0]
   121ce:	4798      	blx	r3
   121d0:	2000      	movs	r0, #0
   121d2:	bd08      	pop	{r3, pc}
   121d4:	200004a8 	.word	0x200004a8

000121d8 <CC_PalMutexDestroy>:
   121d8:	b508      	push	{r3, lr}
   121da:	4b03      	ldr	r3, [pc, #12]	; (121e8 <CC_PalMutexDestroy+0x10>)
   121dc:	6802      	ldr	r2, [r0, #0]
   121de:	685b      	ldr	r3, [r3, #4]
   121e0:	6810      	ldr	r0, [r2, #0]
   121e2:	4798      	blx	r3
   121e4:	2000      	movs	r0, #0
   121e6:	bd08      	pop	{r3, pc}
   121e8:	200004a8 	.word	0x200004a8

000121ec <CC_PalPowerSaveModeInit>:
   121ec:	b570      	push	{r4, r5, r6, lr}
   121ee:	4c09      	ldr	r4, [pc, #36]	; (12214 <CC_PalPowerSaveModeInit+0x28>)
   121f0:	4d09      	ldr	r5, [pc, #36]	; (12218 <CC_PalPowerSaveModeInit+0x2c>)
   121f2:	6920      	ldr	r0, [r4, #16]
   121f4:	68ab      	ldr	r3, [r5, #8]
   121f6:	4798      	blx	r3
   121f8:	b118      	cbz	r0, 12202 <CC_PalPowerSaveModeInit+0x16>
   121fa:	4b08      	ldr	r3, [pc, #32]	; (1221c <CC_PalPowerSaveModeInit+0x30>)
   121fc:	4808      	ldr	r0, [pc, #32]	; (12220 <CC_PalPowerSaveModeInit+0x34>)
   121fe:	685b      	ldr	r3, [r3, #4]
   12200:	4798      	blx	r3
   12202:	2100      	movs	r1, #0
   12204:	4a07      	ldr	r2, [pc, #28]	; (12224 <CC_PalPowerSaveModeInit+0x38>)
   12206:	68eb      	ldr	r3, [r5, #12]
   12208:	6011      	str	r1, [r2, #0]
   1220a:	6920      	ldr	r0, [r4, #16]
   1220c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12210:	4718      	bx	r3
   12212:	bf00      	nop
   12214:	200004b8 	.word	0x200004b8
   12218:	200004a8 	.word	0x200004a8
   1221c:	20000498 	.word	0x20000498
   12220:	000174e0 	.word	0x000174e0
   12224:	20003b90 	.word	0x20003b90

00012228 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   12228:	b160      	cbz	r0, 12244 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1222a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1222c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   12230:	2b01      	cmp	r3, #1
   12232:	d003      	beq.n	1223c <sys_notify_validate+0x14>
   12234:	2b03      	cmp	r3, #3
   12236:	d105      	bne.n	12244 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   12238:	6803      	ldr	r3, [r0, #0]
   1223a:	b11b      	cbz	r3, 12244 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1223c:	2300      	movs	r3, #0
   1223e:	6083      	str	r3, [r0, #8]
   12240:	4618      	mov	r0, r3
   12242:	4770      	bx	lr
		return -EINVAL;
   12244:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   12248:	4770      	bx	lr

0001224a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1224a:	2200      	movs	r2, #0
   1224c:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1224e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   12250:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
   12254:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = NULL;
   12256:	bf14      	ite	ne
   12258:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1225a:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1225c:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1225e:	4618      	mov	r0, r3
   12260:	4770      	bx	lr

00012262 <arch_printk_char_out>:
}
   12262:	2000      	movs	r0, #0
   12264:	4770      	bx	lr

00012266 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   12266:	b40f      	push	{r0, r1, r2, r3}
   12268:	b507      	push	{r0, r1, r2, lr}
   1226a:	a904      	add	r1, sp, #16
   1226c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   12270:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   12272:	f7f4 fc91 	bl	6b98 <vprintk>

	va_end(ap);
}
   12276:	b003      	add	sp, #12
   12278:	f85d eb04 	ldr.w	lr, [sp], #4
   1227c:	b004      	add	sp, #16
   1227e:	4770      	bx	lr

00012280 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12280:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   12282:	f013 0307 	ands.w	r3, r3, #7
   12286:	d105      	bne.n	12294 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   12288:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1228a:	2b00      	cmp	r3, #0
   1228c:	bf0c      	ite	eq
   1228e:	2000      	moveq	r0, #0
   12290:	2003      	movne	r0, #3
   12292:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   12294:	2b02      	cmp	r3, #2
   12296:	d105      	bne.n	122a4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   12298:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1229a:	2b00      	cmp	r3, #0
   1229c:	bf14      	ite	ne
   1229e:	2000      	movne	r0, #0
   122a0:	2004      	moveq	r0, #4
   122a2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   122a4:	2b01      	cmp	r3, #1
   122a6:	d105      	bne.n	122b4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   122a8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   122aa:	2b00      	cmp	r3, #0
   122ac:	bf0c      	ite	eq
   122ae:	2000      	moveq	r0, #0
   122b0:	2005      	movne	r0, #5
   122b2:	4770      	bx	lr
	int evt = EVT_NOP;
   122b4:	2000      	movs	r0, #0
}
   122b6:	4770      	bx	lr

000122b8 <notify_one>:
{
   122b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   122ba:	460d      	mov	r5, r1
   122bc:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   122be:	4619      	mov	r1, r3
   122c0:	1d28      	adds	r0, r5, #4
{
   122c2:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   122c4:	9300      	str	r3, [sp, #0]
   122c6:	f7ff ffc0 	bl	1224a <sys_notify_finalize>
	if (cb) {
   122ca:	4604      	mov	r4, r0
   122cc:	b140      	cbz	r0, 122e0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   122ce:	e9dd 3200 	ldrd	r3, r2, [sp]
   122d2:	4629      	mov	r1, r5
   122d4:	4630      	mov	r0, r6
   122d6:	46a4      	mov	ip, r4
}
   122d8:	b002      	add	sp, #8
   122da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   122de:	4760      	bx	ip
}
   122e0:	b002      	add	sp, #8
   122e2:	bd70      	pop	{r4, r5, r6, pc}

000122e4 <transition_complete>:
{
   122e4:	b410      	push	{r4}
	__asm__ volatile(
   122e6:	f04f 0420 	mov.w	r4, #32
   122ea:	f3ef 8211 	mrs	r2, BASEPRI
   122ee:	f384 8812 	msr	BASEPRI_MAX, r4
   122f2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   122f6:	6181      	str	r1, [r0, #24]
}
   122f8:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   122fc:	2101      	movs	r1, #1
   122fe:	f7f4 bc59 	b.w	6bb4 <process_event>

00012302 <validate_args>:
{
   12302:	b510      	push	{r4, lr}
   12304:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   12306:	b140      	cbz	r0, 1231a <validate_args+0x18>
   12308:	b139      	cbz	r1, 1231a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1230a:	1d08      	adds	r0, r1, #4
   1230c:	f7ff ff8c 	bl	12228 <sys_notify_validate>
	if ((rv == 0)
   12310:	b928      	cbnz	r0, 1231e <validate_args+0x1c>
	    && ((cli->notify.flags
   12312:	68a3      	ldr	r3, [r4, #8]
   12314:	f033 0303 	bics.w	r3, r3, #3
   12318:	d001      	beq.n	1231e <validate_args+0x1c>
		rv = -EINVAL;
   1231a:	f06f 0015 	mvn.w	r0, #21
}
   1231e:	bd10      	pop	{r4, pc}

00012320 <onoff_manager_init>:
{
   12320:	b538      	push	{r3, r4, r5, lr}
   12322:	460c      	mov	r4, r1
	if ((mgr == NULL)
   12324:	4605      	mov	r5, r0
   12326:	b158      	cbz	r0, 12340 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   12328:	b151      	cbz	r1, 12340 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1232a:	680b      	ldr	r3, [r1, #0]
   1232c:	b143      	cbz	r3, 12340 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1232e:	684b      	ldr	r3, [r1, #4]
   12330:	b133      	cbz	r3, 12340 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   12332:	2220      	movs	r2, #32
   12334:	2100      	movs	r1, #0
   12336:	f002 fc65 	bl	14c04 <memset>
	return 0;
   1233a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1233c:	612c      	str	r4, [r5, #16]
}
   1233e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   12340:	f06f 0015 	mvn.w	r0, #21
   12344:	e7fb      	b.n	1233e <onoff_manager_init+0x1e>

00012346 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12346:	b570      	push	{r4, r5, r6, lr}
   12348:	4604      	mov	r4, r0
   1234a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1234c:	f7ff ffd9 	bl	12302 <validate_args>

	if (rv < 0) {
   12350:	1e05      	subs	r5, r0, #0
   12352:	db31      	blt.n	123b8 <onoff_request+0x72>
   12354:	f04f 0320 	mov.w	r3, #32
   12358:	f3ef 8111 	mrs	r1, BASEPRI
   1235c:	f383 8812 	msr	BASEPRI_MAX, r3
   12360:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12364:	f64f 75ff 	movw	r5, #65535	; 0xffff
   12368:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1236a:	8ba0      	ldrh	r0, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1236c:	42ab      	cmp	r3, r5
   1236e:	f000 0207 	and.w	r2, r0, #7
   12372:	d02e      	beq.n	123d2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   12374:	2a02      	cmp	r2, #2
   12376:	d10e      	bne.n	12396 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   12378:	3301      	adds	r3, #1
   1237a:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1237c:	4615      	mov	r5, r2
		notify = true;
   1237e:	2301      	movs	r3, #1
	__asm__ volatile(
   12380:	f381 8811 	msr	BASEPRI, r1
   12384:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   12388:	b1b3      	cbz	r3, 123b8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1238a:	2300      	movs	r3, #0
   1238c:	4631      	mov	r1, r6
   1238e:	4620      	mov	r0, r4
   12390:	f7ff ff92 	bl	122b8 <notify_one>
   12394:	e010      	b.n	123b8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   12396:	0783      	lsls	r3, r0, #30
   12398:	d001      	beq.n	1239e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1239a:	2a06      	cmp	r2, #6
   1239c:	d10e      	bne.n	123bc <onoff_request+0x76>
	parent->next = child;
   1239e:	2300      	movs	r3, #0
   123a0:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   123a2:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   123a4:	b993      	cbnz	r3, 123cc <onoff_request+0x86>
	list->head = node;
   123a6:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   123aa:	4615      	mov	r5, r2
   123ac:	b962      	cbnz	r2, 123c8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   123ae:	460a      	mov	r2, r1
   123b0:	4620      	mov	r0, r4
   123b2:	2102      	movs	r1, #2
   123b4:	f7f4 fbfe 	bl	6bb4 <process_event>
		}
	}

	return rv;
}
   123b8:	4628      	mov	r0, r5
   123ba:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   123bc:	2a05      	cmp	r2, #5
   123be:	bf0c      	ite	eq
   123c0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   123c4:	f06f 0504 	mvnne.w	r5, #4
   123c8:	2300      	movs	r3, #0
   123ca:	e7d9      	b.n	12380 <onoff_request+0x3a>
	parent->next = child;
   123cc:	601e      	str	r6, [r3, #0]
	list->tail = node;
   123ce:	6066      	str	r6, [r4, #4]
}
   123d0:	e7eb      	b.n	123aa <onoff_request+0x64>
		rv = -EAGAIN;
   123d2:	f06f 050a 	mvn.w	r5, #10
   123d6:	e7f7      	b.n	123c8 <onoff_request+0x82>

000123d8 <onoff_sync_lock>:
	__asm__ volatile(
   123d8:	f04f 0220 	mov.w	r2, #32
   123dc:	f3ef 8311 	mrs	r3, BASEPRI
   123e0:	f382 8812 	msr	BASEPRI_MAX, r2
   123e4:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   123e8:	6840      	ldr	r0, [r0, #4]
	*keyp = k_spin_lock(&srv->lock);
   123ea:	600b      	str	r3, [r1, #0]
}
   123ec:	4770      	bx	lr

000123ee <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   123ee:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   123f0:	6844      	ldr	r4, [r0, #4]
{
   123f2:	460d      	mov	r5, r1
	if (srv->count < 0) {
   123f4:	2c00      	cmp	r4, #0
		srv->count = 0;
   123f6:	bfbc      	itt	lt
   123f8:	2400      	movlt	r4, #0
   123fa:	6044      	strlt	r4, [r0, #4]
	}
	if (res < 0) {
   123fc:	2b00      	cmp	r3, #0
{
   123fe:	4611      	mov	r1, r2
   12400:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   12404:	da0c      	bge.n	12420 <onoff_sync_finalize+0x32>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
   12406:	2201      	movs	r2, #1
		srv->count = res;
   12408:	6043      	str	r3, [r0, #4]
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   1240a:	6844      	ldr	r4, [r0, #4]
	__asm__ volatile(
   1240c:	f385 8811 	msr	BASEPRI, r5
   12410:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   12414:	b111      	cbz	r1, 1241c <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   12416:	2000      	movs	r0, #0
   12418:	f7ff ff4e 	bl	122b8 <notify_one>
	}

	return rv;
}
   1241c:	4620      	mov	r0, r4
   1241e:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
   12420:	6844      	ldr	r4, [r0, #4]
	} else if (on) {
   12422:	b11a      	cbz	r2, 1242c <onoff_sync_finalize+0x3e>
		srv->count += 1;
   12424:	3401      	adds	r4, #1
	uint32_t state = ONOFF_STATE_ON;
   12426:	2202      	movs	r2, #2
		srv->count -= 1;
   12428:	6044      	str	r4, [r0, #4]
   1242a:	e7ee      	b.n	1240a <onoff_sync_finalize+0x1c>
   1242c:	3c01      	subs	r4, #1
   1242e:	e7fa      	b.n	12426 <onoff_sync_finalize+0x38>

00012430 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   12430:	4604      	mov	r4, r0
   12432:	b508      	push	{r3, lr}
   12434:	4608      	mov	r0, r1
   12436:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   12438:	461a      	mov	r2, r3
   1243a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1243c:	f7fa f902 	bl	c644 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   12440:	f7f5 fa9c 	bl	797c <z_impl_k_thread_abort>

00012444 <_ldiv5>:
	uint32_t v_lo = *v;
   12444:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   12448:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1244a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1244e:	fba2 2403 	umull	r2, r4, r2, r3
   12452:	18d5      	adds	r5, r2, r3
   12454:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   12458:	fba1 1303 	umull	r1, r3, r1, r3
   1245c:	1852      	adds	r2, r2, r1
   1245e:	eb44 0403 	adc.w	r4, r4, r3
   12462:	1952      	adds	r2, r2, r5
   12464:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   12468:	1889      	adds	r1, r1, r2
   1246a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1246e:	e9c0 1300 	strd	r1, r3, [r0]
}
   12472:	bd30      	pop	{r4, r5, pc}

00012474 <_get_digit>:
	if (*digit_count > 0) {
   12474:	680b      	ldr	r3, [r1, #0]
{
   12476:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   12478:	2b00      	cmp	r3, #0
   1247a:	dd10      	ble.n	1249e <_get_digit+0x2a>
		*fr *= 10U;
   1247c:	220a      	movs	r2, #10
		--*digit_count;
   1247e:	3b01      	subs	r3, #1
   12480:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   12482:	6803      	ldr	r3, [r0, #0]
   12484:	6844      	ldr	r4, [r0, #4]
   12486:	fba3 1302 	umull	r1, r3, r3, r2
   1248a:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   1248e:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   12490:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   12494:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   12498:	3230      	adds	r2, #48	; 0x30
}
   1249a:	4610      	mov	r0, r2
   1249c:	bd10      	pop	{r4, pc}
		rval = '0';
   1249e:	2230      	movs	r2, #48	; 0x30
   124a0:	e7fb      	b.n	1249a <_get_digit+0x26>

000124a2 <outs>:
{
   124a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   124a6:	4680      	mov	r8, r0
   124a8:	4689      	mov	r9, r1
   124aa:	4616      	mov	r6, r2
   124ac:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   124ae:	4615      	mov	r5, r2
   124b0:	42bd      	cmp	r5, r7
   124b2:	eba5 0406 	sub.w	r4, r5, r6
   124b6:	d305      	bcc.n	124c4 <outs+0x22>
   124b8:	b10f      	cbz	r7, 124be <outs+0x1c>
	return (int)count;
   124ba:	4620      	mov	r0, r4
   124bc:	e008      	b.n	124d0 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   124be:	782b      	ldrb	r3, [r5, #0]
   124c0:	2b00      	cmp	r3, #0
   124c2:	d0fa      	beq.n	124ba <outs+0x18>
		int rc = out((int)*sp++, ctx);
   124c4:	4649      	mov	r1, r9
   124c6:	f815 0b01 	ldrb.w	r0, [r5], #1
   124ca:	47c0      	blx	r8
		if (rc < 0) {
   124cc:	2800      	cmp	r0, #0
   124ce:	daef      	bge.n	124b0 <outs+0xe>
}
   124d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000124d4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   124d4:	4770      	bx	lr

000124d6 <pm_state_exit_post_ops>:
   124d6:	2300      	movs	r3, #0
   124d8:	f383 8811 	msr	BASEPRI, r3
   124dc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   124e0:	4770      	bx	lr

000124e2 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   124e2:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   124e4:	f7f4 fd24 	bl	6f30 <__do_global_ctors_aux>
	__do_init_array_aux();
}
   124e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
   124ec:	f7f4 bd12 	b.w	6f14 <__do_init_array_aux>

000124f0 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   124f0:	2000      	movs	r0, #0
   124f2:	4770      	bx	lr

000124f4 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   124f4:	2000      	movs	r0, #0
{
   124f6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   124f8:	f7f4 fca2 	bl	6e40 <sys_reboot>

000124fc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   124fc:	f001 b831 	b.w	13562 <z_fatal_error>

00012500 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   12500:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   12502:	6800      	ldr	r0, [r0, #0]
   12504:	f001 b82d 	b.w	13562 <z_fatal_error>

00012508 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12508:	2100      	movs	r1, #0
   1250a:	2001      	movs	r0, #1
   1250c:	f7ff bff6 	b.w	124fc <z_arm_fatal_error>

00012510 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   12510:	b508      	push	{r3, lr}
	handler();
   12512:	f7f4 ffab 	bl	746c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   12516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1251a:	f7f5 b8af 	b.w	767c <z_arm_exc_exit>

0001251e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1251e:	6e43      	ldr	r3, [r0, #100]	; 0x64
   12520:	f383 880b 	msr	PSPLIM, r3
}
   12524:	4770      	bx	lr

00012526 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   12526:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   12528:	4601      	mov	r1, r0
   1252a:	4618      	mov	r0, r3
   1252c:	f7ff bfe0 	b.w	124f0 <__cxa_atexit>

00012530 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   12530:	e840 f000 	tt	r0, r0
   12534:	b2c3      	uxtb	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   12536:	f410 3f80 	tst.w	r0, #65536	; 0x10000
	}

	return -EINVAL;
}
   1253a:	bf14      	ite	ne
   1253c:	4618      	movne	r0, r3
   1253e:	f06f 0015 	mvneq.w	r0, #21
   12542:	4770      	bx	lr

00012544 <mpu_configure_region>:
{
   12544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   12546:	890a      	ldrh	r2, [r1, #8]
   12548:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
   1254a:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1254c:	684d      	ldr	r5, [r1, #4]
   1254e:	f002 021f 	and.w	r2, r2, #31
   12552:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   12556:	9300      	str	r3, [sp, #0]
   12558:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1255c:	f023 031f 	bic.w	r3, r3, #31
   12560:	1e6a      	subs	r2, r5, #1
   12562:	4413      	add	r3, r2
   12564:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   12568:	2807      	cmp	r0, #7
   1256a:	9303      	str	r3, [sp, #12]
   1256c:	d804      	bhi.n	12578 <mpu_configure_region+0x34>
	region_init(index, region_conf);
   1256e:	4669      	mov	r1, sp
   12570:	f7f5 fa36 	bl	79e0 <region_init>
}
   12574:	b004      	add	sp, #16
   12576:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12578:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   1257c:	e7fa      	b.n	12574 <mpu_configure_region+0x30>

0001257e <malloc_prepare>:
}
   1257e:	2000      	movs	r0, #0
   12580:	4770      	bx	lr

00012582 <_stdout_hook_default>:
}
   12582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12586:	4770      	bx	lr

00012588 <_stdin_hook_default>:
}
   12588:	2000      	movs	r0, #0
   1258a:	4770      	bx	lr

0001258c <_read>:
{
   1258c:	4608      	mov	r0, r1
   1258e:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   12590:	f7f5 bb96 	b.w	7cc0 <z_impl_zephyr_read_stdin>

00012594 <_write>:
{
   12594:	4608      	mov	r0, r1
   12596:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   12598:	f7f5 bba6 	b.w	7ce8 <z_impl_zephyr_write_stdout>

0001259c <_close>:
   1259c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125a0:	4770      	bx	lr

000125a2 <_lseek>:
}
   125a2:	2000      	movs	r0, #0
   125a4:	4770      	bx	lr

000125a6 <_isatty>:
}
   125a6:	2802      	cmp	r0, #2
   125a8:	bfcc      	ite	gt
   125aa:	2000      	movgt	r0, #0
   125ac:	2001      	movle	r0, #1
   125ae:	4770      	bx	lr

000125b0 <_kill>:
}
   125b0:	2000      	movs	r0, #0
   125b2:	4770      	bx	lr

000125b4 <_getpid>:
}
   125b4:	2000      	movs	r0, #0
   125b6:	4770      	bx	lr

000125b8 <_fstat>:
	st->st_mode = S_IFCHR;
   125b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   125bc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   125be:	604b      	str	r3, [r1, #4]
}
   125c0:	4770      	bx	lr

000125c2 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   125c2:	b510      	push	{r4, lr}
   125c4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   125c6:	2014      	movs	r0, #20
   125c8:	f7fd fcf8 	bl	ffbc <malloc>
   125cc:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   125ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   125d2:	f001 b843 	b.w	1365c <z_impl_k_mutex_init>

000125d6 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   125d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   125da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125de:	f7f9 bc3d 	b.w	be5c <z_impl_k_mutex_lock>

000125e2 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   125e2:	f7f9 bcb3 	b.w	bf4c <z_impl_k_mutex_unlock>

000125e6 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   125e6:	f7f9 ba49 	b.w	ba7c <z_impl_z_errno>

000125ea <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   125ea:	220c      	movs	r2, #12
   125ec:	6903      	ldr	r3, [r0, #16]
   125ee:	b2c9      	uxtb	r1, r1
   125f0:	fb01 3302 	mla	r3, r1, r2, r3
   125f4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   125f8:	f000 0007 	and.w	r0, r0, #7
   125fc:	4770      	bx	lr

000125fe <set_on_state>:
	__asm__ volatile(
   125fe:	f04f 0320 	mov.w	r3, #32
   12602:	f3ef 8211 	mrs	r2, BASEPRI
   12606:	f383 8812 	msr	BASEPRI_MAX, r3
   1260a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1260e:	6803      	ldr	r3, [r0, #0]
   12610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12614:	f043 0302 	orr.w	r3, r3, #2
   12618:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1261a:	f382 8811 	msr	BASEPRI, r2
   1261e:	f3bf 8f6f 	isb	sy
}
   12622:	4770      	bx	lr

00012624 <stop>:
{
   12624:	4603      	mov	r3, r0
   12626:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   12628:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1262a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1262c:	f04f 0420 	mov.w	r4, #32
   12630:	f3ef 8611 	mrs	r6, BASEPRI
   12634:	f384 8812 	msr	BASEPRI_MAX, r4
   12638:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1263c:	250c      	movs	r5, #12
   1263e:	fb05 0401 	mla	r4, r5, r1, r0
   12642:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   12646:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1264a:	d001      	beq.n	12650 <stop+0x2c>
   1264c:	42a2      	cmp	r2, r4
   1264e:	d111      	bne.n	12674 <stop+0x50>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   12650:	2201      	movs	r2, #1
   12652:	fb05 0001 	mla	r0, r5, r1, r0
   12656:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
	int err = 0;
   1265a:	2000      	movs	r0, #0
	__asm__ volatile(
   1265c:	f386 8811 	msr	BASEPRI, r6
   12660:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   12664:	b928      	cbnz	r0, 12672 <stop+0x4e>
	get_sub_config(dev, type)->stop();
   12666:	685b      	ldr	r3, [r3, #4]
   12668:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1266c:	684b      	ldr	r3, [r1, #4]
   1266e:	4798      	blx	r3
	return 0;
   12670:	2000      	movs	r0, #0
}
   12672:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   12674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12678:	e7f0      	b.n	1265c <stop+0x38>

0001267a <api_stop>:
	return stop(dev, subsys, CTX_API);
   1267a:	2280      	movs	r2, #128	; 0x80
   1267c:	f7ff bfd2 	b.w	12624 <stop>

00012680 <async_start>:
{
   12680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12682:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   12684:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   12686:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   12688:	f04f 0520 	mov.w	r5, #32
   1268c:	f3ef 8c11 	mrs	ip, BASEPRI
   12690:	f385 8812 	msr	BASEPRI_MAX, r5
   12694:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   12698:	260c      	movs	r6, #12
   1269a:	fb06 4601 	mla	r6, r6, r1, r4
   1269e:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   126a2:	f005 0e07 	and.w	lr, r5, #7
   126a6:	f1be 0f01 	cmp.w	lr, #1
   126aa:	d112      	bne.n	126d2 <async_start+0x52>
	int err = 0;
   126ac:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   126ae:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	__asm__ volatile(
   126b2:	f38c 8811 	msr	BASEPRI, ip
   126b6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   126ba:	b945      	cbnz	r5, 126ce <async_start+0x4e>
	subdata->cb = cb;
   126bc:	260c      	movs	r6, #12
   126be:	fb06 4401 	mla	r4, r6, r1, r4
	subdata->user_data = user_data;
   126c2:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   126c6:	6843      	ldr	r3, [r0, #4]
   126c8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   126cc:	4798      	blx	r3
}
   126ce:	4628      	mov	r0, r5
   126d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   126d2:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   126d6:	42af      	cmp	r7, r5
   126d8:	bf14      	ite	ne
   126da:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   126de:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   126e2:	e7e6      	b.n	126b2 <async_start+0x32>

000126e4 <api_start>:
{
   126e4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   126e6:	2480      	movs	r4, #128	; 0x80
   126e8:	9400      	str	r4, [sp, #0]
   126ea:	f7ff ffc9 	bl	12680 <async_start>
}
   126ee:	b002      	add	sp, #8
   126f0:	bd10      	pop	{r4, pc}

000126f2 <onoff_started_callback>:
	return &data->mgr[type];
   126f2:	6900      	ldr	r0, [r0, #16]
   126f4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   126f6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   126fa:	2100      	movs	r1, #0
   126fc:	4710      	bx	r2

000126fe <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   126fe:	2003      	movs	r0, #3
   12700:	f000 be1a 	b.w	13338 <nrfx_clock_start>

00012704 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   12704:	2002      	movs	r0, #2
   12706:	f000 be17 	b.w	13338 <nrfx_clock_start>

0001270a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1270a:	2000      	movs	r0, #0
   1270c:	f000 be14 	b.w	13338 <nrfx_clock_start>

00012710 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   12710:	2003      	movs	r0, #3
   12712:	f000 be71 	b.w	133f8 <nrfx_clock_stop>

00012716 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   12716:	2002      	movs	r0, #2
   12718:	f000 be6e 	b.w	133f8 <nrfx_clock_stop>

0001271c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1271c:	2000      	movs	r0, #0
   1271e:	f000 be6b 	b.w	133f8 <nrfx_clock_stop>

00012722 <blocking_start_callback>:
{
   12722:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   12724:	f7f9 bc54 	b.w	bfd0 <z_impl_k_sem_give>

00012728 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12728:	6843      	ldr	r3, [r0, #4]
}
   1272a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1272c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1272e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   12730:	600b      	str	r3, [r1, #0]
}
   12732:	4770      	bx	lr

00012734 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12734:	6843      	ldr	r3, [r0, #4]
   12736:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   12738:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1273a:	4042      	eors	r2, r0
   1273c:	400a      	ands	r2, r1
   1273e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   12740:	605a      	str	r2, [r3, #4]
}
   12742:	2000      	movs	r0, #0
   12744:	4770      	bx	lr

00012746 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12746:	6843      	ldr	r3, [r0, #4]
}
   12748:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1274a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1274c:	6099      	str	r1, [r3, #8]
}
   1274e:	4770      	bx	lr

00012750 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12750:	6843      	ldr	r3, [r0, #4]
}
   12752:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12754:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   12756:	60d9      	str	r1, [r3, #12]
}
   12758:	4770      	bx	lr

0001275a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1275a:	6843      	ldr	r3, [r0, #4]
}
   1275c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1275e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12760:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   12762:	4059      	eors	r1, r3
    p_reg->OUT = value;
   12764:	6051      	str	r1, [r2, #4]
}
   12766:	4770      	bx	lr

00012768 <gpio_nrfx_manage_callback>:
	return port->data;
   12768:	6903      	ldr	r3, [r0, #16]
{
   1276a:	b530      	push	{r4, r5, lr}
	return list->head;
   1276c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1276e:	b158      	cbz	r0, 12788 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12770:	2400      	movs	r4, #0
   12772:	4281      	cmp	r1, r0
   12774:	d112      	bne.n	1279c <gpio_nrfx_manage_callback+0x34>
	return node->next;
   12776:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   12778:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1277a:	b954      	cbnz	r4, 12792 <gpio_nrfx_manage_callback+0x2a>
   1277c:	428d      	cmp	r5, r1
	list->head = node;
   1277e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   12780:	d100      	bne.n	12784 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   12782:	6098      	str	r0, [r3, #8]
	parent->next = child;
   12784:	2000      	movs	r0, #0
   12786:	6008      	str	r0, [r1, #0]
	if (set) {
   12788:	b96a      	cbnz	r2, 127a6 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1278a:	2000      	movs	r0, #0
}
   1278c:	bd30      	pop	{r4, r5, pc}
   1278e:	4628      	mov	r0, r5
   12790:	e7ef      	b.n	12772 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   12792:	428d      	cmp	r5, r1
	parent->next = child;
   12794:	6020      	str	r0, [r4, #0]
	list->tail = node;
   12796:	bf08      	it	eq
   12798:	609c      	streq	r4, [r3, #8]
}
   1279a:	e7f3      	b.n	12784 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1279c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1279e:	4604      	mov	r4, r0
   127a0:	2d00      	cmp	r5, #0
   127a2:	d1f4      	bne.n	1278e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   127a4:	b13a      	cbz	r2, 127b6 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
   127a6:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   127a8:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   127aa:	600a      	str	r2, [r1, #0]
	list->head = node;
   127ac:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   127ae:	2800      	cmp	r0, #0
   127b0:	d1eb      	bne.n	1278a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   127b2:	6099      	str	r1, [r3, #8]
}
   127b4:	e7ea      	b.n	1278c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   127b6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   127ba:	e7e7      	b.n	1278c <gpio_nrfx_manage_callback+0x24>

000127bc <twim_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   127bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   127be:	4604      	mov	r4, r0
   127c0:	2200      	movs	r2, #0
   127c2:	2101      	movs	r1, #1
   127c4:	2009      	movs	r0, #9
   127c6:	f7f4 fe3b 	bl	7440 <z_arm_irq_priority_set>
   127ca:	6863      	ldr	r3, [r4, #4]
	ret = pinctrl_lookup_state(config, id, &state);
   127cc:	2100      	movs	r1, #0
   127ce:	68dd      	ldr	r5, [r3, #12]
   127d0:	aa01      	add	r2, sp, #4
   127d2:	4628      	mov	r0, r5
   127d4:	f000 fa09 	bl	12bea <pinctrl_lookup_state>
	if (ret < 0) {
   127d8:	2800      	cmp	r0, #0
   127da:	db0d      	blt.n	127f8 <twim_1_init+0x3c>
	return pinctrl_apply_state_direct(config, state);
   127dc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   127de:	682a      	ldr	r2, [r5, #0]
   127e0:	7919      	ldrb	r1, [r3, #4]
   127e2:	6818      	ldr	r0, [r3, #0]
   127e4:	f000 fa1e 	bl	12c24 <pinctrl_configure_pins>
   127e8:	2800      	cmp	r0, #0
   127ea:	db05      	blt.n	127f8 <twim_1_init+0x3c>
   127ec:	4620      	mov	r0, r4
   127ee:	b003      	add	sp, #12
   127f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   127f4:	f7f5 bdde 	b.w	83b4 <init_twim>
   127f8:	b003      	add	sp, #12
   127fa:	bd30      	pop	{r4, r5, pc}

000127fc <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   127fc:	b530      	push	{r4, r5, lr}
	while (*count) {
   127fe:	680b      	ldr	r3, [r1, #0]
   12800:	b913      	cbnz	r3, 12808 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   12802:	4618      	mov	r0, r3
	*buf_len = 0;
   12804:	6013      	str	r3, [r2, #0]
	return NULL;
   12806:	e004      	b.n	12812 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   12808:	6804      	ldr	r4, [r0, #0]
   1280a:	6865      	ldr	r5, [r4, #4]
   1280c:	b115      	cbz	r5, 12814 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   1280e:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
   12810:	6015      	str	r5, [r2, #0]
}
   12812:	bd30      	pop	{r4, r5, pc}
		++(*current);
   12814:	3408      	adds	r4, #8
		--(*count);
   12816:	3b01      	subs	r3, #1
		++(*current);
   12818:	6004      	str	r4, [r0, #0]
		--(*count);
   1281a:	600b      	str	r3, [r1, #0]
   1281c:	e7ef      	b.n	127fe <spi_context_get_next_buf.constprop.0+0x2>

0001281e <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1281e:	4603      	mov	r3, r0
   12820:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12822:	7919      	ldrb	r1, [r3, #4]
   12824:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   12826:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12828:	fa03 f101 	lsl.w	r1, r3, r1
   1282c:	6903      	ldr	r3, [r0, #16]
   1282e:	681b      	ldr	r3, [r3, #0]
   12830:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   12832:	bf18      	it	ne
   12834:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   12838:	b112      	cbz	r2, 12840 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   1283a:	6883      	ldr	r3, [r0, #8]
   1283c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1283e:	4718      	bx	r3
   12840:	6883      	ldr	r3, [r0, #8]
   12842:	691b      	ldr	r3, [r3, #16]
   12844:	e7fb      	b.n	1283e <gpio_pin_set_dt.isra.0+0x20>

00012846 <_spi_context_cs_control>:
{
   12846:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   12848:	6803      	ldr	r3, [r0, #0]
{
   1284a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1284c:	b1e3      	cbz	r3, 12888 <_spi_context_cs_control+0x42>
   1284e:	6898      	ldr	r0, [r3, #8]
   12850:	b1d0      	cbz	r0, 12888 <_spi_context_cs_control+0x42>
   12852:	6805      	ldr	r5, [r0, #0]
   12854:	b1c5      	cbz	r5, 12888 <_spi_context_cs_control+0x42>
		if (on) {
   12856:	b149      	cbz	r1, 1286c <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   12858:	2101      	movs	r1, #1
   1285a:	f7ff ffe0 	bl	1281e <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   1285e:	6823      	ldr	r3, [r4, #0]
   12860:	689b      	ldr	r3, [r3, #8]
   12862:	6898      	ldr	r0, [r3, #8]
}
   12864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   12868:	f000 bfe8 	b.w	1383c <z_impl_k_busy_wait>
			if (!force_off &&
   1286c:	b912      	cbnz	r2, 12874 <_spi_context_cs_control+0x2e>
   1286e:	889b      	ldrh	r3, [r3, #4]
   12870:	04db      	lsls	r3, r3, #19
   12872:	d409      	bmi.n	12888 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   12874:	6880      	ldr	r0, [r0, #8]
   12876:	f000 ffe1 	bl	1383c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1287a:	6823      	ldr	r3, [r4, #0]
   1287c:	2100      	movs	r1, #0
   1287e:	6898      	ldr	r0, [r3, #8]
}
   12880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   12884:	f7ff bfcb 	b.w	1281e <gpio_pin_set_dt.isra.0>
}
   12888:	bd38      	pop	{r3, r4, r5, pc}

0001288a <spi_context_unlock_unconditionally>:
{
   1288a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1288c:	2201      	movs	r2, #1
   1288e:	2100      	movs	r1, #0
{
   12890:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   12892:	f7ff ffd8 	bl	12846 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   12896:	69a3      	ldr	r3, [r4, #24]
   12898:	b933      	cbnz	r3, 128a8 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1289a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1289c:	f104 0010 	add.w	r0, r4, #16
}
   128a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   128a4:	f7f9 bb94 	b.w	bfd0 <z_impl_k_sem_give>
   128a8:	bd10      	pop	{r4, pc}

000128aa <spi_nrfx_release>:
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
	struct spi_nrfx_data *dev_data = dev->data;
   128aa:	6900      	ldr	r0, [r0, #16]
{
   128ac:	b510      	push	{r4, lr}

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   128ae:	6803      	ldr	r3, [r0, #0]
   128b0:	428b      	cmp	r3, r1
   128b2:	d106      	bne.n	128c2 <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   128b4:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   128b8:	b934      	cbnz	r4, 128c8 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   128ba:	f7ff ffe6 	bl	1288a <spi_context_unlock_unconditionally>

	return 0;
   128be:	4620      	mov	r0, r4
}
   128c0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   128c2:	f06f 0015 	mvn.w	r0, #21
   128c6:	e7fb      	b.n	128c0 <spi_nrfx_release+0x16>
		return -EBUSY;
   128c8:	f06f 000f 	mvn.w	r0, #15
   128cc:	e7f8      	b.n	128c0 <spi_nrfx_release+0x16>

000128ce <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   128ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   128d2:	4604      	mov	r4, r0
   128d4:	2200      	movs	r2, #0
   128d6:	2101      	movs	r1, #1
   128d8:	6905      	ldr	r5, [r0, #16]
   128da:	200c      	movs	r0, #12
   128dc:	f7f4 fdb0 	bl	7440 <z_arm_irq_priority_set>
   128e0:	6863      	ldr	r3, [r4, #4]
	ret = pinctrl_lookup_state(config, id, &state);
   128e2:	2100      	movs	r1, #0
   128e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   128e6:	aa01      	add	r2, sp, #4
   128e8:	4620      	mov	r0, r4
   128ea:	f000 f97e 	bl	12bea <pinctrl_lookup_state>
	if (ret < 0) {
   128ee:	2800      	cmp	r0, #0
   128f0:	db41      	blt.n	12976 <spi_3_init+0xa8>
	return pinctrl_apply_state_direct(config, state);
   128f2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   128f4:	6822      	ldr	r2, [r4, #0]
   128f6:	7919      	ldrb	r1, [r3, #4]
   128f8:	6818      	ldr	r0, [r3, #0]
   128fa:	f000 f993 	bl	12c24 <pinctrl_configure_pins>
   128fe:	2800      	cmp	r0, #0
   12900:	db39      	blt.n	12976 <spi_3_init+0xa8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12902:	2601      	movs	r6, #1
   12904:	68ac      	ldr	r4, [r5, #8]
   12906:	3408      	adds	r4, #8
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   12908:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1290c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12910:	f1a4 0208 	sub.w	r2, r4, #8
   12914:	4293      	cmp	r3, r2
   12916:	d804      	bhi.n	12922 <spi_3_init+0x54>
   12918:	4628      	mov	r0, r5
   1291a:	f7ff ffb6 	bl	1288a <spi_context_unlock_unconditionally>
   1291e:	2000      	movs	r0, #0
   12920:	e029      	b.n	12976 <spi_3_init+0xa8>
		if (!device_is_ready(cs_gpio->port)) {
   12922:	f854 0c08 	ldr.w	r0, [r4, #-8]
   12926:	f000 fe12 	bl	1354e <z_device_is_ready>
   1292a:	b338      	cbz	r0, 1297c <spi_3_init+0xae>
	return gpio_pin_configure(spec->port,
   1292c:	f854 0c08 	ldr.w	r0, [r4, #-8]
   12930:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   12934:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
   12938:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1293c:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1293e:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
   12942:	bf54      	ite	pl
   12944:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   12948:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	const struct gpio_driver_api *api =
   1294c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   12950:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12954:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12958:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1295a:	bf4c      	ite	mi
   1295c:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12960:	ea27 070e 	bicpl.w	r7, r7, lr
	return api->pin_configure(port, pin, flags);
   12964:	f8d8 3000 	ldr.w	r3, [r8]
   12968:	f8cc 7000 	str.w	r7, [ip]
   1296c:	4798      	blx	r3
		if (ret < 0) {
   1296e:	2800      	cmp	r0, #0
   12970:	f104 0408 	add.w	r4, r4, #8
   12974:	dac8      	bge.n	12908 <spi_3_init+0x3a>
   12976:	b002      	add	sp, #8
   12978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
   1297c:	f06f 0012 	mvn.w	r0, #18
   12980:	e7f9      	b.n	12976 <spi_3_init+0xa8>

00012982 <event_handler>:
{
   12982:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   12984:	7803      	ldrb	r3, [r0, #0]
{
   12986:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   12988:	2b00      	cmp	r3, #0
   1298a:	d13d      	bne.n	12a08 <event_handler+0x86>
	if (!ctx->tx_len) {
   1298c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1298e:	b19b      	cbz	r3, 129b8 <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   12990:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
   12992:	429a      	cmp	r2, r3
   12994:	d810      	bhi.n	129b8 <event_handler+0x36>
	ctx->tx_len -= len;
   12996:	1a9b      	subs	r3, r3, r2
   12998:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
   1299a:	bb4b      	cbnz	r3, 129f0 <event_handler+0x6e>
		++ctx->current_tx;
   1299c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
			spi_context_get_next_buf(&ctx->current_tx,
   1299e:	f101 0248 	add.w	r2, r1, #72	; 0x48
		++ctx->current_tx;
   129a2:	3308      	adds	r3, #8
   129a4:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
   129a6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
   129a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
		--ctx->tx_count;
   129ac:	3b01      	subs	r3, #1
   129ae:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
   129b0:	3138      	adds	r1, #56	; 0x38
   129b2:	f7ff ff23 	bl	127fc <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   129b6:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
   129b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   129ba:	b1a3      	cbz	r3, 129e6 <event_handler+0x64>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   129bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
   129be:	429a      	cmp	r2, r3
   129c0:	d811      	bhi.n	129e6 <event_handler+0x64>
	ctx->rx_len -= len;
   129c2:	1a9b      	subs	r3, r3, r2
   129c4:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
   129c6:	b9cb      	cbnz	r3, 129fc <event_handler+0x7a>
		++ctx->current_rx;
   129c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			spi_context_get_next_buf(&ctx->current_rx,
   129ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
		++ctx->current_rx;
   129ce:	3308      	adds	r3, #8
   129d0:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
   129d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
   129d4:	f104 0140 	add.w	r1, r4, #64	; 0x40
		--ctx->rx_count;
   129d8:	3b01      	subs	r3, #1
   129da:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
   129dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   129e0:	f7ff ff0c 	bl	127fc <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   129e4:	64e0      	str	r0, [r4, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
   129e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
   129e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   129ec:	f7f5 be12 	b.w	8614 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   129f0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   129f2:	2b00      	cmp	r3, #0
   129f4:	d0e0      	beq.n	129b8 <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   129f6:	4413      	add	r3, r2
   129f8:	644b      	str	r3, [r1, #68]	; 0x44
   129fa:	e7dd      	b.n	129b8 <event_handler+0x36>
	} else if (ctx->rx_buf) {
   129fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   129fe:	2b00      	cmp	r3, #0
   12a00:	d0f1      	beq.n	129e6 <event_handler+0x64>
		ctx->rx_buf += dfs * len;
   12a02:	4413      	add	r3, r2
   12a04:	64e3      	str	r3, [r4, #76]	; 0x4c
   12a06:	e7ee      	b.n	129e6 <event_handler+0x64>
}
   12a08:	bd10      	pop	{r4, pc}

00012a0a <gpio_pin_set_dt>:
{
   12a0a:	4603      	mov	r3, r0
   12a0c:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12a0e:	7919      	ldrb	r1, [r3, #4]
   12a10:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   12a12:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12a14:	fa03 f101 	lsl.w	r1, r3, r1
   12a18:	6903      	ldr	r3, [r0, #16]
   12a1a:	681b      	ldr	r3, [r3, #0]
   12a1c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   12a1e:	bf18      	it	ne
   12a20:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   12a24:	b112      	cbz	r2, 12a2c <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   12a26:	6883      	ldr	r3, [r0, #8]
   12a28:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   12a2a:	4718      	bx	r3
   12a2c:	6883      	ldr	r3, [r0, #8]
   12a2e:	691b      	ldr	r3, [r3, #16]
   12a30:	e7fb      	b.n	12a2a <gpio_pin_set_dt+0x20>

00012a32 <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
   12a32:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
   12a34:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   12a36:	6845      	ldr	r5, [r0, #4]
{
   12a38:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   12a3a:	a903      	add	r1, sp, #12
   12a3c:	4620      	mov	r0, r4
   12a3e:	f7ff fccb 	bl	123d8 <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   12a42:	7d29      	ldrb	r1, [r5, #20]
   12a44:	f011 0101 	ands.w	r1, r1, #1
   12a48:	d113      	bne.n	12a72 <disable_sync+0x40>
		rc = 0;
	} else if (rc == 1) {
   12a4a:	2801      	cmp	r0, #1
   12a4c:	d10c      	bne.n	12a68 <disable_sync+0x36>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   12a4e:	f105 000c 	add.w	r0, r5, #12
   12a52:	f7ff ffda 	bl	12a0a <gpio_pin_set_dt>
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   12a56:	2200      	movs	r2, #0
   12a58:	4603      	mov	r3, r0
   12a5a:	9903      	ldr	r1, [sp, #12]
   12a5c:	4620      	mov	r0, r4
   12a5e:	9200      	str	r2, [sp, #0]
   12a60:	f7ff fcc5 	bl	123ee <onoff_sync_finalize>
}
   12a64:	b005      	add	sp, #20
   12a66:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   12a68:	2800      	cmp	r0, #0
   12a6a:	bf08      	it	eq
   12a6c:	f06f 0015 	mvneq.w	r0, #21
   12a70:	e7f1      	b.n	12a56 <disable_sync+0x24>
		rc = 0;
   12a72:	2000      	movs	r0, #0
   12a74:	e7ef      	b.n	12a56 <disable_sync+0x24>

00012a76 <enable_sync>:
{
   12a76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   12a78:	6905      	ldr	r5, [r0, #16]
{
   12a7a:	460c      	mov	r4, r1
	const struct driver_config *cfg = dev->config;
   12a7c:	6846      	ldr	r6, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
   12a7e:	a903      	add	r1, sp, #12
   12a80:	4628      	mov	r0, r5
   12a82:	f7ff fca9 	bl	123d8 <onoff_sync_lock>
	if ((rc == 0)
   12a86:	b938      	cbnz	r0, 12a98 <enable_sync+0x22>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   12a88:	7d33      	ldrb	r3, [r6, #20]
   12a8a:	07db      	lsls	r3, r3, #31
   12a8c:	d404      	bmi.n	12a98 <enable_sync+0x22>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   12a8e:	2101      	movs	r1, #1
   12a90:	f106 000c 	add.w	r0, r6, #12
   12a94:	f7ff ffb9 	bl	12a0a <gpio_pin_set_dt>
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   12a98:	2301      	movs	r3, #1
   12a9a:	4622      	mov	r2, r4
   12a9c:	9300      	str	r3, [sp, #0]
   12a9e:	9903      	ldr	r1, [sp, #12]
   12aa0:	4603      	mov	r3, r0
   12aa2:	4628      	mov	r0, r5
   12aa4:	f7ff fca3 	bl	123ee <onoff_sync_finalize>
}
   12aa8:	b004      	add	sp, #16
   12aaa:	bd70      	pop	{r4, r5, r6, pc}

00012aac <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
   12aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12aae:	6845      	ldr	r5, [r0, #4]
	if (!device_is_ready(cfg->enable.port)) {
   12ab0:	68e8      	ldr	r0, [r5, #12]
   12ab2:	f000 fd4c 	bl	1354e <z_device_is_ready>
   12ab6:	b340      	cbz	r0, 12b0a <regulator_fixed_init_sync+0x5e>
	if (on) {
   12ab8:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
   12aba:	8a6b      	ldrh	r3, [r5, #18]
   12abc:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
   12ac0:	bf16      	itet	ne
   12ac2:	f44f 12d0 	movne.w	r2, #1703936	; 0x1a0000
		flags = GPIO_OUTPUT_INACTIVE;
   12ac6:	f44f 12b0 	moveq.w	r2, #1441792	; 0x160000
		delay_us = cfg->startup_delay_us;
   12aca:	686c      	ldrne	r4, [r5, #4]
	return gpio_pin_configure(spec->port,
   12acc:	68e8      	ldr	r0, [r5, #12]
   12ace:	7c29      	ldrb	r1, [r5, #16]
   12ad0:	4313      	orrs	r3, r2
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12ad2:	2601      	movs	r6, #1
	struct gpio_driver_data *data =
   12ad4:	6907      	ldr	r7, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   12ad6:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12ad8:	683d      	ldr	r5, [r7, #0]
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   12ada:	bf48      	it	mi
   12adc:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
	const struct gpio_driver_api *api =
   12ae0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   12ae4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12ae8:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12aea:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12aec:	bf4c      	ite	mi
   12aee:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12af0:	43b5      	bicpl	r5, r6
   12af2:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   12af4:	f8dc 3000 	ldr.w	r3, [ip]
   12af8:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   12afa:	4605      	mov	r5, r0
   12afc:	b918      	cbnz	r0, 12b06 <regulator_fixed_init_sync+0x5a>
   12afe:	b114      	cbz	r4, 12b06 <regulator_fixed_init_sync+0x5a>
	z_impl_k_busy_wait(usec_to_wait);
   12b00:	4620      	mov	r0, r4
   12b02:	f000 fe9b 	bl	1383c <z_impl_k_busy_wait>
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);

	return rc;
}
   12b06:	4628      	mov	r0, r5
   12b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   12b0a:	f06f 0512 	mvn.w	r5, #18
	return rc;
   12b0e:	e7fa      	b.n	12b06 <regulator_fixed_init_sync+0x5a>

00012b10 <uarte_nrfx_config_get>:
{
   12b10:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   12b12:	6902      	ldr	r2, [r0, #16]
   12b14:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   12b18:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12b1c:	2000      	movs	r0, #0
   12b1e:	4770      	bx	lr

00012b20 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   12b20:	6843      	ldr	r3, [r0, #4]
   12b22:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12b24:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12b28:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12b2c:	4770      	bx	lr

00012b2e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   12b2e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   12b30:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   12b32:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12b34:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12b38:	b148      	cbz	r0, 12b4e <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b3a:	2000      	movs	r0, #0
	*c = data->rx_data;
   12b3c:	7c52      	ldrb	r2, [r2, #17]
   12b3e:	700a      	strb	r2, [r1, #0]
   12b40:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12b44:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b48:	2201      	movs	r2, #1
   12b4a:	601a      	str	r2, [r3, #0]
	return 0;
   12b4c:	4770      	bx	lr
		return -1;
   12b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   12b52:	4770      	bx	lr

00012b54 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   12b54:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12b56:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12b5a:	b943      	cbnz	r3, 12b6e <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12b5c:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12b5e:	0789      	lsls	r1, r1, #30
   12b60:	d407      	bmi.n	12b72 <is_tx_ready.isra.0+0x1e>
   12b62:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   12b66:	3800      	subs	r0, #0
   12b68:	bf18      	it	ne
   12b6a:	2001      	movne	r0, #1
   12b6c:	4770      	bx	lr
   12b6e:	2001      	movs	r0, #1
   12b70:	4770      	bx	lr
   12b72:	4618      	mov	r0, r3
}
   12b74:	4770      	bx	lr

00012b76 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   12b76:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   12b78:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   12b7a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   12b7e:	05c9      	lsls	r1, r1, #23
   12b80:	d518      	bpl.n	12bb4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12b82:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12b86:	b1a9      	cbz	r1, 12bb4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   12b88:	f04f 0020 	mov.w	r0, #32
   12b8c:	f3ef 8111 	mrs	r1, BASEPRI
   12b90:	f380 8812 	msr	BASEPRI_MAX, r0
   12b94:	f3bf 8f6f 	isb	sy
   12b98:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   12b9c:	b130      	cbz	r0, 12bac <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b9e:	2000      	movs	r0, #0
   12ba0:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   12ba4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12ba8:	2001      	movs	r0, #1
   12baa:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   12bac:	f381 8811 	msr	BASEPRI, r1
   12bb0:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12bb4:	6852      	ldr	r2, [r2, #4]
   12bb6:	06d2      	lsls	r2, r2, #27
   12bb8:	d515      	bpl.n	12be6 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   12bba:	f04f 0120 	mov.w	r1, #32
   12bbe:	f3ef 8211 	mrs	r2, BASEPRI
   12bc2:	f381 8812 	msr	BASEPRI_MAX, r1
   12bc6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12bca:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12bce:	b111      	cbz	r1, 12bd6 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12bd0:	2100      	movs	r1, #0
   12bd2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   12bd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   12bda:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   12bde:	f382 8811 	msr	BASEPRI, r2
   12be2:	f3bf 8f6f 	isb	sy
}
   12be6:	4770      	bx	lr

00012be8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   12be8:	4770      	bx	lr

00012bea <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   12bea:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   12bec:	6843      	ldr	r3, [r0, #4]
   12bee:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   12bf0:	7a03      	ldrb	r3, [r0, #8]
   12bf2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   12bf6:	3b01      	subs	r3, #1
   12bf8:	00db      	lsls	r3, r3, #3
   12bfa:	6845      	ldr	r5, [r0, #4]
   12bfc:	6814      	ldr	r4, [r2, #0]
   12bfe:	441d      	add	r5, r3
   12c00:	42ac      	cmp	r4, r5
   12c02:	d902      	bls.n	12c0a <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   12c04:	f06f 0001 	mvn.w	r0, #1
}
   12c08:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   12c0a:	7965      	ldrb	r5, [r4, #5]
   12c0c:	428d      	cmp	r5, r1
   12c0e:	d002      	beq.n	12c16 <pinctrl_lookup_state+0x2c>
		(*state)++;
   12c10:	3408      	adds	r4, #8
   12c12:	6014      	str	r4, [r2, #0]
   12c14:	e7f1      	b.n	12bfa <pinctrl_lookup_state+0x10>
			return 0;
   12c16:	2000      	movs	r0, #0
   12c18:	e7f6      	b.n	12c08 <pinctrl_lookup_state+0x1e>

00012c1a <nrf_gpio_pin_write>:
    if (value == 0)
   12c1a:	b909      	cbnz	r1, 12c20 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   12c1c:	f7f6 ba7c 	b.w	9118 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   12c20:	f7f6 bab0 	b.w	9184 <nrf_gpio_pin_set>

00012c24 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   12c24:	b570      	push	{r4, r5, r6, lr}
   12c26:	4615      	mov	r5, r2
   12c28:	4604      	mov	r4, r0
   12c2a:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12c2e:	42a6      	cmp	r6, r4
   12c30:	d101      	bne.n	12c36 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   12c32:	2000      	movs	r0, #0
}
   12c34:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   12c36:	6823      	ldr	r3, [r4, #0]
   12c38:	0c1a      	lsrs	r2, r3, #16
   12c3a:	2a22      	cmp	r2, #34	; 0x22
   12c3c:	f200 808e 	bhi.w	12d5c <pinctrl_configure_pins+0x138>
   12c40:	e8df f002 	tbb	[pc, r2]
   12c44:	43241d12 	.word	0x43241d12
   12c48:	8c433929 	.word	0x8c433929
   12c4c:	488c8c8c 	.word	0x488c8c8c
   12c50:	8c8c8c4d 	.word	0x8c8c8c4d
   12c54:	8c8c8c8c 	.word	0x8c8c8c8c
   12c58:	5e528c8c 	.word	0x5e528c8c
   12c5c:	8c8c6863 	.word	0x8c8c6863
   12c60:	78736d8c 	.word	0x78736d8c
   12c64:	827d      	.short	0x827d
   12c66:	87          	.byte	0x87
   12c67:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   12c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12c6c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   12c70:	6820      	ldr	r0, [r4, #0]
   12c72:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12c76:	f7f6 fa85 	bl	9184 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12c7a:	2201      	movs	r2, #1
   12c7c:	e015      	b.n	12caa <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   12c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12c82:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12c86:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12c88:	2100      	movs	r1, #0
   12c8a:	e00f      	b.n	12cac <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   12c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12c90:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   12c94:	e7ec      	b.n	12c70 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   12c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12c9a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   12c9e:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   12ca0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12ca4:	f7f6 fa38 	bl	9118 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12ca8:	2200      	movs	r2, #0
   12caa:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12cac:	6820      	ldr	r0, [r4, #0]
   12cae:	f7f6 fa43 	bl	9138 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12cb2:	3404      	adds	r4, #4
   12cb4:	e7bb      	b.n	12c2e <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   12cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12cba:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   12cbe:	6820      	ldr	r0, [r4, #0]
   12cc0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12cc4:	f7f6 fa28 	bl	9118 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12cc8:	e7d7      	b.n	12c7a <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   12cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12cce:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12cd2:	e7d8      	b.n	12c86 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   12cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12cd8:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12cdc:	e7d3      	b.n	12c86 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   12cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12ce2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   12ce6:	e7ce      	b.n	12c86 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   12ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12cec:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12cf0:	6820      	ldr	r0, [r4, #0]
   12cf2:	f3c0 3140 	ubfx	r1, r0, #13, #1
   12cf6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12cfa:	f7ff ff8e 	bl	12c1a <nrf_gpio_pin_write>
   12cfe:	e7bc      	b.n	12c7a <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   12d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d04:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12d08:	e7f2      	b.n	12cf0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   12d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d0e:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12d12:	e7ed      	b.n	12cf0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   12d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d18:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   12d1c:	e7e8      	b.n	12cf0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   12d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d22:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12d26:	2201      	movs	r2, #1
   12d28:	e7ae      	b.n	12c88 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   12d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d2e:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12d32:	e7f8      	b.n	12d26 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   12d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d38:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12d3c:	e7f3      	b.n	12d26 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   12d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d42:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12d46:	e7ee      	b.n	12d26 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   12d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d4c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12d50:	e7e9      	b.n	12d26 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   12d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12d56:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   12d5a:	e7e4      	b.n	12d26 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   12d5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12d60:	e768      	b.n	12c34 <pinctrl_configure_pins+0x10>

00012d62 <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   12d62:	2000      	movs	r0, #0
{
   12d64:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
   12d66:	f7f4 fdc1 	bl	78ec <sys_arch_reboot>

00012d6a <_ZN2ei9ei_matrixD1Ev>:
            }
#endif
        }
    }

    ~ei_matrix() {
   12d6a:	b510      	push	{r4, lr}
   12d6c:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
   12d6e:	6800      	ldr	r0, [r0, #0]
   12d70:	b118      	cbz	r0, 12d7a <_ZN2ei9ei_matrixD1Ev+0x10>
   12d72:	7b23      	ldrb	r3, [r4, #12]
   12d74:	b10b      	cbz	r3, 12d7a <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
   12d76:	f000 fd7e 	bl	13876 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
   12d7a:	4620      	mov	r0, r4
   12d7c:	bd10      	pop	{r4, pc}

00012d7e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   12d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   12d80:	1e53      	subs	r3, r2, #1
   12d82:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   12d86:	105f      	asrs	r7, r3, #1
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   12d88:	4604      	mov	r4, r0
   12d8a:	460d      	mov	r5, r1
   12d8c:	ed8d 0a00 	vstr	s0, [sp]
   12d90:	edcd 0a01 	vstr	s1, [sp, #4]
      while (__secondChild < (__len - 1) / 2)
   12d94:	460b      	mov	r3, r1
   12d96:	429f      	cmp	r7, r3
   12d98:	ea4f 06c3 	mov.w	r6, r3, lsl #3
   12d9c:	dd17      	ble.n	12dce <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0+0x50>
	{
	  __secondChild = 2 * (__secondChild + 1);
   12d9e:	1c59      	adds	r1, r3, #1
   12da0:	004b      	lsls	r3, r1, #1
	  if (__comp(__first + __secondChild,
   12da2:	1e58      	subs	r0, r3, #1
            return a.amplitude > b.amplitude;
   12da4:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   12da8:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
   12dac:	ed91 7a01 	vldr	s14, [r1, #4]
   12db0:	eddc 7a01 	vldr	s15, [ip, #4]
		     __first + (__secondChild - 1)))
	    __secondChild--;
   12db4:	eeb4 7a67 	vcmp.f32	s14, s15
   12db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12dbc:	bfc8      	it	gt
   12dbe:	4603      	movgt	r3, r0
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   12dc0:	4426      	add	r6, r4
   12dc2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   12dc6:	c903      	ldmia	r1, {r0, r1}
   12dc8:	e886 0003 	stmia.w	r6, {r0, r1}
      while (__secondChild < (__len - 1) / 2)
   12dcc:	e7e3      	b.n	12d96 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0+0x18>
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   12dce:	07d1      	lsls	r1, r2, #31
   12dd0:	d40d      	bmi.n	12dee <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0+0x70>
   12dd2:	3a02      	subs	r2, #2
   12dd4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   12dd8:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   12ddc:	d107      	bne.n	12dee <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0+0x70>
	{
	  __secondChild = 2 * (__secondChild + 1);
   12dde:	005b      	lsls	r3, r3, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   12de0:	3301      	adds	r3, #1
   12de2:	19a2      	adds	r2, r4, r6
   12de4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   12de8:	c903      	ldmia	r1, {r0, r1}
   12dea:	e882 0003 	stmia.w	r2, {r0, r1}
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   12dee:	eddd 7a01 	vldr	s15, [sp, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
   12df2:	1e5a      	subs	r2, r3, #1
   12df4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   12df8:	9f00      	ldr	r7, [sp, #0]
   12dfa:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   12dfc:	429d      	cmp	r5, r3
      { return __normal_iterator(_M_current + __n); }
   12dfe:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
   12e02:	da12      	bge.n	12e2a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0+0xac>
   12e04:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
   12e08:	ed93 7a01 	vldr	s14, [r3, #4]
   12e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e14:	dd09      	ble.n	12e2a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0+0xac>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   12e16:	e893 0003 	ldmia.w	r3, {r0, r1}
	  __parent = (__holeIndex - 1) / 2;
   12e1a:	1e53      	subs	r3, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   12e1c:	e886 0003 	stmia.w	r6, {r0, r1}
	  __parent = (__holeIndex - 1) / 2;
   12e20:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
	  __holeIndex = __parent;
   12e24:	4613      	mov	r3, r2
	  __parent = (__holeIndex - 1) / 2;
   12e26:	104a      	asrs	r2, r1, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   12e28:	e7e8      	b.n	12dfc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0+0x7e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   12e2a:	edc6 7a01 	vstr	s15, [r6, #4]
   12e2e:	6037      	str	r7, [r6, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
   12e30:	b003      	add	sp, #12
   12e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012e34 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_.constprop.0>:
	__val = _GLIBCXX_MOVE(*__last);
   12e34:	edd0 7a01 	vldr	s15, [r0, #4]
   12e38:	4603      	mov	r3, r0
    __unguarded_linear_insert(_RandomAccessIterator __last,
   12e3a:	b510      	push	{r4, lr}
	__val = _GLIBCXX_MOVE(*__last);
   12e3c:	6804      	ldr	r4, [r0, #0]
      operator--() _GLIBCXX_NOEXCEPT
   12e3e:	461a      	mov	r2, r3
      while (__comp(__val, __next))
   12e40:	ed13 7a01 	vldr	s14, [r3, #-4]
   12e44:	eef4 7ac7 	vcmpe.f32	s15, s14
   12e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e4c:	f1a3 0308 	sub.w	r3, r3, #8
   12e50:	dd06      	ble.n	12e60 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_.constprop.0+0x2c>
	  *__last = _GLIBCXX_MOVE(*__next);
   12e52:	e893 0003 	ldmia.w	r3, {r0, r1}
   12e56:	f103 0208 	add.w	r2, r3, #8
   12e5a:	e882 0003 	stmia.w	r2, {r0, r1}
	return *this;
   12e5e:	e7ee      	b.n	12e3e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_.constprop.0+0xa>
      *__last = _GLIBCXX_MOVE(__val);
   12e60:	edc2 7a01 	vstr	s15, [r2, #4]
   12e64:	6014      	str	r4, [r2, #0]
    }
   12e66:	bd10      	pop	{r4, pc}

00012e68 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0>:
    __insertion_sort(_RandomAccessIterator __first,
   12e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__first == __last) return;
   12e6a:	4288      	cmp	r0, r1
    __insertion_sort(_RandomAccessIterator __first,
   12e6c:	ed2d 8b02 	vpush	{d8}
   12e70:	4604      	mov	r4, r0
   12e72:	460e      	mov	r6, r1
      if (__first == __last) return;
   12e74:	d01e      	beq.n	12eb4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0+0x4c>
      { return __normal_iterator(_M_current + __n); }
   12e76:	f100 0508 	add.w	r5, r0, #8
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   12e7a:	42ae      	cmp	r6, r5
   12e7c:	d01a      	beq.n	12eb4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0+0x4c>
   12e7e:	ed95 8a01 	vldr	s16, [r5, #4]
	  if (__comp(__i, __first))
   12e82:	edd4 7a01 	vldr	s15, [r4, #4]
   12e86:	eeb4 8ae7 	vcmpe.f32	s16, s15
   12e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e8e:	dd0d      	ble.n	12eac <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0+0x44>
	  if (_Num)
   12e90:	42ac      	cmp	r4, r5
		__val = _GLIBCXX_MOVE(*__i);
   12e92:	682f      	ldr	r7, [r5, #0]
   12e94:	d005      	beq.n	12ea2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0+0x3a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   12e96:	4621      	mov	r1, r4
   12e98:	1b2a      	subs	r2, r5, r4
   12e9a:	f104 0008 	add.w	r0, r4, #8
   12e9e:	f001 fe97 	bl	14bd0 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
   12ea2:	ed84 8a01 	vstr	s16, [r4, #4]
   12ea6:	6027      	str	r7, [r4, #0]
	return *this;
   12ea8:	3508      	adds	r5, #8
   12eaa:	e7e6      	b.n	12e7a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0+0x12>
	    std::__unguarded_linear_insert(__i,
   12eac:	4628      	mov	r0, r5
   12eae:	f7ff ffc1 	bl	12e34 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_.constprop.0>
   12eb2:	e7f9      	b.n	12ea8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_.constprop.0+0x40>
    }
   12eb4:	ecbd 8b02 	vpop	{d8}
   12eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012eba <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_.isra.0>:

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
   12eba:	4603      	mov	r3, r0
   12ebc:	b417      	push	{r0, r1, r2, r4}
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   12ebe:	f10d 0c08 	add.w	ip, sp, #8
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
   12ec2:	460c      	mov	r4, r1
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   12ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
   12ec8:	e90c 0003 	stmdb	ip, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
   12ecc:	e893 0003 	ldmia.w	r3, {r0, r1}
      std::__adjust_heap(__first, _DistanceType(0),
   12ed0:	ed9d 0a00 	vldr	s0, [sp]
      *__result = _GLIBCXX_MOVE(*__first);
   12ed4:	e882 0003 	stmia.w	r2, {r0, r1}
      std::__adjust_heap(__first, _DistanceType(0),
   12ed8:	eddd 0a01 	vldr	s1, [sp, #4]
   12edc:	2100      	movs	r1, #0
   12ede:	4618      	mov	r0, r3
    { return __lhs.base() - __rhs.base(); }
   12ee0:	1ae2      	subs	r2, r4, r3
   12ee2:	10d2      	asrs	r2, r2, #3
			 _DistanceType(__last - __first),
			 _GLIBCXX_MOVE(__value), __comp);
    }
   12ee4:	b003      	add	sp, #12
   12ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
      std::__adjust_heap(__first, _DistanceType(0),
   12eea:	f7ff bf48 	b.w	12d7e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0>

00012eee <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
   12eee:	2a01      	cmp	r2, #1
   12ef0:	d102      	bne.n	12ef8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   12ef2:	6001      	str	r1, [r0, #0]
      }
   12ef4:	2000      	movs	r0, #0
   12ef6:	4770      	bx	lr
	  switch (__op)
   12ef8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   12efa:	bf04      	itt	eq
   12efc:	680b      	ldreq	r3, [r1, #0]
   12efe:	6003      	streq	r3, [r0, #0]
	      break;
   12f00:	e7f8      	b.n	12ef4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

00012f02 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   12f02:	2a01      	cmp	r2, #1
   12f04:	d102      	bne.n	12f0c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   12f06:	6001      	str	r1, [r0, #0]
      }
   12f08:	2000      	movs	r0, #0
   12f0a:	4770      	bx	lr
	  switch (__op)
   12f0c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   12f0e:	bf04      	itt	eq
   12f10:	680b      	ldreq	r3, [r1, #0]
   12f12:	6003      	streq	r3, [r0, #0]
	      break;
   12f14:	e7f8      	b.n	12f08 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

00012f16 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   12f16:	b430      	push	{r4, r5}
   12f18:	460d      	mov	r5, r1
   12f1a:	4611      	mov	r1, r2
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   12f1c:	6804      	ldr	r4, [r0, #0]
   12f1e:	681a      	ldr	r2, [r3, #0]
   12f20:	6828      	ldr	r0, [r5, #0]
   12f22:	4623      	mov	r3, r4
      }
   12f24:	bc30      	pop	{r4, r5}
   12f26:	6809      	ldr	r1, [r1, #0]
   12f28:	4718      	bx	r3

00012f2a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
   12f2a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12f2e:	4604      	mov	r4, r0
   12f30:	4691      	mov	r9, r2
   12f32:	461f      	mov	r7, r3
   12f34:	460d      	mov	r5, r1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   12f36:	f100 0808 	add.w	r8, r0, #8
   12f3a:	1b2e      	subs	r6, r5, r4
      while (__last - __first > int(_S_threshold))
   12f3c:	2e80      	cmp	r6, #128	; 0x80
   12f3e:	f340 8093 	ble.w	13068 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x13e>
   12f42:	ea4f 0ae6 	mov.w	sl, r6, asr #3
	  if (__depth_limit == 0)
   12f46:	f1b9 0f00 	cmp.w	r9, #0
   12f4a:	d121      	bne.n	12f90 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x66>

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   12f4c:	46e8      	mov	r8, sp
      _DistanceType __parent = (__len - 2) / 2;
   12f4e:	f1aa 0602 	sub.w	r6, sl, #2
   12f52:	1076      	asrs	r6, r6, #1
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   12f54:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   12f58:	e893 0003 	ldmia.w	r3, {r0, r1}
   12f5c:	e888 0003 	stmia.w	r8, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   12f60:	4652      	mov	r2, sl
   12f62:	ed9d 0a00 	vldr	s0, [sp]
   12f66:	eddd 0a01 	vldr	s1, [sp, #4]
   12f6a:	4631      	mov	r1, r6
   12f6c:	4620      	mov	r0, r4
   12f6e:	f7ff ff06 	bl	12d7e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_.constprop.0>
			     __comp);
	  if (__parent == 0)
   12f72:	b10e      	cbz	r6, 12f78 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x4e>
	    return;
	  __parent--;
   12f74:	3e01      	subs	r6, #1
      while (true)
   12f76:	e7ed      	b.n	12f54 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x2a>
   12f78:	1b2b      	subs	r3, r5, r4
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   12f7a:	2b08      	cmp	r3, #8
   12f7c:	f1a5 0508 	sub.w	r5, r5, #8
   12f80:	dd72      	ble.n	13068 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x13e>
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
   12f82:	463b      	mov	r3, r7
   12f84:	462a      	mov	r2, r5
   12f86:	4629      	mov	r1, r5
   12f88:	4620      	mov	r0, r4
   12f8a:	f7ff ff96 	bl	12eba <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_.isra.0>
      while (__last - __first > 1)
   12f8e:	e7f3      	b.n	12f78 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x4e>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   12f90:	1136      	asrs	r6, r6, #4
      { return __normal_iterator(_M_current + __n); }
   12f92:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   12f96:	edd4 6a03 	vldr	s13, [r4, #12]
   12f9a:	ed96 7a01 	vldr	s14, [r6, #4]
      if (__comp(__a, __b))
   12f9e:	eef4 6ac7 	vcmpe.f32	s13, s14
   12fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fa6:	ed55 7a01 	vldr	s15, [r5, #-4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   12faa:	6822      	ldr	r2, [r4, #0]
   12fac:	6863      	ldr	r3, [r4, #4]
	  --__depth_limit;
   12fae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
   12fb2:	dd19      	ble.n	12fe8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xbe>
	  if (__comp(__b, __c))
   12fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
   12fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fbc:	d506      	bpl.n	12fcc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xa2>
      __a = _GLIBCXX_MOVE(__b);
   12fbe:	e896 0003 	ldmia.w	r6, {r0, r1}
   12fc2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   12fc6:	6032      	str	r2, [r6, #0]
   12fc8:	6073      	str	r3, [r6, #4]
    }
   12fca:	e018      	b.n	12ffe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xd4>
	  else if (__comp(__a, __c))
   12fcc:	eef4 7ae6 	vcmpe.f32	s15, s13
   12fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fd4:	d50d      	bpl.n	12ff2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xc8>
      __a = _GLIBCXX_MOVE(__b);
   12fd6:	e915 0003 	ldmdb	r5, {r0, r1}
   12fda:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   12fde:	f845 2c08 	str.w	r2, [r5, #-8]
   12fe2:	f845 3c04 	str.w	r3, [r5, #-4]
    }
   12fe6:	e00a      	b.n	12ffe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xd4>
      else if (__comp(__a, __c))
   12fe8:	eef4 7ae6 	vcmpe.f32	s15, s13
   12fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ff0:	d529      	bpl.n	13046 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x11c>
      __a = _GLIBCXX_MOVE(__b);
   12ff2:	e898 0003 	ldmia.w	r8, {r0, r1}
   12ff6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   12ffa:	60a2      	str	r2, [r4, #8]
   12ffc:	60e3      	str	r3, [r4, #12]
      while (__last - __first > int(_S_threshold))
   12ffe:	462e      	mov	r6, r5
   13000:	f104 0310 	add.w	r3, r4, #16
   13004:	ed53 7a01 	vldr	s15, [r3, #-4]
   13008:	ed94 7a01 	vldr	s14, [r4, #4]
	  while (__comp(__first, __pivot))
   1300c:	eef4 7ac7 	vcmpe.f32	s15, s14
   13010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13014:	f1a3 0a08 	sub.w	sl, r3, #8
   13018:	dc24      	bgt.n	13064 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x13a>
	--_M_current;
   1301a:	f1a6 0208 	sub.w	r2, r6, #8
   1301e:	4616      	mov	r6, r2
	  while (__comp(__pivot, __last))
   13020:	edd2 6a01 	vldr	s13, [r2, #4]
   13024:	eeb4 7ae6 	vcmpe.f32	s14, s13
   13028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1302c:	f1a2 0208 	sub.w	r2, r2, #8
   13030:	dcf5      	bgt.n	1301e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xf4>
	  if (!(__first < __last))
   13032:	4556      	cmp	r6, sl
   13034:	d80d      	bhi.n	13052 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x128>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   13036:	4629      	mov	r1, r5
   13038:	463b      	mov	r3, r7
   1303a:	464a      	mov	r2, r9
   1303c:	4650      	mov	r0, sl
   1303e:	f7ff ff74 	bl	12f2a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
      while (__last - __first > int(_S_threshold))
   13042:	4655      	mov	r5, sl
   13044:	e779      	b.n	12f3a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x10>
      else if (__comp(__b, __c))
   13046:	eef4 7ac7 	vcmpe.f32	s15, s14
   1304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1304e:	d5b6      	bpl.n	12fbe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x94>
   13050:	e7c1      	b.n	12fd6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xac>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   13052:	f853 2c08 	ldr.w	r2, [r3, #-8]
      __a = _GLIBCXX_MOVE(__b);
   13056:	e896 0003 	ldmia.w	r6, {r0, r1}
   1305a:	e88a 0003 	stmia.w	sl, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   1305e:	edc6 7a01 	vstr	s15, [r6, #4]
   13062:	6032      	str	r2, [r6, #0]
   13064:	3308      	adds	r3, #8
   13066:	e7cd      	b.n	13004 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xda>
    }
   13068:	b002      	add	sp, #8
   1306a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001306e <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
   1306e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   13070:	b510      	push	{r4, lr}
   13072:	4604      	mov	r4, r0
      if (_M_manager)
   13074:	b113      	cbz	r3, 1307c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   13076:	2203      	movs	r2, #3
   13078:	4601      	mov	r1, r0
   1307a:	4798      	blx	r3
    }
   1307c:	4620      	mov	r0, r4
   1307e:	bd10      	pop	{r4, pc}

00013080 <_ZN2ei9ei_matrixC1EjjPf>:
    ei_matrix(
   13080:	b570      	push	{r4, r5, r6, lr}
   13082:	4604      	mov	r4, r0
   13084:	460e      	mov	r6, r1
   13086:	4615      	mov	r5, r2
        if (a_buffer) {
   13088:	b133      	cbz	r3, 13098 <_ZN2ei9ei_matrixC1EjjPf+0x18>
            buffer = a_buffer;
   1308a:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
   1308c:	2300      	movs	r3, #0
    }
   1308e:	4620      	mov	r0, r4
        cols = n_cols;
   13090:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
   13094:	7323      	strb	r3, [r4, #12]
    }
   13096:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   13098:	fb02 f001 	mul.w	r0, r2, r1
   1309c:	2101      	movs	r1, #1
   1309e:	0080      	lsls	r0, r0, #2
   130a0:	f000 fbe7 	bl	13872 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   130a4:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   130a6:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
   130a8:	e7f1      	b.n	1308e <_ZN2ei9ei_matrixC1EjjPf+0xe>

000130aa <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
   130aa:	e7fe      	b.n	130aa <_ZSt25__throw_bad_function_callv>

000130ac <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   130ac:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   130b0:	4359      	muls	r1, r3
   130b2:	2300      	movs	r3, #0
   130b4:	4299      	cmp	r1, r3
   130b6:	d00a      	beq.n	130ce <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
   130b8:	6802      	ldr	r2, [r0, #0]
   130ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   130be:	edd2 7a00 	vldr	s15, [r2]
   130c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   130c6:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
   130c8:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   130cc:	e7f2      	b.n	130b4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x8>
    }
   130ce:	2000      	movs	r0, #0
   130d0:	4770      	bx	lr

000130d2 <ei_wrapper_classifier_has_anomaly>:
}
   130d2:	2001      	movs	r0, #1
   130d4:	4770      	bx	lr

000130d6 <ei_wrapper_get_frame_size>:
}
   130d6:	2003      	movs	r0, #3
   130d8:	4770      	bx	lr

000130da <ei_wrapper_get_window_size>:
}
   130da:	f240 1077 	movw	r0, #375	; 0x177
   130de:	4770      	bx	lr

000130e0 <ei_wrapper_get_classifier_frequency>:
}
   130e0:	203e      	movs	r0, #62	; 0x3e
   130e2:	4770      	bx	lr

000130e4 <ei_wrapper_get_classifier_label_count>:
}
   130e4:	2004      	movs	r0, #4
   130e6:	4770      	bx	lr

000130e8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
   130e8:	b510      	push	{r4, lr}
   130ea:	ed2d 8b02 	vpush	{d8}
   130ee:	ee10 4a10 	vmov	r4, s0
      return pow(__type(__x), __type(__y));
   130f2:	f7ed f983 	bl	3fc <__aeabi_i2d>
   130f6:	ec41 0b18 	vmov	d8, r0, r1
   130fa:	4620      	mov	r0, r4
   130fc:	f7ed f990 	bl	420 <__aeabi_f2d>
   13100:	eeb0 1a48 	vmov.f32	s2, s16
   13104:	eef0 1a68 	vmov.f32	s3, s17
    }
   13108:	ecbd 8b02 	vpop	{d8}
   1310c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
   13110:	ec41 0b10 	vmov	d0, r0, r1
   13114:	f7fc bbbe 	b.w	f894 <pow>

00013118 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   13118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1311a:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   1311c:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
   1311e:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
   13122:	b90b      	cbnz	r3, 13128 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
   13124:	f7ff ffc1 	bl	130aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   13128:	68c4      	ldr	r4, [r0, #12]
   1312a:	ab01      	add	r3, sp, #4
   1312c:	aa02      	add	r2, sp, #8
   1312e:	a903      	add	r1, sp, #12
   13130:	47a0      	blx	r4
    }
   13132:	b004      	add	sp, #16
   13134:	bd10      	pop	{r4, pc}

00013136 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   13136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1313a:	6806      	ldr	r6, [r0, #0]
   1313c:	681f      	ldr	r7, [r3, #0]

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   1313e:	68b0      	ldr	r0, [r6, #8]
   13140:	680c      	ldr	r4, [r1, #0]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   13142:	6813      	ldr	r3, [r2, #0]
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   13144:	fbb4 f4f0 	udiv	r4, r4, r0
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   13148:	fbb3 f3f0 	udiv	r3, r3, r0

        size_t out_ptr_ix = 0;
   1314c:	f04f 0800 	mov.w	r8, #0
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   13150:	eb03 0343 	add.w	r3, r3, r3, lsl #1

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   13154:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13158:	18e5      	adds	r5, r4, r3
   1315a:	42a5      	cmp	r5, r4
   1315c:	d91a      	bls.n	13194 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x5e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   1315e:	f04f 0900 	mov.w	r9, #0
   13162:	eb07 0a88 	add.w	sl, r7, r8, lsl #2
   13166:	68b2      	ldr	r2, [r6, #8]
   13168:	eb09 0308 	add.w	r3, r9, r8
   1316c:	454a      	cmp	r2, r9
   1316e:	d90e      	bls.n	1318e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x58>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   13170:	6873      	ldr	r3, [r6, #4]
   13172:	2201      	movs	r2, #1
   13174:	f813 1009 	ldrb.w	r1, [r3, r9]
   13178:	6830      	ldr	r0, [r6, #0]
   1317a:	4653      	mov	r3, sl
   1317c:	4421      	add	r1, r4
   1317e:	f7ff ffcb 	bl	13118 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
   13182:	f10a 0a04 	add.w	sl, sl, #4
   13186:	b930      	cbnz	r0, 13196 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x60>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   13188:	f109 0901 	add.w	r9, r9, #1
   1318c:	e7eb      	b.n	13166 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   1318e:	4698      	mov	r8, r3
   13190:	3403      	adds	r4, #3
   13192:	e7e2      	b.n	1315a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x24>
                    return r;
                }
            }
        }

        return 0;
   13194:	2000      	movs	r0, #0
      }
   13196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001319a <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   1319a:	b510      	push	{r4, lr}
   1319c:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   1319e:	6840      	ldr	r0, [r0, #4]
   131a0:	b108      	cbz	r0, 131a6 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
   131a2:	6823      	ldr	r3, [r4, #0]
   131a4:	4798      	blx	r3
	__ptr = pointer();
      }
   131a6:	4620      	mov	r0, r4
   131a8:	bd10      	pop	{r4, pc}

000131aa <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
   131aa:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   131ac:	466c      	mov	r4, sp
   131ae:	460b      	mov	r3, r1
   131b0:	4602      	mov	r2, r0
   131b2:	e9d0 0100 	ldrd	r0, r1, [r0]
   131b6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   131ba:	e893 0003 	ldmia.w	r3, {r0, r1}
   131be:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   131c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   131c6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   131ca:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   131cc:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   131ce:	6090      	str	r0, [r2, #8]
   131d0:	68d8      	ldr	r0, [r3, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   131d2:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   131d4:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   131d6:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   131d8:	60d9      	str	r1, [r3, #12]
      }
   131da:	b002      	add	sp, #8
   131dc:	bd10      	pop	{r4, pc}

000131de <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>:
      push_back(const value_type& __x)
   131de:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   131e0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
   131e4:	42a3      	cmp	r3, r4
      push_back(const value_type& __x)
   131e6:	4602      	mov	r2, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   131e8:	d006      	beq.n	131f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   131ea:	b113      	cbz	r3, 131f2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x14>
   131ec:	c903      	ldmia	r1, {r0, r1}
   131ee:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   131f2:	3308      	adds	r3, #8
   131f4:	6053      	str	r3, [r2, #4]
      }
   131f6:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   131f8:	460a      	mov	r2, r1
   131fa:	4619      	mov	r1, r3
   131fc:	f7f7 f86c 	bl	a2d8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
   13200:	e7f9      	b.n	131f6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x18>

00013202 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   13202:	f7fe be99 	b.w	11f38 <nrf_cc3xx_platform_init_no_rng>

00013206 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   13206:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   13208:	f7f3 ffee 	bl	71e8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1320c:	f7f4 f8b2 	bl	7374 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   13210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   13214:	f7fe be90 	b.w	11f38 <nrf_cc3xx_platform_init_no_rng>

00013218 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   13218:	4700      	bx	r0

0001321a <nrfx_busy_wait>:
   1321a:	f000 bb0f 	b.w	1383c <z_impl_k_busy_wait>

0001321e <clock_stop>:
{
   1321e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13220:	4605      	mov	r5, r0
    switch (domain)
   13222:	2803      	cmp	r0, #3
   13224:	d874      	bhi.n	13310 <clock_stop+0xf2>
   13226:	e8df f000 	tbb	[pc, r0]
   1322a:	2102      	.short	0x2102
   1322c:	3b2d      	.short	0x3b2d
   1322e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13232:	2202      	movs	r2, #2
   13234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13238:	2200      	movs	r2, #0
   1323a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1323e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13242:	2201      	movs	r2, #1
   13244:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13246:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   13248:	429d      	cmp	r5, r3
   1324a:	bf18      	it	ne
   1324c:	2400      	movne	r4, #0
   1324e:	f242 7710 	movw	r7, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   13252:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13256:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1325a:	bf08      	it	eq
   1325c:	f10d 0407 	addeq.w	r4, sp, #7
    switch (domain)
   13260:	2d03      	cmp	r5, #3
   13262:	d855      	bhi.n	13310 <clock_stop+0xf2>
   13264:	e8df f005 	tbb	[pc, r5]
   13268:	4d443b2a 	.word	0x4d443b2a
    p_reg->INTENCLR = mask;
   1326c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13270:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13272:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   13274:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13278:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1327c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13280:	605a      	str	r2, [r3, #4]
}
   13282:	e7e0      	b.n	13246 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   13284:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13288:	f44f 7200 	mov.w	r2, #512	; 0x200
   1328c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13290:	2200      	movs	r2, #0
   13292:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13296:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1329a:	2201      	movs	r2, #1
   1329c:	625a      	str	r2, [r3, #36]	; 0x24
}
   1329e:	e7d2      	b.n	13246 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   132a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   132a4:	f44f 7280 	mov.w	r2, #256	; 0x100
   132a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   132ac:	2200      	movs	r2, #0
   132ae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   132b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   132b6:	2201      	movs	r2, #1
   132b8:	61da      	str	r2, [r3, #28]
}
   132ba:	e7c4      	b.n	13246 <clock_stop+0x28>
            if (p_clk_src != NULL)
   132bc:	b124      	cbz	r4, 132c8 <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   132be:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   132c2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   132c6:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   132c8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   132cc:	03db      	lsls	r3, r3, #15
   132ce:	d51f      	bpl.n	13310 <clock_stop+0xf2>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   132d0:	b9d4      	cbnz	r4, 13308 <clock_stop+0xea>
   132d2:	2001      	movs	r0, #1
   132d4:	f7ff ffa1 	bl	1321a <nrfx_busy_wait>
   132d8:	3f01      	subs	r7, #1
   132da:	d1c1      	bne.n	13260 <clock_stop+0x42>
   132dc:	e018      	b.n	13310 <clock_stop+0xf2>
            if (p_clk_src != NULL)
   132de:	b124      	cbz	r4, 132ea <clock_stop+0xcc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   132e0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   132e4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   132e8:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   132ea:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   132ee:	e7ed      	b.n	132cc <clock_stop+0xae>
            if (p_clk_src != NULL)
   132f0:	b124      	cbz	r4, 132fc <clock_stop+0xde>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   132f2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   132f6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   132fa:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   132fc:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   13300:	e7e4      	b.n	132cc <clock_stop+0xae>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   13302:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   13306:	e7e1      	b.n	132cc <clock_stop+0xae>
   13308:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1330c:	2b01      	cmp	r3, #1
   1330e:	d0e0      	beq.n	132d2 <clock_stop+0xb4>
}
   13310:	b003      	add	sp, #12
   13312:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013314 <nrfx_clock_enable>:
{
   13314:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   13316:	2005      	movs	r0, #5
   13318:	f7f4 f884 	bl	7424 <arch_irq_is_enabled>
   1331c:	b910      	cbnz	r0, 13324 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1331e:	2005      	movs	r0, #5
   13320:	f7f4 f85c 	bl	73dc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13324:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13328:	2201      	movs	r2, #1
   1332a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1332e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   13332:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   13336:	bd08      	pop	{r3, pc}

00013338 <nrfx_clock_start>:
{
   13338:	b508      	push	{r3, lr}
    switch (domain)
   1333a:	2803      	cmp	r0, #3
   1333c:	d81e      	bhi.n	1337c <nrfx_clock_start+0x44>
   1333e:	e8df f000 	tbb	[pc, r0]
   13342:	3302      	.short	0x3302
   13344:	4d3f      	.short	0x4d3f
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13346:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   1334a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1334e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   13352:	03c9      	lsls	r1, r1, #15
   13354:	d413      	bmi.n	1337e <nrfx_clock_start+0x46>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   13356:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1335a:	07db      	lsls	r3, r3, #31
   1335c:	d419      	bmi.n	13392 <nrfx_clock_start+0x5a>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1335e:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   13360:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   13364:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13368:	2300      	movs	r3, #0
   1336a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1336e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   13372:	2302      	movs	r3, #2
   13374:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13378:	2301      	movs	r3, #1
   1337a:	6093      	str	r3, [r2, #8]
}
   1337c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1337e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13382:	2b02      	cmp	r3, #2
   13384:	d0ec      	beq.n	13360 <nrfx_clock_start+0x28>
    if (!is_correct_clk)
   13386:	2b01      	cmp	r3, #1
   13388:	d0ea      	beq.n	13360 <nrfx_clock_start+0x28>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1338a:	2000      	movs	r0, #0
   1338c:	f7ff ff47 	bl	1321e <clock_stop>
   13390:	e7e5      	b.n	1335e <nrfx_clock_start+0x26>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13392:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   13396:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   1339a:	3b01      	subs	r3, #1
   1339c:	2b01      	cmp	r3, #1
   1339e:	d8f4      	bhi.n	1338a <nrfx_clock_start+0x52>
    p_reg->INTENSET = mask;
   133a0:	2302      	movs	r3, #2
   133a2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   133a6:	e7e9      	b.n	1337c <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   133ac:	2200      	movs	r2, #0
   133ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   133b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   133b6:	2201      	movs	r2, #1
   133b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133bc:	601a      	str	r2, [r3, #0]
}
   133be:	e7dd      	b.n	1337c <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   133c4:	2200      	movs	r2, #0
   133c6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   133ca:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   133ce:	f44f 7200 	mov.w	r2, #512	; 0x200
   133d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133d6:	2201      	movs	r2, #1
   133d8:	621a      	str	r2, [r3, #32]
}
   133da:	e7cf      	b.n	1337c <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   133e0:	2200      	movs	r2, #0
   133e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   133e6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   133ea:	f44f 7280 	mov.w	r2, #256	; 0x100
   133ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133f2:	2201      	movs	r2, #1
   133f4:	619a      	str	r2, [r3, #24]
}
   133f6:	e7c1      	b.n	1337c <nrfx_clock_start+0x44>

000133f8 <nrfx_clock_stop>:
    clock_stop(domain);
   133f8:	f7ff bf11 	b.w	1321e <clock_stop>

000133fc <nrf_gpio_reconfigure>:
{
   133fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   133fe:	4617      	mov	r7, r2
   13400:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   13404:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13406:	a801      	add	r0, sp, #4
{
   13408:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1340a:	f7f7 fa05 	bl	a818 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1340e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13410:	2f00      	cmp	r7, #0
   13412:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13416:	bf14      	ite	ne
   13418:	2302      	movne	r3, #2
   1341a:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1341c:	2900      	cmp	r1, #0
   1341e:	bf18      	it	ne
   13420:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13424:	2d00      	cmp	r5, #0
   13426:	bf14      	ite	ne
   13428:	f04f 0c0c 	movne.w	ip, #12
   1342c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   13430:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13432:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   13436:	bf14      	ite	ne
   13438:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   1343c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   13440:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13442:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   13446:	bf14      	ite	ne
   13448:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1344c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13450:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   13454:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   13458:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1345c:	b101      	cbz	r1, 13460 <nrf_gpio_reconfigure+0x64>
   1345e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   13460:	b10f      	cbz	r7, 13466 <nrf_gpio_reconfigure+0x6a>
   13462:	783f      	ldrb	r7, [r7, #0]
   13464:	007f      	lsls	r7, r7, #1
   13466:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   13468:	b10d      	cbz	r5, 1346e <nrf_gpio_reconfigure+0x72>
   1346a:	782d      	ldrb	r5, [r5, #0]
   1346c:	00ad      	lsls	r5, r5, #2
   1346e:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   13470:	b10c      	cbz	r4, 13476 <nrf_gpio_reconfigure+0x7a>
   13472:	7822      	ldrb	r2, [r4, #0]
   13474:	0214      	lsls	r4, r2, #8
   13476:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   13478:	b10e      	cbz	r6, 1347e <nrf_gpio_reconfigure+0x82>
   1347a:	7836      	ldrb	r6, [r6, #0]
   1347c:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1347e:	432c      	orrs	r4, r5
   13480:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   13482:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   13486:	b003      	add	sp, #12
   13488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001348a <nrf_gpio_cfg_sense_set>:
{
   1348a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1348c:	f10d 030f 	add.w	r3, sp, #15
   13490:	9301      	str	r3, [sp, #4]
   13492:	2300      	movs	r3, #0
{
   13494:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   13498:	461a      	mov	r2, r3
   1349a:	4619      	mov	r1, r3
   1349c:	9300      	str	r3, [sp, #0]
   1349e:	f7ff ffad 	bl	133fc <nrf_gpio_reconfigure>
}
   134a2:	b005      	add	sp, #20
   134a4:	f85d fb04 	ldr.w	pc, [sp], #4

000134a8 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   134a8:	2300      	movs	r3, #0
{
   134aa:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_cfg(
   134ac:	2201      	movs	r2, #1
   134ae:	4619      	mov	r1, r3
   134b0:	9300      	str	r3, [sp, #0]
   134b2:	f7f7 fd15 	bl	aee0 <nrf_gpio_cfg.constprop.0>
}
   134b6:	b003      	add	sp, #12
   134b8:	f85d fb04 	ldr.w	pc, [sp], #4

000134bc <set_ss_pin_state>:
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   134bc:	7fc3      	ldrb	r3, [r0, #31]
   134be:	2bff      	cmp	r3, #255	; 0xff
   134c0:	d007      	beq.n	134d2 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   134c2:	7f82      	ldrb	r2, [r0, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   134c4:	4618      	mov	r0, r3
   134c6:	0792      	lsls	r2, r2, #30
   134c8:	bf58      	it	pl
   134ca:	f081 0101 	eorpl.w	r1, r1, #1
   134ce:	f7f7 bd27 	b.w	af20 <nrf_gpio_pin_write>
}
   134d2:	4770      	bx	lr

000134d4 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   134d4:	7b0b      	ldrb	r3, [r1, #12]
   134d6:	2b03      	cmp	r3, #3
   134d8:	d82a      	bhi.n	13530 <xfer_completeness_check+0x5c>
   134da:	e8df f003 	tbb	[pc, r3]
   134de:	2622      	.short	0x2622
   134e0:	021a      	.short	0x021a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   134e2:	688b      	ldr	r3, [r1, #8]
   134e4:	035a      	lsls	r2, r3, #13
   134e6:	d504      	bpl.n	134f2 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   134e8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   134ec:	690a      	ldr	r2, [r1, #16]
   134ee:	429a      	cmp	r2, r3
   134f0:	d107      	bne.n	13502 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   134f2:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   134f4:	035b      	lsls	r3, r3, #13
   134f6:	d41b      	bmi.n	13530 <xfer_completeness_check+0x5c>
   134f8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   134fc:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   134fe:	429a      	cmp	r2, r3
   13500:	d016      	beq.n	13530 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   13502:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   13504:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   13506:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1350a:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   1350e:	4618      	mov	r0, r3
   13510:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   13512:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   13516:	690a      	ldr	r2, [r1, #16]
   13518:	429a      	cmp	r2, r3
   1351a:	d1f2      	bne.n	13502 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   1351c:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   13520:	e7ec      	b.n	134fc <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   13522:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   13526:	690a      	ldr	r2, [r1, #16]
   13528:	e7e9      	b.n	134fe <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   1352a:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   1352e:	e7fa      	b.n	13526 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   13530:	2001      	movs	r0, #1
}
   13532:	4770      	bx	lr

00013534 <nrf_gpio_pin_set>:
{
   13534:	b507      	push	{r0, r1, r2, lr}
   13536:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13538:	a801      	add	r0, sp, #4
   1353a:	f7f8 fa05 	bl	b948 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1353e:	2301      	movs	r3, #1
   13540:	9a01      	ldr	r2, [sp, #4]
   13542:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   13544:	6083      	str	r3, [r0, #8]
}
   13546:	b003      	add	sp, #12
   13548:	f85d fb04 	ldr.w	pc, [sp], #4

0001354c <z_device_state_init>:
}
   1354c:	4770      	bx	lr

0001354e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1354e:	b138      	cbz	r0, 13560 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   13550:	68c3      	ldr	r3, [r0, #12]
   13552:	8818      	ldrh	r0, [r3, #0]
   13554:	f3c0 0008 	ubfx	r0, r0, #0, #9
   13558:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1355c:	4258      	negs	r0, r3
   1355e:	4158      	adcs	r0, r3
}
   13560:	4770      	bx	lr

00013562 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13562:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13564:	4605      	mov	r5, r0
   13566:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   13568:	f04f 0320 	mov.w	r3, #32
   1356c:	f3ef 8611 	mrs	r6, BASEPRI
   13570:	f383 8812 	msr	BASEPRI_MAX, r3
   13574:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   13578:	f7f9 f864 	bl	c644 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1357c:	9901      	ldr	r1, [sp, #4]
   1357e:	4604      	mov	r4, r0
   13580:	4628      	mov	r0, r5
   13582:	f7ff fbee 	bl	12d62 <k_sys_fatal_error_handler>
	__asm__ volatile(
   13586:	f386 8811 	msr	BASEPRI, r6
   1358a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1358e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   13590:	b002      	add	sp, #8
   13592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13596:	f7f4 b9f1 	b.w	797c <z_impl_k_thread_abort>

0001359a <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   1359a:	f001 bb33 	b.w	14c04 <memset>

0001359e <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1359e:	f001 bb0a 	b.w	14bb6 <memcpy>

000135a2 <k_mem_slab_init>:
{
   135a2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   135a4:	2400      	movs	r4, #0
   135a6:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   135a8:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   135aa:	ea41 0402 	orr.w	r4, r1, r2
   135ae:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   135b2:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   135b6:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   135b8:	d10c      	bne.n	135d4 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   135ba:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   135bc:	42a3      	cmp	r3, r4
   135be:	d103      	bne.n	135c8 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   135c0:	e9c0 0000 	strd	r0, r0, [r0]
}
   135c4:	2000      	movs	r0, #0
}
   135c6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   135c8:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   135ca:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   135cc:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   135ce:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   135d0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   135d2:	e7f3      	b.n	135bc <k_mem_slab_init+0x1a>
		return -EINVAL;
   135d4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   135d8:	e7f5      	b.n	135c6 <k_mem_slab_init+0x24>

000135da <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   135da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135dc:	4604      	mov	r4, r0
   135de:	460d      	mov	r5, r1
	__asm__ volatile(
   135e0:	f04f 0320 	mov.w	r3, #32
   135e4:	f3ef 8611 	mrs	r6, BASEPRI
   135e8:	f383 8812 	msr	BASEPRI_MAX, r3
   135ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   135f0:	6987      	ldr	r7, [r0, #24]
   135f2:	b977      	cbnz	r7, 13612 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   135f4:	f000 f8c3 	bl	1377e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   135f8:	b158      	cbz	r0, 13612 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   135fa:	682a      	ldr	r2, [r5, #0]
   135fc:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   135fe:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   13600:	f000 f861 	bl	136c6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   13604:	4631      	mov	r1, r6
   13606:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1360a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1360e:	f7f8 bd6d 	b.w	c0ec <z_reschedule>
	**(char ***) mem = slab->free_list;
   13612:	682b      	ldr	r3, [r5, #0]
   13614:	69a2      	ldr	r2, [r4, #24]
   13616:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   13618:	682b      	ldr	r3, [r5, #0]
   1361a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1361c:	69e3      	ldr	r3, [r4, #28]
   1361e:	3b01      	subs	r3, #1
   13620:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13622:	f386 8811 	msr	BASEPRI, r6
   13626:	f3bf 8f6f 	isb	sy
}
   1362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001362c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1362c:	f3ef 8005 	mrs	r0, IPSR
}
   13630:	3800      	subs	r0, #0
   13632:	bf18      	it	ne
   13634:	2001      	movne	r0, #1
   13636:	4770      	bx	lr

00013638 <z_impl_k_thread_name_set>:
}
   13638:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1363c:	4770      	bx	lr

0001363e <z_pm_save_idle_exit>:
{
   1363e:	b508      	push	{r3, lr}
	pm_system_resume();
   13640:	f7f3 fcc6 	bl	6fd0 <pm_system_resume>
}
   13644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   13648:	f7ff bace 	b.w	12be8 <sys_clock_idle_exit>

0001364c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1364c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   13650:	428b      	cmp	r3, r1
   13652:	d001      	beq.n	13658 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   13654:	f7f8 beb2 	b.w	c3bc <z_set_prio>
}
   13658:	2000      	movs	r0, #0
   1365a:	4770      	bx	lr

0001365c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   1365c:	2300      	movs	r3, #0
   1365e:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   13662:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   13666:	4618      	mov	r0, r3
   13668:	4770      	bx	lr

0001366a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1366a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1366e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13670:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13672:	2300      	movs	r3, #0
	node->prev = NULL;
   13674:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   13678:	4770      	bx	lr

0001367a <unpend_thread_no_timeout>:
{
   1367a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1367c:	f7ff fff5 	bl	1366a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13680:	7b43      	ldrb	r3, [r0, #13]
   13682:	f023 0302 	bic.w	r3, r3, #2
   13686:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   13688:	2300      	movs	r3, #0
   1368a:	6083      	str	r3, [r0, #8]
}
   1368c:	bd08      	pop	{r3, pc}

0001368e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1368e:	4603      	mov	r3, r0
   13690:	b920      	cbnz	r0, 1369c <z_reschedule_irqlock+0xe>
   13692:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   13696:	b90a      	cbnz	r2, 1369c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   13698:	f7f3 bf1a 	b.w	74d0 <arch_swap>
   1369c:	f383 8811 	msr	BASEPRI, r3
   136a0:	f3bf 8f6f 	isb	sy
}
   136a4:	4770      	bx	lr

000136a6 <z_reschedule_unlocked>:
	__asm__ volatile(
   136a6:	f04f 0320 	mov.w	r3, #32
   136aa:	f3ef 8011 	mrs	r0, BASEPRI
   136ae:	f383 8812 	msr	BASEPRI_MAX, r3
   136b2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   136b6:	f7ff bfea 	b.w	1368e <z_reschedule_irqlock>

000136ba <z_priq_dumb_best>:
	return list->head == list;
   136ba:	6803      	ldr	r3, [r0, #0]
}
   136bc:	4298      	cmp	r0, r3
   136be:	bf14      	ite	ne
   136c0:	4618      	movne	r0, r3
   136c2:	2000      	moveq	r0, #0
   136c4:	4770      	bx	lr

000136c6 <z_ready_thread>:
{
   136c6:	b510      	push	{r4, lr}
   136c8:	f04f 0320 	mov.w	r3, #32
   136cc:	f3ef 8411 	mrs	r4, BASEPRI
   136d0:	f383 8812 	msr	BASEPRI_MAX, r3
   136d4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   136d8:	f7f8 fdca 	bl	c270 <ready_thread>
	__asm__ volatile(
   136dc:	f384 8811 	msr	BASEPRI, r4
   136e0:	f3bf 8f6f 	isb	sy
}
   136e4:	bd10      	pop	{r4, pc}

000136e6 <z_thread_timeout>:
{
   136e6:	4601      	mov	r1, r0
   136e8:	b510      	push	{r4, lr}
	__asm__ volatile(
   136ea:	f04f 0320 	mov.w	r3, #32
   136ee:	f3ef 8411 	mrs	r4, BASEPRI
   136f2:	f383 8812 	msr	BASEPRI_MAX, r3
   136f6:	f3bf 8f6f 	isb	sy
		if (!killed) {
   136fa:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   136fe:	f013 0f28 	tst.w	r3, #40	; 0x28
   13702:	d10d      	bne.n	13720 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   13704:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   13708:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1370a:	b10b      	cbz	r3, 13710 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1370c:	f7ff ffb5 	bl	1367a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   13710:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   13714:	f023 0314 	bic.w	r3, r3, #20
   13718:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1371c:	f7f8 fda8 	bl	c270 <ready_thread>
	__asm__ volatile(
   13720:	f384 8811 	msr	BASEPRI, r4
   13724:	f3bf 8f6f 	isb	sy
}
   13728:	bd10      	pop	{r4, pc}

0001372a <add_to_waitq_locked>:
{
   1372a:	b538      	push	{r3, r4, r5, lr}
   1372c:	4604      	mov	r4, r0
   1372e:	460d      	mov	r5, r1
	unready_thread(thread);
   13730:	f7f8 fdf2 	bl	c318 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   13734:	7b63      	ldrb	r3, [r4, #13]
   13736:	f043 0302 	orr.w	r3, r3, #2
   1373a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1373c:	b195      	cbz	r5, 13764 <add_to_waitq_locked+0x3a>
   1373e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   13740:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13742:	429d      	cmp	r5, r3
   13744:	d015      	beq.n	13772 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13746:	b1a3      	cbz	r3, 13772 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   13748:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1374c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   13750:	4291      	cmp	r1, r2
   13752:	d008      	beq.n	13766 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   13754:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   13756:	2a00      	cmp	r2, #0
   13758:	dd05      	ble.n	13766 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1375a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1375c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   13760:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   13762:	605c      	str	r4, [r3, #4]
}
   13764:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   13766:	686a      	ldr	r2, [r5, #4]
   13768:	4293      	cmp	r3, r2
   1376a:	d002      	beq.n	13772 <add_to_waitq_locked+0x48>
   1376c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1376e:	2b00      	cmp	r3, #0
   13770:	d1ec      	bne.n	1374c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   13772:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   13774:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   13778:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1377a:	606c      	str	r4, [r5, #4]
}
   1377c:	e7f2      	b.n	13764 <add_to_waitq_locked+0x3a>

0001377e <z_unpend_first_thread>:
{
   1377e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13780:	f04f 0320 	mov.w	r3, #32
   13784:	f3ef 8511 	mrs	r5, BASEPRI
   13788:	f383 8812 	msr	BASEPRI_MAX, r3
   1378c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   13790:	f7ff ff93 	bl	136ba <z_priq_dumb_best>
		if (thread != NULL) {
   13794:	4604      	mov	r4, r0
   13796:	b120      	cbz	r0, 137a2 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   13798:	f7ff ff6f 	bl	1367a <unpend_thread_no_timeout>
   1379c:	3018      	adds	r0, #24
   1379e:	f000 f806 	bl	137ae <z_abort_timeout>
	__asm__ volatile(
   137a2:	f385 8811 	msr	BASEPRI, r5
   137a6:	f3bf 8f6f 	isb	sy
}
   137aa:	4620      	mov	r0, r4
   137ac:	bd38      	pop	{r3, r4, r5, pc}

000137ae <z_abort_timeout>:
{
   137ae:	b510      	push	{r4, lr}
	__asm__ volatile(
   137b0:	f04f 0220 	mov.w	r2, #32
   137b4:	f3ef 8411 	mrs	r4, BASEPRI
   137b8:	f382 8812 	msr	BASEPRI_MAX, r2
   137bc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   137c0:	6803      	ldr	r3, [r0, #0]
   137c2:	b13b      	cbz	r3, 137d4 <z_abort_timeout+0x26>
			remove_timeout(to);
   137c4:	f7f8 ffe0 	bl	c788 <remove_timeout>
			ret = 0;
   137c8:	2000      	movs	r0, #0
	__asm__ volatile(
   137ca:	f384 8811 	msr	BASEPRI, r4
   137ce:	f3bf 8f6f 	isb	sy
}
   137d2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   137d4:	f06f 0015 	mvn.w	r0, #21
   137d8:	e7f7      	b.n	137ca <z_abort_timeout+0x1c>

000137da <z_get_next_timeout_expiry>:
{
   137da:	b510      	push	{r4, lr}
	__asm__ volatile(
   137dc:	f04f 0320 	mov.w	r3, #32
   137e0:	f3ef 8411 	mrs	r4, BASEPRI
   137e4:	f383 8812 	msr	BASEPRI_MAX, r3
   137e8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   137ec:	f7f8 ffa6 	bl	c73c <next_timeout>
	__asm__ volatile(
   137f0:	f384 8811 	msr	BASEPRI, r4
   137f4:	f3bf 8f6f 	isb	sy
}
   137f8:	bd10      	pop	{r4, pc}

000137fa <z_set_timeout_expiry>:
{
   137fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   137fc:	4604      	mov	r4, r0
   137fe:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   13800:	f04f 0320 	mov.w	r3, #32
   13804:	f3ef 8511 	mrs	r5, BASEPRI
   13808:	f383 8812 	msr	BASEPRI_MAX, r3
   1380c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   13810:	f7f8 ff94 	bl	c73c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   13814:	2801      	cmp	r0, #1
   13816:	dd05      	ble.n	13824 <z_set_timeout_expiry+0x2a>
   13818:	42a0      	cmp	r0, r4
   1381a:	9901      	ldr	r1, [sp, #4]
   1381c:	db02      	blt.n	13824 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1381e:	4620      	mov	r0, r4
   13820:	f7f5 fc40 	bl	90a4 <sys_clock_set_timeout>
	__asm__ volatile(
   13824:	f385 8811 	msr	BASEPRI, r5
   13828:	f3bf 8f6f 	isb	sy
}
   1382c:	b003      	add	sp, #12
   1382e:	bd30      	pop	{r4, r5, pc}

00013830 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   13830:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   13832:	f7f9 f897 	bl	c964 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   13836:	bd08      	pop	{r3, pc}

00013838 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   13838:	f7f9 b894 	b.w	c964 <sys_clock_tick_get>

0001383c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1383c:	b108      	cbz	r0, 13842 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1383e:	f7f3 bb49 	b.w	6ed4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   13842:	4770      	bx	lr

00013844 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   13844:	4770      	bx	lr

00013846 <_Z29ei_run_impulse_check_canceledv>:
}
   13846:	2000      	movs	r0, #0
   13848:	4770      	bx	lr

0001384a <_Z16ei_read_timer_usv>:
uint64_t ei_read_timer_us() {
   1384a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   1384c:	f7ff fff4 	bl	13838 <z_impl_k_uptime_ticks>
   13850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13854:	fba0 0302 	umull	r0, r3, r0, r2
   13858:	fb02 3101 	mla	r1, r2, r1, r3
   1385c:	0bc0      	lsrs	r0, r0, #15
   1385e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    return k_uptime_get() * 1000;
   13862:	fba0 0302 	umull	r0, r3, r0, r2
   13866:	0bc9      	lsrs	r1, r1, #15
}
   13868:	fb02 3101 	mla	r1, r2, r1, r3
   1386c:	bd08      	pop	{r3, pc}

0001386e <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
   1386e:	f7fc bba5 	b.w	ffbc <malloc>

00013872 <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
   13872:	f7fc bb89 	b.w	ff88 <calloc>

00013876 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
   13876:	f7fc bba9 	b.w	ffcc <free>

0001387a <stage_rfft_f32>:
   twR = *pCoeff++ ;
   twI = *pCoeff++ ;


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
   1387a:	edd1 7a00 	vldr	s15, [r1]

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
   1387e:	ed91 7a01 	vldr	s14, [r1, #4]
   t1a = xBR + xAR  ;
   13882:	ee77 7aa7 	vadd.f32	s15, s15, s15
   t1b = xBI + xAI  ;
   13886:	ee37 7a07 	vadd.f32	s14, s14, s14

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
   1388a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   1388e:	ee37 6a87 	vadd.f32	s12, s15, s14
   *pOut++ = 0.5f * ( t1a - t1b );
   13892:	ee77 7ac7 	vsub.f32	s15, s15, s14
   *pOut++ = 0.5f * ( t1a + t1b );
   13896:	ee26 6a26 	vmul.f32	s12, s12, s13
   *pOut++ = 0.5f * ( t1a - t1b );
   1389a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
   1389e:	8803      	ldrh	r3, [r0, #0]
{
   138a0:	b510      	push	{r4, lr}
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
   138a2:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
   138a4:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
   138a6:	f104 0010 	add.w	r0, r4, #16
   138aa:	f101 0410 	add.w	r4, r1, #16
   138ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   138b2:	ed82 6a00 	vstr	s12, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
   138b6:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
   138ba:	3908      	subs	r1, #8
   138bc:	3210      	adds	r2, #16
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
   138be:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR = pB[0];
   138c2:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
   138c6:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI = pA[1];
   138ca:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
   138ce:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   138d2:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
   138d6:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
   138da:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   138de:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   138e2:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   138e6:	ee05 7a85 	vmla.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   138ea:	ee44 7a85 	vmla.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   138ee:	ee04 7a86 	vmla.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   138f2:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   138f6:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   138fa:	ee67 7aa6 	vmul.f32	s15, s15, s13


      pA += 2;
      pB -= 2;
      k--;
   138fe:	3b01      	subs	r3, #1
   } while (k > 0);
   13900:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   13902:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   13906:	ed42 7a01 	vstr	s15, [r2, #-4]
   } while (k > 0);
   1390a:	f100 0008 	add.w	r0, r0, #8
   1390e:	f102 0208 	add.w	r2, r2, #8
   13912:	f104 0408 	add.w	r4, r4, #8
   13916:	f1a1 0108 	sub.w	r1, r1, #8
   1391a:	dcd0      	bgt.n	138be <stage_rfft_f32+0x44>
}
   1391c:	bd10      	pop	{r4, pc}

0001391e <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
   1391e:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
   13922:	ed91 6a01 	vldr	s12, [r1, #4]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
   13926:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   1392a:	ee37 7a86 	vadd.f32	s14, s15, s12
   *pOut++ = 0.5f * ( xAR - xAI );
   1392e:	ee77 7ac6 	vsub.f32	s15, s15, s12
   *pOut++ = 0.5f * ( xAR + xAI );
   13932:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( xAR - xAI );
   13936:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
   1393a:	8803      	ldrh	r3, [r0, #0]
{
   1393c:	b510      	push	{r4, lr}
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
   1393e:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
   13940:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR + xAI );
   13942:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
   13946:	edc2 7a01 	vstr	s15, [r2, #4]
   pCoeff += 2 ;
   1394a:	f104 0008 	add.w	r0, r4, #8
   1394e:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
   13950:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
   13954:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
   13958:	2b00      	cmp	r3, #0
   1395a:	f102 0208 	add.w	r2, r2, #8
   1395e:	f100 0008 	add.w	r0, r0, #8
   13962:	f104 0408 	add.w	r4, r4, #8
   13966:	f1a1 0108 	sub.w	r1, r1, #8
   1396a:	dc00      	bgt.n	1396e <merge_rfft_f32+0x50>
      pA += 2;
      pB -= 2;
      k--;
   }

}
   1396c:	bd10      	pop	{r4, pc}
      xBI =   pB[1]    ;
   1396e:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR =   pB[0]    ;
   13972:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
   13976:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI =  pA[1];
   1397a:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
   1397e:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   13982:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
   13986:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
   1398a:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   1398e:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   13992:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   13996:	ee05 7ac5 	vmls.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   1399a:	ee44 7a85 	vmla.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   1399e:	ee04 7ac6 	vmls.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   139a2:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   139a6:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   139aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   139ae:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   139b2:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
   139b6:	3b01      	subs	r3, #1
   139b8:	e7ce      	b.n	13958 <merge_rfft_f32+0x3a>

000139ba <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
   139ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139be:	4605      	mov	r5, r0
   139c0:	460f      	mov	r7, r1
   139c2:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
   139c4:	461c      	mov	r4, r3
   139c6:	b14b      	cbz	r3, 139dc <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
   139c8:	f7ff ffa9 	bl	1391e <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   139cc:	4622      	mov	r2, r4
   139ce:	4631      	mov	r1, r6
   139d0:	4628      	mov	r0, r5
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
   139d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   139d6:	2301      	movs	r3, #1
   139d8:	f000 bd2d 	b.w	14436 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   139dc:	4622      	mov	r2, r4
   139de:	2301      	movs	r3, #1
   139e0:	f000 fd29 	bl	14436 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
   139e4:	4632      	mov	r2, r6
   139e6:	4639      	mov	r1, r7
   139e8:	4628      	mov	r0, r5
}
   139ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
   139ee:	f7ff bf44 	b.w	1387a <stage_rfft_f32>

000139f2 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   139f2:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
   139f4:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   139f6:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
   139f8:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   139fa:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
   139fc:	b900      	cbnz	r0, 13a00 <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   139fe:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
   13a00:	ecf2 7a01 	vldmia	r2!, {s15}
   13a04:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
   13a08:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
   13a0a:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
   13a0e:	e7f5      	b.n	139fc <arm_mat_scale_f32+0xa>

00013a10 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
   13a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
   13a12:	8802      	ldrh	r2, [r0, #0]
   13a14:	684b      	ldr	r3, [r1, #4]
   13a16:	8845      	ldrh	r5, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
   13a18:	6844      	ldr	r4, [r0, #4]
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
   13a1a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   13a1e:	00af      	lsls	r7, r5, #2
   13a20:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      px = pOut + i;
   13a24:	4619      	mov	r1, r3
      col = nCols;
   13a26:	4628      	mov	r0, r5
      while (col > 0U)
   13a28:	4626      	mov	r6, r4
   13a2a:	b920      	cbnz	r0, 13a36 <arm_mat_trans_f32+0x26>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
   13a2c:	3304      	adds	r3, #4
   13a2e:	4293      	cmp	r3, r2
   13a30:	443c      	add	r4, r7
   13a32:	d1f7      	bne.n	13a24 <arm_mat_trans_f32+0x14>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   13a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *px = *pIn++;
   13a36:	f856 eb04 	ldr.w	lr, [r6], #4
        col--;
   13a3a:	3801      	subs	r0, #1
        *px = *pIn++;
   13a3c:	f8c1 e000 	str.w	lr, [r1]
        px += nRows;
   13a40:	4461      	add	r1, ip
        col--;
   13a42:	e7f2      	b.n	13a2a <arm_mat_trans_f32+0x1a>

00013a44 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   13a44:	b510      	push	{r4, lr}
   13a46:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   13a48:	6800      	ldr	r0, [r0, #0]
	if (__p)
   13a4a:	b108      	cbz	r0, 13a50 <_ZNSt6vectorIPvSaIS0_EED1Ev+0xc>
	::operator delete(__p
   13a4c:	f001 f85d 	bl	14b0a <_ZdlPv>
      }
   13a50:	4620      	mov	r0, r4
   13a52:	bd10      	pop	{r4, pc}

00013a54 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   13a54:	b510      	push	{r4, lr}
   13a56:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   13a58:	6800      	ldr	r0, [r0, #0]
	if (__p)
   13a5a:	b108      	cbz	r0, 13a60 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev+0xc>
   13a5c:	f001 f855 	bl	14b0a <_ZdlPv>
      }
   13a60:	4620      	mov	r0, r4
   13a62:	bd10      	pop	{r4, pc}

00013a64 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
   13a64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13a68:	4604      	mov	r4, r0
    if (fin == fout) {
   13a6a:	4291      	cmp	r1, r2
{
   13a6c:	460d      	mov	r5, r1
   13a6e:	4610      	mov	r0, r2
   13a70:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   13a72:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
   13a76:	d117      	bne.n	13aa8 <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   13a78:	6820      	ldr	r0, [r4, #0]
   13a7a:	00c0      	lsls	r0, r0, #3
   13a7c:	f7ff fef7 	bl	1386e <_Z9ei_mallocj>
   13a80:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   13a82:	463b      	mov	r3, r7
   13a84:	4629      	mov	r1, r5
   13a86:	2201      	movs	r2, #1
   13a88:	e9cd 8400 	strd	r8, r4, [sp]
   13a8c:	f7f9 fad0 	bl	d030 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
   13a90:	6822      	ldr	r2, [r4, #0]
   13a92:	4631      	mov	r1, r6
   13a94:	4628      	mov	r0, r5
   13a96:	00d2      	lsls	r2, r2, #3
   13a98:	f001 f88d 	bl	14bb6 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
   13a9c:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
   13a9e:	b002      	add	sp, #8
   13aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
   13aa4:	f7ff bee7 	b.w	13876 <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
   13aa8:	2201      	movs	r2, #1
   13aaa:	e9cd 8400 	strd	r8, r4, [sp]
   13aae:	f7f9 fabf 	bl	d030 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
   13ab2:	b002      	add	sp, #8
   13ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013ab8 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
   13ab8:	2301      	movs	r3, #1
   13aba:	f7ff bfd3 	b.w	13a64 <kiss_fft_stride>

00013abe <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13abe:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   13ac0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13ac2:	b90b      	cbnz	r3, 13ac8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   13ac4:	f001 f85f 	bl	14b86 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   13ac8:	2124      	movs	r1, #36	; 0x24
}
   13aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   13ace:	4718      	bx	r3

00013ad0 <_ZN6tflite12RuntimeShapeD1Ev>:
    if (size_ > kMaxSmallSize) {
   13ad0:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
   13ad2:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
   13ad4:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   13ad6:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   13ad8:	dd03      	ble.n	13ae2 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   13ada:	6840      	ldr	r0, [r0, #4]
      delete[] dims_pointer_;
   13adc:	b108      	cbz	r0, 13ae2 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   13ade:	f001 f816 	bl	14b0e <_ZdaPv>
  }
   13ae2:	4620      	mov	r0, r4
   13ae4:	bd10      	pop	{r4, pc}

00013ae6 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   13ae6:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
   13ae8:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   13aea:	da01      	bge.n	13af0 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   13aec:	f001 f84b 	bl	14b86 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13af0:	6803      	ldr	r3, [r0, #0]
   13af2:	428b      	cmp	r3, r1
   13af4:	ddfa      	ble.n	13aec <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13af6:	2b05      	cmp	r3, #5
   13af8:	bfcb      	itete	gt
   13afa:	6843      	ldrgt	r3, [r0, #4]
   13afc:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   13b00:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   13b04:	6840      	ldrle	r0, [r0, #4]
  }
   13b06:	bd08      	pop	{r3, pc}

00013b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
   13b08:	b570      	push	{r4, r5, r6, lr}
   13b0a:	4615      	mov	r5, r2
   13b0c:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13b0e:	f7ff ffea 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
   13b12:	4631      	mov	r1, r6
   13b14:	4604      	mov	r4, r0
   13b16:	4628      	mov	r0, r5
   13b18:	f7ff ffe5 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
   13b1c:	4284      	cmp	r4, r0
   13b1e:	d001      	beq.n	13b24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   13b20:	f001 f831 	bl	14b86 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
   13b24:	bd70      	pop	{r4, r5, r6, pc}

00013b26 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   13b26:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   13b28:	b538      	push	{r3, r4, r5, lr}
  inline int32_t DimensionsCount() const { return size_; }
   13b2a:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   13b2c:	db01      	blt.n	13b32 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   13b2e:	42a1      	cmp	r1, r4
   13b30:	db01      	blt.n	13b36 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   13b32:	f001 f828 	bl	14b86 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13b36:	2c05      	cmp	r4, #5
   13b38:	bfcc      	ite	gt
   13b3a:	6843      	ldrgt	r3, [r0, #4]
   13b3c:	1d03      	addle	r3, r0, #4
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
   13b3e:	2200      	movs	r2, #0
  int flat_size = 1;
   13b40:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   13b42:	4291      	cmp	r1, r2
   13b44:	bf0c      	ite	eq
   13b46:	2501      	moveq	r5, #1
   13b48:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   13b4c:	3201      	adds	r2, #1
   13b4e:	4294      	cmp	r4, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   13b50:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   13b54:	dcf5      	bgt.n	13b42 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
  }
  return flat_size;
}
   13b56:	bd38      	pop	{r3, r4, r5, pc}

00013b58 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   13b58:	b570      	push	{r4, r5, r6, lr}
   13b5a:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   13b5c:	b911      	cbnz	r1, 13b64 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   13b5e:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   13b60:	4620      	mov	r0, r4
   13b62:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   13b64:	688d      	ldr	r5, [r1, #8]
   13b66:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
   13b6a:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
   13b6c:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   13b6e:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   13b72:	dc05      	bgt.n	13b80 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13b74:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   13b76:	4632      	mov	r2, r6
   13b78:	4629      	mov	r1, r5
   13b7a:	f001 f81c 	bl	14bb6 <memcpy>
  }
   13b7e:	e7ef      	b.n	13b60 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
   13b80:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   13b84:	4293      	cmp	r3, r2
   13b86:	bfb4      	ite	lt
   13b88:	4630      	movlt	r0, r6
   13b8a:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   13b8e:	f000 ffd1 	bl	14b34 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13b92:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   13b94:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13b96:	2b05      	cmp	r3, #5
   13b98:	dced      	bgt.n	13b76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   13b9a:	e7eb      	b.n	13b74 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

00013b9c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
                                             int index) {
   13b9c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   13b9e:	b908      	cbnz	r0, 13ba4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   13ba0:	f000 fff1 	bl	14b86 <abort>
  TFLITE_DCHECK(node != nullptr);
   13ba4:	2900      	cmp	r1, #0
   13ba6:	d0fb      	beq.n	13ba0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
}
   13ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   13bac:	6809      	ldr	r1, [r1, #0]
   13bae:	6d43      	ldr	r3, [r0, #84]	; 0x54
   13bb0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   13bb4:	6851      	ldr	r1, [r2, #4]
   13bb6:	4718      	bx	r3

00013bb8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
                                       const TfLiteNode* node, int index) {
   13bb8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   13bba:	b908      	cbnz	r0, 13bc0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   13bbc:	f000 ffe3 	bl	14b86 <abort>
  TFLITE_DCHECK(node != nullptr);
   13bc0:	2900      	cmp	r1, #0
   13bc2:	d0fb      	beq.n	13bbc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
}
   13bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
   13bc8:	6849      	ldr	r1, [r1, #4]
   13bca:	6d43      	ldr	r3, [r0, #84]	; 0x54
   13bcc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   13bd0:	6851      	ldr	r1, [r2, #4]
   13bd2:	4718      	bx	r3

00013bd4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
  op_params.input_offset = -op_data.input_zero_point;
   13bd4:	694a      	ldr	r2, [r1, #20]
   13bd6:	4252      	negs	r2, r2
   13bd8:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   13bda:	698a      	ldr	r2, [r1, #24]
   13bdc:	4252      	negs	r2, r2
   13bde:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   13be0:	69ca      	ldr	r2, [r1, #28]
   13be2:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   13be4:	680a      	ldr	r2, [r1, #0]
   13be6:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   13be8:	684a      	ldr	r2, [r1, #4]
   13bea:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   13bec:	688a      	ldr	r2, [r1, #8]
   13bee:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   13bf0:	68ca      	ldr	r2, [r1, #12]
   13bf2:	6182      	str	r2, [r0, #24]
}
   13bf4:	4770      	bx	lr

00013bf6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   13bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (data_type != kTfLiteFloat32) {
   13bfa:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
   13bfc:	b085      	sub	sp, #20
   13bfe:	4606      	mov	r6, r0
   13c00:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
   13c04:	460f      	mov	r7, r1
   13c06:	461d      	mov	r5, r3
   13c08:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (data_type != kTfLiteFloat32) {
   13c0c:	d027      	beq.n	13c5e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
   13c0e:	2200      	movs	r2, #0
   13c10:	2300      	movs	r3, #0
   13c12:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   13c16:	ab02      	add	r3, sp, #8
   13c18:	e9cd 8300 	strd	r8, r3, [sp]
   13c1c:	464a      	mov	r2, r9
   13c1e:	4629      	mov	r1, r5
   13c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c22:	f7ef fa71 	bl	3108 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   13c26:	b9b8      	cbnz	r0, 13c58 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   13c28:	4620      	mov	r0, r4
   13c2a:	1d21      	adds	r1, r4, #4
   13c2c:	ed9d 0b02 	vldr	d0, [sp, #8]
   13c30:	f7fb fcba 	bl	f5a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
   13c34:	692b      	ldr	r3, [r5, #16]
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;

    return CalculateActivationRangeQuantized(context, activation, output,
   13c36:	4642      	mov	r2, r8
    data->input_zero_point = input->params.zero_point;
   13c38:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
   13c3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
   13c3e:	4639      	mov	r1, r7
    data->filter_zero_point = filter->params.zero_point;
   13c40:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
   13c42:	f8d8 3010 	ldr.w	r3, [r8, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
   13c46:	4630      	mov	r0, r6
    data->output_zero_point = output->params.zero_point;
   13c48:	61e3      	str	r3, [r4, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   13c4a:	f104 030c 	add.w	r3, r4, #12
   13c4e:	9300      	str	r3, [sp, #0]
   13c50:	f104 0308 	add.w	r3, r4, #8
   13c54:	f7fb fd38 	bl	f6c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
   13c58:	b005      	add	sp, #20
   13c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
   13c5e:	2000      	movs	r0, #0
   13c60:	e7fa      	b.n	13c58 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

00013c62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   13c62:	b570      	push	{r4, r5, r6, lr}
   13c64:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   13c66:	b109      	cbz	r1, 13c6c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
   13c68:	684d      	ldr	r5, [r1, #4]
   13c6a:	b91d      	cbnz	r5, 13c74 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
   13c6c:	2300      	movs	r3, #0
   13c6e:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   13c70:	4620      	mov	r0, r4
   13c72:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   13c74:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
   13c78:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
   13c7a:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   13c7c:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   13c80:	dc05      	bgt.n	13c8e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13c82:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   13c84:	4632      	mov	r2, r6
   13c86:	4629      	mov	r1, r5
   13c88:	f000 ff95 	bl	14bb6 <memcpy>
  }
   13c8c:	e7f0      	b.n	13c70 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
   13c8e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   13c92:	4293      	cmp	r3, r2
   13c94:	bfb4      	ite	lt
   13c96:	4630      	movlt	r0, r6
   13c98:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   13c9c:	f000 ff4a 	bl	14b34 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13ca0:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   13ca2:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13ca4:	2b05      	cmp	r3, #5
   13ca6:	dced      	bgt.n	13c84 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
   13ca8:	e7eb      	b.n	13c82 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

00013caa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
   13caa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13cae:	4604      	mov	r4, r0
   13cb0:	460d      	mov	r5, r1
   13cb2:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   13cb4:	2600      	movs	r6, #0
  inline int32_t DimensionsCount() const { return size_; }
   13cb6:	6807      	ldr	r7, [r0, #0]
  for (int i = 0; i < dims_count; ++i) {
   13cb8:	42be      	cmp	r6, r7
   13cba:	da10      	bge.n	13cde <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   13cbc:	42ae      	cmp	r6, r5
   13cbe:	d00c      	beq.n	13cda <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   13cc0:	4631      	mov	r1, r6
   13cc2:	4620      	mov	r0, r4
   13cc4:	f7ff ff0f 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
   13cc8:	4631      	mov	r1, r6
   13cca:	4681      	mov	r9, r0
   13ccc:	4640      	mov	r0, r8
   13cce:	f7ff ff0a 	bl	13ae6 <_ZNK6tflite12RuntimeShape4DimsEi>
   13cd2:	4581      	cmp	r9, r0
   13cd4:	d001      	beq.n	13cda <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   13cd6:	f000 ff56 	bl	14b86 <abort>
  for (int i = 0; i < dims_count; ++i) {
   13cda:	3601      	adds	r6, #1
   13cdc:	e7ec      	b.n	13cb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   13cde:	2d00      	cmp	r5, #0
   13ce0:	dbf9      	blt.n	13cd6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   13ce2:	42bd      	cmp	r5, r7
   13ce4:	daf7      	bge.n	13cd6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
  int flat_size = 1;
   13ce6:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   13ce8:	2300      	movs	r3, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13cea:	2f05      	cmp	r7, #5
   13cec:	bfcc      	ite	gt
   13cee:	6864      	ldrgt	r4, [r4, #4]
   13cf0:	3404      	addle	r4, #4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   13cf2:	429d      	cmp	r5, r3
   13cf4:	bf0c      	ite	eq
   13cf6:	2201      	moveq	r2, #1
   13cf8:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   13cfc:	3301      	adds	r3, #1
   13cfe:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   13d00:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   13d04:	dcf5      	bgt.n	13cf2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
   13d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013d0a <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   13d0a:	f3c0 13cf 	ubfx	r3, r0, #7, #16
   13d0e:	f503 7280 	add.w	r2, r3, #256	; 0x100
  assert(index < 512 && "LUT index out of range.");
  int16_t offset = value & 0x7f;

  // base and slope are Q0.15
  int16_t base = lut[index];
  int16_t slope = lut[index + 1] - lut[index];
   13d12:	f203 1301 	addw	r3, r3, #257	; 0x101
  int16_t base = lut[index];
   13d16:	b292      	uxth	r2, r2
  int16_t slope = lut[index + 1] - lut[index];
   13d18:	b29b      	uxth	r3, r3
   13d1a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13d1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   13d22:	2140      	movs	r1, #64	; 0x40
  int16_t slope = lut[index + 1] - lut[index];
   13d24:	1a9b      	subs	r3, r3, r2
  int16_t offset = value & 0x7f;
   13d26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   13d2a:	fb13 1000 	smlabb	r0, r3, r0, r1

  // Q0.15 + Q0.15
  return base + delta;
   13d2e:	eb02 10e0 	add.w	r0, r2, r0, asr #7
}
   13d32:	b200      	sxth	r0, r0
   13d34:	4770      	bx	lr

00013d36 <_ZN6tflite13GetReciprocalEiiPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
   13d36:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   13d38:	fab0 f380 	clz	r3, r0
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   13d3c:	1ac9      	subs	r1, r1, r3
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
   13d3e:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   13d40:	6011      	str	r1, [r2, #0]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
   13d42:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   13d46:	f7fa f9f5 	bl	e134 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
   13d4a:	bd08      	pop	{r3, pc}

00013d4c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   13d4c:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   13d4e:	2100      	movs	r1, #0
   13d50:	f7fa f8d8 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   13d54:	bd08      	pop	{r3, pc}

00013d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   13d56:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   13d58:	f7fa f82c 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   13d5c:	bd08      	pop	{r3, pc}

00013d5e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   13d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d62:	460c      	mov	r4, r1
   13d64:	b08d      	sub	sp, #52	; 0x34
   13d66:	9203      	str	r2, [sp, #12]
   13d68:	461a      	mov	r2, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
   13d6a:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   13d6e:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   13d70:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13d72:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
   13d74:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   13d76:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13d78:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   13d7a:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13d7c:	4619      	mov	r1, r3
   13d7e:	9304      	str	r3, [sp, #16]
   13d80:	f7ff ff93 	bl	13caa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13d84:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13d88:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13d8a:	4619      	mov	r1, r3
   13d8c:	4620      	mov	r0, r4
   13d8e:	f7ff febb 	bl	13b08 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   13d92:	2400      	movs	r4, #0
   13d94:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   13d96:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   13d98:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   13d9a:	9b02      	ldr	r3, [sp, #8]
   13d9c:	4598      	cmp	r8, r3
   13d9e:	da71      	bge.n	13e84 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   13da0:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   13da2:	2200      	movs	r2, #0
   13da4:	191f      	adds	r7, r3, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   13da6:	4639      	mov	r1, r7
   13da8:	f88d 901f 	strb.w	r9, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   13dac:	42aa      	cmp	r2, r5
   13dae:	da0e      	bge.n	13dce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   13db0:	460b      	mov	r3, r1
      if (__a < __b)
   13db2:	f89d 001f 	ldrb.w	r0, [sp, #31]
   13db6:	781e      	ldrb	r6, [r3, #0]
   13db8:	3101      	adds	r1, #1
   13dba:	4286      	cmp	r6, r0
      return __a;
   13dbc:	f10d 001f 	add.w	r0, sp, #31
   13dc0:	bf98      	it	ls
   13dc2:	4603      	movls	r3, r0
   13dc4:	781b      	ldrb	r3, [r3, #0]
    for (int c = 0; c < depth; ++c) {
   13dc6:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   13dc8:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   13dcc:	e7ee      	b.n	13dac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   13dce:	2600      	movs	r6, #0
   13dd0:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   13dd2:	46b2      	mov	sl, r6
   13dd4:	45aa      	cmp	sl, r5
   13dd6:	da17      	bge.n	13e08 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   13dd8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   13ddc:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32_t input_diff =
   13de0:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   13de2:	9a01      	ldr	r2, [sp, #4]
   13de4:	4282      	cmp	r2, r0
   13de6:	dc0c      	bgt.n	13e02 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   13de8:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   13dea:	9b00      	ldr	r3, [sp, #0]
   13dec:	4659      	mov	r1, fp
   13dee:	4098      	lsls	r0, r3
   13df0:	f7f9 ffe0 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   13df4:	f7fa fa58 	bl	e2a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   13df8:	210c      	movs	r1, #12
   13dfa:	f7fa f883 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   13dfe:	9b04      	ldr	r3, [sp, #16]
   13e00:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   13e02:	f10a 0a01 	add.w	sl, sl, #1
   13e06:	e7e5      	b.n	13dd4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   13e08:	4630      	mov	r0, r6
   13e0a:	210c      	movs	r1, #12
   13e0c:	aa08      	add	r2, sp, #32
   13e0e:	f7ff ff92 	bl	13d36 <_ZN6tflite13GetReciprocalEiiPi>
   13e12:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13e14:	4682      	mov	sl, r0
   13e16:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   13e18:	2300      	movs	r3, #0
   13e1a:	42ab      	cmp	r3, r5
   13e1c:	da2e      	bge.n	13e7c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   13e1e:	f89d 101f 	ldrb.w	r1, [sp, #31]
   13e22:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32_t input_diff =
   13e26:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   13e28:	9901      	ldr	r1, [sp, #4]
   13e2a:	4281      	cmp	r1, r0
   13e2c:	dc23      	bgt.n	13e76 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   13e2e:	9304      	str	r3, [sp, #16]
   13e30:	9b00      	ldr	r3, [sp, #0]
   13e32:	4659      	mov	r1, fp
   13e34:	4098      	lsls	r0, r3
   13e36:	f7f9 ffbd 	bl	ddb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   13e3a:	f7fa fa35 	bl	e2a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   13e3e:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   13e40:	4650      	mov	r0, sl
   13e42:	f7ff ff88 	bl	13d56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
   13e46:	9908      	ldr	r1, [sp, #32]
   13e48:	3117      	adds	r1, #23
   13e4a:	f7fa f85b 	bl	df04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   13e4e:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   13e50:	4298      	cmp	r0, r3
	return __b;
   13e52:	bfcc      	ite	gt
   13e54:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   13e56:	a909      	addle	r1, sp, #36	; 0x24
   13e58:	930a      	str	r3, [sp, #40]	; 0x28
        const int32_t shifted_output =
   13e5a:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   13e5c:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
   13e5e:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   13e60:	2800      	cmp	r0, #0
	return __b;
   13e62:	bfb8      	it	lt
   13e64:	4611      	movlt	r1, r2
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   13e66:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   13e6a:	6809      	ldr	r1, [r1, #0]
      if (__b < __a)
   13e6c:	9b04      	ldr	r3, [sp, #16]
   13e6e:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   13e70:	3301      	adds	r3, #1
   13e72:	3601      	adds	r6, #1
   13e74:	e7d1      	b.n	13e1a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   13e76:	f886 9000 	strb.w	r9, [r6]
   13e7a:	e7f9      	b.n	13e70 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   13e7c:	f108 0801 	add.w	r8, r8, #1
   13e80:	442c      	add	r4, r5
   13e82:	e78a      	b.n	13d9a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   13e84:	b00d      	add	sp, #52	; 0x34
   13e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013e8a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   13e8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   13e8e:	ee30 0a27 	vadd.f32	s0, s0, s15
   13e92:	ee87 0a80 	vdiv.f32	s0, s15, s0
   13e96:	4770      	bx	lr

00013e98 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  { return __builtin_expf(__x); }
   13e98:	f7fb bdde 	b.w	fa58 <expf>

00013e9c <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13e9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   13e9e:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13ea0:	b90b      	cbnz	r3, 13ea6 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
   13ea2:	f000 fe70 	bl	14b86 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   13ea6:	2138      	movs	r1, #56	; 0x38
}
   13ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   13eac:	4718      	bx	r3

00013eae <_ZN6tflite11TfLiteRoundIfEET_S1_>:
   13eae:	b508      	push	{r3, lr}
   13eb0:	ee10 0a10 	vmov	r0, s0
   13eb4:	f7ec fab4 	bl	420 <__aeabi_f2d>
   13eb8:	ec41 0b10 	vmov	d0, r0, r1
   13ebc:	f7fb fca4 	bl	f808 <round>
   13ec0:	ec51 0b10 	vmov	r0, r1, d0
   13ec4:	f7ec fd9e 	bl	a04 <__aeabi_d2f>
   13ec8:	ee00 0a10 	vmov	s0, r0
   13ecc:	bd08      	pop	{r3, pc}

00013ece <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   13ece:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13ed2:	4680      	mov	r8, r0
   13ed4:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
   13ed6:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
   13eda:	f8d8 2004 	ldr.w	r2, [r8, #4]
  float32_t * p2 = p1 + L;
   13ede:	eb01 0987 	add.w	r9, r1, r7, lsl #2
{
   13ee2:	ed2d 8b02 	vpush	{d8}
   13ee6:	4606      	mov	r6, r0
   13ee8:	464b      	mov	r3, r9
  const float32_t * tw = (float32_t *) S->pTwiddle;
   13eea:	4694      	mov	ip, r2

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
   13eec:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
   13eee:	08ff      	lsrs	r7, r7, #3
{
   13ef0:	b083      	sub	sp, #12
  pMid1 = p1 + L;
   13ef2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  pMid2 = p2 + L;
   13ef6:	eb09 0481 	add.w	r4, r9, r1, lsl #2
   13efa:	eb02 1707 	add.w	r7, r2, r7, lsl #4
  for (l = L >> 2; l > 0; l-- )
   13efe:	45bc      	cmp	ip, r7
   13f00:	f106 0610 	add.w	r6, r6, #16
   13f04:	f105 0510 	add.w	r5, r5, #16
   13f08:	f104 0410 	add.w	r4, r4, #16
   13f0c:	f103 0310 	add.w	r3, r3, #16
   13f10:	d110      	bne.n	13f34 <arm_cfft_radix8by2_f32+0x66>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
   13f12:	b289      	uxth	r1, r1
   13f14:	2302      	movs	r3, #2
   13f16:	9101      	str	r1, [sp, #4]
   13f18:	f7fa fc76 	bl	e808 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   13f1c:	2302      	movs	r3, #2
   13f1e:	4648      	mov	r0, r9
   13f20:	f8d8 2004 	ldr.w	r2, [r8, #4]
   13f24:	9901      	ldr	r1, [sp, #4]
}
   13f26:	b003      	add	sp, #12
   13f28:	ecbd 8b02 	vpop	{d8}
   13f2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   13f30:	f7fa bc6a 	b.w	e808 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
   13f34:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
   13f38:	ed16 6a04 	vldr	s12, [r6, #-16]
    t2[1] = p2[1];
   13f3c:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
   13f40:	ed16 4a03 	vldr	s8, [r6, #-12]
    *p1++ = t1[0] + t2[0];
   13f44:	ee36 8a00 	vadd.f32	s16, s12, s0
    t4[0] = pMid2[0];
   13f48:	ed54 6a04 	vldr	s13, [r4, #-16]
    t4[1] = pMid2[1];
   13f4c:	ed54 4a03 	vldr	s9, [r4, #-12]
    t2[2] = p2[2];
   13f50:	ed13 7a02 	vldr	s14, [r3, #-8]
    t2[3] = p2[3];
   13f54:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
   13f58:	ed55 2a03 	vldr	s5, [r5, #-12]
    t3[2] = pMid1[2];
   13f5c:	ed15 3a02 	vldr	s6, [r5, #-8]
    t3[3] = pMid1[3];
   13f60:	ed55 3a01 	vldr	s7, [r5, #-4]
    t4[2] = pMid2[2];
   13f64:	ed54 7a02 	vldr	s15, [r4, #-8]
    t4[3] = pMid2[3];
   13f68:	ed54 5a01 	vldr	s11, [r4, #-4]
    t1[2] = p1[2];
   13f6c:	ed16 1a02 	vldr	s2, [r6, #-8]
    t3[0] = pMid1[0];
   13f70:	ed15 2a04 	vldr	s4, [r5, #-16]
    *p1++ = t1[0] + t2[0];
   13f74:	ed06 8a04 	vstr	s16, [r6, #-16]
    *p1++ = t1[1] + t2[1];
   13f78:	ee34 8a20 	vadd.f32	s16, s8, s1
    t1[3] = p1[3];
   13f7c:	ed56 1a01 	vldr	s3, [r6, #-4]
    *p1++ = t1[1] + t2[1];
   13f80:	ed06 8a03 	vstr	s16, [r6, #-12]
    *p1++ = t1[2] + t2[2];
   13f84:	ee31 8a07 	vadd.f32	s16, s2, s14
   13f88:	ed06 8a02 	vstr	s16, [r6, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
   13f8c:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
   13f90:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
   13f94:	ee72 1a26 	vadd.f32	s3, s4, s13
    *p1++ = t1[3] + t2[3];    /* col 1 */
   13f98:	ed06 8a01 	vstr	s16, [r6, #-4]
    *pMid1++ = t3[0] + t4[0];
   13f9c:	ed45 1a04 	vstr	s3, [r5, #-16]
    *pMid1++ = t3[1] + t4[1];
   13fa0:	ee72 1aa4 	vadd.f32	s3, s5, s9
   13fa4:	ed45 1a03 	vstr	s3, [r5, #-12]
    *pMid1++ = t3[2] + t4[2];
   13fa8:	ee73 1a27 	vadd.f32	s3, s6, s15
   13fac:	ed45 1a02 	vstr	s3, [r5, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   13fb0:	ee73 1aa5 	vadd.f32	s3, s7, s11
   13fb4:	ed45 1a01 	vstr	s3, [r5, #-4]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
   13fb8:	ee75 5ae3 	vsub.f32	s11, s11, s7
    t2[1] = t1[1] - t2[1];
   13fbc:	ee34 4a60 	vsub.f32	s8, s8, s1
    twI = *tw++;
   13fc0:	eddc 3a01 	vldr	s7, [ip, #4]
    t4[1] = t4[1] - t3[1];
   13fc4:	ee74 4ae2 	vsub.f32	s9, s9, s5
    t4[2] = t4[2] - t3[2];
   13fc8:	ee77 7ac3 	vsub.f32	s15, s15, s6
    t2[0] = t1[0] - t2[0];
   13fcc:	ee36 6a40 	vsub.f32	s12, s12, s0
    twR = *tw++;
   13fd0:	ed9c 3a00 	vldr	s6, [ip]
    m1 = t2[1] * twI;
   13fd4:	ee64 2a23 	vmul.f32	s5, s8, s7
    *p2++ = m0 + m1;
   13fd8:	ee46 2a03 	vmla.f32	s5, s12, s6
    m3 = t2[0] * twI;
   13fdc:	ee26 6a23 	vmul.f32	s12, s12, s7
    *p2++ = m2 - m3;
   13fe0:	ee14 6a03 	vnmls.f32	s12, s8, s6
    t4[0] = t4[0] - t3[0];
   13fe4:	ee76 6ac2 	vsub.f32	s13, s13, s4
    *p2++ = m2 - m3;
   13fe8:	ed03 6a03 	vstr	s12, [r3, #-12]
    m1 = t4[1] * twR;
   13fec:	ee24 6a83 	vmul.f32	s12, s9, s6
    *pMid2++ = m0 - m1;
   13ff0:	ee16 6aa3 	vnmls.f32	s12, s13, s7
    m3 = t4[0] * twR;
   13ff4:	ee66 6a83 	vmul.f32	s13, s13, s6
    *pMid2++ = m2 + m3;
   13ff8:	ee44 6aa3 	vmla.f32	s13, s9, s7
    *p2++ = m0 + m1;
   13ffc:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
   14000:	ed04 6a04 	vstr	s12, [r4, #-16]
    *pMid2++ = m2 + m3;
   14004:	ed44 6a03 	vstr	s13, [r4, #-12]
   14008:	f10c 0c10 	add.w	ip, ip, #16
    twR = *tw++;
   1400c:	ed1c 6a02 	vldr	s12, [ip, #-8]
    twI = *tw++;
   14010:	ed5c 6a01 	vldr	s13, [ip, #-4]
    t2[2] = t1[2] - t2[2];
   14014:	ee31 7a47 	vsub.f32	s14, s2, s14
    m1 = t2[3] * twI;
   14018:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
   1401c:	ee47 4a06 	vmla.f32	s9, s14, s12
    m3 = t2[2] * twI;
   14020:	ee27 7a26 	vmul.f32	s14, s14, s13
    *p2++ = m2 - m3;
   14024:	ee15 7a06 	vnmls.f32	s14, s10, s12
    *p2++ = m0 + m1;
   14028:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
   1402c:	ed03 7a01 	vstr	s14, [r3, #-4]
    m1 = t4[3] * twR;
   14030:	ee25 7a86 	vmul.f32	s14, s11, s12
    *pMid2++ = m0 - m1;
   14034:	ee17 7aa6 	vnmls.f32	s14, s15, s13
    m3 = t4[2] * twR;
   14038:	ee67 7a86 	vmul.f32	s15, s15, s12
    *pMid2++ = m2 + m3;
   1403c:	ee45 7aa6 	vmla.f32	s15, s11, s13
    *pMid2++ = m0 - m1;
   14040:	ed04 7a02 	vstr	s14, [r4, #-8]
    *pMid2++ = m2 + m3;
   14044:	ed44 7a01 	vstr	s15, [r4, #-4]
  for (l = L >> 2; l > 0; l-- )
   14048:	e759      	b.n	13efe <arm_cfft_radix8by2_f32+0x30>

0001404a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
    uint32_t    L  = S->fftLen >> 1;
   1404a:	8803      	ldrh	r3, [r0, #0]
{
   1404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t    L  = S->fftLen >> 1;
   14050:	085b      	lsrs	r3, r3, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
    float32_t * p3 = p2 + L;
   14052:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
   14056:	edd1 7a00 	vldr	s15, [r1]
   1405a:	ed95 7a00 	vldr	s14, [r5]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
   1405e:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
   14062:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
   14066:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
   1406a:	ed91 7a01 	vldr	s14, [r1, #4]
    float32_t * p2 = p1 + L;
   1406e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_1 = p1[1] + p3[1];
   14072:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
   14076:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   1407a:	ed96 7a00 	vldr	s14, [r6]
    float32_t * p4 = p3 + L;
   1407e:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   14082:	edd4 4a00 	vldr	s9, [r4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   14086:	ee37 5a06 	vadd.f32	s10, s14, s12
   1408a:	ee35 5a24 	vadd.f32	s10, s10, s9
{
   1408e:	ed2d 8b04 	vpush	{d8-d9}
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   14092:	edd6 3a01 	vldr	s7, [r6, #4]
   14096:	ed94 4a01 	vldr	s8, [r4, #4]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   1409a:	6842      	ldr	r2, [r0, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   1409c:	ed81 5a00 	vstr	s10, [r1]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   140a0:	ed96 5a01 	vldr	s10, [r6, #4]
   140a4:	ed94 3a01 	vldr	s6, [r4, #4]
   140a8:	ee36 5a85 	vadd.f32	s10, s13, s10
   140ac:	ee35 5a03 	vadd.f32	s10, s10, s6
{
   140b0:	b08f      	sub	sp, #60	; 0x3c
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   140b2:	9202      	str	r2, [sp, #8]
    L >>= 1;
   140b4:	085a      	lsrs	r2, r3, #1
   140b6:	920a      	str	r2, [sp, #40]	; 0x28
    p1ap3_0 = p1[0] + p3[0];
   140b8:	460a      	mov	r2, r1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   140ba:	ed81 5a01 	vstr	s10, [r1, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   140be:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   140c2:	3208      	adds	r2, #8
   140c4:	9206      	str	r2, [sp, #24]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
   140c6:	4632      	mov	r2, r6
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   140c8:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p2++ = t2[0];
   140cc:	3208      	adds	r2, #8
   140ce:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
   140d0:	462a      	mov	r2, r5
    *p2++ = t2[0];
   140d2:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   140d6:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   140da:	ee35 5ac7 	vsub.f32	s10, s11, s14
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   140de:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   140e2:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   140e6:	ee37 7a25 	vadd.f32	s14, s14, s11
    *p3++ = t3[0];
   140ea:	3208      	adds	r2, #8
   140ec:	920c      	str	r2, [sp, #48]	; 0x30
    *p3++ = t3[1];
    *p4++ = t4[0];
   140ee:	4622      	mov	r2, r4
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   140f0:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   140f4:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   140f8:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   140fc:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   14100:	ee37 7a64 	vsub.f32	s14, s14, s9
{
   14104:	4683      	mov	fp, r0
    *p4++ = t4[0];
   14106:	3208      	adds	r2, #8
   14108:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
   1410a:	9a02      	ldr	r2, [sp, #8]
    *p2++ = t2[1];
   1410c:	ed86 5a01 	vstr	s10, [r6, #4]
    tw2 += twMod2;
   14110:	3208      	adds	r2, #8
   14112:	9207      	str	r2, [sp, #28]
    tw3 += twMod3;
   14114:	9a02      	ldr	r2, [sp, #8]
    *p3++ = t3[0];
   14116:	ed85 6a00 	vstr	s12, [r5]
    tw3 += twMod3;
   1411a:	3210      	adds	r2, #16
    *p3++ = t3[1];
   1411c:	edc5 6a01 	vstr	s13, [r5, #4]
{
   14120:	9100      	str	r1, [sp, #0]
    *p4++ = t4[0];
   14122:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
   14126:	ed84 7a01 	vstr	s14, [r4, #4]
    tw3 += twMod3;
   1412a:	9208      	str	r2, [sp, #32]
    tw4 += twMod4;
   1412c:	9a02      	ldr	r2, [sp, #8]
   1412e:	f1a4 0a04 	sub.w	sl, r4, #4
   14132:	3218      	adds	r2, #24
   14134:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
   14136:	085a      	lsrs	r2, r3, #1
   14138:	3a02      	subs	r2, #2
   1413a:	ea4f 0852 	mov.w	r8, r2, lsr #1
   1413e:	9a07      	ldr	r2, [sp, #28]
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
   14140:	f1a6 0904 	sub.w	r9, r6, #4
   14144:	9204      	str	r2, [sp, #16]
   14146:	9a08      	ldr	r2, [sp, #32]
    pEnd2 = p3 - 1;
   14148:	1f2f      	subs	r7, r5, #4
   1414a:	9203      	str	r2, [sp, #12]
   1414c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pEnd4 = pEnd3 + L;
   1414e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   14152:	9201      	str	r2, [sp, #4]
   14154:	9a00      	ldr	r2, [sp, #0]
   14156:	f106 0110 	add.w	r1, r6, #16
   1415a:	f102 0e10 	add.w	lr, r2, #16
   1415e:	f105 0c10 	add.w	ip, r5, #16
   14162:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
   14166:	f8cd 8014 	str.w	r8, [sp, #20]
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
   1416a:	ed1c 3a02 	vldr	s6, [ip, #-8]
   1416e:	ed1e 6a02 	vldr	s12, [lr, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   14172:	ed11 7a01 	vldr	s14, [r1, #-4]
      p1sp3_0 = p1[0] - p3[0];
   14176:	ee76 4a43 	vsub.f32	s9, s12, s6
      p1ap3_1 = p1[1] + p3[1];
   1417a:	ed5c 3a01 	vldr	s7, [ip, #-4]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   1417e:	ed12 4a01 	vldr	s8, [r2, #-4]
      p1ap3_1 = p1[1] + p3[1];
   14182:	ed5e 7a01 	vldr	s15, [lr, #-4]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   14186:	ee77 6a24 	vadd.f32	s13, s14, s9
      p1sp3_1 = p1[1] - p3[1];
   1418a:	ee77 5ae3 	vsub.f32	s11, s15, s7
      p1ap3_0 = p1[0] + p3[0];
   1418e:	ee36 6a03 	vadd.f32	s12, s12, s6
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   14192:	ee36 2ac4 	vsub.f32	s4, s13, s8
      p1ap3_1 = p1[1] + p3[1];
   14196:	ee77 7aa3 	vadd.f32	s15, s15, s7
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   1419a:	ed51 6a02 	vldr	s13, [r1, #-8]
   1419e:	ed12 5a02 	vldr	s10, [r2, #-8]
   141a2:	ee75 2ae6 	vsub.f32	s5, s11, s13
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   141a6:	ee36 3a66 	vsub.f32	s6, s12, s13
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   141aa:	ee77 3ac7 	vsub.f32	s7, s15, s14
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   141ae:	ee76 5aa5 	vadd.f32	s11, s13, s11
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   141b2:	ee34 7ac7 	vsub.f32	s14, s9, s14
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   141b6:	ee76 6a86 	vadd.f32	s13, s13, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
   141ba:	9804      	ldr	r0, [sp, #16]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   141bc:	ee72 2a85 	vadd.f32	s5, s5, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   141c0:	3008      	adds	r0, #8
   141c2:	9004      	str	r0, [sp, #16]
   141c4:	9803      	ldr	r0, [sp, #12]
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   141c6:	ee33 3a45 	vsub.f32	s6, s6, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   141ca:	3010      	adds	r0, #16
   141cc:	9003      	str	r0, [sp, #12]
   141ce:	9801      	ldr	r0, [sp, #4]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   141d0:	ee73 3ac4 	vsub.f32	s7, s7, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
   141d4:	3018      	adds	r0, #24
   141d6:	9001      	str	r0, [sp, #4]
   141d8:	9805      	ldr	r0, [sp, #20]
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   141da:	ee37 7a04 	vadd.f32	s14, s14, s8
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   141de:	ee75 5ac5 	vsub.f32	s11, s11, s10
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   141e2:	ee76 6a85 	vadd.f32	s13, s13, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   141e6:	f1a9 0908 	sub.w	r9, r9, #8
   141ea:	3f08      	subs	r7, #8
   141ec:	f1aa 0a08 	sub.w	sl, sl, #8
   141f0:	3b08      	subs	r3, #8
   141f2:	f10e 0e08 	add.w	lr, lr, #8
   141f6:	3108      	adds	r1, #8
   141f8:	f10c 0c08 	add.w	ip, ip, #8
   141fc:	3208      	adds	r2, #8
   141fe:	2800      	cmp	r0, #0
   14200:	d174      	bne.n	142ec <arm_cfft_radix8by4_f32+0x2a2>
   14202:	9b06      	ldr	r3, [sp, #24]
   14204:	2718      	movs	r7, #24
   14206:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   1420a:	edc2 6a00 	vstr	s13, [r2]
   1420e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14210:	9b07      	ldr	r3, [sp, #28]
   14212:	fb07 0708 	mla	r7, r7, r8, r0
   14216:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14218:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
   1421c:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   14220:	eddc 6a01 	vldr	s13, [ip, #4]
   14224:	980c      	ldr	r0, [sp, #48]	; 0x30
   14226:	9b08      	ldr	r3, [sp, #32]
   14228:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
   1422c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1422e:	eb03 1308 	add.w	r3, r3, r8, lsl #4
   14232:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
   14236:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1423a:	edd8 6a01 	vldr	s13, [r8, #4]
   1423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   14242:	edc2 7a01 	vstr	s15, [r2, #4]

    /* COL 2 */
    twR = tw2[0];
    twI = tw2[1];
   14246:	edd1 6a01 	vldr	s13, [r1, #4]
    twR = tw2[0];
   1424a:	ed91 6a00 	vldr	s12, [r1]

    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
   1424e:	ee66 7aa2 	vmul.f32	s15, s13, s5
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;
   14252:	ee66 6a82 	vmul.f32	s13, s13, s4

    *p2++ = m0 + m1;
   14256:	ee46 7a02 	vmla.f32	s15, s12, s4
    *p2++ = m2 - m3;
   1425a:	ee56 6a22 	vnmls.f32	s13, s12, s5
    *p2++ = m0 + m1;
   1425e:	edcc 7a00 	vstr	s15, [ip]
    *p2++ = m2 - m3;
   14262:	edcc 6a01 	vstr	s13, [ip, #4]
    /* COL 3 */
    twR = tw3[0];
    twI = tw3[1];
   14266:	edd3 7a01 	vldr	s15, [r3, #4]
    twR = tw3[0];
   1426a:	ed93 6a00 	vldr	s12, [r3]

    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
   1426e:	ee67 6aa3 	vmul.f32	s13, s15, s7
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;
   14272:	ee67 7a83 	vmul.f32	s15, s15, s6

    *p3++ = m0 + m1;
   14276:	ee46 6a03 	vmla.f32	s13, s12, s6
    *p3++ = m2 - m3;
   1427a:	ee56 7a23 	vnmls.f32	s15, s12, s7
    *p3++ = m0 + m1;
   1427e:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
   14282:	edce 7a01 	vstr	s15, [lr, #4]
    /* COL 4 */
    twR = tw4[0];
    twI = tw4[1];
   14286:	edd7 7a01 	vldr	s15, [r7, #4]
    twR = tw4[0];
   1428a:	ed97 6a00 	vldr	s12, [r7]

    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
   1428e:	ee67 6aa5 	vmul.f32	s13, s15, s11
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;
   14292:	ee67 7a87 	vmul.f32	s15, s15, s14

    *p4++ = m0 + m1;
   14296:	ee46 6a07 	vmla.f32	s13, s12, s14
    *p4++ = m2 - m3;
   1429a:	ee56 7a25 	vnmls.f32	s15, s12, s11

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   1429e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    *p4++ = m0 + m1;
   142a2:	edc8 6a00 	vstr	s13, [r8]
    *p4++ = m2 - m3;
   142a6:	edc8 7a01 	vstr	s15, [r8, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   142aa:	9a02      	ldr	r2, [sp, #8]
   142ac:	9800      	ldr	r0, [sp, #0]
   142ae:	2304      	movs	r3, #4
   142b0:	9101      	str	r1, [sp, #4]
   142b2:	f7fa faa9 	bl	e808 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
   142b6:	9901      	ldr	r1, [sp, #4]
   142b8:	4630      	mov	r0, r6
   142ba:	f8db 2004 	ldr.w	r2, [fp, #4]
   142be:	2304      	movs	r3, #4
   142c0:	9100      	str	r1, [sp, #0]
   142c2:	f7fa faa1 	bl	e808 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
   142c6:	4628      	mov	r0, r5
   142c8:	f8db 2004 	ldr.w	r2, [fp, #4]
   142cc:	9900      	ldr	r1, [sp, #0]
   142ce:	2304      	movs	r3, #4
   142d0:	f7fa fa9a 	bl	e808 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   142d4:	2304      	movs	r3, #4
   142d6:	4620      	mov	r0, r4
   142d8:	f8db 2004 	ldr.w	r2, [fp, #4]
   142dc:	9900      	ldr	r1, [sp, #0]
}
   142de:	b00f      	add	sp, #60	; 0x3c
   142e0:	ecbd 8b04 	vpop	{d8-d9}
   142e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   142e8:	f7fa ba8e 	b.w	e808 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   142ec:	ed4e 6a04 	vstr	s13, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   142f0:	ed51 6a03 	vldr	s13, [r1, #-12]
   142f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
   142f8:	ed52 6a03 	vldr	s13, [r2, #-12]
   142fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
   14300:	ed4e 7a03 	vstr	s15, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   14304:	edda 7a01 	vldr	s15, [sl, #4]
   14308:	edd9 1a01 	vldr	s3, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   1430c:	edd9 4a02 	vldr	s9, [r9, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   14310:	ee31 5aa7 	vadd.f32	s10, s3, s15
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
   14314:	ee71 1ae7 	vsub.f32	s3, s3, s15
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   14318:	edda 7a02 	vldr	s15, [sl, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   1431c:	ed93 0a02 	vldr	s0, [r3, #8]
   14320:	ed97 6a02 	vldr	s12, [r7, #8]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   14324:	ee74 8aa7 	vadd.f32	s17, s9, s15
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   14328:	ee36 9a40 	vsub.f32	s18, s12, s0
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   1432c:	ee38 1ac6 	vsub.f32	s2, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   14330:	ee36 6a28 	vadd.f32	s12, s12, s17
   14334:	ee36 6a00 	vadd.f32	s12, s12, s0
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   14338:	ed93 4a01 	vldr	s8, [r3, #4]
   1433c:	ed97 8a01 	vldr	s16, [r7, #4]
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   14340:	ed89 6a02 	vstr	s12, [r9, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   14344:	ed97 6a01 	vldr	s12, [r7, #4]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
   14348:	ee74 4ae7 	vsub.f32	s9, s9, s15
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   1434c:	ee75 7a48 	vsub.f32	s15, s10, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   14350:	ee35 5a06 	vadd.f32	s10, s10, s12
   14354:	ed93 6a01 	vldr	s12, [r3, #4]
   14358:	ee35 5a06 	vadd.f32	s10, s10, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   1435c:	ee74 6ac8 	vsub.f32	s13, s9, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   14360:	ed89 5a01 	vstr	s10, [r9, #4]
      twR = *tw2++;
   14364:	9804      	ldr	r0, [sp, #16]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   14366:	ee77 7ac4 	vsub.f32	s15, s15, s8
      twI = *tw2++;
   1436a:	ed10 6a01 	vldr	s12, [r0, #-4]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   1436e:	ee76 6a84 	vadd.f32	s13, s13, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   14372:	ee34 4a48 	vsub.f32	s8, s8, s16
      twR = *tw2++;
   14376:	ed10 5a02 	vldr	s10, [r0, #-8]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   1437a:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
   1437e:	ee26 4a22 	vmul.f32	s8, s12, s5
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   14382:	ee79 0a21 	vadd.f32	s1, s18, s3
      *p2++ = m0 + m1;
   14386:	ee05 4a02 	vmla.f32	s8, s10, s4
   1438a:	ed01 4a04 	vstr	s8, [r1, #-16]
      m1 = t2[2] * twR;
   1438e:	ee20 4a85 	vmul.f32	s8, s1, s10
      m3 = t2[0] * twI;
   14392:	ee26 2a02 	vmul.f32	s4, s12, s4
      *pEnd2-- = m0 - m1;
   14396:	ee16 4a86 	vnmls.f32	s8, s13, s12
      m3 = t2[3] * twR;
   1439a:	ee66 6a85 	vmul.f32	s13, s13, s10
      *p2++ = m2 - m3;
   1439e:	ee15 2a22 	vnmls.f32	s4, s10, s5
      *pEnd2-- = m2 + m3;
   143a2:	ee40 6a86 	vmla.f32	s13, s1, s12
      *p2++ = m2 - m3;
   143a6:	ed01 2a03 	vstr	s4, [r1, #-12]
      *pEnd2-- = m0 - m1;
   143aa:	ed87 4a02 	vstr	s8, [r7, #8]
      *pEnd2-- = m2 + m3;
   143ae:	edc7 6a01 	vstr	s13, [r7, #4]
      twR = tw3[0];
   143b2:	9803      	ldr	r0, [sp, #12]
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   143b4:	ee31 1a40 	vsub.f32	s2, s2, s0
      twI = tw3[1];
   143b8:	ed10 6a03 	vldr	s12, [r0, #-12]
      twR = tw3[0];
   143bc:	ed50 6a04 	vldr	s13, [r0, #-16]
      m1 = t3[1] * twI;
   143c0:	ee26 5a23 	vmul.f32	s10, s12, s7
      *p3++ = m0 + m1;
   143c4:	ee06 5a83 	vmla.f32	s10, s13, s6
      m3 = t3[0] * twI;
   143c8:	ee26 3a03 	vmul.f32	s6, s12, s6
      *p3++ = m0 + m1;
   143cc:	ed0c 5a04 	vstr	s10, [ip, #-16]
      m1 =  t3[2] * twI;
   143d0:	ee27 5a86 	vmul.f32	s10, s15, s12
      *p3++ = m2 - m3;
   143d4:	ee16 3aa3 	vnmls.f32	s6, s13, s7
      *pEnd3-- = m0 - m1;
   143d8:	ee11 5a66 	vnmla.f32	s10, s2, s13
      m2 =  t3[2] * twR;
   143dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
      *pEnd3-- = m3 - m2;
   143e0:	ee51 6a06 	vnmls.f32	s13, s2, s12
      *p3++ = m2 - m3;
   143e4:	ed0c 3a03 	vstr	s6, [ip, #-12]
      *pEnd3-- = m0 - m1;
   143e8:	ed8a 5a02 	vstr	s10, [sl, #8]
      *pEnd3-- = m3 - m2;
   143ec:	edca 6a01 	vstr	s13, [sl, #4]
      twR = tw4[0];
   143f0:	9801      	ldr	r0, [sp, #4]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
   143f2:	ee79 1a61 	vsub.f32	s3, s18, s3
      twR = tw4[0];
   143f6:	ed50 7a06 	vldr	s15, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
   143fa:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
      m1 = t4[1] * twI;
   143fe:	ee26 6aa5 	vmul.f32	s12, s13, s11
      *p4++ = m0 + m1;
   14402:	ee07 6a87 	vmla.f32	s12, s15, s14
      m3 = t4[0] * twI;
   14406:	ee26 7a87 	vmul.f32	s14, s13, s14
      *p4++ = m2 - m3;
   1440a:	ee17 7aa5 	vnmls.f32	s14, s15, s11
   1440e:	ed02 7a03 	vstr	s14, [r2, #-12]
      m1 = t4[2] * twR;
   14412:	ee21 7aa7 	vmul.f32	s14, s3, s15
      m3 = t4[3] * twR;
   14416:	ee64 7aa7 	vmul.f32	s15, s9, s15
      *pEnd4-- = m0 - m1;
   1441a:	ee14 7aa6 	vnmls.f32	s14, s9, s13
      *pEnd4-- = m2 + m3;
   1441e:	ee41 7aa6 	vmla.f32	s15, s3, s13
    for (l = (L - 2) >> 1; l > 0; l-- )
   14422:	9805      	ldr	r0, [sp, #20]
      *p4++ = m0 + m1;
   14424:	ed02 6a04 	vstr	s12, [r2, #-16]
    for (l = (L - 2) >> 1; l > 0; l-- )
   14428:	3801      	subs	r0, #1
      *pEnd4-- = m0 - m1;
   1442a:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
   1442e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   14432:	9005      	str	r0, [sp, #20]
   14434:	e699      	b.n	1416a <arm_cfft_radix8by4_f32+0x120>

00014436 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
   14436:	2a01      	cmp	r2, #1
{
   14438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1443c:	4606      	mov	r6, r0
   1443e:	460c      	mov	r4, r1
   14440:	4617      	mov	r7, r2
   14442:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
   14444:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
   14446:	d03e      	beq.n	144c6 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
   14448:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1444c:	d049      	beq.n	144e2 <arm_cfft_f32+0xac>
   1444e:	d826      	bhi.n	1449e <arm_cfft_f32+0x68>
   14450:	2d40      	cmp	r5, #64	; 0x40
   14452:	d031      	beq.n	144b8 <arm_cfft_f32+0x82>
   14454:	d81c      	bhi.n	14490 <arm_cfft_f32+0x5a>
   14456:	2d10      	cmp	r5, #16
   14458:	d01c      	beq.n	14494 <arm_cfft_f32+0x5e>
   1445a:	2d20      	cmp	r5, #32
   1445c:	d041      	beq.n	144e2 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
   1445e:	f1b8 0f00 	cmp.w	r8, #0
   14462:	d004      	beq.n	1446e <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   14464:	4620      	mov	r0, r4
   14466:	68b2      	ldr	r2, [r6, #8]
   14468:	89b1      	ldrh	r1, [r6, #12]
   1446a:	f000 fb2d 	bl	14ac8 <arm_bitreversal_32>

  if (ifftFlag == 1U)
   1446e:	2f01      	cmp	r7, #1
   14470:	d10c      	bne.n	1448c <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
   14472:	ee07 5a90 	vmov	s15, r5
   14476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1447a:	eef8 7a67 	vcvt.f32.u32	s15, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
   1447e:	2300      	movs	r3, #0
    invL = 1.0f / (float32_t)L;
   14480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (l= 0; l < L; l++)
   14484:	42ab      	cmp	r3, r5
   14486:	f104 0408 	add.w	r4, r4, #8
   1448a:	d32f      	bcc.n	144ec <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
   1448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
   14490:	2d80      	cmp	r5, #128	; 0x80
   14492:	d1e4      	bne.n	1445e <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
   14494:	4621      	mov	r1, r4
   14496:	4630      	mov	r0, r6
   14498:	f7ff fd19 	bl	13ece <arm_cfft_radix8by2_f32>
    break;
   1449c:	e7df      	b.n	1445e <arm_cfft_f32+0x28>
  switch (L)
   1449e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
   144a2:	d01e      	beq.n	144e2 <arm_cfft_f32+0xac>
   144a4:	d805      	bhi.n	144b2 <arm_cfft_f32+0x7c>
   144a6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   144aa:	d005      	beq.n	144b8 <arm_cfft_f32+0x82>
   144ac:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   144b0:	e7ef      	b.n	14492 <arm_cfft_f32+0x5c>
   144b2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   144b6:	d1d2      	bne.n	1445e <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
   144b8:	2301      	movs	r3, #1
   144ba:	4629      	mov	r1, r5
   144bc:	4620      	mov	r0, r4
   144be:	6872      	ldr	r2, [r6, #4]
   144c0:	f7fa f9a2 	bl	e808 <arm_radix8_butterfly_f32>
    break;
   144c4:	e7cb      	b.n	1445e <arm_cfft_f32+0x28>
    for (l = 0; l < L; l++)
   144c6:	2300      	movs	r3, #0
    pSrc = p1 + 1;
   144c8:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
   144ca:	42ab      	cmp	r3, r5
   144cc:	f102 0208 	add.w	r2, r2, #8
   144d0:	d2ba      	bcs.n	14448 <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
   144d2:	ed52 7a02 	vldr	s15, [r2, #-8]
   144d6:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
   144da:	3301      	adds	r3, #1
      *pSrc = -*pSrc;
   144dc:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
   144e0:	e7f3      	b.n	144ca <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   144e2:	4621      	mov	r1, r4
   144e4:	4630      	mov	r0, r6
   144e6:	f7ff fdb0 	bl	1404a <arm_cfft_radix8by4_f32>
    break;
   144ea:	e7b8      	b.n	1445e <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
   144ec:	ed54 7a02 	vldr	s15, [r4, #-8]
   144f0:	ee67 7a87 	vmul.f32	s15, s15, s14
   144f4:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
   144f8:	ed54 7a01 	vldr	s15, [r4, #-4]
   144fc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
   14500:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
   14502:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
   14506:	e7bd      	b.n	14484 <arm_cfft_f32+0x4e>

00014508 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
   14508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1450c:	460c      	mov	r4, r1
   1450e:	4616      	mov	r6, r2
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
   14510:	681d      	ldr	r5, [r3, #0]
{
   14512:	b08a      	sub	sp, #40	; 0x28
   14514:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
   14518:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c

    while (batch_cnt)
   1451c:	b91d      	cbnz	r5, 14526 <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
   1451e:	4628      	mov	r0, r5
   14520:	b00a      	add	sp, #40	; 0x28
   14522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
   14526:	6923      	ldr	r3, [r4, #16]
   14528:	4638      	mov	r0, r7
   1452a:	9308      	str	r3, [sp, #32]
   1452c:	68e3      	ldr	r3, [r4, #12]
   1452e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14530:	9307      	str	r3, [sp, #28]
   14532:	f8da 300c 	ldr.w	r3, [sl, #12]
   14536:	9914      	ldr	r1, [sp, #80]	; 0x50
   14538:	9306      	str	r3, [sp, #24]
   1453a:	f8d9 3000 	ldr.w	r3, [r9]
        batch_cnt--;
   1453e:	3d01      	subs	r5, #1
        arm_nn_vec_mat_mult_t_s8(input,
   14540:	9305      	str	r3, [sp, #20]
   14542:	6873      	ldr	r3, [r6, #4]
   14544:	9304      	str	r3, [sp, #16]
   14546:	6833      	ldr	r3, [r6, #0]
   14548:	9303      	str	r3, [sp, #12]
   1454a:	68a3      	ldr	r3, [r4, #8]
   1454c:	9302      	str	r3, [sp, #8]
   1454e:	6863      	ldr	r3, [r4, #4]
   14550:	9301      	str	r3, [sp, #4]
   14552:	6823      	ldr	r3, [r4, #0]
   14554:	9300      	str	r3, [sp, #0]
   14556:	4643      	mov	r3, r8
   14558:	f000 f809 	bl	1456e <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
   1455c:	f8d9 3000 	ldr.w	r3, [r9]
   14560:	441f      	add	r7, r3
        output += output_dims->c;
   14562:	f8da 300c 	ldr.w	r3, [sl, #12]
   14566:	4498      	add	r8, r3
        batch_cnt--;
   14568:	e7d8      	b.n	1451c <arm_fully_connected_s8+0x14>

0001456a <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
   1456a:	2000      	movs	r0, #0
   1456c:	4770      	bx	lr

0001456e <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
   1456e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14572:	b095      	sub	sp, #84	; 0x54
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   14574:	9c22      	ldr	r4, [sp, #136]	; 0x88
{
   14576:	9001      	str	r0, [sp, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14578:	9822      	ldr	r0, [sp, #136]	; 0x88
   1457a:	2c00      	cmp	r4, #0
   1457c:	f1c0 0000 	rsb	r0, r0, #0
   14580:	bfc8      	it	gt
   14582:	2000      	movgt	r0, #0
   14584:	9004      	str	r0, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   14586:	2001      	movs	r0, #1
   14588:	9c04      	ldr	r4, [sp, #16]
   1458a:	9308      	str	r3, [sp, #32]
   1458c:	40a0      	lsls	r0, r4
   1458e:	3801      	subs	r0, #1
   14590:	9005      	str	r0, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   14592:	1040      	asrs	r0, r0, #1
   14594:	9006      	str	r0, [sp, #24]
        threshold++;
   14596:	3001      	adds	r0, #1
   14598:	9009      	str	r0, [sp, #36]	; 0x24
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
   1459a:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1459c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   1459e:	0040      	lsls	r0, r0, #1
   145a0:	900a      	str	r0, [sp, #40]	; 0x28
   145a2:	9808      	ldr	r0, [sp, #32]
   145a4:	2c00      	cmp	r4, #0
   145a6:	f100 0002 	add.w	r0, r0, #2
   145aa:	9002      	str	r0, [sp, #8]
   145ac:	9823      	ldr	r0, [sp, #140]	; 0x8c
{
   145ae:	910c      	str	r1, [sp, #48]	; 0x30
   145b0:	ea4f 1010 	mov.w	r0, r0, lsr #4
   145b4:	900e      	str	r0, [sp, #56]	; 0x38
   145b6:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   145b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   145ba:	f020 000f 	bic.w	r0, r0, #15
   145be:	bfb8      	it	lt
   145c0:	2000      	movlt	r0, #0
   145c2:	9007      	str	r0, [sp, #28]
   145c4:	9c07      	ldr	r4, [sp, #28]
   145c6:	9801      	ldr	r0, [sp, #4]
   145c8:	b219      	sxth	r1, r3
   145ca:	4420      	add	r0, r4
   145cc:	900b      	str	r0, [sp, #44]	; 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   145ce:	980c      	ldr	r0, [sp, #48]	; 0x30
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   145d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   145d2:	9003      	str	r0, [sp, #12]
   145d4:	9824      	ldr	r0, [sp, #144]	; 0x90
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   145d6:	b21b      	sxth	r3, r3
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   145d8:	3801      	subs	r0, #1
   145da:	900f      	str	r0, [sp, #60]	; 0x3c
   145dc:	9808      	ldr	r0, [sp, #32]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   145de:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   145e2:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   145e6:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   145ea:	30fe      	adds	r0, #254	; 0xfe
   145ec:	9010      	str	r0, [sp, #64]	; 0x40
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   145ee:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   145f0:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   145f4:	380f      	subs	r0, #15
   145f6:	9011      	str	r0, [sp, #68]	; 0x44
   145f8:	1e60      	subs	r0, r4, #1
   145fa:	9012      	str	r0, [sp, #72]	; 0x48
   145fc:	9801      	ldr	r0, [sp, #4]
   145fe:	4240      	negs	r0, r0
   14600:	9013      	str	r0, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14602:	9822      	ldr	r0, [sp, #136]	; 0x88
   14604:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   14608:	900d      	str	r0, [sp, #52]	; 0x34
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1460a:	9c02      	ldr	r4, [sp, #8]
   1460c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1460e:	4420      	add	r0, r4
   14610:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   14612:	4284      	cmp	r4, r0
   14614:	dc67      	bgt.n	146e6 <arm_nn_vec_mat_mult_t_s8+0x178>
   14616:	9c24      	ldr	r4, [sp, #144]	; 0x90
   14618:	9824      	ldr	r0, [sp, #144]	; 0x90
   1461a:	2c00      	cmp	r4, #0
   1461c:	ea4f 0050 	mov.w	r0, r0, lsr #1
   14620:	bfac      	ite	ge
   14622:	4684      	movge	ip, r0
   14624:	f04f 0c00 	movlt.w	ip, #0
   14628:	ea4f 0040 	mov.w	r0, r0, lsl #1
   1462c:	bfb8      	it	lt
   1462e:	2000      	movlt	r0, #0
   14630:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14632:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14634:	fb05 4c0c 	mla	ip, r5, ip, r4
   14638:	9c08      	ldr	r4, [sp, #32]
   1463a:	4404      	add	r4, r0
   1463c:	4620      	mov	r0, r4
    }

    if (rhs_rows % 2)
   1463e:	9c24      	ldr	r4, [sp, #144]	; 0x90
   14640:	07e4      	lsls	r4, r4, #31
   14642:	d54c      	bpl.n	146de <arm_nn_vec_mat_mult_t_s8+0x170>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
   14644:	b102      	cbz	r2, 14648 <arm_nn_vec_mat_mult_t_s8+0xda>
        {
            res00 = *bias++;
   14646:	6812      	ldr	r2, [r2, #0]
        q31_t res00 = 0;
   14648:	2500      	movs	r5, #0
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1464a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   1464c:	f1a4 090f 	sub.w	r9, r4, #15
   14650:	9c01      	ldr	r4, [sp, #4]
   14652:	45a9      	cmp	r9, r5
   14654:	eb04 0805 	add.w	r8, r4, r5
   14658:	eb0c 0e05 	add.w	lr, ip, r5
   1465c:	f300 814c 	bgt.w	148f8 <arm_nn_vec_mat_mult_t_s8+0x38a>
   14660:	9923      	ldr	r1, [sp, #140]	; 0x8c
   14662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14664:	2900      	cmp	r1, #0
   14666:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1466a:	bfb8      	it	lt
   1466c:	2300      	movlt	r3, #0
   1466e:	9907      	ldr	r1, [sp, #28]
   14670:	3901      	subs	r1, #1
   14672:	448c      	add	ip, r1
   14674:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14676:	1a5b      	subs	r3, r3, r1
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14678:	9d23      	ldr	r5, [sp, #140]	; 0x8c
   1467a:	18cc      	adds	r4, r1, r3
   1467c:	42a5      	cmp	r5, r4
   1467e:	f300 818d 	bgt.w	1499c <arm_nn_vec_mat_mult_t_s8+0x42e>
   14682:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14684:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14688:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1468c:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1468e:	2300      	movs	r3, #0
   14690:	461c      	mov	r4, r3
   14692:	9d21      	ldr	r5, [sp, #132]	; 0x84
   14694:	fbc2 1405 	smlal	r1, r4, r2, r5
    result = (int32_t)(mult.long_long >> 31);
   14698:	0fca      	lsrs	r2, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1469a:	9922      	ldr	r1, [sp, #136]	; 0x88
    result = (int32_t)(mult.long_long >> 31);
   1469c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   146a0:	4299      	cmp	r1, r3
   146a2:	bfd8      	it	le
   146a4:	460b      	movle	r3, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
   146a6:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   146aa:	bfd8      	it	le
   146ac:	425b      	negle	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
   146ae:	4099      	lsls	r1, r3
   146b0:	3901      	subs	r1, #1
    if (result < 0)
   146b2:	fa52 f303 	asrs.w	r3, r2, r3
    int32_t remainder = remainder_mask & dividend;
   146b6:	ea02 0401 	and.w	r4, r2, r1
    q31_t threshold = remainder_mask >> 1;
   146ba:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   146be:	bf48      	it	mi
   146c0:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
   146c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    if (remainder > threshold)
   146c4:	428c      	cmp	r4, r1
        result++;
   146c6:	bfc8      	it	gt
   146c8:	3301      	addgt	r3, #1
   146ca:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
   146cc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   146ce:	4293      	cmp	r3, r2
   146d0:	bfb8      	it	lt
   146d2:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
   146d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   146d6:	4293      	cmp	r3, r2
   146d8:	bfa8      	it	ge
   146da:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
   146dc:	7003      	strb	r3, [r0, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
   146de:	2000      	movs	r0, #0
   146e0:	b015      	add	sp, #84	; 0x54
   146e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
   146e6:	2a00      	cmp	r2, #0
   146e8:	d06c      	beq.n	147c4 <arm_nn_vec_mat_mult_t_s8+0x256>
            res00 = *bias++;
   146ea:	4615      	mov	r5, r2
   146ec:	f855 4b08 	ldr.w	r4, [r5], #8
            res01 = *bias++;
   146f0:	6850      	ldr	r0, [r2, #4]
   146f2:	462a      	mov	r2, r5
        int32_t rhs_cols_idx = 0;
   146f4:	f04f 0c00 	mov.w	ip, #0
   146f8:	9d03      	ldr	r5, [sp, #12]
   146fa:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   146fc:	19af      	adds	r7, r5, r6
   146fe:	9d01      	ldr	r5, [sp, #4]
   14700:	eb05 080c 	add.w	r8, r5, ip
   14704:	9d23      	ldr	r5, [sp, #140]	; 0x8c
   14706:	eba7 0e05 	sub.w	lr, r7, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1470a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1470c:	4565      	cmp	r5, ip
   1470e:	dc5c      	bgt.n	147ca <arm_nn_vec_mat_mult_t_s8+0x25c>
   14710:	9d03      	ldr	r5, [sp, #12]
   14712:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14714:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   14718:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1471a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1471c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   1471e:	4475      	add	r5, lr
   14720:	42ae      	cmp	r6, r5
   14722:	f300 80d7 	bgt.w	148d4 <arm_nn_vec_mat_mult_t_s8+0x366>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14726:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14728:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1472c:	40ac      	lsls	r4, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1472e:	2500      	movs	r5, #0
   14730:	9f21      	ldr	r7, [sp, #132]	; 0x84
   14732:	fbc4 6507 	smlal	r6, r5, r4, r7
    result = (int32_t)(mult.long_long >> 31);
   14736:	0ff4      	lsrs	r4, r6, #31
   14738:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1473c:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
   1473e:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   14740:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   14742:	4025      	ands	r5, r4
    q31_t threshold = remainder_mask >> 1;
   14744:	4134      	asrs	r4, r6
   14746:	9e09      	ldr	r6, [sp, #36]	; 0x24
   14748:	bf58      	it	pl
   1474a:	463e      	movpl	r6, r7
    if (remainder > threshold)
   1474c:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1474e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14750:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14752:	fa00 f605 	lsl.w	r6, r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14756:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1475a:	f04f 0500 	mov.w	r5, #0
   1475e:	fbc6 0507 	smlal	r0, r5, r6, r7
    result = (int32_t)(mult.long_long >> 31);
   14762:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   14766:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1476a:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
   1476c:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   1476e:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   14770:	ea00 0505 	and.w	r5, r0, r5
        result++;
   14774:	bfc8      	it	gt
   14776:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
   14778:	4130      	asrs	r0, r6
   1477a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1477c:	bf58      	it	pl
   1477e:	463e      	movpl	r6, r7
    if (remainder > threshold)
   14780:	42b5      	cmp	r5, r6
        res00 += dst_offset;
   14782:	9d20      	ldr	r5, [sp, #128]	; 0x80
        result++;
   14784:	bfc8      	it	gt
   14786:	3001      	addgt	r0, #1
   14788:	442c      	add	r4, r5
        res01 += dst_offset;
   1478a:	4428      	add	r0, r5
        res00 = MAX(res00, activation_min);
   1478c:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1478e:	42ac      	cmp	r4, r5
   14790:	bfb8      	it	lt
   14792:	462c      	movlt	r4, r5
        res01 = MAX(res01, activation_min);
   14794:	42a8      	cmp	r0, r5
   14796:	bfb8      	it	lt
   14798:	4628      	movlt	r0, r5
        res00 = MIN(res00, activation_max);
   1479a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1479c:	42ac      	cmp	r4, r5
   1479e:	bfa8      	it	ge
   147a0:	462c      	movge	r4, r5
        *dst++ = (q7_t)res00;
   147a2:	9d02      	ldr	r5, [sp, #8]
   147a4:	f805 4c02 	strb.w	r4, [r5, #-2]
        res01 = MIN(res01, activation_max);
   147a8:	9c26      	ldr	r4, [sp, #152]	; 0x98
   147aa:	42a0      	cmp	r0, r4
   147ac:	bfa8      	it	ge
   147ae:	4620      	movge	r0, r4
        rhs += 2 * rhs_cols;
   147b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        *dst++ = (q7_t)res01;
   147b2:	f805 0c01 	strb.w	r0, [r5, #-1]
        rhs += 2 * rhs_cols;
   147b6:	9803      	ldr	r0, [sp, #12]
   147b8:	4420      	add	r0, r4
   147ba:	9003      	str	r0, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   147bc:	4628      	mov	r0, r5
   147be:	3002      	adds	r0, #2
   147c0:	9002      	str	r0, [sp, #8]
   147c2:	e722      	b.n	1460a <arm_nn_vec_mat_mult_t_s8+0x9c>
        q31_t res01 = 0;
   147c4:	4610      	mov	r0, r2
        q31_t res00 = 0;
   147c6:	4614      	mov	r4, r2
   147c8:	e794      	b.n	146f4 <arm_nn_vec_mat_mult_t_s8+0x186>
    memcpy(&val, *in_q7, 4);
   147ca:	9d01      	ldr	r5, [sp, #4]
   147cc:	f8de b000 	ldr.w	fp, [lr]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147d0:	f855 500c 	ldr.w	r5, [r5, ip]
   147d4:	fa23 f68b 	sxtab16	r6, r3, fp
   147d8:	fa21 fa85 	sxtab16	sl, r1, r5
   147dc:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
   147e0:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   147e4:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147e8:	fa23 fb8b 	sxtab16	fp, r3, fp
   147ec:	fa21 f585 	sxtab16	r5, r1, r5

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   147f0:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147f4:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   147f8:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147fc:	f8de b004 	ldr.w	fp, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   14800:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14804:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14808:	fb2a 0006 	smlad	r0, sl, r6, r0
   1480c:	fb25 0009 	smlad	r0, r5, r9, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14810:	f8d8 5004 	ldr.w	r5, [r8, #4]
   14814:	fa23 f68b 	sxtab16	r6, r3, fp
   14818:	fa21 fa85 	sxtab16	sl, r1, r5
   1481c:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   14820:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   14824:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14828:	fa23 fb8b 	sxtab16	fp, r3, fp
   1482c:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14830:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14834:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14838:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1483c:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   14840:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14844:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14848:	fb2a 0606 	smlad	r6, sl, r6, r0
   1484c:	fb25 6609 	smlad	r6, r5, r9, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14850:	f8d8 5008 	ldr.w	r5, [r8, #8]
   14854:	fa23 f08b 	sxtab16	r0, r3, fp
   14858:	fa21 f985 	sxtab16	r9, r1, r5
   1485c:	f8d7 a008 	ldr.w	sl, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   14860:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   14864:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14868:	fa23 fb8b 	sxtab16	fp, r3, fp
   1486c:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14870:	fb29 4400 	smlad	r4, r9, r0, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14874:	fa23 f08a 	sxtab16	r0, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14878:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1487c:	f8de b00c 	ldr.w	fp, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
   14880:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14884:	fa23 fa8a 	sxtab16	sl, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14888:	fb29 6000 	smlad	r0, r9, r0, r6
   1488c:	fb25 050a 	smlad	r5, r5, sl, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14890:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   14894:	fa23 f68b 	sxtab16	r6, r3, fp
   14898:	fa21 fa8e 	sxtab16	sl, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   1489c:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   148a0:	f8d7 800c 	ldr.w	r8, [r7, #12]
   148a4:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148a8:	fa23 f98b 	sxtab16	r9, r3, fp
   148ac:	fa21 fe8e 	sxtab16	lr, r1, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   148b0:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148b4:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   148b8:	fb2e 4409 	smlad	r4, lr, r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
   148bc:	ea4f 2038 	mov.w	r0, r8, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148c0:	fa23 f080 	sxtab16	r0, r3, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   148c4:	fb2a 550b 	smlad	r5, sl, fp, r5
   148c8:	fb2e 5000 	smlad	r0, lr, r0, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   148cc:	f10c 0c10 	add.w	ip, ip, #16
   148d0:	3710      	adds	r7, #16
   148d2:	e714      	b.n	146fe <arm_nn_vec_mat_mult_t_s8+0x190>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   148d4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   148d6:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   148da:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   148de:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   148e0:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   148e2:	44b4      	add	ip, r6
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   148e4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            res00 += lhs_value * rhs_value0;
   148e6:	fb05 440c 	mla	r4, r5, ip, r4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   148ea:	f917 c006 	ldrsb.w	ip, [r7, r6]
   148ee:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   148f0:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
   148f2:	fb05 000c 	mla	r0, r5, ip, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   148f6:	e710      	b.n	1471a <arm_nn_vec_mat_mult_t_s8+0x1ac>
   148f8:	9c01      	ldr	r4, [sp, #4]
   148fa:	f85c 7005 	ldr.w	r7, [ip, r5]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148fe:	5966      	ldr	r6, [r4, r5]
   14900:	fa23 fb87 	sxtab16	fp, r3, r7
   14904:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   14908:	ea4f 2737 	mov.w	r7, r7, ror #8
   1490c:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14910:	fa23 f787 	sxtab16	r7, r3, r7
   14914:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14918:	fb2a 220b 	smlad	r2, sl, fp, r2
   1491c:	fb26 2207 	smlad	r2, r6, r7, r2
   14920:	f8de 4004 	ldr.w	r4, [lr, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14924:	f8d8 6004 	ldr.w	r6, [r8, #4]
   14928:	fa23 fb84 	sxtab16	fp, r3, r4
   1492c:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   14930:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14934:	fa23 f784 	sxtab16	r7, r3, r4
  return (op1 >> op2) | (op1 << (32U - op2));
   14938:	ea4f 2436 	mov.w	r4, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1493c:	fa21 f484 	sxtab16	r4, r1, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14940:	fb2a 220b 	smlad	r2, sl, fp, r2
   14944:	fb24 2407 	smlad	r4, r4, r7, r2
   14948:	f8de 7008 	ldr.w	r7, [lr, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1494c:	f8d8 6008 	ldr.w	r6, [r8, #8]
   14950:	fa23 fb87 	sxtab16	fp, r3, r7
   14954:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   14958:	ea4f 2737 	mov.w	r7, r7, ror #8
   1495c:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14960:	fa23 f787 	sxtab16	r7, r3, r7
   14964:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14968:	fb2a 440b 	smlad	r4, sl, fp, r4
   1496c:	fb26 4607 	smlad	r6, r6, r7, r4
   14970:	f8de 200c 	ldr.w	r2, [lr, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14974:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   14978:	fa23 f482 	sxtab16	r4, r3, r2
   1497c:	fa21 f78e 	sxtab16	r7, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   14980:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14984:	fa23 f882 	sxtab16	r8, r3, r2
  return (op1 >> op2) | (op1 << (32U - op2));
   14988:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1498c:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14990:	fb27 6604 	smlad	r6, r7, r4, r6
   14994:	fb22 6208 	smlad	r2, r2, r8, r6
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   14998:	3510      	adds	r5, #16
   1499a:	e659      	b.n	14650 <arm_nn_vec_mat_mult_t_s8+0xe2>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   1499c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1499e:	f91c 4f01 	ldrsb.w	r4, [ip, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   149a2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   149a4:	442c      	add	r4, r5
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   149a6:	f911 5b01 	ldrsb.w	r5, [r1], #1
   149aa:	4435      	add	r5, r6
            res00 += lhs_value * rhs_value0;
   149ac:	fb05 2204 	mla	r2, r5, r4, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   149b0:	e662      	b.n	14678 <arm_nn_vec_mat_mult_t_s8+0x10a>

000149b2 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   149b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   149b6:	2401      	movs	r4, #1
                         int total_signed_bits) {
   149b8:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   149ba:	fa04 f000 	lsl.w	r0, r4, r0
   149be:	3801      	subs	r0, #1
                         int total_signed_bits) {
   149c0:	4688      	mov	r8, r1
   149c2:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   149c4:	f7eb fd1a 	bl	3fc <__aeabi_i2d>
   149c8:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   149ca:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   149ce:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   149d0:	f1c0 0320 	rsb	r3, r0, #32
   149d4:	f1a0 0120 	sub.w	r1, r0, #32
   149d8:	fa24 f303 	lsr.w	r3, r4, r3
   149dc:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   149e0:	fa04 f000 	lsl.w	r0, r4, r0
   149e4:	4319      	orrs	r1, r3
   149e6:	f7eb fd45 	bl	474 <__aeabi_l2d>
   149ea:	4602      	mov	r2, r0
   149ec:	460b      	mov	r3, r1
   149ee:	4630      	mov	r0, r6
   149f0:	4639      	mov	r1, r7
   149f2:	f7eb fd6d 	bl	4d0 <__aeabi_dmul>
      (1ll << input_left_shift);
   149f6:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   149fa:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   149fc:	f1a8 0120 	sub.w	r1, r8, #32
   14a00:	fa24 f303 	lsr.w	r3, r4, r3
   14a04:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   14a08:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   14a0a:	4319      	orrs	r1, r3
   14a0c:	fa04 f008 	lsl.w	r0, r4, r8
   14a10:	f7eb fd30 	bl	474 <__aeabi_l2d>
   14a14:	4602      	mov	r2, r0
   14a16:	460b      	mov	r3, r1
  const double max_input_rescaled =
   14a18:	4630      	mov	r0, r6
   14a1a:	4639      	mov	r1, r7
   14a1c:	f7eb fe82 	bl	724 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   14a20:	ec41 0b10 	vmov	d0, r0, r1
   14a24:	f7ee fc1c 	bl	3260 <floor>
   14a28:	ec51 0b10 	vmov	r0, r1, d0
   14a2c:	f7ec f8f8 	bl	c20 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   14a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014a34 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   14a34:	edd0 7a00 	vldr	s15, [r0]
   14a38:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   14a3c:	b510      	push	{r4, lr}
   14a3e:	4604      	mov	r4, r0
   14a40:	ee17 0a90 	vmov	r0, s15
   14a44:	f7eb fcec 	bl	420 <__aeabi_f2d>
   14a48:	ec41 0b10 	vmov	d0, r0, r1
   14a4c:	f7fa fedc 	bl	f808 <round>
   14a50:	ec51 0b10 	vmov	r0, r1, d0
   14a54:	f7eb ffd6 	bl	a04 <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   14a58:	ee07 0a90 	vmov	s15, r0
   14a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   14a60:	ee17 0a90 	vmov	r0, s15
   14a64:	6863      	ldr	r3, [r4, #4]
  };
   14a66:	4418      	add	r0, r3
   14a68:	bd10      	pop	{r4, pc}

00014a6a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
  if (context->tensors != nullptr) {
   14a6a:	6883      	ldr	r3, [r0, #8]
                                      int tensor_index) {
   14a6c:	b410      	push	{r4}
  if (context->tensors != nullptr) {
   14a6e:	b91b      	cbnz	r3, 14a78 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0xe>
    return context->GetTensor(context, tensor_index);
   14a70:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
   14a72:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
   14a76:	4718      	bx	r3
    return &context->tensors[tensor_index];
   14a78:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   14a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
   14a80:	4770      	bx	lr

00014a82 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  if (index >= 0 && index < max_size) {
   14a82:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   14a84:	f851 3b04 	ldr.w	r3, [r1], #4
  if (index >= 0 && index < max_size) {
   14a88:	db07      	blt.n	14a9a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
   14a8a:	4293      	cmp	r3, r2
   14a8c:	dd05      	ble.n	14a9a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
    const int tensor_index = tensor_indices[index];
   14a8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
   14a92:	2900      	cmp	r1, #0
   14a94:	db01      	blt.n	14a9a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
  return GetTensorAtIndex(context, tensor_index);
   14a96:	f7ff bfe8 	b.w	14a6a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   14a9a:	2000      	movs	r0, #0
   14a9c:	4770      	bx	lr

00014a9e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
   14a9e:	6809      	ldr	r1, [r1, #0]
   14aa0:	f7ff bfef 	b.w	14a82 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

00014aa4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
   14aa4:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
   14aa6:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   14aa8:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   14aac:	db07      	blt.n	14abe <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
   14aae:	4291      	cmp	r1, r2
   14ab0:	dd05      	ble.n	14abe <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
    const int tensor_index = tensor_indices[index];
   14ab2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   14ab6:	2900      	cmp	r1, #0
   14ab8:	db01      	blt.n	14abe <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
  return GetTensorAtIndex(context, tensor_index);
   14aba:	f7ff bfd6 	b.w	14a6a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   14abe:	2000      	movs	r0, #0
   14ac0:	4770      	bx	lr

00014ac2 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
   14ac2:	6809      	ldr	r1, [r1, #0]
   14ac4:	f7ff bfdd 	b.w	14a82 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

00014ac8 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
   14ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14aca:	468c      	mov	ip, r1
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
   14acc:	2500      	movs	r5, #0
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
   14ace:	1c96      	adds	r6, r2, #2
  for (i = 0; i < bitRevLen; )
   14ad0:	45ac      	cmp	ip, r5
   14ad2:	d800      	bhi.n	14ad6 <arm_bitreversal_32+0xe>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
   14ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a = pBitRevTab[i    ] >> 2;
   14ad6:	f832 4015 	ldrh.w	r4, [r2, r5, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
   14ada:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
     a = pBitRevTab[i    ] >> 2;
   14ade:	08a4      	lsrs	r4, r4, #2
     b = pBitRevTab[i + 1] >> 2;
   14ae0:	089b      	lsrs	r3, r3, #2
     tmp = pSrc[a];
   14ae2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a] = pSrc[b];
   14ae6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    i += 2;
   14aea:	3502      	adds	r5, #2
     pSrc[a] = pSrc[b];
   14aec:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b] = tmp;
   14af0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
     tmp = pSrc[a+1];
   14af4:	3401      	adds	r4, #1
     pSrc[a+1] = pSrc[b+1];
   14af6:	3301      	adds	r3, #1
     tmp = pSrc[a+1];
   14af8:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
   14afc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   14b00:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b+1] = tmp;
   14b04:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    i += 2;
   14b08:	e7e2      	b.n	14ad0 <arm_bitreversal_32+0x8>

00014b0a <_ZdlPv>:
   14b0a:	f7fb ba5f 	b.w	ffcc <free>

00014b0e <_ZdaPv>:
   14b0e:	f7ff bffc 	b.w	14b0a <_ZdlPv>

00014b12 <_Znwj>:
   14b12:	2801      	cmp	r0, #1
   14b14:	bf38      	it	cc
   14b16:	2001      	movcc	r0, #1
   14b18:	b510      	push	{r4, lr}
   14b1a:	4604      	mov	r4, r0
   14b1c:	4620      	mov	r0, r4
   14b1e:	f7fb fa4d 	bl	ffbc <malloc>
   14b22:	b930      	cbnz	r0, 14b32 <_Znwj+0x20>
   14b24:	f7fa fe32 	bl	f78c <_ZSt15get_new_handlerv>
   14b28:	b908      	cbnz	r0, 14b2e <_Znwj+0x1c>
   14b2a:	f000 f82c 	bl	14b86 <abort>
   14b2e:	4780      	blx	r0
   14b30:	e7f4      	b.n	14b1c <_Znwj+0xa>
   14b32:	bd10      	pop	{r4, pc}

00014b34 <_Znaj>:
   14b34:	f7ff bfed 	b.w	14b12 <_Znwj>

00014b38 <_ZSt20__throw_length_errorPKc>:
   14b38:	b508      	push	{r3, lr}
   14b3a:	f000 f824 	bl	14b86 <abort>

00014b3e <__ieee754_sqrtf>:
   14b3e:	eeb1 0ac0 	vsqrt.f32	s0, s0
   14b42:	4770      	bx	lr

00014b44 <fabs>:
   14b44:	ec51 0b10 	vmov	r0, r1, d0
   14b48:	ee10 2a10 	vmov	r2, s0
   14b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   14b50:	ec43 2b10 	vmov	d0, r2, r3
   14b54:	4770      	bx	lr

00014b56 <finite>:
   14b56:	b082      	sub	sp, #8
   14b58:	ed8d 0b00 	vstr	d0, [sp]
   14b5c:	9801      	ldr	r0, [sp, #4]
   14b5e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   14b62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   14b66:	0fc0      	lsrs	r0, r0, #31
   14b68:	b002      	add	sp, #8
   14b6a:	4770      	bx	lr

00014b6c <finitef>:
   14b6c:	b082      	sub	sp, #8
   14b6e:	ed8d 0a01 	vstr	s0, [sp, #4]
   14b72:	9801      	ldr	r0, [sp, #4]
   14b74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   14b78:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   14b7c:	bfac      	ite	ge
   14b7e:	2000      	movge	r0, #0
   14b80:	2001      	movlt	r0, #1
   14b82:	b002      	add	sp, #8
   14b84:	4770      	bx	lr

00014b86 <abort>:
   14b86:	2006      	movs	r0, #6
   14b88:	b508      	push	{r3, lr}
   14b8a:	f7fb ff81 	bl	10a90 <raise>
   14b8e:	2001      	movs	r0, #1
   14b90:	f7f3 f8c2 	bl	7d18 <_exit>

00014b94 <atof>:
   14b94:	2100      	movs	r1, #0
   14b96:	f7fb bf95 	b.w	10ac4 <strtod>

00014b9a <memchr>:
   14b9a:	b2c9      	uxtb	r1, r1
   14b9c:	4402      	add	r2, r0
   14b9e:	b510      	push	{r4, lr}
   14ba0:	4290      	cmp	r0, r2
   14ba2:	4603      	mov	r3, r0
   14ba4:	d101      	bne.n	14baa <memchr+0x10>
   14ba6:	2300      	movs	r3, #0
   14ba8:	e003      	b.n	14bb2 <memchr+0x18>
   14baa:	781c      	ldrb	r4, [r3, #0]
   14bac:	3001      	adds	r0, #1
   14bae:	428c      	cmp	r4, r1
   14bb0:	d1f6      	bne.n	14ba0 <memchr+0x6>
   14bb2:	4618      	mov	r0, r3
   14bb4:	bd10      	pop	{r4, pc}

00014bb6 <memcpy>:
   14bb6:	440a      	add	r2, r1
   14bb8:	1e43      	subs	r3, r0, #1
   14bba:	4291      	cmp	r1, r2
   14bbc:	d100      	bne.n	14bc0 <memcpy+0xa>
   14bbe:	4770      	bx	lr
   14bc0:	b510      	push	{r4, lr}
   14bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   14bc6:	4291      	cmp	r1, r2
   14bc8:	f803 4f01 	strb.w	r4, [r3, #1]!
   14bcc:	d1f9      	bne.n	14bc2 <memcpy+0xc>
   14bce:	bd10      	pop	{r4, pc}

00014bd0 <memmove>:
   14bd0:	4288      	cmp	r0, r1
   14bd2:	b510      	push	{r4, lr}
   14bd4:	eb01 0402 	add.w	r4, r1, r2
   14bd8:	d902      	bls.n	14be0 <memmove+0x10>
   14bda:	4284      	cmp	r4, r0
   14bdc:	4623      	mov	r3, r4
   14bde:	d807      	bhi.n	14bf0 <memmove+0x20>
   14be0:	1e43      	subs	r3, r0, #1
   14be2:	42a1      	cmp	r1, r4
   14be4:	d008      	beq.n	14bf8 <memmove+0x28>
   14be6:	f811 2b01 	ldrb.w	r2, [r1], #1
   14bea:	f803 2f01 	strb.w	r2, [r3, #1]!
   14bee:	e7f8      	b.n	14be2 <memmove+0x12>
   14bf0:	4402      	add	r2, r0
   14bf2:	4601      	mov	r1, r0
   14bf4:	428a      	cmp	r2, r1
   14bf6:	d100      	bne.n	14bfa <memmove+0x2a>
   14bf8:	bd10      	pop	{r4, pc}
   14bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   14bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   14c02:	e7f7      	b.n	14bf4 <memmove+0x24>

00014c04 <memset>:
   14c04:	4402      	add	r2, r0
   14c06:	4603      	mov	r3, r0
   14c08:	4293      	cmp	r3, r2
   14c0a:	d100      	bne.n	14c0e <memset+0xa>
   14c0c:	4770      	bx	lr
   14c0e:	f803 1b01 	strb.w	r1, [r3], #1
   14c12:	e7f9      	b.n	14c08 <memset+0x4>

00014c14 <_calloc_r>:
   14c14:	434a      	muls	r2, r1
   14c16:	b513      	push	{r0, r1, r4, lr}
   14c18:	4611      	mov	r1, r2
   14c1a:	9201      	str	r2, [sp, #4]
   14c1c:	f7fb fa2a 	bl	10074 <_malloc_r>
   14c20:	4604      	mov	r4, r0
   14c22:	b118      	cbz	r0, 14c2c <_calloc_r+0x18>
   14c24:	9a01      	ldr	r2, [sp, #4]
   14c26:	2100      	movs	r1, #0
   14c28:	f7ff ffec 	bl	14c04 <memset>
   14c2c:	4620      	mov	r0, r4
   14c2e:	b002      	add	sp, #8
   14c30:	bd10      	pop	{r4, pc}

00014c32 <__sfputc_r>:
   14c32:	6893      	ldr	r3, [r2, #8]
   14c34:	3b01      	subs	r3, #1
   14c36:	2b00      	cmp	r3, #0
   14c38:	6093      	str	r3, [r2, #8]
   14c3a:	b410      	push	{r4}
   14c3c:	da08      	bge.n	14c50 <__sfputc_r+0x1e>
   14c3e:	6994      	ldr	r4, [r2, #24]
   14c40:	42a3      	cmp	r3, r4
   14c42:	db01      	blt.n	14c48 <__sfputc_r+0x16>
   14c44:	290a      	cmp	r1, #10
   14c46:	d103      	bne.n	14c50 <__sfputc_r+0x1e>
   14c48:	f85d 4b04 	ldr.w	r4, [sp], #4
   14c4c:	f7fb bf54 	b.w	10af8 <__swbuf_r>
   14c50:	6813      	ldr	r3, [r2, #0]
   14c52:	1c58      	adds	r0, r3, #1
   14c54:	6010      	str	r0, [r2, #0]
   14c56:	4608      	mov	r0, r1
   14c58:	7019      	strb	r1, [r3, #0]
   14c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
   14c5e:	4770      	bx	lr

00014c60 <__sfputs_r>:
   14c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c62:	4606      	mov	r6, r0
   14c64:	460f      	mov	r7, r1
   14c66:	4614      	mov	r4, r2
   14c68:	18d5      	adds	r5, r2, r3
   14c6a:	42ac      	cmp	r4, r5
   14c6c:	d101      	bne.n	14c72 <__sfputs_r+0x12>
   14c6e:	2000      	movs	r0, #0
   14c70:	e007      	b.n	14c82 <__sfputs_r+0x22>
   14c72:	463a      	mov	r2, r7
   14c74:	f814 1b01 	ldrb.w	r1, [r4], #1
   14c78:	4630      	mov	r0, r6
   14c7a:	f7ff ffda 	bl	14c32 <__sfputc_r>
   14c7e:	1c43      	adds	r3, r0, #1
   14c80:	d1f3      	bne.n	14c6a <__sfputs_r+0xa>
   14c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014c84 <__cvt>:
   14c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14c88:	ec55 4b10 	vmov	r4, r5, d0
   14c8c:	2d00      	cmp	r5, #0
   14c8e:	460e      	mov	r6, r1
   14c90:	4619      	mov	r1, r3
   14c92:	462b      	mov	r3, r5
   14c94:	bfb4      	ite	lt
   14c96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   14c9a:	2300      	movge	r3, #0
   14c9c:	4691      	mov	r9, r2
   14c9e:	bfbf      	itttt	lt
   14ca0:	4622      	movlt	r2, r4
   14ca2:	461d      	movlt	r5, r3
   14ca4:	232d      	movlt	r3, #45	; 0x2d
   14ca6:	4614      	movlt	r4, r2
   14ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   14cac:	700b      	strb	r3, [r1, #0]
   14cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14cb0:	f023 0820 	bic.w	r8, r3, #32
   14cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   14cb8:	d005      	beq.n	14cc6 <__cvt+0x42>
   14cba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   14cbe:	d100      	bne.n	14cc2 <__cvt+0x3e>
   14cc0:	3601      	adds	r6, #1
   14cc2:	2102      	movs	r1, #2
   14cc4:	e000      	b.n	14cc8 <__cvt+0x44>
   14cc6:	2103      	movs	r1, #3
   14cc8:	ab03      	add	r3, sp, #12
   14cca:	4632      	mov	r2, r6
   14ccc:	9301      	str	r3, [sp, #4]
   14cce:	ab02      	add	r3, sp, #8
   14cd0:	ec45 4b10 	vmov	d0, r4, r5
   14cd4:	9300      	str	r3, [sp, #0]
   14cd6:	4653      	mov	r3, sl
   14cd8:	f7f1 f83a 	bl	5d50 <_dtoa_r>
   14cdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   14ce0:	4607      	mov	r7, r0
   14ce2:	d102      	bne.n	14cea <__cvt+0x66>
   14ce4:	f019 0f01 	tst.w	r9, #1
   14ce8:	d022      	beq.n	14d30 <__cvt+0xac>
   14cea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   14cee:	eb07 0906 	add.w	r9, r7, r6
   14cf2:	d110      	bne.n	14d16 <__cvt+0x92>
   14cf4:	783b      	ldrb	r3, [r7, #0]
   14cf6:	2b30      	cmp	r3, #48	; 0x30
   14cf8:	d10a      	bne.n	14d10 <__cvt+0x8c>
   14cfa:	2200      	movs	r2, #0
   14cfc:	2300      	movs	r3, #0
   14cfe:	4620      	mov	r0, r4
   14d00:	4629      	mov	r1, r5
   14d02:	f7eb fe4d 	bl	9a0 <__aeabi_dcmpeq>
   14d06:	b918      	cbnz	r0, 14d10 <__cvt+0x8c>
   14d08:	f1c6 0601 	rsb	r6, r6, #1
   14d0c:	f8ca 6000 	str.w	r6, [sl]
   14d10:	f8da 3000 	ldr.w	r3, [sl]
   14d14:	4499      	add	r9, r3
   14d16:	2200      	movs	r2, #0
   14d18:	2300      	movs	r3, #0
   14d1a:	4620      	mov	r0, r4
   14d1c:	4629      	mov	r1, r5
   14d1e:	f7eb fe3f 	bl	9a0 <__aeabi_dcmpeq>
   14d22:	b108      	cbz	r0, 14d28 <__cvt+0xa4>
   14d24:	f8cd 900c 	str.w	r9, [sp, #12]
   14d28:	2230      	movs	r2, #48	; 0x30
   14d2a:	9b03      	ldr	r3, [sp, #12]
   14d2c:	454b      	cmp	r3, r9
   14d2e:	d307      	bcc.n	14d40 <__cvt+0xbc>
   14d30:	9b03      	ldr	r3, [sp, #12]
   14d32:	4638      	mov	r0, r7
   14d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14d36:	1bdb      	subs	r3, r3, r7
   14d38:	6013      	str	r3, [r2, #0]
   14d3a:	b004      	add	sp, #16
   14d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14d40:	1c59      	adds	r1, r3, #1
   14d42:	9103      	str	r1, [sp, #12]
   14d44:	701a      	strb	r2, [r3, #0]
   14d46:	e7f0      	b.n	14d2a <__cvt+0xa6>

00014d48 <__exponent>:
   14d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14d4a:	2900      	cmp	r1, #0
   14d4c:	4603      	mov	r3, r0
   14d4e:	bfb8      	it	lt
   14d50:	4249      	neglt	r1, r1
   14d52:	f803 2b02 	strb.w	r2, [r3], #2
   14d56:	bfb4      	ite	lt
   14d58:	222d      	movlt	r2, #45	; 0x2d
   14d5a:	222b      	movge	r2, #43	; 0x2b
   14d5c:	2909      	cmp	r1, #9
   14d5e:	7042      	strb	r2, [r0, #1]
   14d60:	dd2a      	ble.n	14db8 <__exponent+0x70>
   14d62:	f10d 0407 	add.w	r4, sp, #7
   14d66:	270a      	movs	r7, #10
   14d68:	46a4      	mov	ip, r4
   14d6a:	460a      	mov	r2, r1
   14d6c:	46a6      	mov	lr, r4
   14d6e:	3c01      	subs	r4, #1
   14d70:	2a63      	cmp	r2, #99	; 0x63
   14d72:	fb91 f6f7 	sdiv	r6, r1, r7
   14d76:	fb07 1516 	mls	r5, r7, r6, r1
   14d7a:	4631      	mov	r1, r6
   14d7c:	f105 0530 	add.w	r5, r5, #48	; 0x30
   14d80:	f80e 5c01 	strb.w	r5, [lr, #-1]
   14d84:	dcf1      	bgt.n	14d6a <__exponent+0x22>
   14d86:	3130      	adds	r1, #48	; 0x30
   14d88:	f1ae 0502 	sub.w	r5, lr, #2
   14d8c:	f804 1c01 	strb.w	r1, [r4, #-1]
   14d90:	1c44      	adds	r4, r0, #1
   14d92:	4629      	mov	r1, r5
   14d94:	4561      	cmp	r1, ip
   14d96:	d30a      	bcc.n	14dae <__exponent+0x66>
   14d98:	f10d 0209 	add.w	r2, sp, #9
   14d9c:	eba2 020e 	sub.w	r2, r2, lr
   14da0:	4565      	cmp	r5, ip
   14da2:	bf88      	it	hi
   14da4:	2200      	movhi	r2, #0
   14da6:	4413      	add	r3, r2
   14da8:	1a18      	subs	r0, r3, r0
   14daa:	b003      	add	sp, #12
   14dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14dae:	f811 2b01 	ldrb.w	r2, [r1], #1
   14db2:	f804 2f01 	strb.w	r2, [r4, #1]!
   14db6:	e7ed      	b.n	14d94 <__exponent+0x4c>
   14db8:	2330      	movs	r3, #48	; 0x30
   14dba:	3130      	adds	r1, #48	; 0x30
   14dbc:	7083      	strb	r3, [r0, #2]
   14dbe:	1d03      	adds	r3, r0, #4
   14dc0:	70c1      	strb	r1, [r0, #3]
   14dc2:	e7f1      	b.n	14da8 <__exponent+0x60>

00014dc4 <_printf_common>:
   14dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14dc8:	4616      	mov	r6, r2
   14dca:	4699      	mov	r9, r3
   14dcc:	688a      	ldr	r2, [r1, #8]
   14dce:	4607      	mov	r7, r0
   14dd0:	690b      	ldr	r3, [r1, #16]
   14dd2:	460c      	mov	r4, r1
   14dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   14dd8:	4293      	cmp	r3, r2
   14dda:	bfb8      	it	lt
   14ddc:	4613      	movlt	r3, r2
   14dde:	6033      	str	r3, [r6, #0]
   14de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   14de4:	b10a      	cbz	r2, 14dea <_printf_common+0x26>
   14de6:	3301      	adds	r3, #1
   14de8:	6033      	str	r3, [r6, #0]
   14dea:	6823      	ldr	r3, [r4, #0]
   14dec:	0699      	lsls	r1, r3, #26
   14dee:	bf42      	ittt	mi
   14df0:	6833      	ldrmi	r3, [r6, #0]
   14df2:	3302      	addmi	r3, #2
   14df4:	6033      	strmi	r3, [r6, #0]
   14df6:	6825      	ldr	r5, [r4, #0]
   14df8:	f015 0506 	ands.w	r5, r5, #6
   14dfc:	d106      	bne.n	14e0c <_printf_common+0x48>
   14dfe:	f104 0a19 	add.w	sl, r4, #25
   14e02:	68e3      	ldr	r3, [r4, #12]
   14e04:	6832      	ldr	r2, [r6, #0]
   14e06:	1a9b      	subs	r3, r3, r2
   14e08:	42ab      	cmp	r3, r5
   14e0a:	dc29      	bgt.n	14e60 <_printf_common+0x9c>
   14e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   14e10:	1e13      	subs	r3, r2, #0
   14e12:	6822      	ldr	r2, [r4, #0]
   14e14:	bf18      	it	ne
   14e16:	2301      	movne	r3, #1
   14e18:	0692      	lsls	r2, r2, #26
   14e1a:	d42e      	bmi.n	14e7a <_printf_common+0xb6>
   14e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14e20:	4649      	mov	r1, r9
   14e22:	4638      	mov	r0, r7
   14e24:	47c0      	blx	r8
   14e26:	3001      	adds	r0, #1
   14e28:	d021      	beq.n	14e6e <_printf_common+0xaa>
   14e2a:	6823      	ldr	r3, [r4, #0]
   14e2c:	341a      	adds	r4, #26
   14e2e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   14e32:	f003 0306 	and.w	r3, r3, #6
   14e36:	6832      	ldr	r2, [r6, #0]
   14e38:	2600      	movs	r6, #0
   14e3a:	2b04      	cmp	r3, #4
   14e3c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   14e40:	bf08      	it	eq
   14e42:	1aad      	subeq	r5, r5, r2
   14e44:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   14e48:	bf14      	ite	ne
   14e4a:	2500      	movne	r5, #0
   14e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   14e50:	4293      	cmp	r3, r2
   14e52:	bfc4      	itt	gt
   14e54:	1a9b      	subgt	r3, r3, r2
   14e56:	18ed      	addgt	r5, r5, r3
   14e58:	42b5      	cmp	r5, r6
   14e5a:	d11a      	bne.n	14e92 <_printf_common+0xce>
   14e5c:	2000      	movs	r0, #0
   14e5e:	e008      	b.n	14e72 <_printf_common+0xae>
   14e60:	2301      	movs	r3, #1
   14e62:	4652      	mov	r2, sl
   14e64:	4649      	mov	r1, r9
   14e66:	4638      	mov	r0, r7
   14e68:	47c0      	blx	r8
   14e6a:	3001      	adds	r0, #1
   14e6c:	d103      	bne.n	14e76 <_printf_common+0xb2>
   14e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e76:	3501      	adds	r5, #1
   14e78:	e7c3      	b.n	14e02 <_printf_common+0x3e>
   14e7a:	18e1      	adds	r1, r4, r3
   14e7c:	1c5a      	adds	r2, r3, #1
   14e7e:	2030      	movs	r0, #48	; 0x30
   14e80:	3302      	adds	r3, #2
   14e82:	4422      	add	r2, r4
   14e84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   14e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   14e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   14e90:	e7c4      	b.n	14e1c <_printf_common+0x58>
   14e92:	2301      	movs	r3, #1
   14e94:	4622      	mov	r2, r4
   14e96:	4649      	mov	r1, r9
   14e98:	4638      	mov	r0, r7
   14e9a:	47c0      	blx	r8
   14e9c:	3001      	adds	r0, #1
   14e9e:	d0e6      	beq.n	14e6e <_printf_common+0xaa>
   14ea0:	3601      	adds	r6, #1
   14ea2:	e7d9      	b.n	14e58 <_printf_common+0x94>

00014ea4 <_raise_r>:
   14ea4:	291f      	cmp	r1, #31
   14ea6:	b538      	push	{r3, r4, r5, lr}
   14ea8:	4604      	mov	r4, r0
   14eaa:	460d      	mov	r5, r1
   14eac:	d904      	bls.n	14eb8 <_raise_r+0x14>
   14eae:	2316      	movs	r3, #22
   14eb0:	6003      	str	r3, [r0, #0]
   14eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14eb6:	bd38      	pop	{r3, r4, r5, pc}
   14eb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   14eba:	b112      	cbz	r2, 14ec2 <_raise_r+0x1e>
   14ebc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   14ec0:	b94b      	cbnz	r3, 14ed6 <_raise_r+0x32>
   14ec2:	4620      	mov	r0, r4
   14ec4:	f000 f816 	bl	14ef4 <_getpid_r>
   14ec8:	462a      	mov	r2, r5
   14eca:	4601      	mov	r1, r0
   14ecc:	4620      	mov	r0, r4
   14ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14ed2:	f7fb bde5 	b.w	10aa0 <_kill_r>
   14ed6:	2b01      	cmp	r3, #1
   14ed8:	d00a      	beq.n	14ef0 <_raise_r+0x4c>
   14eda:	1c59      	adds	r1, r3, #1
   14edc:	d103      	bne.n	14ee6 <_raise_r+0x42>
   14ede:	2316      	movs	r3, #22
   14ee0:	6003      	str	r3, [r0, #0]
   14ee2:	2001      	movs	r0, #1
   14ee4:	e7e7      	b.n	14eb6 <_raise_r+0x12>
   14ee6:	2400      	movs	r4, #0
   14ee8:	4628      	mov	r0, r5
   14eea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   14eee:	4798      	blx	r3
   14ef0:	2000      	movs	r0, #0
   14ef2:	e7e0      	b.n	14eb6 <_raise_r+0x12>

00014ef4 <_getpid_r>:
   14ef4:	f7fd bb5e 	b.w	125b4 <_getpid>

00014ef8 <strnlen>:
   14ef8:	4602      	mov	r2, r0
   14efa:	4401      	add	r1, r0
   14efc:	b510      	push	{r4, lr}
   14efe:	428a      	cmp	r2, r1
   14f00:	4613      	mov	r3, r2
   14f02:	d003      	beq.n	14f0c <strnlen+0x14>
   14f04:	781c      	ldrb	r4, [r3, #0]
   14f06:	3201      	adds	r2, #1
   14f08:	2c00      	cmp	r4, #0
   14f0a:	d1f8      	bne.n	14efe <strnlen+0x6>
   14f0c:	1a18      	subs	r0, r3, r0
   14f0e:	bd10      	pop	{r4, pc}

00014f10 <sulp>:
   14f10:	b570      	push	{r4, r5, r6, lr}
   14f12:	4604      	mov	r4, r0
   14f14:	460d      	mov	r5, r1
   14f16:	4616      	mov	r6, r2
   14f18:	ec45 4b10 	vmov	d0, r4, r5
   14f1c:	f7fc fdce 	bl	11abc <__ulp>
   14f20:	ec51 0b10 	vmov	r0, r1, d0
   14f24:	b17e      	cbz	r6, 14f46 <sulp+0x36>
   14f26:	f3c5 530a 	ubfx	r3, r5, #20, #11
   14f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   14f2e:	2b00      	cmp	r3, #0
   14f30:	dd09      	ble.n	14f46 <sulp+0x36>
   14f32:	051b      	lsls	r3, r3, #20
   14f34:	2400      	movs	r4, #0
   14f36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   14f3a:	4622      	mov	r2, r4
   14f3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   14f40:	462b      	mov	r3, r5
   14f42:	f7eb fac5 	bl	4d0 <__aeabi_dmul>
   14f46:	bd70      	pop	{r4, r5, r6, pc}

00014f48 <_vsniprintf_r>:
   14f48:	b530      	push	{r4, r5, lr}
   14f4a:	4614      	mov	r4, r2
   14f4c:	b09b      	sub	sp, #108	; 0x6c
   14f4e:	4605      	mov	r5, r0
   14f50:	461a      	mov	r2, r3
   14f52:	2c00      	cmp	r4, #0
   14f54:	da05      	bge.n	14f62 <_vsniprintf_r+0x1a>
   14f56:	238b      	movs	r3, #139	; 0x8b
   14f58:	6003      	str	r3, [r0, #0]
   14f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14f5e:	b01b      	add	sp, #108	; 0x6c
   14f60:	bd30      	pop	{r4, r5, pc}
   14f62:	f44f 7302 	mov.w	r3, #520	; 0x208
   14f66:	9100      	str	r1, [sp, #0]
   14f68:	9104      	str	r1, [sp, #16]
   14f6a:	4669      	mov	r1, sp
   14f6c:	f8ad 300c 	strh.w	r3, [sp, #12]
   14f70:	bf14      	ite	ne
   14f72:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   14f76:	4623      	moveq	r3, r4
   14f78:	9302      	str	r3, [sp, #8]
   14f7a:	9305      	str	r3, [sp, #20]
   14f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14f80:	f8ad 300e 	strh.w	r3, [sp, #14]
   14f84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14f86:	f7fc fe6f 	bl	11c68 <_svfiprintf_r>
   14f8a:	1c43      	adds	r3, r0, #1
   14f8c:	bfbc      	itt	lt
   14f8e:	238b      	movlt	r3, #139	; 0x8b
   14f90:	602b      	strlt	r3, [r5, #0]
   14f92:	2c00      	cmp	r4, #0
   14f94:	d0e3      	beq.n	14f5e <_vsniprintf_r+0x16>
   14f96:	9b00      	ldr	r3, [sp, #0]
   14f98:	2200      	movs	r2, #0
   14f9a:	701a      	strb	r2, [r3, #0]
   14f9c:	e7df      	b.n	14f5e <_vsniprintf_r+0x16>

00014f9e <quorem>:
   14f9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa2:	6903      	ldr	r3, [r0, #16]
   14fa4:	4607      	mov	r7, r0
   14fa6:	690c      	ldr	r4, [r1, #16]
   14fa8:	42a3      	cmp	r3, r4
   14faa:	f2c0 8085 	blt.w	150b8 <quorem+0x11a>
   14fae:	3c01      	subs	r4, #1
   14fb0:	f100 0514 	add.w	r5, r0, #20
   14fb4:	f101 0814 	add.w	r8, r1, #20
   14fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   14fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   14fc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   14fc4:	9301      	str	r3, [sp, #4]
   14fc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   14fca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   14fce:	3301      	adds	r3, #1
   14fd0:	429a      	cmp	r2, r3
   14fd2:	fbb2 f6f3 	udiv	r6, r2, r3
   14fd6:	d333      	bcc.n	15040 <quorem+0xa2>
   14fd8:	f04f 0e00 	mov.w	lr, #0
   14fdc:	4640      	mov	r0, r8
   14fde:	46ac      	mov	ip, r5
   14fe0:	46f2      	mov	sl, lr
   14fe2:	f850 2b04 	ldr.w	r2, [r0], #4
   14fe6:	b293      	uxth	r3, r2
   14fe8:	4581      	cmp	r9, r0
   14fea:	ea4f 4212 	mov.w	r2, r2, lsr #16
   14fee:	fb06 e303 	mla	r3, r6, r3, lr
   14ff2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   14ff6:	b29b      	uxth	r3, r3
   14ff8:	fb06 e202 	mla	r2, r6, r2, lr
   14ffc:	ebaa 0303 	sub.w	r3, sl, r3
   15000:	f8dc a000 	ldr.w	sl, [ip]
   15004:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   15008:	fa1f fa8a 	uxth.w	sl, sl
   1500c:	4453      	add	r3, sl
   1500e:	fa1f fa82 	uxth.w	sl, r2
   15012:	f8dc 2000 	ldr.w	r2, [ip]
   15016:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1501a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1501e:	b29b      	uxth	r3, r3
   15020:	ea4f 4a22 	mov.w	sl, r2, asr #16
   15024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15028:	f84c 3b04 	str.w	r3, [ip], #4
   1502c:	d2d9      	bcs.n	14fe2 <quorem+0x44>
   1502e:	f855 300b 	ldr.w	r3, [r5, fp]
   15032:	b92b      	cbnz	r3, 15040 <quorem+0xa2>
   15034:	9b01      	ldr	r3, [sp, #4]
   15036:	3b04      	subs	r3, #4
   15038:	429d      	cmp	r5, r3
   1503a:	461a      	mov	r2, r3
   1503c:	d330      	bcc.n	150a0 <quorem+0x102>
   1503e:	613c      	str	r4, [r7, #16]
   15040:	4638      	mov	r0, r7
   15042:	f000 fa1e 	bl	15482 <__mcmp>
   15046:	2800      	cmp	r0, #0
   15048:	db26      	blt.n	15098 <quorem+0xfa>
   1504a:	3601      	adds	r6, #1
   1504c:	4628      	mov	r0, r5
   1504e:	f04f 0c00 	mov.w	ip, #0
   15052:	f858 1b04 	ldr.w	r1, [r8], #4
   15056:	f8d0 e000 	ldr.w	lr, [r0]
   1505a:	b28b      	uxth	r3, r1
   1505c:	45c1      	cmp	r9, r8
   1505e:	fa1f f28e 	uxth.w	r2, lr
   15062:	ebac 0303 	sub.w	r3, ip, r3
   15066:	4413      	add	r3, r2
   15068:	ea4f 4211 	mov.w	r2, r1, lsr #16
   1506c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   15070:	eb02 4223 	add.w	r2, r2, r3, asr #16
   15074:	b29b      	uxth	r3, r3
   15076:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1507a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1507e:	f840 3b04 	str.w	r3, [r0], #4
   15082:	d2e6      	bcs.n	15052 <quorem+0xb4>
   15084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   15088:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1508c:	b922      	cbnz	r2, 15098 <quorem+0xfa>
   1508e:	3b04      	subs	r3, #4
   15090:	429d      	cmp	r5, r3
   15092:	461a      	mov	r2, r3
   15094:	d30a      	bcc.n	150ac <quorem+0x10e>
   15096:	613c      	str	r4, [r7, #16]
   15098:	4630      	mov	r0, r6
   1509a:	b003      	add	sp, #12
   1509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a0:	6812      	ldr	r2, [r2, #0]
   150a2:	3b04      	subs	r3, #4
   150a4:	2a00      	cmp	r2, #0
   150a6:	d1ca      	bne.n	1503e <quorem+0xa0>
   150a8:	3c01      	subs	r4, #1
   150aa:	e7c5      	b.n	15038 <quorem+0x9a>
   150ac:	6812      	ldr	r2, [r2, #0]
   150ae:	3b04      	subs	r3, #4
   150b0:	2a00      	cmp	r2, #0
   150b2:	d1f0      	bne.n	15096 <quorem+0xf8>
   150b4:	3c01      	subs	r4, #1
   150b6:	e7eb      	b.n	15090 <quorem+0xf2>
   150b8:	2000      	movs	r0, #0
   150ba:	e7ee      	b.n	1509a <quorem+0xfc>

000150bc <__sfmoreglue>:
   150bc:	b570      	push	{r4, r5, r6, lr}
   150be:	2268      	movs	r2, #104	; 0x68
   150c0:	1e4d      	subs	r5, r1, #1
   150c2:	460e      	mov	r6, r1
   150c4:	4355      	muls	r5, r2
   150c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
   150ca:	f7fa ffd3 	bl	10074 <_malloc_r>
   150ce:	4604      	mov	r4, r0
   150d0:	b140      	cbz	r0, 150e4 <__sfmoreglue+0x28>
   150d2:	2100      	movs	r1, #0
   150d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   150d8:	e9c0 1600 	strd	r1, r6, [r0]
   150dc:	300c      	adds	r0, #12
   150de:	60a0      	str	r0, [r4, #8]
   150e0:	f7ff fd90 	bl	14c04 <memset>
   150e4:	4620      	mov	r0, r4
   150e6:	bd70      	pop	{r4, r5, r6, pc}

000150e8 <_fwalk_reent>:
   150e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   150ec:	4606      	mov	r6, r0
   150ee:	4688      	mov	r8, r1
   150f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
   150f4:	2700      	movs	r7, #0
   150f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   150fa:	f1b9 0901 	subs.w	r9, r9, #1
   150fe:	d505      	bpl.n	1510c <_fwalk_reent+0x24>
   15100:	6824      	ldr	r4, [r4, #0]
   15102:	2c00      	cmp	r4, #0
   15104:	d1f7      	bne.n	150f6 <_fwalk_reent+0xe>
   15106:	4638      	mov	r0, r7
   15108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1510c:	89ab      	ldrh	r3, [r5, #12]
   1510e:	2b01      	cmp	r3, #1
   15110:	d907      	bls.n	15122 <_fwalk_reent+0x3a>
   15112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   15116:	3301      	adds	r3, #1
   15118:	d003      	beq.n	15122 <_fwalk_reent+0x3a>
   1511a:	4629      	mov	r1, r5
   1511c:	4630      	mov	r0, r6
   1511e:	47c0      	blx	r8
   15120:	4307      	orrs	r7, r0
   15122:	3568      	adds	r5, #104	; 0x68
   15124:	e7e9      	b.n	150fa <_fwalk_reent+0x12>

00015126 <rshift>:
   15126:	6903      	ldr	r3, [r0, #16]
   15128:	114a      	asrs	r2, r1, #5
   1512a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   1512e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15132:	f100 0414 	add.w	r4, r0, #20
   15136:	dd45      	ble.n	151c4 <rshift+0x9e>
   15138:	f011 011f 	ands.w	r1, r1, #31
   1513c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   15140:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   15144:	d10c      	bne.n	15160 <rshift+0x3a>
   15146:	f100 0710 	add.w	r7, r0, #16
   1514a:	4629      	mov	r1, r5
   1514c:	42b1      	cmp	r1, r6
   1514e:	d334      	bcc.n	151ba <rshift+0x94>
   15150:	1a9b      	subs	r3, r3, r2
   15152:	1eea      	subs	r2, r5, #3
   15154:	009b      	lsls	r3, r3, #2
   15156:	4296      	cmp	r6, r2
   15158:	bf38      	it	cc
   1515a:	2300      	movcc	r3, #0
   1515c:	4423      	add	r3, r4
   1515e:	e015      	b.n	1518c <rshift+0x66>
   15160:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   15164:	f1c1 0820 	rsb	r8, r1, #32
   15168:	f105 0e04 	add.w	lr, r5, #4
   1516c:	46a1      	mov	r9, r4
   1516e:	40cf      	lsrs	r7, r1
   15170:	4576      	cmp	r6, lr
   15172:	46f4      	mov	ip, lr
   15174:	d815      	bhi.n	151a2 <rshift+0x7c>
   15176:	1a9a      	subs	r2, r3, r2
   15178:	3501      	adds	r5, #1
   1517a:	0092      	lsls	r2, r2, #2
   1517c:	3a04      	subs	r2, #4
   1517e:	42ae      	cmp	r6, r5
   15180:	bf38      	it	cc
   15182:	2200      	movcc	r2, #0
   15184:	18a3      	adds	r3, r4, r2
   15186:	50a7      	str	r7, [r4, r2]
   15188:	b107      	cbz	r7, 1518c <rshift+0x66>
   1518a:	3304      	adds	r3, #4
   1518c:	1b1a      	subs	r2, r3, r4
   1518e:	42a3      	cmp	r3, r4
   15190:	ea4f 02a2 	mov.w	r2, r2, asr #2
   15194:	bf08      	it	eq
   15196:	2300      	moveq	r3, #0
   15198:	6102      	str	r2, [r0, #16]
   1519a:	bf08      	it	eq
   1519c:	6143      	streq	r3, [r0, #20]
   1519e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   151a2:	f8dc c000 	ldr.w	ip, [ip]
   151a6:	fa0c fc08 	lsl.w	ip, ip, r8
   151aa:	ea4c 0707 	orr.w	r7, ip, r7
   151ae:	f849 7b04 	str.w	r7, [r9], #4
   151b2:	f85e 7b04 	ldr.w	r7, [lr], #4
   151b6:	40cf      	lsrs	r7, r1
   151b8:	e7da      	b.n	15170 <rshift+0x4a>
   151ba:	f851 cb04 	ldr.w	ip, [r1], #4
   151be:	f847 cf04 	str.w	ip, [r7, #4]!
   151c2:	e7c3      	b.n	1514c <rshift+0x26>
   151c4:	4623      	mov	r3, r4
   151c6:	e7e1      	b.n	1518c <rshift+0x66>

000151c8 <__hexdig_fun>:
   151c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   151cc:	2b09      	cmp	r3, #9
   151ce:	d802      	bhi.n	151d6 <__hexdig_fun+0xe>
   151d0:	3820      	subs	r0, #32
   151d2:	b2c0      	uxtb	r0, r0
   151d4:	4770      	bx	lr
   151d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   151da:	2b05      	cmp	r3, #5
   151dc:	d801      	bhi.n	151e2 <__hexdig_fun+0x1a>
   151de:	3847      	subs	r0, #71	; 0x47
   151e0:	e7f7      	b.n	151d2 <__hexdig_fun+0xa>
   151e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   151e6:	2b05      	cmp	r3, #5
   151e8:	d801      	bhi.n	151ee <__hexdig_fun+0x26>
   151ea:	3827      	subs	r0, #39	; 0x27
   151ec:	e7f1      	b.n	151d2 <__hexdig_fun+0xa>
   151ee:	2000      	movs	r0, #0
   151f0:	4770      	bx	lr

000151f2 <L_shift>:
   151f2:	f1c2 0208 	rsb	r2, r2, #8
   151f6:	0092      	lsls	r2, r2, #2
   151f8:	b570      	push	{r4, r5, r6, lr}
   151fa:	f1c2 0620 	rsb	r6, r2, #32
   151fe:	6843      	ldr	r3, [r0, #4]
   15200:	6804      	ldr	r4, [r0, #0]
   15202:	fa03 f506 	lsl.w	r5, r3, r6
   15206:	40d3      	lsrs	r3, r2
   15208:	432c      	orrs	r4, r5
   1520a:	6004      	str	r4, [r0, #0]
   1520c:	f840 3f04 	str.w	r3, [r0, #4]!
   15210:	4288      	cmp	r0, r1
   15212:	d3f4      	bcc.n	151fe <L_shift+0xc>
   15214:	bd70      	pop	{r4, r5, r6, pc}

00015216 <__match>:
   15216:	6803      	ldr	r3, [r0, #0]
   15218:	3301      	adds	r3, #1
   1521a:	b530      	push	{r4, r5, lr}
   1521c:	f811 4b01 	ldrb.w	r4, [r1], #1
   15220:	b914      	cbnz	r4, 15228 <__match+0x12>
   15222:	6003      	str	r3, [r0, #0]
   15224:	2001      	movs	r0, #1
   15226:	bd30      	pop	{r4, r5, pc}
   15228:	f813 2b01 	ldrb.w	r2, [r3], #1
   1522c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   15230:	2d19      	cmp	r5, #25
   15232:	bf98      	it	ls
   15234:	3220      	addls	r2, #32
   15236:	42a2      	cmp	r2, r4
   15238:	d0f0      	beq.n	1521c <__match+0x6>
   1523a:	2000      	movs	r0, #0
   1523c:	e7f3      	b.n	15226 <__match+0x10>

0001523e <__hexnan>:
   1523e:	680b      	ldr	r3, [r1, #0]
   15240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15244:	115e      	asrs	r6, r3, #5
   15246:	f013 031f 	ands.w	r3, r3, #31
   1524a:	f04f 0500 	mov.w	r5, #0
   1524e:	b087      	sub	sp, #28
   15250:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   15254:	4690      	mov	r8, r2
   15256:	4682      	mov	sl, r0
   15258:	6802      	ldr	r2, [r0, #0]
   1525a:	bf18      	it	ne
   1525c:	3604      	addne	r6, #4
   1525e:	46ab      	mov	fp, r5
   15260:	9301      	str	r3, [sp, #4]
   15262:	1f37      	subs	r7, r6, #4
   15264:	f846 5c04 	str.w	r5, [r6, #-4]
   15268:	9502      	str	r5, [sp, #8]
   1526a:	46b9      	mov	r9, r7
   1526c:	463c      	mov	r4, r7
   1526e:	1c53      	adds	r3, r2, #1
   15270:	7851      	ldrb	r1, [r2, #1]
   15272:	9303      	str	r3, [sp, #12]
   15274:	b341      	cbz	r1, 152c8 <__hexnan+0x8a>
   15276:	4608      	mov	r0, r1
   15278:	9205      	str	r2, [sp, #20]
   1527a:	9104      	str	r1, [sp, #16]
   1527c:	f7ff ffa4 	bl	151c8 <__hexdig_fun>
   15280:	2800      	cmp	r0, #0
   15282:	d14f      	bne.n	15324 <__hexnan+0xe6>
   15284:	9904      	ldr	r1, [sp, #16]
   15286:	9a05      	ldr	r2, [sp, #20]
   15288:	2920      	cmp	r1, #32
   1528a:	d818      	bhi.n	152be <__hexnan+0x80>
   1528c:	9b02      	ldr	r3, [sp, #8]
   1528e:	459b      	cmp	fp, r3
   15290:	dd13      	ble.n	152ba <__hexnan+0x7c>
   15292:	454c      	cmp	r4, r9
   15294:	d206      	bcs.n	152a4 <__hexnan+0x66>
   15296:	2d07      	cmp	r5, #7
   15298:	dc04      	bgt.n	152a4 <__hexnan+0x66>
   1529a:	462a      	mov	r2, r5
   1529c:	4649      	mov	r1, r9
   1529e:	4620      	mov	r0, r4
   152a0:	f7ff ffa7 	bl	151f2 <L_shift>
   152a4:	4544      	cmp	r4, r8
   152a6:	d94f      	bls.n	15348 <__hexnan+0x10a>
   152a8:	2300      	movs	r3, #0
   152aa:	f1a4 0904 	sub.w	r9, r4, #4
   152ae:	f8cd b008 	str.w	fp, [sp, #8]
   152b2:	f844 3c04 	str.w	r3, [r4, #-4]
   152b6:	461d      	mov	r5, r3
   152b8:	464c      	mov	r4, r9
   152ba:	9a03      	ldr	r2, [sp, #12]
   152bc:	e7d7      	b.n	1526e <__hexnan+0x30>
   152be:	2929      	cmp	r1, #41	; 0x29
   152c0:	d155      	bne.n	1536e <__hexnan+0x130>
   152c2:	3202      	adds	r2, #2
   152c4:	f8ca 2000 	str.w	r2, [sl]
   152c8:	f1bb 0f00 	cmp.w	fp, #0
   152cc:	d04f      	beq.n	1536e <__hexnan+0x130>
   152ce:	454c      	cmp	r4, r9
   152d0:	d206      	bcs.n	152e0 <__hexnan+0xa2>
   152d2:	2d07      	cmp	r5, #7
   152d4:	dc04      	bgt.n	152e0 <__hexnan+0xa2>
   152d6:	462a      	mov	r2, r5
   152d8:	4649      	mov	r1, r9
   152da:	4620      	mov	r0, r4
   152dc:	f7ff ff89 	bl	151f2 <L_shift>
   152e0:	4544      	cmp	r4, r8
   152e2:	d933      	bls.n	1534c <__hexnan+0x10e>
   152e4:	f1a8 0204 	sub.w	r2, r8, #4
   152e8:	4623      	mov	r3, r4
   152ea:	f853 1b04 	ldr.w	r1, [r3], #4
   152ee:	429f      	cmp	r7, r3
   152f0:	f842 1f04 	str.w	r1, [r2, #4]!
   152f4:	d2f9      	bcs.n	152ea <__hexnan+0xac>
   152f6:	1b3b      	subs	r3, r7, r4
   152f8:	3e03      	subs	r6, #3
   152fa:	3401      	adds	r4, #1
   152fc:	2200      	movs	r2, #0
   152fe:	f023 0303 	bic.w	r3, r3, #3
   15302:	3304      	adds	r3, #4
   15304:	42b4      	cmp	r4, r6
   15306:	bf88      	it	hi
   15308:	2304      	movhi	r3, #4
   1530a:	4443      	add	r3, r8
   1530c:	f843 2b04 	str.w	r2, [r3], #4
   15310:	429f      	cmp	r7, r3
   15312:	d2fb      	bcs.n	1530c <__hexnan+0xce>
   15314:	683b      	ldr	r3, [r7, #0]
   15316:	b91b      	cbnz	r3, 15320 <__hexnan+0xe2>
   15318:	4547      	cmp	r7, r8
   1531a:	d126      	bne.n	1536a <__hexnan+0x12c>
   1531c:	2301      	movs	r3, #1
   1531e:	603b      	str	r3, [r7, #0]
   15320:	2005      	movs	r0, #5
   15322:	e025      	b.n	15370 <__hexnan+0x132>
   15324:	3501      	adds	r5, #1
   15326:	f10b 0b01 	add.w	fp, fp, #1
   1532a:	2d08      	cmp	r5, #8
   1532c:	dd05      	ble.n	1533a <__hexnan+0xfc>
   1532e:	4544      	cmp	r4, r8
   15330:	d9c3      	bls.n	152ba <__hexnan+0x7c>
   15332:	2300      	movs	r3, #0
   15334:	3c04      	subs	r4, #4
   15336:	2501      	movs	r5, #1
   15338:	6023      	str	r3, [r4, #0]
   1533a:	6822      	ldr	r2, [r4, #0]
   1533c:	f000 000f 	and.w	r0, r0, #15
   15340:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   15344:	6022      	str	r2, [r4, #0]
   15346:	e7b8      	b.n	152ba <__hexnan+0x7c>
   15348:	2508      	movs	r5, #8
   1534a:	e7b6      	b.n	152ba <__hexnan+0x7c>
   1534c:	9b01      	ldr	r3, [sp, #4]
   1534e:	2b00      	cmp	r3, #0
   15350:	d0e0      	beq.n	15314 <__hexnan+0xd6>
   15352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15356:	f1c3 0320 	rsb	r3, r3, #32
   1535a:	fa22 f303 	lsr.w	r3, r2, r3
   1535e:	f856 2c04 	ldr.w	r2, [r6, #-4]
   15362:	401a      	ands	r2, r3
   15364:	f846 2c04 	str.w	r2, [r6, #-4]
   15368:	e7d4      	b.n	15314 <__hexnan+0xd6>
   1536a:	3f04      	subs	r7, #4
   1536c:	e7d2      	b.n	15314 <__hexnan+0xd6>
   1536e:	2004      	movs	r0, #4
   15370:	b007      	add	sp, #28
   15372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015376 <__swhatbuf_r>:
   15376:	b570      	push	{r4, r5, r6, lr}
   15378:	460e      	mov	r6, r1
   1537a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1537e:	b096      	sub	sp, #88	; 0x58
   15380:	4614      	mov	r4, r2
   15382:	2900      	cmp	r1, #0
   15384:	461d      	mov	r5, r3
   15386:	da08      	bge.n	1539a <__swhatbuf_r+0x24>
   15388:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   1538c:	2200      	movs	r2, #0
   1538e:	602a      	str	r2, [r5, #0]
   15390:	061a      	lsls	r2, r3, #24
   15392:	d410      	bmi.n	153b6 <__swhatbuf_r+0x40>
   15394:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15398:	e00e      	b.n	153b8 <__swhatbuf_r+0x42>
   1539a:	466a      	mov	r2, sp
   1539c:	f7fc fd86 	bl	11eac <_fstat_r>
   153a0:	2800      	cmp	r0, #0
   153a2:	dbf1      	blt.n	15388 <__swhatbuf_r+0x12>
   153a4:	9a01      	ldr	r2, [sp, #4]
   153a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   153aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   153ae:	425a      	negs	r2, r3
   153b0:	415a      	adcs	r2, r3
   153b2:	602a      	str	r2, [r5, #0]
   153b4:	e7ee      	b.n	15394 <__swhatbuf_r+0x1e>
   153b6:	2340      	movs	r3, #64	; 0x40
   153b8:	2000      	movs	r0, #0
   153ba:	6023      	str	r3, [r4, #0]
   153bc:	b016      	add	sp, #88	; 0x58
   153be:	bd70      	pop	{r4, r5, r6, pc}

000153c0 <__ascii_mbtowc>:
   153c0:	b082      	sub	sp, #8
   153c2:	b901      	cbnz	r1, 153c6 <__ascii_mbtowc+0x6>
   153c4:	a901      	add	r1, sp, #4
   153c6:	b142      	cbz	r2, 153da <__ascii_mbtowc+0x1a>
   153c8:	b14b      	cbz	r3, 153de <__ascii_mbtowc+0x1e>
   153ca:	7813      	ldrb	r3, [r2, #0]
   153cc:	600b      	str	r3, [r1, #0]
   153ce:	7812      	ldrb	r2, [r2, #0]
   153d0:	1e10      	subs	r0, r2, #0
   153d2:	bf18      	it	ne
   153d4:	2001      	movne	r0, #1
   153d6:	b002      	add	sp, #8
   153d8:	4770      	bx	lr
   153da:	4610      	mov	r0, r2
   153dc:	e7fb      	b.n	153d6 <__ascii_mbtowc+0x16>
   153de:	f06f 0001 	mvn.w	r0, #1
   153e2:	e7f8      	b.n	153d6 <__ascii_mbtowc+0x16>

000153e4 <__hi0bits>:
   153e4:	0c03      	lsrs	r3, r0, #16
   153e6:	041b      	lsls	r3, r3, #16
   153e8:	b9d3      	cbnz	r3, 15420 <__hi0bits+0x3c>
   153ea:	0400      	lsls	r0, r0, #16
   153ec:	2310      	movs	r3, #16
   153ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   153f2:	bf04      	itt	eq
   153f4:	0200      	lsleq	r0, r0, #8
   153f6:	3308      	addeq	r3, #8
   153f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   153fc:	bf04      	itt	eq
   153fe:	0100      	lsleq	r0, r0, #4
   15400:	3304      	addeq	r3, #4
   15402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   15406:	bf04      	itt	eq
   15408:	0080      	lsleq	r0, r0, #2
   1540a:	3302      	addeq	r3, #2
   1540c:	2800      	cmp	r0, #0
   1540e:	db05      	blt.n	1541c <__hi0bits+0x38>
   15410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   15414:	f103 0301 	add.w	r3, r3, #1
   15418:	bf08      	it	eq
   1541a:	2320      	moveq	r3, #32
   1541c:	4618      	mov	r0, r3
   1541e:	4770      	bx	lr
   15420:	2300      	movs	r3, #0
   15422:	e7e4      	b.n	153ee <__hi0bits+0xa>

00015424 <__lo0bits>:
   15424:	6803      	ldr	r3, [r0, #0]
   15426:	4601      	mov	r1, r0
   15428:	f013 0207 	ands.w	r2, r3, #7
   1542c:	d00b      	beq.n	15446 <__lo0bits+0x22>
   1542e:	07da      	lsls	r2, r3, #31
   15430:	d423      	bmi.n	1547a <__lo0bits+0x56>
   15432:	0798      	lsls	r0, r3, #30
   15434:	bf47      	ittee	mi
   15436:	085b      	lsrmi	r3, r3, #1
   15438:	2001      	movmi	r0, #1
   1543a:	089b      	lsrpl	r3, r3, #2
   1543c:	2002      	movpl	r0, #2
   1543e:	bf4c      	ite	mi
   15440:	600b      	strmi	r3, [r1, #0]
   15442:	600b      	strpl	r3, [r1, #0]
   15444:	4770      	bx	lr
   15446:	b298      	uxth	r0, r3
   15448:	b9a8      	cbnz	r0, 15476 <__lo0bits+0x52>
   1544a:	0c1b      	lsrs	r3, r3, #16
   1544c:	2010      	movs	r0, #16
   1544e:	b2da      	uxtb	r2, r3
   15450:	b90a      	cbnz	r2, 15456 <__lo0bits+0x32>
   15452:	3008      	adds	r0, #8
   15454:	0a1b      	lsrs	r3, r3, #8
   15456:	071a      	lsls	r2, r3, #28
   15458:	bf04      	itt	eq
   1545a:	091b      	lsreq	r3, r3, #4
   1545c:	3004      	addeq	r0, #4
   1545e:	079a      	lsls	r2, r3, #30
   15460:	bf04      	itt	eq
   15462:	089b      	lsreq	r3, r3, #2
   15464:	3002      	addeq	r0, #2
   15466:	07da      	lsls	r2, r3, #31
   15468:	d403      	bmi.n	15472 <__lo0bits+0x4e>
   1546a:	085b      	lsrs	r3, r3, #1
   1546c:	f100 0001 	add.w	r0, r0, #1
   15470:	d005      	beq.n	1547e <__lo0bits+0x5a>
   15472:	600b      	str	r3, [r1, #0]
   15474:	4770      	bx	lr
   15476:	4610      	mov	r0, r2
   15478:	e7e9      	b.n	1544e <__lo0bits+0x2a>
   1547a:	2000      	movs	r0, #0
   1547c:	4770      	bx	lr
   1547e:	2020      	movs	r0, #32
   15480:	4770      	bx	lr

00015482 <__mcmp>:
   15482:	6902      	ldr	r2, [r0, #16]
   15484:	b530      	push	{r4, r5, lr}
   15486:	690c      	ldr	r4, [r1, #16]
   15488:	1b12      	subs	r2, r2, r4
   1548a:	d10e      	bne.n	154aa <__mcmp+0x28>
   1548c:	f100 0314 	add.w	r3, r0, #20
   15490:	3114      	adds	r1, #20
   15492:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   15496:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1549a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   1549e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   154a2:	42a5      	cmp	r5, r4
   154a4:	d003      	beq.n	154ae <__mcmp+0x2c>
   154a6:	d305      	bcc.n	154b4 <__mcmp+0x32>
   154a8:	2201      	movs	r2, #1
   154aa:	4610      	mov	r0, r2
   154ac:	bd30      	pop	{r4, r5, pc}
   154ae:	4283      	cmp	r3, r0
   154b0:	d3f3      	bcc.n	1549a <__mcmp+0x18>
   154b2:	e7fa      	b.n	154aa <__mcmp+0x28>
   154b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   154b8:	e7f7      	b.n	154aa <__mcmp+0x28>

000154ba <__ratio>:
   154ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154be:	4688      	mov	r8, r1
   154c0:	4681      	mov	r9, r0
   154c2:	4669      	mov	r1, sp
   154c4:	f7fc fb24 	bl	11b10 <__b2d>
   154c8:	a901      	add	r1, sp, #4
   154ca:	4640      	mov	r0, r8
   154cc:	ec55 4b10 	vmov	r4, r5, d0
   154d0:	f7fc fb1e 	bl	11b10 <__b2d>
   154d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   154d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
   154dc:	462f      	mov	r7, r5
   154de:	eba3 0c02 	sub.w	ip, r3, r2
   154e2:	e9dd 3200 	ldrd	r3, r2, [sp]
   154e6:	ec51 0b10 	vmov	r0, r1, d0
   154ea:	1a9b      	subs	r3, r3, r2
   154ec:	468b      	mov	fp, r1
   154ee:	4620      	mov	r0, r4
   154f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   154f4:	2b00      	cmp	r3, #0
   154f6:	bfd5      	itete	le
   154f8:	460a      	movle	r2, r1
   154fa:	462a      	movgt	r2, r5
   154fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   15500:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   15504:	bfd8      	it	le
   15506:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   1550a:	ee10 2a10 	vmov	r2, s0
   1550e:	4639      	mov	r1, r7
   15510:	465b      	mov	r3, fp
   15512:	f7eb f907 	bl	724 <__aeabi_ddiv>
   15516:	ec41 0b10 	vmov	d0, r0, r1
   1551a:	b003      	add	sp, #12
   1551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015520 <__copybits>:
   15520:	3901      	subs	r1, #1
   15522:	f102 0314 	add.w	r3, r2, #20
   15526:	1149      	asrs	r1, r1, #5
   15528:	b570      	push	{r4, r5, r6, lr}
   1552a:	3101      	adds	r1, #1
   1552c:	6914      	ldr	r4, [r2, #16]
   1552e:	1f05      	subs	r5, r0, #4
   15530:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   15534:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   15538:	42a3      	cmp	r3, r4
   1553a:	d30c      	bcc.n	15556 <__copybits+0x36>
   1553c:	1aa3      	subs	r3, r4, r2
   1553e:	3211      	adds	r2, #17
   15540:	3b11      	subs	r3, #17
   15542:	f023 0303 	bic.w	r3, r3, #3
   15546:	42a2      	cmp	r2, r4
   15548:	bf88      	it	hi
   1554a:	2300      	movhi	r3, #0
   1554c:	4418      	add	r0, r3
   1554e:	2300      	movs	r3, #0
   15550:	4288      	cmp	r0, r1
   15552:	d305      	bcc.n	15560 <__copybits+0x40>
   15554:	bd70      	pop	{r4, r5, r6, pc}
   15556:	f853 6b04 	ldr.w	r6, [r3], #4
   1555a:	f845 6f04 	str.w	r6, [r5, #4]!
   1555e:	e7eb      	b.n	15538 <__copybits+0x18>
   15560:	f840 3b04 	str.w	r3, [r0], #4
   15564:	e7f4      	b.n	15550 <__copybits+0x30>

00015566 <__any_on>:
   15566:	f100 0214 	add.w	r2, r0, #20
   1556a:	114b      	asrs	r3, r1, #5
   1556c:	6900      	ldr	r0, [r0, #16]
   1556e:	4298      	cmp	r0, r3
   15570:	b510      	push	{r4, lr}
   15572:	db11      	blt.n	15598 <__any_on+0x32>
   15574:	dd0a      	ble.n	1558c <__any_on+0x26>
   15576:	f011 011f 	ands.w	r1, r1, #31
   1557a:	d007      	beq.n	1558c <__any_on+0x26>
   1557c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   15580:	fa24 f001 	lsr.w	r0, r4, r1
   15584:	fa00 f101 	lsl.w	r1, r0, r1
   15588:	428c      	cmp	r4, r1
   1558a:	d10b      	bne.n	155a4 <__any_on+0x3e>
   1558c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15590:	4293      	cmp	r3, r2
   15592:	d803      	bhi.n	1559c <__any_on+0x36>
   15594:	2000      	movs	r0, #0
   15596:	bd10      	pop	{r4, pc}
   15598:	4603      	mov	r3, r0
   1559a:	e7f7      	b.n	1558c <__any_on+0x26>
   1559c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   155a0:	2900      	cmp	r1, #0
   155a2:	d0f5      	beq.n	15590 <__any_on+0x2a>
   155a4:	2001      	movs	r0, #1
   155a6:	e7f6      	b.n	15596 <__any_on+0x30>

000155a8 <_realloc_r>:
   155a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155aa:	4607      	mov	r7, r0
   155ac:	4614      	mov	r4, r2
   155ae:	460e      	mov	r6, r1
   155b0:	b921      	cbnz	r1, 155bc <_realloc_r+0x14>
   155b2:	4611      	mov	r1, r2
   155b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   155b8:	f7fa bd5c 	b.w	10074 <_malloc_r>
   155bc:	b922      	cbnz	r2, 155c8 <_realloc_r+0x20>
   155be:	4625      	mov	r5, r4
   155c0:	f7fa fd0c 	bl	ffdc <_free_r>
   155c4:	4628      	mov	r0, r5
   155c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155c8:	f000 f8d3 	bl	15772 <_malloc_usable_size_r>
   155cc:	42a0      	cmp	r0, r4
   155ce:	d20f      	bcs.n	155f0 <_realloc_r+0x48>
   155d0:	4621      	mov	r1, r4
   155d2:	4638      	mov	r0, r7
   155d4:	f7fa fd4e 	bl	10074 <_malloc_r>
   155d8:	4605      	mov	r5, r0
   155da:	2800      	cmp	r0, #0
   155dc:	d0f2      	beq.n	155c4 <_realloc_r+0x1c>
   155de:	4631      	mov	r1, r6
   155e0:	4622      	mov	r2, r4
   155e2:	f7ff fae8 	bl	14bb6 <memcpy>
   155e6:	4631      	mov	r1, r6
   155e8:	4638      	mov	r0, r7
   155ea:	f7fa fcf7 	bl	ffdc <_free_r>
   155ee:	e7e9      	b.n	155c4 <_realloc_r+0x1c>
   155f0:	4635      	mov	r5, r6
   155f2:	e7e7      	b.n	155c4 <_realloc_r+0x1c>

000155f4 <__ssputs_r>:
   155f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   155f8:	688e      	ldr	r6, [r1, #8]
   155fa:	4682      	mov	sl, r0
   155fc:	460c      	mov	r4, r1
   155fe:	4690      	mov	r8, r2
   15600:	429e      	cmp	r6, r3
   15602:	461f      	mov	r7, r3
   15604:	d838      	bhi.n	15678 <__ssputs_r+0x84>
   15606:	898a      	ldrh	r2, [r1, #12]
   15608:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1560c:	d032      	beq.n	15674 <__ssputs_r+0x80>
   1560e:	6825      	ldr	r5, [r4, #0]
   15610:	3301      	adds	r3, #1
   15612:	6909      	ldr	r1, [r1, #16]
   15614:	eba5 0901 	sub.w	r9, r5, r1
   15618:	6965      	ldr	r5, [r4, #20]
   1561a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1561e:	444b      	add	r3, r9
   15620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   15624:	106d      	asrs	r5, r5, #1
   15626:	429d      	cmp	r5, r3
   15628:	bf38      	it	cc
   1562a:	461d      	movcc	r5, r3
   1562c:	0553      	lsls	r3, r2, #21
   1562e:	d531      	bpl.n	15694 <__ssputs_r+0xa0>
   15630:	4629      	mov	r1, r5
   15632:	f7fa fd1f 	bl	10074 <_malloc_r>
   15636:	4606      	mov	r6, r0
   15638:	b950      	cbnz	r0, 15650 <__ssputs_r+0x5c>
   1563a:	230c      	movs	r3, #12
   1563c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15640:	f8ca 3000 	str.w	r3, [sl]
   15644:	89a3      	ldrh	r3, [r4, #12]
   15646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1564a:	81a3      	strh	r3, [r4, #12]
   1564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15650:	464a      	mov	r2, r9
   15652:	6921      	ldr	r1, [r4, #16]
   15654:	f7ff faaf 	bl	14bb6 <memcpy>
   15658:	89a3      	ldrh	r3, [r4, #12]
   1565a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1565e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15662:	81a3      	strh	r3, [r4, #12]
   15664:	6126      	str	r6, [r4, #16]
   15666:	444e      	add	r6, r9
   15668:	6165      	str	r5, [r4, #20]
   1566a:	eba5 0509 	sub.w	r5, r5, r9
   1566e:	6026      	str	r6, [r4, #0]
   15670:	463e      	mov	r6, r7
   15672:	60a5      	str	r5, [r4, #8]
   15674:	42be      	cmp	r6, r7
   15676:	d900      	bls.n	1567a <__ssputs_r+0x86>
   15678:	463e      	mov	r6, r7
   1567a:	4632      	mov	r2, r6
   1567c:	4641      	mov	r1, r8
   1567e:	6820      	ldr	r0, [r4, #0]
   15680:	f7ff faa6 	bl	14bd0 <memmove>
   15684:	68a3      	ldr	r3, [r4, #8]
   15686:	2000      	movs	r0, #0
   15688:	1b9b      	subs	r3, r3, r6
   1568a:	60a3      	str	r3, [r4, #8]
   1568c:	6823      	ldr	r3, [r4, #0]
   1568e:	4433      	add	r3, r6
   15690:	6023      	str	r3, [r4, #0]
   15692:	e7db      	b.n	1564c <__ssputs_r+0x58>
   15694:	462a      	mov	r2, r5
   15696:	f7ff ff87 	bl	155a8 <_realloc_r>
   1569a:	4606      	mov	r6, r0
   1569c:	2800      	cmp	r0, #0
   1569e:	d1e1      	bne.n	15664 <__ssputs_r+0x70>
   156a0:	6921      	ldr	r1, [r4, #16]
   156a2:	4650      	mov	r0, sl
   156a4:	f7fa fc9a 	bl	ffdc <_free_r>
   156a8:	e7c7      	b.n	1563a <__ssputs_r+0x46>

000156aa <__sread>:
   156aa:	b510      	push	{r4, lr}
   156ac:	460c      	mov	r4, r1
   156ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   156b2:	f7fc fc2f 	bl	11f14 <_read_r>
   156b6:	2800      	cmp	r0, #0
   156b8:	bfab      	itete	ge
   156ba:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   156bc:	89a3      	ldrhlt	r3, [r4, #12]
   156be:	181b      	addge	r3, r3, r0
   156c0:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   156c4:	bfac      	ite	ge
   156c6:	6563      	strge	r3, [r4, #84]	; 0x54
   156c8:	81a3      	strhlt	r3, [r4, #12]
   156ca:	bd10      	pop	{r4, pc}

000156cc <__swrite>:
   156cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156d0:	461f      	mov	r7, r3
   156d2:	898b      	ldrh	r3, [r1, #12]
   156d4:	4605      	mov	r5, r0
   156d6:	460c      	mov	r4, r1
   156d8:	05db      	lsls	r3, r3, #23
   156da:	4616      	mov	r6, r2
   156dc:	d505      	bpl.n	156ea <__swrite+0x1e>
   156de:	2302      	movs	r3, #2
   156e0:	2200      	movs	r2, #0
   156e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   156e6:	f7fc fc03 	bl	11ef0 <_lseek_r>
   156ea:	89a3      	ldrh	r3, [r4, #12]
   156ec:	4632      	mov	r2, r6
   156ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   156f2:	4628      	mov	r0, r5
   156f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   156f8:	81a3      	strh	r3, [r4, #12]
   156fa:	463b      	mov	r3, r7
   156fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15700:	f7fc bbb2 	b.w	11e68 <_write_r>

00015704 <__sseek>:
   15704:	b510      	push	{r4, lr}
   15706:	460c      	mov	r4, r1
   15708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1570c:	f7fc fbf0 	bl	11ef0 <_lseek_r>
   15710:	1c43      	adds	r3, r0, #1
   15712:	89a3      	ldrh	r3, [r4, #12]
   15714:	bf15      	itete	ne
   15716:	6560      	strne	r0, [r4, #84]	; 0x54
   15718:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1571c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   15720:	81a3      	strheq	r3, [r4, #12]
   15722:	bf18      	it	ne
   15724:	81a3      	strhne	r3, [r4, #12]
   15726:	bd10      	pop	{r4, pc}

00015728 <__sclose>:
   15728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1572c:	f7fc bbae 	b.w	11e8c <_close_r>

00015730 <strncmp>:
   15730:	b510      	push	{r4, lr}
   15732:	b17a      	cbz	r2, 15754 <strncmp+0x24>
   15734:	4603      	mov	r3, r0
   15736:	3901      	subs	r1, #1
   15738:	1884      	adds	r4, r0, r2
   1573a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1573e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   15742:	4290      	cmp	r0, r2
   15744:	d101      	bne.n	1574a <strncmp+0x1a>
   15746:	42a3      	cmp	r3, r4
   15748:	d101      	bne.n	1574e <strncmp+0x1e>
   1574a:	1a80      	subs	r0, r0, r2
   1574c:	bd10      	pop	{r4, pc}
   1574e:	2800      	cmp	r0, #0
   15750:	d1f3      	bne.n	1573a <strncmp+0xa>
   15752:	e7fa      	b.n	1574a <strncmp+0x1a>
   15754:	4610      	mov	r0, r2
   15756:	e7f9      	b.n	1574c <strncmp+0x1c>

00015758 <__ascii_wctomb>:
   15758:	b149      	cbz	r1, 1576e <__ascii_wctomb+0x16>
   1575a:	2aff      	cmp	r2, #255	; 0xff
   1575c:	bf8d      	iteet	hi
   1575e:	238a      	movhi	r3, #138	; 0x8a
   15760:	2001      	movls	r0, #1
   15762:	700a      	strbls	r2, [r1, #0]
   15764:	6003      	strhi	r3, [r0, #0]
   15766:	bf88      	it	hi
   15768:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   1576c:	4770      	bx	lr
   1576e:	4608      	mov	r0, r1
   15770:	4770      	bx	lr

00015772 <_malloc_usable_size_r>:
   15772:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15776:	1f18      	subs	r0, r3, #4
   15778:	2b00      	cmp	r3, #0
   1577a:	bfbc      	itt	lt
   1577c:	580b      	ldrlt	r3, [r1, r0]
   1577e:	18c0      	addlt	r0, r0, r3
   15780:	4770      	bx	lr
	...

00015784 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   15784:	f7f4 befc 	b.w	a580 <SystemInit>
